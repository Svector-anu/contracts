{"id":"ad4e1f20b6468568d873cd5ca3fdd61b","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"contracts/interface/IPaycrest.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n/**\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\n * Factory and global config params\n */\ninterface IPaycrest {\n    \n    /* ##################################################################\n                                EVENTS\n    ################################################################## */\n    /// @dev Emitted when deposit is made.\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\n    /// @dev Emitted when aggregator settle transaction.\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\n    /// @dev Emitted when aggregator refund transaction.\n    event Refunded(bytes32 indexed orderId, bytes32 label);\n    /// @dev Emitted when sender get therir rewards.\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\n    /// @dev Emitted when primary validator get therir rewards.\n    event RewardValidator(address indexed validator, uint256 indexed amount);\n\n    /* ##################################################################\n                                STRUCTS\n    ################################################################## */\n    struct TransactionMetadata {\n        bytes8 identifier;                 //                                                                   slot 0\n        bytes8 institution;                //                                                                   slot 0\n        bytes8 name;                       //                                                                   slot 0\n        bytes8 currency;                   //                                                                   slot 0\n        uint256 liquidityProviderID;       //                                                                   slot 1\n    }\n\n    struct Order {\n        address seller;                     //                                                                   slot 0\n        address token;                      //                                                                   slot 1\n        address senderFeeRecipient;\n        uint256 senderFee;\n        uint96 rate;                        //                                                                   slot 1\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\n        uint96 currentBPS;                  //                                                                   slot 2 {}\n        uint256 amount;                     //                                                                   slot 3\n    }\n\n\n    /* ##################################################################\n                                EXTERNAL CALLS\n    ################################################################## */\n    /// @notice lock sender `_amount` of `token` into Paycrest.\n    /// Requirements:\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _token address of the token.\n    /// @param _amount amount in the decimal of `_token` above.\n    /// @param _institutionCode institution code of the sender.\n    /// @param _label reference of the sender.\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n    /// @return _orderId the bytes20 which is the orderId\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        bytes32 _label,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash)  external returns(bytes32 _orderId);\n\n    /// @notice settle transaction and distribute rewards accordingly.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _orderId transaction Id.\n    /// @param _label reference of the sender.\n    /// @param _validators arrays of secondary validators.\n    /// @param _liquidityProvider address of the liquidity provider.\n    /// @param _settlePercent rate at which the transaction is settled.\n    /// @param _isPartner is the liquidity provider a partner.\n    /// @return return the status of transaction {bool}\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address[] calldata _validators, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\n\n    /// @notice refund to the specified refundable address.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `isFulfilled` must be false.\n    /// @param _orderId transaction Id.\n    /// @param _label reference of the sender.\n    /// @return return the status of transaction {bool}\n    function refund(bytes32 _orderId, bytes32 _label)  external returns(bool);\n\n    /// @notice get supported token from Paycrest.\n    /// @param _token address of the token to check.\n    /// @return return the status of `_token` {bool}\n    function isTokenSupported(address _token) external view returns(bool);\n\n    /// @notice get order details.\n    /// @param _orderId transaction Id.\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\n\n    /// @notice get every rewards and address on Paycrest.\n    /// @return protocolReward amount that will be taken in percentage on all trade.\n    /// @return max_bps maximum amount in bps \"100% == 100_000\".\n    function getFeeDetails() external view returns(\n        uint64 protocolReward, \n        uint256 max_bps\n    );\n\n    /// @notice get address of liquidity aggregator.\n    /// @return address of `Aggregator`.\n    function getAggregatorAddress() external view returns(address);\n\n    /// @notice get aggregator public key.\n    /// @return aggregator public key.\n    function getAggregator() external view returns(bytes memory);\n    \n    /// @notice get address of sender whitelisting status.\n    /// @param sender address of the sender.\n    /// @return address of `status`.\n    function getWhitelistedStatus(address sender) external view returns(bool);\n\n}\n"},"contracts/Paycrest.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {PaycrestSettingManager} from \"./PaycrestSettingManager.sol\";\nimport {IPaycrest, IERC20} from \"./interface/IPaycrest.sol\";\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \n    using SafeERC20Upgradeable for IERC20;\n    using ECDSAUpgradeable for bytes32;\n    struct fee {\n        uint256 protocolFee;\n        uint256 liquidityProviderAmount;\n    }\n    mapping(bytes32 => Order) private order;\n    mapping(address => uint256) private _nonce;\n    uint256[50] private __gap;\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _usdc) external initializer {    \n        _isTokenSupported[_usdc] = true;   \n        MAX_BPS = 100_000; \n        protocolFeePercent = 5000; // 5%\n        __Ownable_init();\n    }\n\n    modifier onlyAggregator {\n        require(msg.sender == _aggregatorAddress, \"OnlyAggregator\");\n        _;\n    }\n    \n    /* ##################################################################\n                                USER CALLS\n    ################################################################## */\n    /** @dev See {createOrder-IPaycrest}. */\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        bytes32 _label,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash\n    )  external returns(bytes32 orderId) {\n        // checks that are required\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\n        // require that sender fee is less than protocol fee\n        require(_senderFee <= (_amount * protocolFeePercent) / MAX_BPS, \"SenderFeeTooHigh\");\n        // first transfer token from msg.sender\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n        // increase users nonce to avoid replay attacks\n        _nonce[msg.sender] ++;\n        // @chibie @5ran6\n        // @todo sender fee should have limit, let say the maximum amount of sender fee should be 1% of the amount\n        // generate transaction id for the transaction\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\n        // update transaction\n        order[orderId] = Order({\n            seller: msg.sender,\n            token: _token,\n            senderFeeRecipient: _senderFeeRecipient,\n            senderFee: _senderFee,\n            rate: _rate,\n            isFulfilled: false,\n            refundAddress: _refundAddress,\n            currentBPS: uint64(MAX_BPS),\n            amount: _amount\n        });\n        // emit deposit event\n        emit Deposit(_token, _amount, orderId, _rate, _institutionCode, _label, messageHash);\n    }\n\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\n        // use require for all the custom errors\n        require(_isTokenSupported[_token], \"TokenNotSupported\");\n        require(_amount > 0, \"AmountIsZero\");\n        require(_refundAddress != address(0), \"ThrowZeroAddress\");\n        require(_senderFeeRecipient != address(0), \"ThrowZeroAddress\");\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \"InvalidInstitutionCode\");\n    }\n\n    /* ##################################################################\n                                AGGREGATOR FUNCTIONS\n    ################################################################## */\n    /** @dev See {settle-IPaycrest}. */\n    function settle(\n        bytes32 _splitOrderId,\n        bytes32 _orderId, \n        bytes32 _label,\n        address[] calldata _validators, \n        address _liquidityProvider, \n        uint64 _settlePercent,\n        bool _isPartner\n        )  external onlyAggregator() returns(bytes32, address) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n        // load the token into memory\n        address token = order[_orderId].token;\n        // substract sum of amount based on the input _settlePercent\n        order[_orderId].currentBPS -= _settlePercent;\n        // if transaction amount is zero\n        // load the fees and transfer associated protocol fees to protocol fee recipient\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent, _isPartner);\n        if(order[_orderId].currentBPS == 0) {\n            // update the transaction to be fulfilled\n            order[_orderId].isFulfilled = true;\n            if (order[_orderId].senderFee > 0) {\n                // transfer sender fee\n                transferSenderFee(_orderId);\n            }\n        }\n        \n        if (_feeParams.protocolFee > 0) {\n            // transfer protocol fee\n            IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\n        }\n        // // transfer to liquidity provider \n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\n\n        // emit event\n        emit Settled(_splitOrderId, _orderId, _label,  _liquidityProvider, _settlePercent);\n        return (_orderId, token);\n    }\n\n    function transferSenderFee(bytes32 _orderId) internal {\n        address recipient = order[_orderId].senderFeeRecipient;\n        uint256 _fee = order[_orderId].senderFee;\n        // transfer sender fee\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\n        // emmit event\n        emit TransferSenderFee(recipient, _fee);\n    }\n\n    /** @dev See {refund-IPaycrest}. */\n    function refund(bytes32 _orderId, bytes32 _label)  external onlyAggregator() returns(bool) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n        // reser state values\n        order[_orderId].isFulfilled = true;\n        order[_orderId].currentBPS = 0;\n        // transfer to seller \n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\n        // emit\n        emit Refunded(_orderId, _label);\n        return true;\n    }\n\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent, bool _isPartner) private view returns(fee memory _feeParams ) {\n        // get the total amount associated with the orderId\n        uint256 amount = order[_orderId].amount;\n        // get sender fee from amount\n        amount = amount - order[_orderId].senderFee;\n        // get the settled percent that is scheduled for this amount\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\n        // deduct protocol fees from the new total amount\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \n        // substract total fees from the new amount after getting the scheduled amount\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\n        // if (_isPartner) protocol fee should be 0, and the whole protocol fee should be added to liquidity provider\n        if (_isPartner) {\n            _feeParams.liquidityProviderAmount += _feeParams.protocolFee;\n            _feeParams.protocolFee = 0;\n        }\n    }\n    \n    /* ##################################################################\n                                VIEW CALLS\n    ################################################################## */\n    /** @dev See {getOrderInfo-IPaycrest}. */\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\n        return order[_orderId];\n    }\n\n    /** @dev See {isTokenSupported-IPaycrest}. */\n    function isTokenSupported(address _token) external view returns(bool) {\n        return _isTokenSupported[_token];\n    }\n\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\n        return supportedInstitutionsByCode[code];\n    }\n\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\n        Institution[] memory institutions = supportedInstitutions[currency];\n        uint256 length = institutions.length;\n        Institution[] memory result = new Institution[](length);\n        \n        for (uint256 i = 0; i < length; ) {\n            result[i] = institutions[i];\n            unchecked {\n                i++;\n            }\n        }\n        \n        return result;\n    }\n\n    /** @dev See {getFeeDetails-IPaycrest}. */\n    function getFeeDetails() external view returns(\n        uint64, \n        uint256\n    ) {\n        return(protocolFeePercent, MAX_BPS);\n    }\n\n    /** @dev See {getAggregatorAddress-IPaycrest}. */\n    function getAggregatorAddress() external view returns(address) {\n        return _aggregatorAddress;\n    }\n\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\n    function getWhitelistedStatus(address sender) external view returns(bool) {\n        return _isWhitelisted[sender];\n    }\n\n    /** @dev See {getAggregator-IPaycrest}. */\n    function getAggregator() external view returns(bytes memory) {\n        return _aggregator;\n    }\n\n\n    // DECLARE A FUNCTION TO WITHDRAW ANY TOKEN FROM CONTRACT CAN ONLY NE CALLED BY OWNER\n    function withdraw(address _token, address _recipient, uint256 _amount) external onlyOwner {\n        IERC20(_token).transfer(_recipient, _amount);\n    }\n\n}\n"},"contracts/PaycrestSettingManager.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract PaycrestSettingManager is OwnableUpgradeable { \n    struct Institution {\n        bytes32 code; // usually not more than 8 letters\n        bytes32 name; // \n    }\n    struct InstitutionByCode {\n        bytes32 name;\n        bytes32 currency;\n    }\n    uint256 internal MAX_BPS;\n    uint64 internal protocolFeePercent; // 5%\n    address internal feeRecipient;\n    address internal _aggregatorAddress;\n    bytes internal _aggregator;\n    \n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\n    uint256[50] private __gap;\n\n    mapping(address => bool) internal _isTokenSupported;\n    mapping(address => bool) internal _isWhitelisted;\n\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\n\n    event SettingManagerBool(bytes32 what, address value, bool status);\n    event PaycrestFees(uint64 protocolFee);\n    event SetAggregator(bytes aggregator);\n    event SetFeeRecipient(address feeRecipient);\n    \n    /* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\n        require(value != address(0), \"Paycrest: zero address\");\n        if (what == \"token\") _isTokenSupported[value] = status;\n        if (what == \"whitelist\") _isWhitelisted[value] = status;\n\n        emit SettingManagerBool(what, value, status);\n    }\n\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \n        uint256 length = institutions.length;\n        for (uint i = 0; i < length; ) {\n            supportedInstitutions[currency].push(institutions[i]);\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\n                name: institutions[i].name, currency: currency\n            });\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\n        protocolFeePercent = _protocolFeePercent;\n        emit PaycrestFees(_protocolFeePercent);\n    }\n\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\n        require(value != address(0), \"Paycrest: zero address\");\n        if (what == \"fee\") feeRecipient = value;\n        if (what == \"aggregator\") _aggregatorAddress = value;\n    }\n\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\n        _aggregator = aggregator;\n        emit SetAggregator(aggregator);\n    }\n\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Paycrest.sol:94:9:\n   |\n94 |         address[] calldata _validators, \n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":3967,"file":"contracts/Paycrest.sol","start":3937},"type":"Warning"}],"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1120],"ContextUpgradeable":[1162],"Initializable":[300],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":1163,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":301,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["748:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nameLocations":["763:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1162,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,1162,300],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["1038:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1149:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2118:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2128:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2128:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nameLocations":["2108:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2108:9:0"},"nodeType":"ModifierInvocation","src":"2108:9:0"}],"name":"renounceOwnership","nameLocation":"2073:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2090:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2118:0:0"},"scope":131,"src":"2064:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2384:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2402:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2394:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2496:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2477:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2477:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2171:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2374:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2374:9:0"},"nodeType":"ModifierInvocation","src":"2374:9:0"}],"name":"transferOwnership","nameLocation":"2323:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2341:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2384:0:0"},"scope":131,"src":"2314:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2729:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2739:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2758:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2774:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2783:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2774:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2827:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2837:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2806:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2801:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2518:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2694:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2729:0:0"},"scope":131,"src":"2666:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2859:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3118:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2438:0","usedErrors":[]}],"src":"102:3045:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1120],"Initializable":[300]},"id":301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":1121,"src":"138:44:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"184:2209:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":300,"linearizedBaseContracts":[300],"name":"Initializable","nameLocation":"2412:13:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"2432:109:1","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":138,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:1","nodeType":"VariableDeclaration","scope":300,"src":"2546:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":137,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"2579:91:1","text":" @dev Indicates that the contract is in the process of being initialized."},"id":141,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:1","nodeType":"VariableDeclaration","scope":300,"src":"2675:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":140,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":142,"nodeType":"StructuredDocumentation","src":"2708:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":146,"name":"Initialized","nameLocation":"2809:11:1","nodeType":"EventDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":146,"src":"2821:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":143,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:1"},"src":"2803:33:1"},{"body":{"id":201,"nodeType":"Block","src":"3269:483:1","statements":[{"assignments":[150],"declarations":[{"constant":false,"id":150,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:1","nodeType":"VariableDeclaration","scope":201,"src":"3279:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":153,"initialValue":{"id":152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:1","subExpression":{"id":151,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3302:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":155,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3347:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":156,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3365:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:1","subExpression":{"arguments":[{"arguments":[{"id":165,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}],"id":164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:1","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":161,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"3388:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1120_$","typeString":"type(library AddressUpgradeable)"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":808,"src":"3388:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":169,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3436:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":173,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":177,"nodeType":"ExpressionStatement","src":"3325:201:1"},{"expression":{"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":178,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3536:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":181,"nodeType":"ExpressionStatement","src":"3536:16:1"},{"condition":{"id":182,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3566:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":188,"nodeType":"IfStatement","src":"3562:65:1","trueBody":{"id":187,"nodeType":"Block","src":"3582:45:1","statements":[{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":183,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3596:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"ExpressionStatement","src":"3596:20:1"}]}},{"id":189,"nodeType":"PlaceholderStatement","src":"3636:1:1"},{"condition":{"id":190,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3651:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":200,"nodeType":"IfStatement","src":"3647:99:1","trueBody":{"id":199,"nodeType":"Block","src":"3667:79:1","statements":[{"expression":{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":191,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3681:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":194,"nodeType":"ExpressionStatement","src":"3681:21:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":195,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"3721:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"EmitStatement","src":"3716:19:1"}]}}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"2842:399:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":202,"name":"initializer","nameLocation":"3255:11:1","nodeType":"ModifierDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[],"src":"3266:2:1"},"src":"3246:506:1","virtual":false,"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"4863:255:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:1","subExpression":{"id":208,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"4882:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":210,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4899:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":211,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4914:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":216,"nodeType":"ExpressionStatement","src":"4873:99:1"},{"expression":{"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":217,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4982:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":218,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4997:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":220,"nodeType":"ExpressionStatement","src":"4982:22:1"},{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":221,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5014:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":224,"nodeType":"ExpressionStatement","src":"5014:20:1"},{"id":225,"nodeType":"PlaceholderStatement","src":"5044:1:1"},{"expression":{"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":226,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5055:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":229,"nodeType":"ExpressionStatement","src":"5055:21:1"},{"eventCall":{"arguments":[{"id":231,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"5103:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":230,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5091:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":233,"nodeType":"EmitStatement","src":"5086:25:1"}]},"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"3758:1062:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":235,"name":"reinitializer","nameLocation":"4834:13:1","nodeType":"ModifierDefinition","parameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"version","nameLocation":"4854:7:1","nodeType":"VariableDeclaration","scope":235,"src":"4848:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":204,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:1"},"src":"4825:293:1","virtual":false,"visibility":"internal"},{"body":{"id":244,"nodeType":"Block","src":"5356:97:1","statements":[{"expression":{"arguments":[{"id":239,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5374:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":238,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"5366:69:1"},{"id":243,"nodeType":"PlaceholderStatement","src":"5445:1:1"}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"5124:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":245,"name":"onlyInitializing","nameLocation":"5337:16:1","nodeType":"ModifierDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"5353:2:1"},"src":"5328:125:1","virtual":false,"visibility":"internal"},{"body":{"id":280,"nodeType":"Block","src":"5988:231:1","statements":[{"expression":{"arguments":[{"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:1","subExpression":{"id":250,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6007:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"5998:66:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":255,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6078:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":257,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":256,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:1","memberName":"max","nodeType":"MemberAccess","src":"6094:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":279,"nodeType":"IfStatement","src":"6074:139:1","trueBody":{"id":278,"nodeType":"Block","src":"6111:102:1","statements":[{"expression":{"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":262,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6125:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":264,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":263,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:1","memberName":"max","nodeType":"MemberAccess","src":"6140:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":269,"nodeType":"ExpressionStatement","src":"6125:30:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":272,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":271,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:1","memberName":"max","nodeType":"MemberAccess","src":"6186:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":270,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"6174:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":277,"nodeType":"EmitStatement","src":"6169:33:1"}]}}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"5459:475:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":281,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:1","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"5968:2:1"},"returnParameters":{"id":248,"nodeType":"ParameterList","parameters":[],"src":"5988:0:1"},"scope":300,"src":"5939:280:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":289,"nodeType":"Block","src":"6393:36:1","statements":[{"expression":{"id":287,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6410:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":286,"id":288,"nodeType":"Return","src":"6403:19:1"}]},"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"6225:99:1","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":290,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:1","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"6360:2:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":290,"src":"6386:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":284,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:1"},"scope":300,"src":"6329:100:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":298,"nodeType":"Block","src":"6601:37:1","statements":[{"expression":{"id":296,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6618:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":295,"id":297,"nodeType":"Return","src":"6611:20:1"}]},"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"6435:105:1","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":299,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:1","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[],"src":"6569:2:1"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"6595:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":293,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:1"},"scope":300,"src":"6545:93:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":301,"src":"2394:4246:1","usedErrors":[]}],"src":"113:6528:1"},"id":1},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[378]},"id":379,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":302,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"131:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":378,"linearizedBaseContracts":[378],"name":"IERC20Upgradeable","nameLocation":"212:17:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"236:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":312,"name":"Transfer","nameLocation":"405:8:2","nodeType":"EventDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:2","nodeType":"VariableDeclaration","scope":312,"src":"414:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":305,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":308,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:2","nodeType":"VariableDeclaration","scope":312,"src":"436:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":307,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":310,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:2","nodeType":"VariableDeclaration","scope":312,"src":"456:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":309,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:2"},"src":"399:72:2"},{"anonymous":false,"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"477:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":321,"name":"Approval","nameLocation":"636:8:2","nodeType":"EventDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:2","nodeType":"VariableDeclaration","scope":321,"src":"645:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:2","nodeType":"VariableDeclaration","scope":321,"src":"668:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":319,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:2","nodeType":"VariableDeclaration","scope":321,"src":"693:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":318,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:2"},"src":"630:78:2"},{"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"714:66:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":327,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:2","nodeType":"FunctionDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[],"src":"805:2:2"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":327,"src":"831:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":324,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:2"},"scope":378,"src":"785:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"846:72:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":335,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:2","nodeType":"FunctionDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"account","nameLocation":"950:7:2","nodeType":"VariableDeclaration","scope":335,"src":"942:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:2"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":335,"src":"982:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":332,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:2"},"scope":378,"src":"923:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"997:202:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:2","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":338,"mutability":"mutable","name":"to","nameLocation":"1230:2:2","nodeType":"VariableDeclaration","scope":345,"src":"1222:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"amount","nameLocation":"1242:6:2","nodeType":"VariableDeclaration","scope":345,"src":"1234:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":339,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:2"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":345,"src":"1268:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":342,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:2"},"scope":378,"src":"1204:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1280:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":355,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:2","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"owner","nameLocation":"1576:5:2","nodeType":"VariableDeclaration","scope":355,"src":"1568:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"spender","nameLocation":"1591:7:2","nodeType":"VariableDeclaration","scope":355,"src":"1583:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:2"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"1623:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":352,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:2"},"scope":378,"src":"1549:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"1638:642:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":365,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:2","nodeType":"FunctionDefinition","parameters":{"id":361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"spender","nameLocation":"2310:7:2","nodeType":"VariableDeclaration","scope":365,"src":"2302:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":357,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":360,"mutability":"mutable","name":"amount","nameLocation":"2327:6:2","nodeType":"VariableDeclaration","scope":365,"src":"2319:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":359,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:2"},"returnParameters":{"id":364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":365,"src":"2353:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":362,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:2"},"scope":378,"src":"2285:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":366,"nodeType":"StructuredDocumentation","src":"2365:287:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":377,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:2","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"from","nameLocation":"2687:4:2","nodeType":"VariableDeclaration","scope":377,"src":"2679:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"to","nameLocation":"2701:2:2","nodeType":"VariableDeclaration","scope":377,"src":"2693:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"amount","nameLocation":"2713:6:2","nodeType":"VariableDeclaration","scope":377,"src":"2705:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:2"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":377,"src":"2739:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":374,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:2"},"scope":378,"src":"2657:88:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":379,"src":"202:2545:2","usedErrors":[]}],"src":"106:2642:2"},"id":2},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[414]},"id":415,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":380,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"148:480:3","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":414,"linearizedBaseContracts":[414],"name":"IERC20PermitUpgradeable","nameLocation":"639:23:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"669:792:3","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":399,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1475:6:3","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"owner","nameLocation":"1499:5:3","nodeType":"VariableDeclaration","scope":399,"src":"1491:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":383,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":386,"mutability":"mutable","name":"spender","nameLocation":"1522:7:3","nodeType":"VariableDeclaration","scope":399,"src":"1514:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":385,"name":"address","nodeType":"ElementaryTypeName","src":"1514:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":388,"mutability":"mutable","name":"value","nameLocation":"1547:5:3","nodeType":"VariableDeclaration","scope":399,"src":"1539:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"deadline","nameLocation":"1570:8:3","nodeType":"VariableDeclaration","scope":399,"src":"1562:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":389,"name":"uint256","nodeType":"ElementaryTypeName","src":"1562:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":392,"mutability":"mutable","name":"v","nameLocation":"1594:1:3","nodeType":"VariableDeclaration","scope":399,"src":"1588:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":391,"name":"uint8","nodeType":"ElementaryTypeName","src":"1588:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"r","nameLocation":"1613:1:3","nodeType":"VariableDeclaration","scope":399,"src":"1605:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":393,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1605:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"s","nameLocation":"1632:1:3","nodeType":"VariableDeclaration","scope":399,"src":"1624:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1624:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1481:158:3"},"returnParameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"1648:0:3"},"scope":414,"src":"1466:183:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"1655:294:3","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":407,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1963:6:3","nodeType":"FunctionDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"owner","nameLocation":"1978:5:3","nodeType":"VariableDeclaration","scope":407,"src":"1970:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"1970:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1969:15:3"},"returnParameters":{"id":406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":407,"src":"2008:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":404,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:9:3"},"scope":414,"src":"1954:63:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":408,"nodeType":"StructuredDocumentation","src":"2023:128:3","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":413,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2218:16:3","nodeType":"FunctionDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[],"src":"2234:2:3"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"2260:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":410,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2260:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2259:9:3"},"scope":414,"src":"2209:60:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":415,"src":"629:1642:3","usedErrors":[]}],"src":"123:2149:3"},"id":3},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1120],"IERC20PermitUpgradeable":[414],"IERC20Upgradeable":[378],"SafeERC20Upgradeable":[790]},"id":791,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":416,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":417,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":791,"sourceUnit":379,"src":"140:34:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"../extensions/IERC20PermitUpgradeable.sol","id":418,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":791,"sourceUnit":415,"src":"175:51:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":419,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":791,"sourceUnit":1121,"src":"227:47:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"276:457:4","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":790,"linearizedBaseContracts":[790],"name":"SafeERC20Upgradeable","nameLocation":"742:20:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":423,"libraryName":{"id":421,"name":"AddressUpgradeable","nameLocations":["775:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":1120,"src":"775:18:4"},"nodeType":"UsingForDirective","src":"769:37:4","typeName":{"id":422,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":446,"nodeType":"Block","src":"1079:103:4","statements":[{"expression":{"arguments":[{"id":435,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"1109:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":438,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"1139:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1145:8:4","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":345,"src":"1139:14:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:8:4","memberName":"selector","nodeType":"MemberAccess","src":"1139:23:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":441,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"1164:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"1168:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":436,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1116:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":437,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1116:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:58:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":434,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1089:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:86:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":445,"nodeType":"ExpressionStatement","src":"1089:86:4"}]},"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"812:179:4","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":447,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1005:12:4","nodeType":"FunctionDefinition","parameters":{"id":432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"token","nameLocation":"1036:5:4","nodeType":"VariableDeclaration","scope":447,"src":"1018:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":426,"nodeType":"UserDefinedTypeName","pathNode":{"id":425,"name":"IERC20Upgradeable","nameLocations":["1018:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1018:17:4"},"referencedDeclaration":378,"src":"1018:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"to","nameLocation":"1051:2:4","nodeType":"VariableDeclaration","scope":447,"src":"1043:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":428,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":431,"mutability":"mutable","name":"value","nameLocation":"1063:5:4","nodeType":"VariableDeclaration","scope":447,"src":"1055:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":430,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:52:4"},"returnParameters":{"id":433,"nodeType":"ParameterList","parameters":[],"src":"1079:0:4"},"scope":790,"src":"996:186:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":473,"nodeType":"Block","src":"1522:113:4","statements":[{"expression":{"arguments":[{"id":461,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"1552:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":464,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"1582:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1588:12:4","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":377,"src":"1582:18:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1601:8:4","memberName":"selector","nodeType":"MemberAccess","src":"1582:27:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":467,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"1611:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":468,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1617:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"1621:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":462,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1559:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1559:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":460,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1532:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:96:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":472,"nodeType":"ExpressionStatement","src":"1532:96:4"}]},"documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"1188:228:4","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":474,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1430:16:4","nodeType":"FunctionDefinition","parameters":{"id":458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"token","nameLocation":"1465:5:4","nodeType":"VariableDeclaration","scope":474,"src":"1447:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":450,"nodeType":"UserDefinedTypeName","pathNode":{"id":449,"name":"IERC20Upgradeable","nameLocations":["1447:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1447:17:4"},"referencedDeclaration":378,"src":"1447:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"from","nameLocation":"1480:4:4","nodeType":"VariableDeclaration","scope":474,"src":"1472:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"to","nameLocation":"1494:2:4","nodeType":"VariableDeclaration","scope":474,"src":"1486:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":454,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":457,"mutability":"mutable","name":"value","nameLocation":"1506:5:4","nodeType":"VariableDeclaration","scope":474,"src":"1498:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":456,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1446:66:4"},"returnParameters":{"id":459,"nodeType":"ParameterList","parameters":[],"src":"1522:0:4"},"scope":790,"src":"1421:214:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":517,"nodeType":"Block","src":"1982:497:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"2231:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2231:10:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":489,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2230:12:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":494,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2271:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}],"id":493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2263:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:4","typeDescriptions":{}}},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":496,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2278:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":490,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"2247:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":355,"src":"2247:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2247:44:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":500,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2246:46:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2230:62:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:56:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":485,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:163:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":504,"nodeType":"ExpressionStatement","src":"2209:163:4"},{"expression":{"arguments":[{"id":506,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"2402:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":509,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"2432:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"2432:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2432:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":512,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"2456:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":482,"src":"2465:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":507,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2409:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2409:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2409:62:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":505,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"2382:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:90:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":516,"nodeType":"ExpressionStatement","src":"2382:90:4"}]},"documentation":{"id":475,"nodeType":"StructuredDocumentation","src":"1641:249:4","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":518,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1904:11:4","nodeType":"FunctionDefinition","parameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"mutability":"mutable","name":"token","nameLocation":"1934:5:4","nodeType":"VariableDeclaration","scope":518,"src":"1916:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":477,"nodeType":"UserDefinedTypeName","pathNode":{"id":476,"name":"IERC20Upgradeable","nameLocations":["1916:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"1916:17:4"},"referencedDeclaration":378,"src":"1916:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"spender","nameLocation":"1949:7:4","nodeType":"VariableDeclaration","scope":518,"src":"1941:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":479,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"value","nameLocation":"1966:5:4","nodeType":"VariableDeclaration","scope":518,"src":"1958:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint256","nodeType":"ElementaryTypeName","src":"1958:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1915:57:4"},"returnParameters":{"id":484,"nodeType":"ParameterList","parameters":[],"src":"1982:0:4"},"scope":790,"src":"1895:584:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":554,"nodeType":"Block","src":"2767:194:4","statements":[{"assignments":[530],"declarations":[{"constant":false,"id":530,"mutability":"mutable","name":"oldAllowance","nameLocation":"2785:12:4","nodeType":"VariableDeclaration","scope":554,"src":"2777:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":529,"name":"uint256","nodeType":"ElementaryTypeName","src":"2777:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":539,"initialValue":{"arguments":[{"arguments":[{"id":535,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2824:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}],"id":534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":533,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:4","typeDescriptions":{}}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":537,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"2831:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":531,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2800:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":355,"src":"2800:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2777:62:4"},{"expression":{"arguments":[{"id":541,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2869:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":544,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"2899:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"2899:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:4","memberName":"selector","nodeType":"MemberAccess","src":"2899:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":547,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"2923:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":548,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"2932:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"2947:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":542,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2876:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2880:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2876:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2876:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":540,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"2849:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:105:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":553,"nodeType":"ExpressionStatement","src":"2849:105:4"}]},"documentation":{"id":519,"nodeType":"StructuredDocumentation","src":"2485:180:4","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":555,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2679:21:4","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":522,"mutability":"mutable","name":"token","nameLocation":"2719:5:4","nodeType":"VariableDeclaration","scope":555,"src":"2701:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":521,"nodeType":"UserDefinedTypeName","pathNode":{"id":520,"name":"IERC20Upgradeable","nameLocations":["2701:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"2701:17:4"},"referencedDeclaration":378,"src":"2701:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":524,"mutability":"mutable","name":"spender","nameLocation":"2734:7:4","nodeType":"VariableDeclaration","scope":555,"src":"2726:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"value","nameLocation":"2751:5:4","nodeType":"VariableDeclaration","scope":555,"src":"2743:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:57:4"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"2767:0:4"},"scope":790,"src":"2670:291:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":599,"nodeType":"Block","src":"3249:321:4","statements":[{"id":598,"nodeType":"UncheckedBlock","src":"3259:305:4","statements":[{"assignments":[567],"declarations":[{"constant":false,"id":567,"mutability":"mutable","name":"oldAllowance","nameLocation":"3291:12:4","nodeType":"VariableDeclaration","scope":598,"src":"3283:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":576,"initialValue":{"arguments":[{"arguments":[{"id":572,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3330:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$790","typeString":"library SafeERC20Upgradeable"}],"id":571,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3322:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":570,"name":"address","nodeType":"ElementaryTypeName","src":"3322:7:4","typeDescriptions":{}}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3322:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":574,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"3337:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":568,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"3306:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:9:4","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":355,"src":"3306:15:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:39:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3283:62:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":578,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"3367:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":579,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"3383:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3367:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:43:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":577,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3359:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":583,"nodeType":"ExpressionStatement","src":"3359:75:4"},{"expression":{"arguments":[{"id":585,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"3468:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":588,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"3498:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3504:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"3498:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3512:8:4","memberName":"selector","nodeType":"MemberAccess","src":"3498:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":591,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"3522:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":592,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"3531:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":593,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"3546:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3531:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":586,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3475:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3479:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3475:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:77:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":584,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"3448:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:105:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":597,"nodeType":"ExpressionStatement","src":"3448:105:4"}]}]},"documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"2967:180:4","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":600,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3161:21:4","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"token","nameLocation":"3201:5:4","nodeType":"VariableDeclaration","scope":600,"src":"3183:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":558,"nodeType":"UserDefinedTypeName","pathNode":{"id":557,"name":"IERC20Upgradeable","nameLocations":["3183:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"3183:17:4"},"referencedDeclaration":378,"src":"3183:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":561,"mutability":"mutable","name":"spender","nameLocation":"3216:7:4","nodeType":"VariableDeclaration","scope":600,"src":"3208:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"3208:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"value","nameLocation":"3233:5:4","nodeType":"VariableDeclaration","scope":600,"src":"3225:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":562,"name":"uint256","nodeType":"ElementaryTypeName","src":"3225:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:57:4"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[],"src":"3249:0:4"},"scope":790,"src":"3152:418:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":646,"nodeType":"Block","src":"3977:333:4","statements":[{"assignments":[612],"declarations":[{"constant":false,"id":612,"mutability":"mutable","name":"approvalCall","nameLocation":"4000:12:4","nodeType":"VariableDeclaration","scope":646,"src":"3987:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":611,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":621,"initialValue":{"arguments":[{"expression":{"expression":{"id":615,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4038:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4044:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"4038:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4052:8:4","memberName":"selector","nodeType":"MemberAccess","src":"4038:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":618,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"4062:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"4071:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":613,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4015:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4019:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4015:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:62:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:90:4"},{"condition":{"id":626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4092:45:4","subExpression":{"arguments":[{"id":623,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4117:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"id":624,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"4124:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":622,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"4093:23:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20Upgradeable,bytes memory) returns (bool)"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4093:44:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":645,"nodeType":"IfStatement","src":"4088:216:4","trueBody":{"id":644,"nodeType":"Block","src":"4139:165:4","statements":[{"expression":{"arguments":[{"id":628,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4173:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":631,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4203:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4209:7:4","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":365,"src":"4203:13:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:8:4","memberName":"selector","nodeType":"MemberAccess","src":"4203:22:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":634,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"4227:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":629,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4180:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4184:18:4","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4180:22:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:58:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":627,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4153:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:86:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":638,"nodeType":"ExpressionStatement","src":"4153:86:4"},{"expression":{"arguments":[{"id":640,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"4273:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},{"id":641,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"4280:12:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":639,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4253:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$378_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":643,"nodeType":"ExpressionStatement","src":"4253:40:4"}]}}]},"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"3576:308:4","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":647,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3898:12:4","nodeType":"FunctionDefinition","parameters":{"id":609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"token","nameLocation":"3929:5:4","nodeType":"VariableDeclaration","scope":647,"src":"3911:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":603,"nodeType":"UserDefinedTypeName","pathNode":{"id":602,"name":"IERC20Upgradeable","nameLocations":["3911:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"3911:17:4"},"referencedDeclaration":378,"src":"3911:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":606,"mutability":"mutable","name":"spender","nameLocation":"3944:7:4","nodeType":"VariableDeclaration","scope":647,"src":"3936:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"value","nameLocation":"3961:5:4","nodeType":"VariableDeclaration","scope":647,"src":"3953:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":607,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3910:57:4"},"returnParameters":{"id":610,"nodeType":"ParameterList","parameters":[],"src":"3977:0:4"},"scope":790,"src":"3889:421:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":703,"nodeType":"Block","src":"4688:257:4","statements":[{"assignments":[669],"declarations":[{"constant":false,"id":669,"mutability":"mutable","name":"nonceBefore","nameLocation":"4706:11:4","nodeType":"VariableDeclaration","scope":703,"src":"4698:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":674,"initialValue":{"arguments":[{"id":672,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"4733:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":670,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"4720:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:6:4","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":407,"src":"4720:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4698:41:4"},{"expression":{"arguments":[{"id":678,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"4762:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":679,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"4769:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":680,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"4778:5:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":681,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"4785:8:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":682,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"4795:1:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":683,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"4798:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":684,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"4801:1:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":675,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"4749:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:4","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":399,"src":"4749:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:54:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":686,"nodeType":"ExpressionStatement","src":"4749:54:4"},{"assignments":[688],"declarations":[{"constant":false,"id":688,"mutability":"mutable","name":"nonceAfter","nameLocation":"4821:10:4","nodeType":"VariableDeclaration","scope":703,"src":"4813:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"4813:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":693,"initialValue":{"arguments":[{"id":691,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"4847:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":689,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"4834:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"}},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4840:6:4","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":407,"src":"4834:12:4","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4813:40:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":695,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4871:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":696,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"4885:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4885:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4871:29:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4902:35:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":694,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4863:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":702,"nodeType":"ExpressionStatement","src":"4863:75:4"}]},"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"4316:141:4","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":704,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4471:10:4","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"token","nameLocation":"4515:5:4","nodeType":"VariableDeclaration","scope":704,"src":"4491:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":650,"nodeType":"UserDefinedTypeName","pathNode":{"id":649,"name":"IERC20PermitUpgradeable","nameLocations":["4491:23:4"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"4491:23:4"},"referencedDeclaration":414,"src":"4491:23:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$414","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"owner","nameLocation":"4538:5:4","nodeType":"VariableDeclaration","scope":704,"src":"4530:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":655,"mutability":"mutable","name":"spender","nameLocation":"4561:7:4","nodeType":"VariableDeclaration","scope":704,"src":"4553:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"value","nameLocation":"4586:5:4","nodeType":"VariableDeclaration","scope":704,"src":"4578:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":659,"mutability":"mutable","name":"deadline","nameLocation":"4609:8:4","nodeType":"VariableDeclaration","scope":704,"src":"4601:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":658,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":661,"mutability":"mutable","name":"v","nameLocation":"4633:1:4","nodeType":"VariableDeclaration","scope":704,"src":"4627:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":660,"name":"uint8","nodeType":"ElementaryTypeName","src":"4627:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":663,"mutability":"mutable","name":"r","nameLocation":"4652:1:4","nodeType":"VariableDeclaration","scope":704,"src":"4644:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":662,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"s","nameLocation":"4671:1:4","nodeType":"VariableDeclaration","scope":704,"src":"4663:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4663:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4481:197:4"},"returnParameters":{"id":667,"nodeType":"ParameterList","parameters":[],"src":"4688:0:4"},"scope":790,"src":"4462:483:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":740,"nodeType":"Block","src":"5409:572:4","statements":[{"assignments":[714],"declarations":[{"constant":false,"id":714,"mutability":"mutable","name":"returndata","nameLocation":"5771:10:4","nodeType":"VariableDeclaration","scope":740,"src":"5758:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":713,"name":"bytes","nodeType":"ElementaryTypeName","src":"5758:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":723,"initialValue":{"arguments":[{"id":720,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"5812:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5818:34:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":717,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"5792:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}],"id":716,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5784:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"5784:7:4","typeDescriptions":{}}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5799:12:4","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":880,"src":"5784:27:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:69:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5758:95:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":725,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"5871:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5882:6:4","memberName":"length","nodeType":"MemberAccess","src":"5871:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5892:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5871:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":731,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":714,"src":"5908:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5921:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":732,"name":"bool","nodeType":"ElementaryTypeName","src":"5921:4:4","typeDescriptions":{}}}],"id":734,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5920:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":729,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5897:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":730,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5901:6:4","memberName":"decode","nodeType":"MemberAccess","src":"5897:10:4","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5871:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5929:44:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":724,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5863:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:111:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":739,"nodeType":"ExpressionStatement","src":"5863:111:4"}]},"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"4951:372:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":741,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5337:19:4","nodeType":"FunctionDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":708,"mutability":"mutable","name":"token","nameLocation":"5375:5:4","nodeType":"VariableDeclaration","scope":741,"src":"5357:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":707,"nodeType":"UserDefinedTypeName","pathNode":{"id":706,"name":"IERC20Upgradeable","nameLocations":["5357:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"5357:17:4"},"referencedDeclaration":378,"src":"5357:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":710,"mutability":"mutable","name":"data","nameLocation":"5395:4:4","nodeType":"VariableDeclaration","scope":741,"src":"5382:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":709,"name":"bytes","nodeType":"ElementaryTypeName","src":"5382:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5356:44:4"},"returnParameters":{"id":712,"nodeType":"ParameterList","parameters":[],"src":"5409:0:4"},"scope":790,"src":"5328:653:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":788,"nodeType":"Block","src":"6582:516:4","statements":[{"assignments":[753,755],"declarations":[{"constant":false,"id":753,"mutability":"mutable","name":"success","nameLocation":"6883:7:4","nodeType":"VariableDeclaration","scope":788,"src":"6878:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":752,"name":"bool","nodeType":"ElementaryTypeName","src":"6878:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":755,"mutability":"mutable","name":"returndata","nameLocation":"6905:10:4","nodeType":"VariableDeclaration","scope":788,"src":"6892:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":754,"name":"bytes","nodeType":"ElementaryTypeName","src":"6892:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":763,"initialValue":{"arguments":[{"id":761,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"6939:4:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":758,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"6927:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}],"id":757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6919:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:4","typeDescriptions":{}}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6934:4:4","memberName":"call","nodeType":"MemberAccess","src":"6919:19:4","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6877:67:4"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":764,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"6973:7:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":765,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"6985:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:6:4","memberName":"length","nodeType":"MemberAccess","src":"6985:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7006:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":771,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"7022:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7035:4:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":772,"name":"bool","nodeType":"ElementaryTypeName","src":"7035:4:4","typeDescriptions":{}}}],"id":774,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7034:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":769,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7011:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7015:6:4","memberName":"decode","nodeType":"MemberAccess","src":"7011:10:4","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7011:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6985:56:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6984:58:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:69:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":783,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"7084:5:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}],"id":782,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7076:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":781,"name":"address","nodeType":"ElementaryTypeName","src":"7076:7:4","typeDescriptions":{}}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7076:14:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":779,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"7046:18:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1120_$","typeString":"type(library AddressUpgradeable)"}},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:10:4","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":808,"src":"7046:29:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:45:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:118:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":751,"id":787,"nodeType":"Return","src":"6954:137:4"}]},"documentation":{"id":742,"nodeType":"StructuredDocumentation","src":"5987:490:4","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":789,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6491:23:4","nodeType":"FunctionDefinition","parameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":745,"mutability":"mutable","name":"token","nameLocation":"6533:5:4","nodeType":"VariableDeclaration","scope":789,"src":"6515:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"},"typeName":{"id":744,"nodeType":"UserDefinedTypeName","pathNode":{"id":743,"name":"IERC20Upgradeable","nameLocations":["6515:17:4"],"nodeType":"IdentifierPath","referencedDeclaration":378,"src":"6515:17:4"},"referencedDeclaration":378,"src":"6515:17:4","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$378","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":747,"mutability":"mutable","name":"data","nameLocation":"6553:4:4","nodeType":"VariableDeclaration","scope":789,"src":"6540:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":746,"name":"bytes","nodeType":"ElementaryTypeName","src":"6540:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6514:44:4"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":789,"src":"6576:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":749,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6575:6:4"},"scope":790,"src":"6482:616:4","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":791,"src":"734:6366:4","usedErrors":[]}],"src":"115:6986:4"},"id":4},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1120]},"id":1121,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":792,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"126:67:5","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1120,"linearizedBaseContracts":[1120],"name":"AddressUpgradeable","nameLocation":"202:18:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":807,"nodeType":"Block","src":"1489:254:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":801,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"1713:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:5","memberName":"code","nodeType":"MemberAccess","src":"1713:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:5","memberName":"length","nodeType":"MemberAccess","src":"1713:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":800,"id":806,"nodeType":"Return","src":"1706:30:5"}]},"documentation":{"id":794,"nodeType":"StructuredDocumentation","src":"227:1191:5","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":808,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:5","nodeType":"FunctionDefinition","parameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"account","nameLocation":"1451:7:5","nodeType":"VariableDeclaration","scope":808,"src":"1443:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":795,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:5"},"returnParameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":808,"src":"1483:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":798,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:5"},"scope":1120,"src":"1423:320:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":841,"nodeType":"Block","src":"2729:241:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":819,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1120","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1120","typeString":"library AddressUpgradeable"}],"id":818,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:5","typeDescriptions":{}}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:5","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":822,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"2772:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":816,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"ExpressionStatement","src":"2739:73:5"},{"assignments":[828,null],"declarations":[{"constant":false,"id":828,"mutability":"mutable","name":"success","nameLocation":"2829:7:5","nodeType":"VariableDeclaration","scope":841,"src":"2824:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":827,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":835,"initialValue":{"arguments":[{"hexValue":"","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":829,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"2842:9:5","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:5","memberName":"call","nodeType":"MemberAccess","src":"2842:14:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":831,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"2864:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:5"},{"expression":{"arguments":[{"id":837,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"2893:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":836,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":840,"nodeType":"ExpressionStatement","src":"2885:78:5"}]},"documentation":{"id":809,"nodeType":"StructuredDocumentation","src":"1749:904:5","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":842,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:5","nodeType":"FunctionDefinition","parameters":{"id":814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":811,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:5","nodeType":"VariableDeclaration","scope":842,"src":"2677:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":810,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:5","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":813,"mutability":"mutable","name":"amount","nameLocation":"2712:6:5","nodeType":"VariableDeclaration","scope":842,"src":"2704:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:5"},"returnParameters":{"id":815,"nodeType":"ParameterList","parameters":[],"src":"2729:0:5"},"scope":1120,"src":"2658:312:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":859,"nodeType":"Block","src":"3801:96:5","statements":[{"expression":{"arguments":[{"id":853,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"3840:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":854,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"3848:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":852,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[900,944],"referencedDeclaration":944,"src":"3818:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":851,"id":858,"nodeType":"Return","src":"3811:79:5"}]},"documentation":{"id":843,"nodeType":"StructuredDocumentation","src":"2976:731:5","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":860,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:5","nodeType":"FunctionDefinition","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":845,"mutability":"mutable","name":"target","nameLocation":"3742:6:5","nodeType":"VariableDeclaration","scope":860,"src":"3734:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":844,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":847,"mutability":"mutable","name":"data","nameLocation":"3763:4:5","nodeType":"VariableDeclaration","scope":860,"src":"3750:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":846,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:5"},"returnParameters":{"id":851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":850,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":860,"src":"3787:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":849,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:5"},"scope":1120,"src":"3712:185:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":879,"nodeType":"Block","src":"4266:76:5","statements":[{"expression":{"arguments":[{"id":873,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"4305:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":874,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"4313:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":876,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"4322:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":872,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[900,944],"referencedDeclaration":944,"src":"4283:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":871,"id":878,"nodeType":"Return","src":"4276:59:5"}]},"documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"3903:211:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":880,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:5","nodeType":"FunctionDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":863,"mutability":"mutable","name":"target","nameLocation":"4158:6:5","nodeType":"VariableDeclaration","scope":880,"src":"4150:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":862,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":865,"mutability":"mutable","name":"data","nameLocation":"4187:4:5","nodeType":"VariableDeclaration","scope":880,"src":"4174:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":864,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":867,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:5","nodeType":"VariableDeclaration","scope":880,"src":"4201:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":866,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:5"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":880,"src":"4252:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":869,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:5"},"scope":1120,"src":"4119:223:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":899,"nodeType":"Block","src":"4817:111:5","statements":[{"expression":{"arguments":[{"id":893,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"4856:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":894,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"4864:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"4870:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":892,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[900,944],"referencedDeclaration":944,"src":"4834:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":891,"id":898,"nodeType":"Return","src":"4827:94:5"}]},"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"4348:351:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":900,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:5","nodeType":"FunctionDefinition","parameters":{"id":888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"target","nameLocation":"4743:6:5","nodeType":"VariableDeclaration","scope":900,"src":"4735:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"data","nameLocation":"4764:4:5","nodeType":"VariableDeclaration","scope":900,"src":"4751:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":884,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":887,"mutability":"mutable","name":"value","nameLocation":"4778:5:5","nodeType":"VariableDeclaration","scope":900,"src":"4770:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":886,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:5"},"returnParameters":{"id":891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":900,"src":"4803:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":889,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:5"},"scope":1120,"src":"4704:224:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":943,"nodeType":"Block","src":"5355:267:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":917,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1120","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1120","typeString":"library AddressUpgradeable"}],"id":916,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":915,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:5","typeDescriptions":{}}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:5","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":920,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"5398:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":914,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"ExpressionStatement","src":"5365:81:5"},{"assignments":[926,928],"declarations":[{"constant":false,"id":926,"mutability":"mutable","name":"success","nameLocation":"5462:7:5","nodeType":"VariableDeclaration","scope":943,"src":"5457:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":925,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":928,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:5","nodeType":"VariableDeclaration","scope":943,"src":"5471:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":927,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":935,"initialValue":{"arguments":[{"id":933,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":905,"src":"5524:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":929,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"5498:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:5","memberName":"call","nodeType":"MemberAccess","src":"5498:11:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"5517:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:5"},{"expression":{"arguments":[{"id":937,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"5573:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":938,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"5581:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":939,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"5590:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":940,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"5602:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":936,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"5546:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":913,"id":942,"nodeType":"Return","src":"5539:76:5"}]},"documentation":{"id":901,"nodeType":"StructuredDocumentation","src":"4934:237:5","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":944,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:5","nodeType":"FunctionDefinition","parameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"target","nameLocation":"5224:6:5","nodeType":"VariableDeclaration","scope":944,"src":"5216:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":902,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":905,"mutability":"mutable","name":"data","nameLocation":"5253:4:5","nodeType":"VariableDeclaration","scope":944,"src":"5240:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":904,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":907,"mutability":"mutable","name":"value","nameLocation":"5275:5:5","nodeType":"VariableDeclaration","scope":944,"src":"5267:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":906,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":909,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:5","nodeType":"VariableDeclaration","scope":944,"src":"5290:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":908,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:5"},"returnParameters":{"id":913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":944,"src":"5341:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":911,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:5"},"scope":1120,"src":"5176:446:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":960,"nodeType":"Block","src":"5899:97:5","statements":[{"expression":{"arguments":[{"id":955,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"5935:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":956,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"5943:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":954,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[961,990],"referencedDeclaration":990,"src":"5916:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":953,"id":959,"nodeType":"Return","src":"5909:80:5"}]},"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"5628:166:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":961,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:5","nodeType":"FunctionDefinition","parameters":{"id":950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"target","nameLocation":"5835:6:5","nodeType":"VariableDeclaration","scope":961,"src":"5827:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":949,"mutability":"mutable","name":"data","nameLocation":"5856:4:5","nodeType":"VariableDeclaration","scope":961,"src":"5843:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":948,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:5"},"returnParameters":{"id":953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":952,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":961,"src":"5885:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":951,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:5"},"scope":1120,"src":"5799:197:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":989,"nodeType":"Block","src":"6338:168:5","statements":[{"assignments":[974,976],"declarations":[{"constant":false,"id":974,"mutability":"mutable","name":"success","nameLocation":"6354:7:5","nodeType":"VariableDeclaration","scope":989,"src":"6349:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":973,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":976,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:5","nodeType":"VariableDeclaration","scope":989,"src":"6363:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":975,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":981,"initialValue":{"arguments":[{"id":979,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"6408:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":977,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"6390:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:5","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:5","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:5"},{"expression":{"arguments":[{"id":983,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"6457:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":984,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"6465:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":985,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"6474:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":986,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"6486:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":982,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"6430:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":972,"id":988,"nodeType":"Return","src":"6423:76:5"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"6002:173:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":990,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:5","nodeType":"FunctionDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"target","nameLocation":"6225:6:5","nodeType":"VariableDeclaration","scope":990,"src":"6217:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":966,"mutability":"mutable","name":"data","nameLocation":"6254:4:5","nodeType":"VariableDeclaration","scope":990,"src":"6241:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":965,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":968,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:5","nodeType":"VariableDeclaration","scope":990,"src":"6268:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":967,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:5"},"returnParameters":{"id":972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":990,"src":"6324:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":970,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:5"},"scope":1120,"src":"6180:326:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1006,"nodeType":"Block","src":"6782:101:5","statements":[{"expression":{"arguments":[{"id":1001,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"6820:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1002,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"6828:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1000,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1007,1036],"referencedDeclaration":1036,"src":"6799:20:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":999,"id":1005,"nodeType":"Return","src":"6792:84:5"}]},"documentation":{"id":991,"nodeType":"StructuredDocumentation","src":"6512:168:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1007,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:5","nodeType":"FunctionDefinition","parameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":993,"mutability":"mutable","name":"target","nameLocation":"6723:6:5","nodeType":"VariableDeclaration","scope":1007,"src":"6715:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":992,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":995,"mutability":"mutable","name":"data","nameLocation":"6744:4:5","nodeType":"VariableDeclaration","scope":1007,"src":"6731:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":994,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:5"},"returnParameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1007,"src":"6768:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":997,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:5"},"scope":1120,"src":"6685:198:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1035,"nodeType":"Block","src":"7224:170:5","statements":[{"assignments":[1020,1022],"declarations":[{"constant":false,"id":1020,"mutability":"mutable","name":"success","nameLocation":"7240:7:5","nodeType":"VariableDeclaration","scope":1035,"src":"7235:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1019,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1022,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:5","nodeType":"VariableDeclaration","scope":1035,"src":"7249:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1021,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1027,"initialValue":{"arguments":[{"id":1025,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"7296:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1023,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"7276:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:5","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:5","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:5"},{"expression":{"arguments":[{"id":1029,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"7345:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1030,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1020,"src":"7353:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1031,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"7362:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1032,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"7374:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1028,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"7318:26:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1018,"id":1034,"nodeType":"Return","src":"7311:76:5"}]},"documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"6889:175:5","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1036,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:5","nodeType":"FunctionDefinition","parameters":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1010,"mutability":"mutable","name":"target","nameLocation":"7116:6:5","nodeType":"VariableDeclaration","scope":1036,"src":"7108:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1009,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"data","nameLocation":"7145:4:5","nodeType":"VariableDeclaration","scope":1036,"src":"7132:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1011,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1014,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:5","nodeType":"VariableDeclaration","scope":1036,"src":"7159:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1013,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:5"},"returnParameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1036,"src":"7210:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1016,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:5"},"scope":1120,"src":"7069:325:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1074,"nodeType":"Block","src":"7876:434:5","statements":[{"condition":{"id":1050,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"7890:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1072,"nodeType":"Block","src":"8246:58:5","statements":[{"expression":{"arguments":[{"id":1068,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"8268:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1069,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"8280:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1067,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"8260:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1071,"nodeType":"ExpressionStatement","src":"8260:33:5"}]},"id":1073,"nodeType":"IfStatement","src":"7886:418:5","trueBody":{"id":1066,"nodeType":"Block","src":"7899:341:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1051,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"7917:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:5","memberName":"length","nodeType":"MemberAccess","src":"7917:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1063,"nodeType":"IfStatement","src":"7913:286:5","trueBody":{"id":1062,"nodeType":"Block","src":"7941:258:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1057,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"8143:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1056,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"8132:10:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1055,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1061,"nodeType":"ExpressionStatement","src":"8124:60:5"}]}},{"expression":{"id":1064,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"8219:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1049,"id":1065,"nodeType":"Return","src":"8212:17:5"}]}}]},"documentation":{"id":1037,"nodeType":"StructuredDocumentation","src":"7400:277:5","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1075,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:5","nodeType":"FunctionDefinition","parameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1039,"mutability":"mutable","name":"target","nameLocation":"7735:6:5","nodeType":"VariableDeclaration","scope":1075,"src":"7727:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1038,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1041,"mutability":"mutable","name":"success","nameLocation":"7756:7:5","nodeType":"VariableDeclaration","scope":1075,"src":"7751:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1040,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1043,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:5","nodeType":"VariableDeclaration","scope":1075,"src":"7773:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1042,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1045,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:5","nodeType":"VariableDeclaration","scope":1075,"src":"7806:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1044,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:5"},"returnParameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1075,"src":"7862:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1047,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:5"},"scope":1120,"src":"7682:628:5","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1098,"nodeType":"Block","src":"8691:135:5","statements":[{"condition":{"id":1087,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"8705:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1096,"nodeType":"Block","src":"8762:58:5","statements":[{"expression":{"arguments":[{"id":1092,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"8784:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1093,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"8796:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1091,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"8776:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1095,"nodeType":"ExpressionStatement","src":"8776:33:5"}]},"id":1097,"nodeType":"IfStatement","src":"8701:119:5","trueBody":{"id":1090,"nodeType":"Block","src":"8714:42:5","statements":[{"expression":{"id":1088,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"8735:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1086,"id":1089,"nodeType":"Return","src":"8728:17:5"}]}}]},"documentation":{"id":1076,"nodeType":"StructuredDocumentation","src":"8316:210:5","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1099,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:5","nodeType":"FunctionDefinition","parameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1078,"mutability":"mutable","name":"success","nameLocation":"8571:7:5","nodeType":"VariableDeclaration","scope":1099,"src":"8566:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1077,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1080,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:5","nodeType":"VariableDeclaration","scope":1099,"src":"8588:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1079,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1082,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:5","nodeType":"VariableDeclaration","scope":1099,"src":"8621:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1081,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:5"},"returnParameters":{"id":1086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1099,"src":"8677:12:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1084,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:5"},"scope":1120,"src":"8531:295:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1118,"nodeType":"Block","src":"8915:457:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1106,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"8991:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:5","memberName":"length","nodeType":"MemberAccess","src":"8991:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1116,"nodeType":"Block","src":"9321:45:5","statements":[{"expression":{"arguments":[{"id":1113,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"9342:12:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1112,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:5","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1115,"nodeType":"ExpressionStatement","src":"9335:20:5"}]},"id":1117,"nodeType":"IfStatement","src":"8987:379:5","trueBody":{"id":1111,"nodeType":"Block","src":"9014:301:5","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:5","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:5","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:5"},"nodeType":"YulFunctionCall","src":"9213:17:5"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:5","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:5","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:5"},"nodeType":"YulFunctionCall","src":"9254:19:5"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:5"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:5"},"nodeType":"YulFunctionCall","src":"9247:44:5"},"nodeType":"YulExpressionStatement","src":"9247:44:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1101,"isOffset":false,"isSlot":false,"src":"9219:10:5","valueSize":1},{"declaration":1101,"isOffset":false,"isSlot":false,"src":"9262:10:5","valueSize":1}],"id":1110,"nodeType":"InlineAssembly","src":"9163:142:5"}]}}]},"id":1119,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:5","nodeType":"FunctionDefinition","parameters":{"id":1104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:5","nodeType":"VariableDeclaration","scope":1119,"src":"8849:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1100,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:5","nodeType":"VariableDeclaration","scope":1119,"src":"8874:26:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1102,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:5"},"returnParameters":{"id":1105,"nodeType":"ParameterList","parameters":[],"src":"8915:0:5"},"scope":1120,"src":"8832:540:5","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1121,"src":"194:9180:5","usedErrors":[]}],"src":"101:9274:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1120],"ContextUpgradeable":[1162],"Initializable":[300]},"id":1163,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1122,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:6"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1123,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1163,"sourceUnit":301,"src":"110:42:6","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1125,"name":"Initializable","nameLocations":["691:13:6"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"691:13:6"},"id":1126,"nodeType":"InheritanceSpecifier","src":"691:13:6"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"154:496:6","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1162,"linearizedBaseContracts":[1162,300],"name":"ContextUpgradeable","nameLocation":"669:18:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1131,"nodeType":"Block","src":"763:7:6","statements":[]},"id":1132,"implemented":true,"kind":"function","modifiers":[{"id":1129,"kind":"modifierInvocation","modifierName":{"id":1128,"name":"onlyInitializing","nameLocations":["746:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"746:16:6"},"nodeType":"ModifierInvocation","src":"746:16:6"}],"name":"__Context_init","nameLocation":"720:14:6","nodeType":"FunctionDefinition","parameters":{"id":1127,"nodeType":"ParameterList","parameters":[],"src":"734:2:6"},"returnParameters":{"id":1130,"nodeType":"ParameterList","parameters":[],"src":"763:0:6"},"scope":1162,"src":"711:59:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1137,"nodeType":"Block","src":"838:7:6","statements":[]},"id":1138,"implemented":true,"kind":"function","modifiers":[{"id":1135,"kind":"modifierInvocation","modifierName":{"id":1134,"name":"onlyInitializing","nameLocations":["821:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"821:16:6"},"nodeType":"ModifierInvocation","src":"821:16:6"}],"name":"__Context_init_unchained","nameLocation":"785:24:6","nodeType":"FunctionDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[],"src":"809:2:6"},"returnParameters":{"id":1136,"nodeType":"ParameterList","parameters":[],"src":"838:0:6"},"scope":1162,"src":"776:69:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1146,"nodeType":"Block","src":"912:34:6","statements":[{"expression":{"expression":{"id":1143,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:6","memberName":"sender","nodeType":"MemberAccess","src":"929:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1142,"id":1145,"nodeType":"Return","src":"922:17:6"}]},"id":1147,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:6","nodeType":"FunctionDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[],"src":"869:2:6"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1147,"src":"903:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:6"},"scope":1162,"src":"850:96:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1155,"nodeType":"Block","src":"1019:32:6","statements":[{"expression":{"expression":{"id":1152,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:6","memberName":"data","nodeType":"MemberAccess","src":"1036:8:6","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1151,"id":1154,"nodeType":"Return","src":"1029:15:6"}]},"id":1156,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:6","nodeType":"FunctionDefinition","parameters":{"id":1148,"nodeType":"ParameterList","parameters":[],"src":"969:2:6"},"returnParameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1156,"src":"1003:14:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1149,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:6"},"scope":1162,"src":"952:99:6","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1157,"nodeType":"StructuredDocumentation","src":"1057:254:6","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1161,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:6","nodeType":"VariableDeclaration","scope":1162,"src":"1316:25:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1158,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1160,"length":{"hexValue":"3530","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:6","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1163,"src":"651:693:6","usedErrors":[]}],"src":"86:1259:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2623],"SignedMathUpgradeable":[2728],"StringsUpgradeable":[1391]},"id":1392,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1164,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1392,"sourceUnit":2624,"src":"126:36:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1392,"sourceUnit":2729,"src":"163:42:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1167,"nodeType":"StructuredDocumentation","src":"207:34:7","text":" @dev String operations."},"fullyImplemented":true,"id":1391,"linearizedBaseContracts":[1391],"name":"StringsUpgradeable","nameLocation":"250:18:7","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1170,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:7","nodeType":"VariableDeclaration","scope":1391,"src":"275:54:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1168,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1173,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:7","nodeType":"VariableDeclaration","scope":1391,"src":"335:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1171,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:7","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1220,"nodeType":"Block","src":"551:636:7","statements":[{"id":1219,"nodeType":"UncheckedBlock","src":"561:620:7","statements":[{"assignments":[1182],"declarations":[{"constant":false,"id":1182,"mutability":"mutable","name":"length","nameLocation":"593:6:7","nodeType":"VariableDeclaration","scope":1219,"src":"585:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1181,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1189,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1185,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"624:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1183,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"602:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2623_$","typeString":"type(library MathUpgradeable)"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:7","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2460,"src":"602:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:7"},{"assignments":[1191],"declarations":[{"constant":false,"id":1191,"mutability":"mutable","name":"buffer","nameLocation":"662:6:7","nodeType":"VariableDeclaration","scope":1219,"src":"648:20:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1190,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1196,"initialValue":{"arguments":[{"id":1194,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"682:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1192,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:7"},{"assignments":[1198],"declarations":[{"constant":false,"id":1198,"mutability":"mutable","name":"ptr","nameLocation":"711:3:7","nodeType":"VariableDeclaration","scope":1219,"src":"703:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1199,"nodeType":"VariableDeclarationStatement","src":"703:11:7"},{"AST":{"nodeType":"YulBlock","src":"784:67:7","statements":[{"nodeType":"YulAssignment","src":"802:35:7","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:7"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:7","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:7"},"nodeType":"YulFunctionCall","src":"821:15:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:7"},"nodeType":"YulFunctionCall","src":"809:28:7"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:7"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1191,"isOffset":false,"isSlot":false,"src":"813:6:7","valueSize":1},{"declaration":1182,"isOffset":false,"isSlot":false,"src":"829:6:7","valueSize":1},{"declaration":1198,"isOffset":false,"isSlot":false,"src":"802:3:7","valueSize":1}],"id":1200,"nodeType":"InlineAssembly","src":"775:76:7"},{"body":{"id":1215,"nodeType":"Block","src":"877:267:7","statements":[{"expression":{"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:7","subExpression":{"id":1202,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"895:3:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1204,"nodeType":"ExpressionStatement","src":"895:5:7"},{"AST":{"nodeType":"YulBlock","src":"978:84:7","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:7"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:7"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:7","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:7"},"nodeType":"YulFunctionCall","src":"1018:14:7"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:7"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:7"},"nodeType":"YulFunctionCall","src":"1013:30:7"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:7"},"nodeType":"YulFunctionCall","src":"1000:44:7"},"nodeType":"YulExpressionStatement","src":"1000:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1170,"isOffset":false,"isSlot":false,"src":"1034:8:7","valueSize":1},{"declaration":1198,"isOffset":false,"isSlot":false,"src":"1008:3:7","valueSize":1},{"declaration":1176,"isOffset":false,"isSlot":false,"src":"1022:5:7","valueSize":1}],"id":1205,"nodeType":"InlineAssembly","src":"969:93:7"},{"expression":{"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"1079:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:7","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1209,"nodeType":"ExpressionStatement","src":"1079:11:7"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"1112:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1214,"nodeType":"IfStatement","src":"1108:21:7","trueBody":{"id":1213,"nodeType":"Break","src":"1124:5:7"}}]},"condition":{"hexValue":"74727565","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1216,"nodeType":"WhileStatement","src":"864:280:7"},{"expression":{"id":1217,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"1164:6:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1180,"id":1218,"nodeType":"Return","src":"1157:13:7"}]}]},"documentation":{"id":1174,"nodeType":"StructuredDocumentation","src":"385:90:7","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1221,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:7","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1176,"mutability":"mutable","name":"value","nameLocation":"506:5:7","nodeType":"VariableDeclaration","scope":1221,"src":"498:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1175,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:7"},"returnParameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1221,"src":"536:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1178,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:7"},"scope":1391,"src":"480:707:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1248,"nodeType":"Block","src":"1357:114:7","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1398:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:7","trueExpression":{"hexValue":"2d","id":1236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1242,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"1455:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1240,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1429:21:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2728_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:7","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2727,"src":"1429:25:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1239,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1221,1249],"referencedDeclaration":1221,"src":"1420:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1231,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:7","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1229,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:7","typeDescriptions":{}}},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1228,"id":1247,"nodeType":"Return","src":"1367:97:7"}]},"documentation":{"id":1222,"nodeType":"StructuredDocumentation","src":"1193:89:7","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1249,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:7","nodeType":"FunctionDefinition","parameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"value","nameLocation":"1312:5:7","nodeType":"VariableDeclaration","scope":1249,"src":"1305:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1223,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:7"},"returnParameters":{"id":1228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1249,"src":"1342:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1226,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:7"},"scope":1391,"src":"1287:184:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1268,"nodeType":"Block","src":"1650:111:7","statements":[{"id":1267,"nodeType":"UncheckedBlock","src":"1660:95:7","statements":[{"expression":{"arguments":[{"id":1258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"1703:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1261,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"1733:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1259,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2623,"src":"1710:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2623_$","typeString":"type(library MathUpgradeable)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:7","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"1710:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1257,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1269,1345,1365],"referencedDeclaration":1345,"src":"1691:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1256,"id":1266,"nodeType":"Return","src":"1684:60:7"}]}]},"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"1477:94:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1269,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:7","nodeType":"FunctionDefinition","parameters":{"id":1253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"value","nameLocation":"1605:5:7","nodeType":"VariableDeclaration","scope":1269,"src":"1597:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1251,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:7"},"returnParameters":{"id":1256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1255,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1269,"src":"1635:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1254,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:7"},"scope":1391,"src":"1576:185:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1344,"nodeType":"Block","src":"1974:347:7","statements":[{"assignments":[1280],"declarations":[{"constant":false,"id":1280,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:7","nodeType":"VariableDeclaration","scope":1344,"src":"1984:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1279,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1289,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1284,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"2020:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:7","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1281,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:7"},{"expression":{"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1290,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2041:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1292,"indexExpression":{"hexValue":"30","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1295,"nodeType":"ExpressionStatement","src":"2041:15:7"},{"expression":{"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1296,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2066:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1298,"indexExpression":{"hexValue":"31","id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1301,"nodeType":"ExpressionStatement","src":"2066:15:7"},{"body":{"id":1330,"nodeType":"Block","src":"2136:83:7","statements":[{"expression":{"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1316,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2150:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1318,"indexExpression":{"id":1317,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"2157:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1319,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"2162:8:7","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1323,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"2171:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:7","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:7","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1325,"nodeType":"ExpressionStatement","src":"2150:33:7"},{"expression":{"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"2197:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:7","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1329,"nodeType":"ExpressionStatement","src":"2197:11:7"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1310,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"2124:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1331,"initializationExpression":{"assignments":[1303],"declarations":[{"constant":false,"id":1303,"mutability":"mutable","name":"i","nameLocation":"2104:1:7","nodeType":"VariableDeclaration","scope":1331,"src":"2096:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1302,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1309,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1305,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"2112:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:7"},"loopExpression":{"expression":{"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:7","subExpression":{"id":1313,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"2133:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1315,"nodeType":"ExpressionStatement","src":"2131:3:7"},"nodeType":"ForStatement","src":"2091:128:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1272,"src":"2236:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1332,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1338,"nodeType":"ExpressionStatement","src":"2228:55:7"},{"expression":{"arguments":[{"id":1341,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2307:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1339,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:7","typeDescriptions":{}}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1278,"id":1343,"nodeType":"Return","src":"2293:21:7"}]},"documentation":{"id":1270,"nodeType":"StructuredDocumentation","src":"1767:112:7","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1345,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:7","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1272,"mutability":"mutable","name":"value","nameLocation":"1913:5:7","nodeType":"VariableDeclaration","scope":1345,"src":"1905:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1271,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1274,"mutability":"mutable","name":"length","nameLocation":"1928:6:7","nodeType":"VariableDeclaration","scope":1345,"src":"1920:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1273,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:7"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1345,"src":"1959:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1276,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:7"},"scope":1391,"src":"1884:437:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1364,"nodeType":"Block","src":"2546:76:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1358,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"2591:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1356,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:7","typeDescriptions":{}}},"id":1359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1354,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:7","typeDescriptions":{}}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1361,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"2599:15:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1353,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1269,1345,1365],"referencedDeclaration":1345,"src":"2563:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1352,"id":1363,"nodeType":"Return","src":"2556:59:7"}]},"documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"2327:141:7","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1365,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:7","nodeType":"FunctionDefinition","parameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"addr","nameLocation":"2502:4:7","nodeType":"VariableDeclaration","scope":1365,"src":"2494:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:7"},"returnParameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1365,"src":"2531:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1350,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:7"},"scope":1391,"src":"2473:149:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1389,"nodeType":"Block","src":"2777:66:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1378,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"2810:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1376,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:7","typeDescriptions":{}}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1375,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1384,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"2833:1:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1382,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:7","typeDescriptions":{}}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1381,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1374,"id":1388,"nodeType":"Return","src":"2787:49:7"}]},"documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"2628:66:7","text":" @dev Returns true if the two strings are equal."},"id":1390,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:7","nodeType":"FunctionDefinition","parameters":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"a","nameLocation":"2728:1:7","nodeType":"VariableDeclaration","scope":1390,"src":"2714:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1367,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"b","nameLocation":"2745:1:7","nodeType":"VariableDeclaration","scope":1390,"src":"2731:15:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1369,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:7"},"returnParameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1390,"src":"2771:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1372,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:7"},"scope":1391,"src":"2699:144:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1392,"src":"242:2603:7","usedErrors":[]}],"src":"101:2745:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[1757],"MathUpgradeable":[2623],"SignedMathUpgradeable":[2728],"StringsUpgradeable":[1391]},"id":1758,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1393,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":1394,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1758,"sourceUnit":1392,"src":"137:35:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1395,"nodeType":"StructuredDocumentation","src":"174:205:8","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1757,"linearizedBaseContracts":[1757],"name":"ECDSAUpgradeable","nameLocation":"388:16:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":1401,"members":[{"id":1396,"name":"NoError","nameLocation":"439:7:8","nodeType":"EnumValue","src":"439:7:8"},{"id":1397,"name":"InvalidSignature","nameLocation":"456:16:8","nodeType":"EnumValue","src":"456:16:8"},{"id":1398,"name":"InvalidSignatureLength","nameLocation":"482:22:8","nodeType":"EnumValue","src":"482:22:8"},{"id":1399,"name":"InvalidSignatureS","nameLocation":"514:17:8","nodeType":"EnumValue","src":"514:17:8"},{"id":1400,"name":"InvalidSignatureV","nameLocation":"541:17:8","nodeType":"EnumValue","src":"541:17:8"}],"name":"RecoverError","nameLocation":"416:12:8","nodeType":"EnumDefinition","src":"411:175:8"},{"body":{"id":1444,"nodeType":"Block","src":"646:457:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1407,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"660:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1408,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"669:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:8","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"669:20:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1413,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"756:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1414,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"765:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:8","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1397,"src":"765:29:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1422,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"865:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1423,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"874:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:8","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"874:35:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1431,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"987:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1432,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"996:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:8","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"996:30:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1440,"nodeType":"IfStatement","src":"983:114:8","trueBody":{"id":1439,"nodeType":"Block","src":"1028:69:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1435,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1438,"nodeType":"ExpressionStatement","src":"1042:44:8"}]}},"id":1441,"nodeType":"IfStatement","src":"861:236:8","trueBody":{"id":1430,"nodeType":"Block","src":"911:66:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1426,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1429,"nodeType":"ExpressionStatement","src":"925:41:8"}]}},"id":1442,"nodeType":"IfStatement","src":"752:345:8","trueBody":{"id":1421,"nodeType":"Block","src":"796:59:8","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1417,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:8","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1420,"nodeType":"ExpressionStatement","src":"810:34:8"}]}},"id":1443,"nodeType":"IfStatement","src":"656:441:8","trueBody":{"id":1412,"nodeType":"Block","src":"691:55:8","statements":[{"functionReturnParameters":1406,"id":1411,"nodeType":"Return","src":"705:7:8"}]}}]},"id":1445,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:8","nodeType":"FunctionDefinition","parameters":{"id":1405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"mutability":"mutable","name":"error","nameLocation":"626:5:8","nodeType":"VariableDeclaration","scope":1445,"src":"613:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1403,"nodeType":"UserDefinedTypeName","pathNode":{"id":1402,"name":"RecoverError","nameLocations":["613:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"613:12:8"},"referencedDeclaration":1401,"src":"613:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:8"},"returnParameters":{"id":1406,"nodeType":"ParameterList","parameters":[],"src":"646:0:8"},"scope":1757,"src":"592:511:8","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1490,"nodeType":"Block","src":"2271:626:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1458,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"2285:9:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:8","memberName":"length","nodeType":"MemberAccess","src":"2285:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:8","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1488,"nodeType":"Block","src":"2810:81:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:8","typeDescriptions":{}}},"id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1484,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"2844:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:8","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1398,"src":"2844:35:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1486,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1457,"id":1487,"nodeType":"Return","src":"2824:56:8"}]},"id":1489,"nodeType":"IfStatement","src":"2281:610:8","trueBody":{"id":1479,"nodeType":"Block","src":"2309:495:8","statements":[{"assignments":[1463],"declarations":[{"constant":false,"id":1463,"mutability":"mutable","name":"r","nameLocation":"2331:1:8","nodeType":"VariableDeclaration","scope":1479,"src":"2323:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1464,"nodeType":"VariableDeclarationStatement","src":"2323:9:8"},{"assignments":[1466],"declarations":[{"constant":false,"id":1466,"mutability":"mutable","name":"s","nameLocation":"2354:1:8","nodeType":"VariableDeclaration","scope":1479,"src":"2346:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1467,"nodeType":"VariableDeclarationStatement","src":"2346:9:8"},{"assignments":[1469],"declarations":[{"constant":false,"id":1469,"mutability":"mutable","name":"v","nameLocation":"2375:1:8","nodeType":"VariableDeclaration","scope":1479,"src":"2369:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1468,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1470,"nodeType":"VariableDeclarationStatement","src":"2369:7:8"},{"AST":{"nodeType":"YulBlock","src":"2577:171:8","statements":[{"nodeType":"YulAssignment","src":"2595:32:8","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:8","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:8"},"nodeType":"YulFunctionCall","src":"2606:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:8"},"nodeType":"YulFunctionCall","src":"2600:27:8"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:8"}]},{"nodeType":"YulAssignment","src":"2644:32:8","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:8","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:8"},"nodeType":"YulFunctionCall","src":"2655:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:8"},"nodeType":"YulFunctionCall","src":"2649:27:8"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:8"}]},{"nodeType":"YulAssignment","src":"2693:41:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:8","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:8"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:8","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:8"},"nodeType":"YulFunctionCall","src":"2712:20:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:8"},"nodeType":"YulFunctionCall","src":"2706:27:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:8"},"nodeType":"YulFunctionCall","src":"2698:36:8"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1463,"isOffset":false,"isSlot":false,"src":"2595:1:8","valueSize":1},{"declaration":1466,"isOffset":false,"isSlot":false,"src":"2644:1:8","valueSize":1},{"declaration":1450,"isOffset":false,"isSlot":false,"src":"2610:9:8","valueSize":1},{"declaration":1450,"isOffset":false,"isSlot":false,"src":"2659:9:8","valueSize":1},{"declaration":1450,"isOffset":false,"isSlot":false,"src":"2716:9:8","valueSize":1},{"declaration":1469,"isOffset":false,"isSlot":false,"src":"2693:1:8","valueSize":1}],"id":1471,"nodeType":"InlineAssembly","src":"2568:180:8"},{"expression":{"arguments":[{"id":1473,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"2779:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1474,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"2785:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1475,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"2788:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"2791:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1472,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1659,"src":"2768:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1457,"id":1478,"nodeType":"Return","src":"2761:32:8"}]}}]},"documentation":{"id":1446,"nodeType":"StructuredDocumentation","src":"1109:1053:8","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1491,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:8","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1448,"mutability":"mutable","name":"hash","nameLocation":"2195:4:8","nodeType":"VariableDeclaration","scope":1491,"src":"2187:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"signature","nameLocation":"2214:9:8","nodeType":"VariableDeclaration","scope":1491,"src":"2201:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1449,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:8"},"returnParameters":{"id":1457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1491,"src":"2248:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1452,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1491,"src":"2257:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1455,"nodeType":"UserDefinedTypeName","pathNode":{"id":1454,"name":"RecoverError","nameLocations":["2257:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"2257:12:8"},"referencedDeclaration":1401,"src":"2257:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:8"},"scope":1757,"src":"2167:730:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1517,"nodeType":"Block","src":"3770:140:8","statements":[{"assignments":[1502,1505],"declarations":[{"constant":false,"id":1502,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:8","nodeType":"VariableDeclaration","scope":1517,"src":"3781:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1501,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1505,"mutability":"mutable","name":"error","nameLocation":"3813:5:8","nodeType":"VariableDeclaration","scope":1517,"src":"3800:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1504,"nodeType":"UserDefinedTypeName","pathNode":{"id":1503,"name":"RecoverError","nameLocations":["3800:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"3800:12:8"},"referencedDeclaration":1401,"src":"3800:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1510,"initialValue":{"arguments":[{"id":1507,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"3833:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1508,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"3839:9:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1506,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1491,"src":"3822:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:8"},{"expression":{"arguments":[{"id":1512,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"3871:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1511,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"3859:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1401_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1514,"nodeType":"ExpressionStatement","src":"3859:18:8"},{"expression":{"id":1515,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"3894:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1500,"id":1516,"nodeType":"Return","src":"3887:16:8"}]},"documentation":{"id":1492,"nodeType":"StructuredDocumentation","src":"2903:775:8","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1518,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:8","nodeType":"FunctionDefinition","parameters":{"id":1497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1494,"mutability":"mutable","name":"hash","nameLocation":"3708:4:8","nodeType":"VariableDeclaration","scope":1518,"src":"3700:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"signature","nameLocation":"3727:9:8","nodeType":"VariableDeclaration","scope":1518,"src":"3714:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1495,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:8"},"returnParameters":{"id":1500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1499,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1518,"src":"3761:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1498,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:8"},"scope":1757,"src":"3683:227:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1564,"nodeType":"Block","src":"4267:203:8","statements":[{"assignments":[1534],"declarations":[{"constant":false,"id":1534,"mutability":"mutable","name":"s","nameLocation":"4285:1:8","nodeType":"VariableDeclaration","scope":1564,"src":"4277:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1533,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1541,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1535,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"4289:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:8","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1536,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:8","typeDescriptions":{}}},"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:8"},{"assignments":[1543],"declarations":[{"constant":false,"id":1543,"mutability":"mutable","name":"v","nameLocation":"4385:1:8","nodeType":"VariableDeclaration","scope":1564,"src":"4379:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1542,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1556,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1548,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"4404:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1546,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:8","typeDescriptions":{}}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:8","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1552,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:8","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1544,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:8","typeDescriptions":{}}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:8"},{"expression":{"arguments":[{"id":1558,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"4449:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1559,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"4455:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1560,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"4458:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1561,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"4461:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1557,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1659,"src":"4438:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1532,"id":1563,"nodeType":"Return","src":"4431:32:8"}]},"documentation":{"id":1519,"nodeType":"StructuredDocumentation","src":"3916:243:8","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1565,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:8","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"hash","nameLocation":"4192:4:8","nodeType":"VariableDeclaration","scope":1565,"src":"4184:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"r","nameLocation":"4206:1:8","nodeType":"VariableDeclaration","scope":1565,"src":"4198:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"vs","nameLocation":"4217:2:8","nodeType":"VariableDeclaration","scope":1565,"src":"4209:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1524,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:8"},"returnParameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1565,"src":"4244:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1527,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1565,"src":"4253:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1530,"nodeType":"UserDefinedTypeName","pathNode":{"id":1529,"name":"RecoverError","nameLocations":["4253:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"4253:12:8"},"referencedDeclaration":1401,"src":"4253:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:8"},"scope":1757,"src":"4164:306:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1594,"nodeType":"Block","src":"4721:136:8","statements":[{"assignments":[1578,1581],"declarations":[{"constant":false,"id":1578,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:8","nodeType":"VariableDeclaration","scope":1594,"src":"4732:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1577,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1581,"mutability":"mutable","name":"error","nameLocation":"4764:5:8","nodeType":"VariableDeclaration","scope":1594,"src":"4751:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1580,"nodeType":"UserDefinedTypeName","pathNode":{"id":1579,"name":"RecoverError","nameLocations":["4751:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"4751:12:8"},"referencedDeclaration":1401,"src":"4751:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1587,"initialValue":{"arguments":[{"id":1583,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"4784:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1584,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"4790:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1585,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"4793:2:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1582,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1565,"src":"4773:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:8"},{"expression":{"arguments":[{"id":1589,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"4818:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1588,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"4806:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1401_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1591,"nodeType":"ExpressionStatement","src":"4806:18:8"},{"expression":{"id":1592,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"4841:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1576,"id":1593,"nodeType":"Return","src":"4834:16:8"}]},"documentation":{"id":1566,"nodeType":"StructuredDocumentation","src":"4476:154:8","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1595,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:8","nodeType":"FunctionDefinition","parameters":{"id":1573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1568,"mutability":"mutable","name":"hash","nameLocation":"4660:4:8","nodeType":"VariableDeclaration","scope":1595,"src":"4652:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1567,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1570,"mutability":"mutable","name":"r","nameLocation":"4674:1:8","nodeType":"VariableDeclaration","scope":1595,"src":"4666:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1572,"mutability":"mutable","name":"vs","nameLocation":"4685:2:8","nodeType":"VariableDeclaration","scope":1595,"src":"4677:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:8"},"returnParameters":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1595,"src":"4712:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1574,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:8"},"scope":1757,"src":"4635:222:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1658,"nodeType":"Block","src":"5142:1345:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1614,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6038:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1612,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:8","typeDescriptions":{}}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:8","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1627,"nodeType":"IfStatement","src":"6026:161:8","trueBody":{"id":1626,"nodeType":"Block","src":"6111:76:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1618,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:8","typeDescriptions":{}}},"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1622,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"6145:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:8","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1399,"src":"6145:30:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1624,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1611,"id":1625,"nodeType":"Return","src":"6125:51:8"}]}},{"assignments":[1629],"declarations":[{"constant":false,"id":1629,"mutability":"mutable","name":"signer","nameLocation":"6289:6:8","nodeType":"VariableDeclaration","scope":1658,"src":"6281:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1628,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1636,"initialValue":{"arguments":[{"id":1631,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1598,"src":"6308:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1632,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"6314:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1633,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1602,"src":"6317:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1634,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"6320:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1630,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:8","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:8"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1637,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"6336:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1638,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:8","typeDescriptions":{}}},"id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1652,"nodeType":"IfStatement","src":"6332:101:8","trueBody":{"id":1651,"nodeType":"Block","src":"6358:75:8","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1643,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:8","typeDescriptions":{}}},"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1647,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"6392:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:8","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1397,"src":"6392:29:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1649,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1611,"id":1650,"nodeType":"Return","src":"6372:50:8"}]}},{"expression":{"components":[{"id":1653,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"6451:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1654,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"6459:12:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1401_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:8","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1396,"src":"6459:20:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1656,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1611,"id":1657,"nodeType":"Return","src":"6443:37:8"}]},"documentation":{"id":1596,"nodeType":"StructuredDocumentation","src":"4863:163:8","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1659,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:8","nodeType":"FunctionDefinition","parameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1598,"mutability":"mutable","name":"hash","nameLocation":"5059:4:8","nodeType":"VariableDeclaration","scope":1659,"src":"5051:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"v","nameLocation":"5071:1:8","nodeType":"VariableDeclaration","scope":1659,"src":"5065:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1599,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1602,"mutability":"mutable","name":"r","nameLocation":"5082:1:8","nodeType":"VariableDeclaration","scope":1659,"src":"5074:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1604,"mutability":"mutable","name":"s","nameLocation":"5093:1:8","nodeType":"VariableDeclaration","scope":1659,"src":"5085:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:8"},"returnParameters":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1659,"src":"5119:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1606,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1659,"src":"5128:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1609,"nodeType":"UserDefinedTypeName","pathNode":{"id":1608,"name":"RecoverError","nameLocations":["5128:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"5128:12:8"},"referencedDeclaration":1401,"src":"5128:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:8"},"scope":1757,"src":"5031:1456:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1691,"nodeType":"Block","src":"6714:138:8","statements":[{"assignments":[1674,1677],"declarations":[{"constant":false,"id":1674,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:8","nodeType":"VariableDeclaration","scope":1691,"src":"6725:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1673,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1677,"mutability":"mutable","name":"error","nameLocation":"6757:5:8","nodeType":"VariableDeclaration","scope":1691,"src":"6744:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1676,"nodeType":"UserDefinedTypeName","pathNode":{"id":1675,"name":"RecoverError","nameLocations":["6744:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1401,"src":"6744:12:8"},"referencedDeclaration":1401,"src":"6744:12:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1684,"initialValue":{"arguments":[{"id":1679,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"6777:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1680,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"6783:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1681,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"6786:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1682,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"6789:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1678,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1491,1565,1659],"referencedDeclaration":1659,"src":"6766:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1401_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:8"},{"expression":{"arguments":[{"id":1686,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"6813:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1401","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1685,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6801:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1401_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1688,"nodeType":"ExpressionStatement","src":"6801:18:8"},{"expression":{"id":1689,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"6836:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1672,"id":1690,"nodeType":"Return","src":"6829:16:8"}]},"documentation":{"id":1660,"nodeType":"StructuredDocumentation","src":"6493:122:8","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1692,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:8","nodeType":"FunctionDefinition","parameters":{"id":1669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1662,"mutability":"mutable","name":"hash","nameLocation":"6645:4:8","nodeType":"VariableDeclaration","scope":1692,"src":"6637:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1661,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1664,"mutability":"mutable","name":"v","nameLocation":"6657:1:8","nodeType":"VariableDeclaration","scope":1692,"src":"6651:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1663,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1666,"mutability":"mutable","name":"r","nameLocation":"6668:1:8","nodeType":"VariableDeclaration","scope":1692,"src":"6660:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1668,"mutability":"mutable","name":"s","nameLocation":"6679:1:8","nodeType":"VariableDeclaration","scope":1692,"src":"6671:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1667,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:8"},"returnParameters":{"id":1672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1692,"src":"6705:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1670,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:8"},"scope":1757,"src":"6620:232:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1701,"nodeType":"Block","src":"7228:310:8","statements":[{"AST":{"nodeType":"YulBlock","src":"7384:148:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:4:8","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7411:34:8","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7398:6:8"},"nodeType":"YulFunctionCall","src":"7398:48:8"},"nodeType":"YulExpressionStatement","src":"7398:48:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7466:4:8","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7472:4:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:8"},"nodeType":"YulFunctionCall","src":"7459:18:8"},"nodeType":"YulExpressionStatement","src":"7459:18:8"},{"nodeType":"YulAssignment","src":"7490:32:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7511:4:8","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7517:4:8","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7501:9:8"},"nodeType":"YulFunctionCall","src":"7501:21:8"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7490:7:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1695,"isOffset":false,"isSlot":false,"src":"7472:4:8","valueSize":1},{"declaration":1698,"isOffset":false,"isSlot":false,"src":"7490:7:8","valueSize":1}],"id":1700,"nodeType":"InlineAssembly","src":"7375:157:8"}]},"documentation":{"id":1693,"nodeType":"StructuredDocumentation","src":"6858:279:8","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1702,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:8","nodeType":"FunctionDefinition","parameters":{"id":1696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1695,"mutability":"mutable","name":"hash","nameLocation":"7182:4:8","nodeType":"VariableDeclaration","scope":1702,"src":"7174:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1694,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:8"},"returnParameters":{"id":1699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1698,"mutability":"mutable","name":"message","nameLocation":"7219:7:8","nodeType":"VariableDeclaration","scope":1702,"src":"7211:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:8"},"scope":1757,"src":"7142:396:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1723,"nodeType":"Block","src":"7903:127:8","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1716,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"8009:1:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:8","memberName":"length","nodeType":"MemberAccess","src":"8009:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1714,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"7981:18:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1391_$","typeString":"type(library StringsUpgradeable)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:8","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1221,"src":"7981:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1719,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"8020:1:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1711,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1710,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1709,"id":1722,"nodeType":"Return","src":"7913:110:8"}]},"documentation":{"id":1703,"nodeType":"StructuredDocumentation","src":"7544:274:8","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1724,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:8","nodeType":"FunctionDefinition","parameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1705,"mutability":"mutable","name":"s","nameLocation":"7868:1:8","nodeType":"VariableDeclaration","scope":1724,"src":"7855:14:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1704,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:8"},"returnParameters":{"id":1709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1724,"src":"7894:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:8"},"scope":1757,"src":"7823:207:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1735,"nodeType":"Block","src":"8476:290:8","statements":[{"AST":{"nodeType":"YulBlock","src":"8538:222:8","statements":[{"nodeType":"YulVariableDeclaration","src":"8552:22:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8569:4:8","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8563:5:8"},"nodeType":"YulFunctionCall","src":"8563:11:8"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8556:3:8","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8594:3:8"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8599:10:8","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8587:6:8"},"nodeType":"YulFunctionCall","src":"8587:23:8"},"nodeType":"YulExpressionStatement","src":"8587:23:8"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8634:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8639:4:8","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8630:3:8"},"nodeType":"YulFunctionCall","src":"8630:14:8"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8646:15:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8623:6:8"},"nodeType":"YulFunctionCall","src":"8623:39:8"},"nodeType":"YulExpressionStatement","src":"8623:39:8"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8686:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8691:4:8","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:8"},"nodeType":"YulFunctionCall","src":"8682:14:8"},{"name":"structHash","nodeType":"YulIdentifier","src":"8698:10:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:8"},"nodeType":"YulFunctionCall","src":"8675:34:8"},"nodeType":"YulExpressionStatement","src":"8675:34:8"},{"nodeType":"YulAssignment","src":"8722:28:8","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8740:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:8","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8730:9:8"},"nodeType":"YulFunctionCall","src":"8730:20:8"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8722:4:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1732,"isOffset":false,"isSlot":false,"src":"8722:4:8","valueSize":1},{"declaration":1727,"isOffset":false,"isSlot":false,"src":"8646:15:8","valueSize":1},{"declaration":1729,"isOffset":false,"isSlot":false,"src":"8698:10:8","valueSize":1}],"id":1734,"nodeType":"InlineAssembly","src":"8529:231:8"}]},"documentation":{"id":1725,"nodeType":"StructuredDocumentation","src":"8036:328:8","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1736,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:8","nodeType":"FunctionDefinition","parameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:8","nodeType":"VariableDeclaration","scope":1736,"src":"8394:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1726,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1729,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:8","nodeType":"VariableDeclaration","scope":1736,"src":"8419:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:8"},"returnParameters":{"id":1733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1732,"mutability":"mutable","name":"data","nameLocation":"8470:4:8","nodeType":"VariableDeclaration","scope":1736,"src":"8462:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:8"},"scope":1757,"src":"8369:397:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1755,"nodeType":"Block","src":"9081:80:8","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1750,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"9137:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1751,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"9148:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1747,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1746,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1745,"id":1754,"nodeType":"Return","src":"9091:63:8"}]},"documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"8772:193:8","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":1756,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:8","nodeType":"FunctionDefinition","parameters":{"id":1742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"validator","nameLocation":"9019:9:8","nodeType":"VariableDeclaration","scope":1756,"src":"9011:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1738,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1741,"mutability":"mutable","name":"data","nameLocation":"9043:4:8","nodeType":"VariableDeclaration","scope":1756,"src":"9030:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1740,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:8"},"returnParameters":{"id":1745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1744,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1756,"src":"9072:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1743,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:8"},"scope":1757,"src":"8970:191:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1758,"src":"380:8783:8","usedErrors":[]}],"src":"112:9052:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2623]},"id":2624,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1759,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1760,"nodeType":"StructuredDocumentation","src":"128:73:9","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2623,"linearizedBaseContracts":[2623],"name":"MathUpgradeable","nameLocation":"210:15:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1764,"members":[{"id":1761,"name":"Down","nameLocation":"256:4:9","nodeType":"EnumValue","src":"256:4:9"},{"id":1762,"name":"Up","nameLocation":"298:2:9","nodeType":"EnumValue","src":"298:2:9"},{"id":1763,"name":"Zero","nameLocation":"329:4:9","nodeType":"EnumValue","src":"329:4:9"}],"name":"Rounding","nameLocation":"237:8:9","nodeType":"EnumDefinition","src":"232:122:9"},{"body":{"id":1781,"nodeType":"Block","src":"491:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1774,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"508:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1775,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"512:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1778,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"520:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:9","trueExpression":{"id":1777,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"516:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1773,"id":1780,"nodeType":"Return","src":"501:20:9"}]},"documentation":{"id":1765,"nodeType":"StructuredDocumentation","src":"360:59:9","text":" @dev Returns the largest of two numbers."},"id":1782,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:9","nodeType":"FunctionDefinition","parameters":{"id":1770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1767,"mutability":"mutable","name":"a","nameLocation":"445:1:9","nodeType":"VariableDeclaration","scope":1782,"src":"437:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1766,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1769,"mutability":"mutable","name":"b","nameLocation":"456:1:9","nodeType":"VariableDeclaration","scope":1782,"src":"448:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:9"},"returnParameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1782,"src":"482:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:9"},"scope":2623,"src":"424:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1799,"nodeType":"Block","src":"666:37:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1792,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"683:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1793,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"687:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1796,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1787,"src":"695:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:9","trueExpression":{"id":1795,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"691:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1791,"id":1798,"nodeType":"Return","src":"676:20:9"}]},"documentation":{"id":1783,"nodeType":"StructuredDocumentation","src":"534:60:9","text":" @dev Returns the smallest of two numbers."},"id":1800,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:9","nodeType":"FunctionDefinition","parameters":{"id":1788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"a","nameLocation":"620:1:9","nodeType":"VariableDeclaration","scope":1800,"src":"612:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1784,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1787,"mutability":"mutable","name":"b","nameLocation":"631:1:9","nodeType":"VariableDeclaration","scope":1800,"src":"623:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1786,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:9"},"returnParameters":{"id":1791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1800,"src":"657:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1789,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:9"},"scope":2623,"src":"599:104:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1822,"nodeType":"Block","src":"887:82:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1810,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"942:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1811,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"946:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1813,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1814,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1803,"src":"952:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1815,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"956:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1817,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1809,"id":1821,"nodeType":"Return","src":"934:28:9"}]},"documentation":{"id":1801,"nodeType":"StructuredDocumentation","src":"709:102:9","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:9","nodeType":"FunctionDefinition","parameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1803,"mutability":"mutable","name":"a","nameLocation":"841:1:9","nodeType":"VariableDeclaration","scope":1823,"src":"833:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1802,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1805,"mutability":"mutable","name":"b","nameLocation":"852:1:9","nodeType":"VariableDeclaration","scope":1823,"src":"844:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:9"},"returnParameters":{"id":1809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"878:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1807,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:9"},"scope":2623,"src":"816:153:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1847,"nodeType":"Block","src":"1239:123:9","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1833,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"1327:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1837,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"1341:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1840,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1841,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"1350:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:9","trueExpression":{"hexValue":"30","id":1836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1832,"id":1846,"nodeType":"Return","src":"1320:35:9"}]},"documentation":{"id":1824,"nodeType":"StructuredDocumentation","src":"975:188:9","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1848,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:9","nodeType":"FunctionDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1826,"mutability":"mutable","name":"a","nameLocation":"1193:1:9","nodeType":"VariableDeclaration","scope":1848,"src":"1185:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1825,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"b","nameLocation":"1204:1:9","nodeType":"VariableDeclaration","scope":1848,"src":"1196:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1827,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:9"},"returnParameters":{"id":1832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1848,"src":"1230:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1830,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:9"},"scope":2623,"src":"1168:194:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1970,"nodeType":"Block","src":"1776:4115:9","statements":[{"id":1969,"nodeType":"UncheckedBlock","src":"1786:4099:9","statements":[{"assignments":[1861],"declarations":[{"constant":false,"id":1861,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:9","nodeType":"VariableDeclaration","scope":1969,"src":"2107:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1860,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1862,"nodeType":"VariableDeclarationStatement","src":"2107:13:9"},{"assignments":[1864],"declarations":[{"constant":false,"id":1864,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:9","nodeType":"VariableDeclaration","scope":1969,"src":"2179:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1865,"nodeType":"VariableDeclarationStatement","src":"2179:13:9"},{"AST":{"nodeType":"YulBlock","src":"2259:157:9","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:9"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:9","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:9"},"nodeType":"YulFunctionCall","src":"2300:6:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:9"},"nodeType":"YulFunctionCall","src":"2287:20:9"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:9","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:9"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:9"},"nodeType":"YulFunctionCall","src":"2333:9:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:9"}]},{"nodeType":"YulAssignment","src":"2359:43:9","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:9"},"nodeType":"YulFunctionCall","src":"2372:14:9"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:9"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:9"},"nodeType":"YulFunctionCall","src":"2388:13:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:9"},"nodeType":"YulFunctionCall","src":"2368:34:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1861,"isOffset":false,"isSlot":false,"src":"2324:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"2380:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"2395:5:9","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"2359:5:9","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"2294:1:9","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"2337:1:9","valueSize":1},{"declaration":1853,"isOffset":false,"isSlot":false,"src":"2297:1:9","valueSize":1},{"declaration":1853,"isOffset":false,"isSlot":false,"src":"2340:1:9","valueSize":1}],"id":1866,"nodeType":"InlineAssembly","src":"2250:166:9"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1867,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"2497:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1875,"nodeType":"IfStatement","src":"2493:368:9","trueBody":{"id":1874,"nodeType":"Block","src":"2509:352:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1870,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"2827:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1871,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"2835:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1859,"id":1873,"nodeType":"Return","src":"2820:26:9"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1877,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"2971:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1878,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"2985:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1876,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1882,"nodeType":"ExpressionStatement","src":"2963:53:9"},{"assignments":[1884],"declarations":[{"constant":false,"id":1884,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:9","nodeType":"VariableDeclaration","scope":1969,"src":"3272:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1885,"nodeType":"VariableDeclarationStatement","src":"3272:17:9"},{"AST":{"nodeType":"YulBlock","src":"3312:291:9","statements":[{"nodeType":"YulAssignment","src":"3381:38:9","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:9"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:9"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:9"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:9"},"nodeType":"YulFunctionCall","src":"3394:25:9"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:9"}]},{"nodeType":"YulAssignment","src":"3501:41:9","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:9"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:9"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:9"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:9"},"nodeType":"YulFunctionCall","src":"3521:20:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:9"},"nodeType":"YulFunctionCall","src":"3510:32:9"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:9"}]},{"nodeType":"YulAssignment","src":"3559:30:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:9"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:9"},"nodeType":"YulFunctionCall","src":"3568:21:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1855,"isOffset":false,"isSlot":false,"src":"3407:11:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"3535:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"3559:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"3572:5:9","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"3501:5:9","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"3514:5:9","valueSize":1},{"declaration":1884,"isOffset":false,"isSlot":false,"src":"3381:9:9","valueSize":1},{"declaration":1884,"isOffset":false,"isSlot":false,"src":"3524:9:9","valueSize":1},{"declaration":1884,"isOffset":false,"isSlot":false,"src":"3579:9:9","valueSize":1},{"declaration":1851,"isOffset":false,"isSlot":false,"src":"3401:1:9","valueSize":1},{"declaration":1853,"isOffset":false,"isSlot":false,"src":"3404:1:9","valueSize":1}],"id":1886,"nodeType":"InlineAssembly","src":"3303:300:9"},{"assignments":[1888],"declarations":[{"constant":false,"id":1888,"mutability":"mutable","name":"twos","nameLocation":"3918:4:9","nodeType":"VariableDeclaration","scope":1969,"src":"3910:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1896,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1889,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"3925:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:9","subExpression":{"id":1890,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"3941:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1894,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:9"},{"AST":{"nodeType":"YulBlock","src":"3980:362:9","statements":[{"nodeType":"YulAssignment","src":"4045:37:9","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:9"},"nodeType":"YulFunctionCall","src":"4060:22:9"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:9"}]},{"nodeType":"YulAssignment","src":"4149:25:9","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:9"},"nodeType":"YulFunctionCall","src":"4158:16:9"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:9"}]},{"nodeType":"YulAssignment","src":"4289:39:9","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:9","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:9"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:9"},"nodeType":"YulFunctionCall","src":"4305:12:9"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:9"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:9"},"nodeType":"YulFunctionCall","src":"4301:23:9"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:9","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:9"},"nodeType":"YulFunctionCall","src":"4297:31:9"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:9"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1855,"isOffset":false,"isSlot":false,"src":"4045:11:9","valueSize":1},{"declaration":1855,"isOffset":false,"isSlot":false,"src":"4064:11:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"4149:5:9","valueSize":1},{"declaration":1861,"isOffset":false,"isSlot":false,"src":"4162:5:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4077:4:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4169:4:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4289:4:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4312:4:9","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"4319:4:9","valueSize":1}],"id":1897,"nodeType":"InlineAssembly","src":"3971:371:9"},{"expression":{"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1898,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"4408:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1899,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"4417:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1900,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"4425:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1903,"nodeType":"ExpressionStatement","src":"4408:21:9"},{"assignments":[1905],"declarations":[{"constant":false,"id":1905,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:9","nodeType":"VariableDeclaration","scope":1969,"src":"4747:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1912,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1907,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"4770:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1909,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:9"},{"expression":{"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1913,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5003:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1915,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5018:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1916,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5032:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1920,"nodeType":"ExpressionStatement","src":"5003:36:9"},{"expression":{"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1921,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5072:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1923,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5087:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1924,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5101:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1928,"nodeType":"ExpressionStatement","src":"5072:36:9"},{"expression":{"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1929,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5142:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1931,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5157:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1932,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5171:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1936,"nodeType":"ExpressionStatement","src":"5142:36:9"},{"expression":{"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1937,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5212:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1939,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5227:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1940,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5241:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1944,"nodeType":"ExpressionStatement","src":"5212:36:9"},{"expression":{"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1945,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5282:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1947,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5297:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1948,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5311:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1952,"nodeType":"ExpressionStatement","src":"5282:36:9"},{"expression":{"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1953,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5353:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"5368:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1956,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5382:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1960,"nodeType":"ExpressionStatement","src":"5353:36:9"},{"expression":{"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"5823:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1962,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"5832:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1963,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"5840:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1966,"nodeType":"ExpressionStatement","src":"5823:24:9"},{"expression":{"id":1967,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"5868:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1859,"id":1968,"nodeType":"Return","src":"5861:13:9"}]}]},"documentation":{"id":1849,"nodeType":"StructuredDocumentation","src":"1368:305:9","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1971,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:9","nodeType":"FunctionDefinition","parameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1851,"mutability":"mutable","name":"x","nameLocation":"1702:1:9","nodeType":"VariableDeclaration","scope":1971,"src":"1694:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"y","nameLocation":"1713:1:9","nodeType":"VariableDeclaration","scope":1971,"src":"1705:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1855,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:9","nodeType":"VariableDeclaration","scope":1971,"src":"1716:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1854,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:9"},"returnParameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"mutability":"mutable","name":"result","nameLocation":"1768:6:9","nodeType":"VariableDeclaration","scope":1971,"src":"1760:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:9"},"scope":2623,"src":"1678:4213:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2014,"nodeType":"Block","src":"6133:189:9","statements":[{"assignments":[1987],"declarations":[{"constant":false,"id":1987,"mutability":"mutable","name":"result","nameLocation":"6151:6:9","nodeType":"VariableDeclaration","scope":2014,"src":"6143:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1986,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1993,"initialValue":{"arguments":[{"id":1989,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"6167:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1990,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"6170:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1991,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"6173:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1988,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1971,2015],"referencedDeclaration":1971,"src":"6160:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:9"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1994,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1981,"src":"6199:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1995,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"6211:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"6211:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1999,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"6233:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2000,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"6236:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2001,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"6239:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1998,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:9","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2011,"nodeType":"IfStatement","src":"6195:98:9","trueBody":{"id":2010,"nodeType":"Block","src":"6257:36:9","statements":[{"expression":{"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2006,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"6271:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2009,"nodeType":"ExpressionStatement","src":"6271:11:9"}]}},{"expression":{"id":2012,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"6309:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1985,"id":2013,"nodeType":"Return","src":"6302:13:9"}]},"documentation":{"id":1972,"nodeType":"StructuredDocumentation","src":"5897:121:9","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2015,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:9","nodeType":"FunctionDefinition","parameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1974,"mutability":"mutable","name":"x","nameLocation":"6047:1:9","nodeType":"VariableDeclaration","scope":2015,"src":"6039:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1973,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1976,"mutability":"mutable","name":"y","nameLocation":"6058:1:9","nodeType":"VariableDeclaration","scope":2015,"src":"6050:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1975,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1978,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:9","nodeType":"VariableDeclaration","scope":2015,"src":"6061:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1977,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1981,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:9","nodeType":"VariableDeclaration","scope":2015,"src":"6082:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1980,"nodeType":"UserDefinedTypeName","pathNode":{"id":1979,"name":"Rounding","nameLocations":["6082:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"6082:8:9"},"referencedDeclaration":1764,"src":"6082:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:9"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2015,"src":"6124:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1983,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:9"},"scope":2623,"src":"6023:299:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2126,"nodeType":"Block","src":"6598:1585:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"6612:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2029,"nodeType":"IfStatement","src":"6608:45:9","trueBody":{"id":2028,"nodeType":"Block","src":"6620:33:9","statements":[{"expression":{"hexValue":"30","id":2026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2022,"id":2027,"nodeType":"Return","src":"6634:8:9"}]}},{"assignments":[2031],"declarations":[{"constant":false,"id":2031,"mutability":"mutable","name":"result","nameLocation":"7340:6:9","nodeType":"VariableDeclaration","scope":2126,"src":"7332:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2030,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2040,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2034,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7360:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2033,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2295,2331],"referencedDeclaration":2295,"src":"7355:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2038,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:9"},{"id":2125,"nodeType":"UncheckedBlock","src":"7769:408:9","statements":[{"expression":{"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2041,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7793:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2042,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7803:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2043,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7812:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2044,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7816:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2047,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2051,"nodeType":"ExpressionStatement","src":"7793:35:9"},{"expression":{"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2052,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7842:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2053,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7852:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2054,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7861:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2055,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7865:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2058,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2062,"nodeType":"ExpressionStatement","src":"7842:35:9"},{"expression":{"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2063,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7891:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2064,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7901:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2065,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7910:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7914:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2069,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2073,"nodeType":"ExpressionStatement","src":"7891:35:9"},{"expression":{"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2074,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7940:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2075,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7950:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2076,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"7959:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2077,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7963:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2080,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2084,"nodeType":"ExpressionStatement","src":"7940:35:9"},{"expression":{"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2085,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7989:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2086,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"7999:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2087,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8008:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2088,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8012:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2091,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2095,"nodeType":"ExpressionStatement","src":"7989:35:9"},{"expression":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8038:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2097,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8048:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2098,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8057:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2099,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8061:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2106,"nodeType":"ExpressionStatement","src":"8038:35:9"},{"expression":{"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2107,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8087:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2108,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8097:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2109,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8106:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2110,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8110:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2113,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2117,"nodeType":"ExpressionStatement","src":"8087:35:9"},{"expression":{"arguments":[{"id":2119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8147:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8155:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2121,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"8159:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2118,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1800,"src":"8143:3:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2022,"id":2124,"nodeType":"Return","src":"8136:30:9"}]}]},"documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"6328:208:9","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2127,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:9","nodeType":"FunctionDefinition","parameters":{"id":2019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2018,"mutability":"mutable","name":"a","nameLocation":"6563:1:9","nodeType":"VariableDeclaration","scope":2127,"src":"6555:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2017,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:9"},"returnParameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2127,"src":"6589:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2020,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:9"},"scope":2623,"src":"6541:1642:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2162,"nodeType":"Block","src":"8359:161:9","statements":[{"id":2161,"nodeType":"UncheckedBlock","src":"8369:145:9","statements":[{"assignments":[2139],"declarations":[{"constant":false,"id":2139,"mutability":"mutable","name":"result","nameLocation":"8401:6:9","nodeType":"VariableDeclaration","scope":2161,"src":"8393:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2138,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2143,"initialValue":{"arguments":[{"id":2141,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"8415:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2140,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2127,2163],"referencedDeclaration":2127,"src":"8410:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2144,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"8438:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2145,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"8448:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2146,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"8460:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"8460:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"8475:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"8484:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2152,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2130,"src":"8493:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:9","trueExpression":{"hexValue":"31","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2158,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2137,"id":2160,"nodeType":"Return","src":"8431:72:9"}]}]},"documentation":{"id":2128,"nodeType":"StructuredDocumentation","src":"8189:89:9","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2163,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:9","nodeType":"FunctionDefinition","parameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2130,"mutability":"mutable","name":"a","nameLocation":"8305:1:9","nodeType":"VariableDeclaration","scope":2163,"src":"8297:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2129,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2133,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:9","nodeType":"VariableDeclaration","scope":2163,"src":"8308:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2132,"nodeType":"UserDefinedTypeName","pathNode":{"id":2131,"name":"Rounding","nameLocations":["8308:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"8308:8:9"},"referencedDeclaration":1764,"src":"8308:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:9"},"returnParameters":{"id":2137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2163,"src":"8350:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2135,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:9"},"scope":2623,"src":"8283:237:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2294,"nodeType":"Block","src":"8705:922:9","statements":[{"assignments":[2172],"declarations":[{"constant":false,"id":2172,"mutability":"mutable","name":"result","nameLocation":"8723:6:9","nodeType":"VariableDeclaration","scope":2294,"src":"8715:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2171,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2174,"initialValue":{"hexValue":"30","id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:9"},{"id":2291,"nodeType":"UncheckedBlock","src":"8743:855:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8771:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2189,"nodeType":"IfStatement","src":"8767:99:9","trueBody":{"id":2188,"nodeType":"Block","src":"8789:77:9","statements":[{"expression":{"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2180,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8807:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2183,"nodeType":"ExpressionStatement","src":"8807:13:9"},{"expression":{"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2184,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"8838:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2187,"nodeType":"ExpressionStatement","src":"8838:13:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2190,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8883:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2204,"nodeType":"IfStatement","src":"8879:96:9","trueBody":{"id":2203,"nodeType":"Block","src":"8900:75:9","statements":[{"expression":{"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2195,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8918:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2198,"nodeType":"ExpressionStatement","src":"8918:12:9"},{"expression":{"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"8948:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2202,"nodeType":"ExpressionStatement","src":"8948:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2205,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"8992:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2219,"nodeType":"IfStatement","src":"8988:96:9","trueBody":{"id":2218,"nodeType":"Block","src":"9009:75:9","statements":[{"expression":{"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9027:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2213,"nodeType":"ExpressionStatement","src":"9027:12:9"},{"expression":{"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2214,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9057:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2217,"nodeType":"ExpressionStatement","src":"9057:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2220,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9101:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2234,"nodeType":"IfStatement","src":"9097:96:9","trueBody":{"id":2233,"nodeType":"Block","src":"9118:75:9","statements":[{"expression":{"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9136:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2228,"nodeType":"ExpressionStatement","src":"9136:12:9"},{"expression":{"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2229,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9166:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2232,"nodeType":"ExpressionStatement","src":"9166:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9210:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2249,"nodeType":"IfStatement","src":"9206:93:9","trueBody":{"id":2248,"nodeType":"Block","src":"9226:73:9","statements":[{"expression":{"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9244:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2243,"nodeType":"ExpressionStatement","src":"9244:11:9"},{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2244,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9273:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"9273:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2250,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9316:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2264,"nodeType":"IfStatement","src":"9312:93:9","trueBody":{"id":2263,"nodeType":"Block","src":"9332:73:9","statements":[{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2255,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9350:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"9350:11:9"},{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9379:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"9379:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9422:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2279,"nodeType":"IfStatement","src":"9418:93:9","trueBody":{"id":2278,"nodeType":"Block","src":"9438:73:9","statements":[{"expression":{"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9456:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2273,"nodeType":"ExpressionStatement","src":"9456:11:9"},{"expression":{"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2274,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9485:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2277,"nodeType":"ExpressionStatement","src":"9485:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2280,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2166,"src":"9528:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2290,"nodeType":"IfStatement","src":"9524:64:9","trueBody":{"id":2289,"nodeType":"Block","src":"9544:44:9","statements":[{"expression":{"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2285,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9562:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2288,"nodeType":"ExpressionStatement","src":"9562:11:9"}]}}]},{"expression":{"id":2292,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9614:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2170,"id":2293,"nodeType":"Return","src":"9607:13:9"}]},"documentation":{"id":2164,"nodeType":"StructuredDocumentation","src":"8526:113:9","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:9","nodeType":"FunctionDefinition","parameters":{"id":2167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2166,"mutability":"mutable","name":"value","nameLocation":"8666:5:9","nodeType":"VariableDeclaration","scope":2295,"src":"8658:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2165,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:9"},"returnParameters":{"id":2170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2295,"src":"8696:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2168,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:9"},"scope":2623,"src":"8644:983:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2330,"nodeType":"Block","src":"9860:165:9","statements":[{"id":2329,"nodeType":"UncheckedBlock","src":"9870:149:9","statements":[{"assignments":[2307],"declarations":[{"constant":false,"id":2307,"mutability":"mutable","name":"result","nameLocation":"9902:6:9","nodeType":"VariableDeclaration","scope":2329,"src":"9894:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2306,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2311,"initialValue":{"arguments":[{"id":2309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"9916:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2308,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2295,2331],"referencedDeclaration":2295,"src":"9911:4:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9943:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"9953:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2314,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"9965:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"9965:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2318,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2307,"src":"9985:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2320,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"9994:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:9","trueExpression":{"hexValue":"31","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2305,"id":2328,"nodeType":"Return","src":"9936:72:9"}]}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"9633:142:9","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2331,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:9","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"mutability":"mutable","name":"value","nameLocation":"9802:5:9","nodeType":"VariableDeclaration","scope":2331,"src":"9794:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2297,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:9","nodeType":"VariableDeclaration","scope":2331,"src":"9809:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2300,"nodeType":"UserDefinedTypeName","pathNode":{"id":2299,"name":"Rounding","nameLocations":["9809:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"9809:8:9"},"referencedDeclaration":1764,"src":"9809:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:9"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2331,"src":"9851:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2303,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:9"},"scope":2623,"src":"9780:245:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2459,"nodeType":"Block","src":"10212:854:9","statements":[{"assignments":[2340],"declarations":[{"constant":false,"id":2340,"mutability":"mutable","name":"result","nameLocation":"10230:6:9","nodeType":"VariableDeclaration","scope":2459,"src":"10222:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2339,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2342,"initialValue":{"hexValue":"30","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:9"},{"id":2456,"nodeType":"UncheckedBlock","src":"10250:787:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2343,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10278:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2359,"nodeType":"IfStatement","src":"10274:103:9","trueBody":{"id":2358,"nodeType":"Block","src":"10297:80:9","statements":[{"expression":{"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2348,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10315:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2353,"nodeType":"ExpressionStatement","src":"10315:17:9"},{"expression":{"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10350:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2357,"nodeType":"ExpressionStatement","src":"10350:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2360,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10394:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2376,"nodeType":"IfStatement","src":"10390:103:9","trueBody":{"id":2375,"nodeType":"Block","src":"10413:80:9","statements":[{"expression":{"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2365,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10431:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2370,"nodeType":"ExpressionStatement","src":"10431:17:9"},{"expression":{"id":2373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10466:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2374,"nodeType":"ExpressionStatement","src":"10466:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10510:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2380,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2378,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2393,"nodeType":"IfStatement","src":"10506:103:9","trueBody":{"id":2392,"nodeType":"Block","src":"10529:80:9","statements":[{"expression":{"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10547:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2387,"nodeType":"ExpressionStatement","src":"10547:17:9"},{"expression":{"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2388,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10582:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2391,"nodeType":"ExpressionStatement","src":"10582:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2394,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10626:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2410,"nodeType":"IfStatement","src":"10622:100:9","trueBody":{"id":2409,"nodeType":"Block","src":"10644:78:9","statements":[{"expression":{"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10662:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2404,"nodeType":"ExpressionStatement","src":"10662:16:9"},{"expression":{"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2405,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10696:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2408,"nodeType":"ExpressionStatement","src":"10696:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2411,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10739:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2427,"nodeType":"IfStatement","src":"10735:100:9","trueBody":{"id":2426,"nodeType":"Block","src":"10757:78:9","statements":[{"expression":{"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10775:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2421,"nodeType":"ExpressionStatement","src":"10775:16:9"},{"expression":{"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2422,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10809:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2425,"nodeType":"ExpressionStatement","src":"10809:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2428,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10852:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2444,"nodeType":"IfStatement","src":"10848:100:9","trueBody":{"id":2443,"nodeType":"Block","src":"10870:78:9","statements":[{"expression":{"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2433,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10888:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2438,"nodeType":"ExpressionStatement","src":"10888:16:9"},{"expression":{"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2439,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"10922:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2442,"nodeType":"ExpressionStatement","src":"10922:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2445,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"10965:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2455,"nodeType":"IfStatement","src":"10961:66:9","trueBody":{"id":2454,"nodeType":"Block","src":"10983:44:9","statements":[{"expression":{"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"11001:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2453,"nodeType":"ExpressionStatement","src":"11001:11:9"}]}}]},{"expression":{"id":2457,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"11053:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2338,"id":2458,"nodeType":"Return","src":"11046:13:9"}]},"documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"10031:114:9","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2460,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:9","nodeType":"FunctionDefinition","parameters":{"id":2335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2334,"mutability":"mutable","name":"value","nameLocation":"10173:5:9","nodeType":"VariableDeclaration","scope":2460,"src":"10165:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:9"},"returnParameters":{"id":2338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2337,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2460,"src":"10203:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2336,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:9"},"scope":2623,"src":"10150:916:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2495,"nodeType":"Block","src":"11301:167:9","statements":[{"id":2494,"nodeType":"UncheckedBlock","src":"11311:151:9","statements":[{"assignments":[2472],"declarations":[{"constant":false,"id":2472,"mutability":"mutable","name":"result","nameLocation":"11343:6:9","nodeType":"VariableDeclaration","scope":2494,"src":"11335:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2471,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2476,"initialValue":{"arguments":[{"id":2474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"11358:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2473,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2460,2496],"referencedDeclaration":2460,"src":"11352:5:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2477,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"11385:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":2481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2478,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"11395:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2479,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"11407:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"11407:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:9","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2483,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"11428:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"11437:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:9","trueExpression":{"hexValue":"31","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2491,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2470,"id":2493,"nodeType":"Return","src":"11378:73:9"}]}]},"documentation":{"id":2461,"nodeType":"StructuredDocumentation","src":"11072:143:9","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2496,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:9","nodeType":"FunctionDefinition","parameters":{"id":2467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2463,"mutability":"mutable","name":"value","nameLocation":"11243:5:9","nodeType":"VariableDeclaration","scope":2496,"src":"11235:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2466,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:9","nodeType":"VariableDeclaration","scope":2496,"src":"11250:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2465,"nodeType":"UserDefinedTypeName","pathNode":{"id":2464,"name":"Rounding","nameLocations":["11250:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"11250:8:9"},"referencedDeclaration":1764,"src":"11250:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:9"},"returnParameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2496,"src":"11292:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2468,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:9"},"scope":2623,"src":"11220:248:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2582,"nodeType":"Block","src":"11782:600:9","statements":[{"assignments":[2505],"declarations":[{"constant":false,"id":2505,"mutability":"mutable","name":"result","nameLocation":"11800:6:9","nodeType":"VariableDeclaration","scope":2582,"src":"11792:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2504,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2507,"initialValue":{"hexValue":"30","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:9"},{"id":2579,"nodeType":"UncheckedBlock","src":"11820:533:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11848:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2522,"nodeType":"IfStatement","src":"11844:98:9","trueBody":{"id":2521,"nodeType":"Block","src":"11866:76:9","statements":[{"expression":{"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2513,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11884:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:9","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2516,"nodeType":"ExpressionStatement","src":"11884:13:9"},{"expression":{"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2517,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"11915:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2520,"nodeType":"ExpressionStatement","src":"11915:12:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2523,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11959:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2537,"nodeType":"IfStatement","src":"11955:95:9","trueBody":{"id":2536,"nodeType":"Block","src":"11976:74:9","statements":[{"expression":{"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2528,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"11994:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:9","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2531,"nodeType":"ExpressionStatement","src":"11994:12:9"},{"expression":{"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2532,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12024:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2535,"nodeType":"ExpressionStatement","src":"12024:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12067:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2552,"nodeType":"IfStatement","src":"12063:95:9","trueBody":{"id":2551,"nodeType":"Block","src":"12084:74:9","statements":[{"expression":{"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2543,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12102:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:9","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2546,"nodeType":"ExpressionStatement","src":"12102:12:9"},{"expression":{"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12132:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2550,"nodeType":"ExpressionStatement","src":"12132:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12175:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2567,"nodeType":"IfStatement","src":"12171:95:9","trueBody":{"id":2566,"nodeType":"Block","src":"12192:74:9","statements":[{"expression":{"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12210:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:9","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2561,"nodeType":"ExpressionStatement","src":"12210:12:9"},{"expression":{"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2562,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12240:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2565,"nodeType":"ExpressionStatement","src":"12240:11:9"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2568,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2499,"src":"12283:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2578,"nodeType":"IfStatement","src":"12279:64:9","trueBody":{"id":2577,"nodeType":"Block","src":"12299:44:9","statements":[{"expression":{"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2573,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12317:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2576,"nodeType":"ExpressionStatement","src":"12317:11:9"}]}}]},{"expression":{"id":2580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2505,"src":"12369:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2503,"id":2581,"nodeType":"Return","src":"12362:13:9"}]},"documentation":{"id":2497,"nodeType":"StructuredDocumentation","src":"11474:240:9","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2583,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:9","nodeType":"FunctionDefinition","parameters":{"id":2500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2499,"mutability":"mutable","name":"value","nameLocation":"11743:5:9","nodeType":"VariableDeclaration","scope":2583,"src":"11735:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2498,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:9"},"returnParameters":{"id":2503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2583,"src":"11773:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2501,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:9"},"scope":2623,"src":"11719:663:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2621,"nodeType":"Block","src":"12619:174:9","statements":[{"id":2620,"nodeType":"UncheckedBlock","src":"12629:158:9","statements":[{"assignments":[2595],"declarations":[{"constant":false,"id":2595,"mutability":"mutable","name":"result","nameLocation":"12661:6:9","nodeType":"VariableDeclaration","scope":2620,"src":"12653:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2599,"initialValue":{"arguments":[{"id":2597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"12677:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2596,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2583,2622],"referencedDeclaration":2583,"src":"12670:6:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:9"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2600,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"12704:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2601,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12714:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2602,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"12726:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1764_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:9","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1762,"src":"12726:11:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2606,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"12747:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2609,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2586,"src":"12762:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:9","trueExpression":{"hexValue":"31","id":2614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2617,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2593,"id":2619,"nodeType":"Return","src":"12697:79:9"}]}]},"documentation":{"id":2584,"nodeType":"StructuredDocumentation","src":"12388:144:9","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2622,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:9","nodeType":"FunctionDefinition","parameters":{"id":2590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"value","nameLocation":"12561:5:9","nodeType":"VariableDeclaration","scope":2622,"src":"12553:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2589,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:9","nodeType":"VariableDeclaration","scope":2622,"src":"12568:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2588,"nodeType":"UserDefinedTypeName","pathNode":{"id":2587,"name":"Rounding","nameLocations":["12568:8:9"],"nodeType":"IdentifierPath","referencedDeclaration":1764,"src":"12568:8:9"},"referencedDeclaration":1764,"src":"12568:8:9","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1764","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:9"},"returnParameters":{"id":2593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2592,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2622,"src":"12610:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2591,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:9"},"scope":2623,"src":"12537:256:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2624,"src":"202:12593:9","usedErrors":[]}],"src":"103:12693:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2728]},"id":2729,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2625,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2626,"nodeType":"StructuredDocumentation","src":"134:80:10","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2728,"linearizedBaseContracts":[2728],"name":"SignedMathUpgradeable","nameLocation":"223:21:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":2643,"nodeType":"Block","src":"386:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2636,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"403:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2637,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"407:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2640,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"415:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:10","trueExpression":{"id":2639,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"411:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2635,"id":2642,"nodeType":"Return","src":"396:20:10"}]},"documentation":{"id":2627,"nodeType":"StructuredDocumentation","src":"251:66:10","text":" @dev Returns the largest of two signed numbers."},"id":2644,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:10","nodeType":"FunctionDefinition","parameters":{"id":2632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"a","nameLocation":"342:1:10","nodeType":"VariableDeclaration","scope":2644,"src":"335:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2628,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2631,"mutability":"mutable","name":"b","nameLocation":"352:1:10","nodeType":"VariableDeclaration","scope":2644,"src":"345:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2630,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:10"},"returnParameters":{"id":2635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2634,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2644,"src":"378:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2633,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:10"},"scope":2728,"src":"322:101:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2661,"nodeType":"Block","src":"565:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2654,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"582:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2655,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"586:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2658,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"594:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:10","trueExpression":{"id":2657,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"590:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2653,"id":2660,"nodeType":"Return","src":"575:20:10"}]},"documentation":{"id":2645,"nodeType":"StructuredDocumentation","src":"429:67:10","text":" @dev Returns the smallest of two signed numbers."},"id":2662,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:10","nodeType":"FunctionDefinition","parameters":{"id":2650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"mutability":"mutable","name":"a","nameLocation":"521:1:10","nodeType":"VariableDeclaration","scope":2662,"src":"514:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2646,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"b","nameLocation":"531:1:10","nodeType":"VariableDeclaration","scope":2662,"src":"524:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2648,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:10"},"returnParameters":{"id":2653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2662,"src":"557:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2651,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:10"},"scope":2728,"src":"501:101:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2705,"nodeType":"Block","src":"807:162:10","statements":[{"assignments":[2673],"declarations":[{"constant":false,"id":2673,"mutability":"mutable","name":"x","nameLocation":"876:1:10","nodeType":"VariableDeclaration","scope":2705,"src":"869:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2672,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2686,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2674,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"881:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2675,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"885:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2678,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"892:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2679,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"896:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2684,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:10"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2687,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"921:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2692,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"941:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:10","typeDescriptions":{}}},"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:10","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2688,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:10","typeDescriptions":{}}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2697,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2698,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"959:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2700,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2702,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2671,"id":2704,"nodeType":"Return","src":"914:48:10"}]},"documentation":{"id":2663,"nodeType":"StructuredDocumentation","src":"608:126:10","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2706,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:10","nodeType":"FunctionDefinition","parameters":{"id":2668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2665,"mutability":"mutable","name":"a","nameLocation":"763:1:10","nodeType":"VariableDeclaration","scope":2706,"src":"756:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2664,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2667,"mutability":"mutable","name":"b","nameLocation":"773:1:10","nodeType":"VariableDeclaration","scope":2706,"src":"766:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2666,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:10"},"returnParameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2706,"src":"799:6:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2669,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:10"},"scope":2728,"src":"739:230:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2726,"nodeType":"Block","src":"1113:158:10","statements":[{"id":2725,"nodeType":"UncheckedBlock","src":"1123:142:10","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2716,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"1238:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:10","subExpression":{"id":2720,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"1252:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:10","trueExpression":{"id":2719,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"1247:1:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2715,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:10","typeDescriptions":{}}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2713,"id":2724,"nodeType":"Return","src":"1223:31:10"}]}]},"documentation":{"id":2707,"nodeType":"StructuredDocumentation","src":"975:78:10","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2727,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:10","nodeType":"FunctionDefinition","parameters":{"id":2710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2709,"mutability":"mutable","name":"n","nameLocation":"1078:1:10","nodeType":"VariableDeclaration","scope":2727,"src":"1071:8:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2708,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:10","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:10"},"returnParameters":{"id":2713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2727,"src":"1104:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2711,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:10"},"scope":2728,"src":"1058:213:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2729,"src":"215:1058:10","usedErrors":[]}],"src":"109:1165:10"},"id":10},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2806]},"id":2807,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2730,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2731,"nodeType":"StructuredDocumentation","src":"131:70:11","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2806,"linearizedBaseContracts":[2806],"name":"IERC20","nameLocation":"212:6:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2732,"nodeType":"StructuredDocumentation","src":"225:158:11","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2740,"name":"Transfer","nameLocation":"394:8:11","nodeType":"EventDefinition","parameters":{"id":2739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2734,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:11","nodeType":"VariableDeclaration","scope":2740,"src":"403:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2733,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2736,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:11","nodeType":"VariableDeclaration","scope":2740,"src":"425:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2735,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2738,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:11","nodeType":"VariableDeclaration","scope":2740,"src":"445:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2737,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:11"},"src":"388:72:11"},{"anonymous":false,"documentation":{"id":2741,"nodeType":"StructuredDocumentation","src":"466:148:11","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2749,"name":"Approval","nameLocation":"625:8:11","nodeType":"EventDefinition","parameters":{"id":2748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2743,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:11","nodeType":"VariableDeclaration","scope":2749,"src":"634:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2742,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2745,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:11","nodeType":"VariableDeclaration","scope":2749,"src":"657:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2744,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2747,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:11","nodeType":"VariableDeclaration","scope":2749,"src":"682:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2746,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:11"},"src":"619:78:11"},{"documentation":{"id":2750,"nodeType":"StructuredDocumentation","src":"703:66:11","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2755,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:11","nodeType":"FunctionDefinition","parameters":{"id":2751,"nodeType":"ParameterList","parameters":[],"src":"794:2:11"},"returnParameters":{"id":2754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2753,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2755,"src":"820:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2752,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:11"},"scope":2806,"src":"774:55:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2756,"nodeType":"StructuredDocumentation","src":"835:72:11","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2763,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:11","nodeType":"FunctionDefinition","parameters":{"id":2759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2758,"mutability":"mutable","name":"account","nameLocation":"939:7:11","nodeType":"VariableDeclaration","scope":2763,"src":"931:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2757,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:11"},"returnParameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2763,"src":"971:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2760,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:11"},"scope":2806,"src":"912:68:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2764,"nodeType":"StructuredDocumentation","src":"986:202:11","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2773,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:11","nodeType":"FunctionDefinition","parameters":{"id":2769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2766,"mutability":"mutable","name":"to","nameLocation":"1219:2:11","nodeType":"VariableDeclaration","scope":2773,"src":"1211:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2765,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2768,"mutability":"mutable","name":"amount","nameLocation":"1231:6:11","nodeType":"VariableDeclaration","scope":2773,"src":"1223:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2767,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:11"},"returnParameters":{"id":2772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2773,"src":"1257:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2770,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:11"},"scope":2806,"src":"1193:70:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2774,"nodeType":"StructuredDocumentation","src":"1269:264:11","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2783,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:11","nodeType":"FunctionDefinition","parameters":{"id":2779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2776,"mutability":"mutable","name":"owner","nameLocation":"1565:5:11","nodeType":"VariableDeclaration","scope":2783,"src":"1557:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2775,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2778,"mutability":"mutable","name":"spender","nameLocation":"1580:7:11","nodeType":"VariableDeclaration","scope":2783,"src":"1572:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2777,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:11"},"returnParameters":{"id":2782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2781,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2783,"src":"1612:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:11"},"scope":2806,"src":"1538:83:11","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2784,"nodeType":"StructuredDocumentation","src":"1627:642:11","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2793,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:11","nodeType":"FunctionDefinition","parameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2786,"mutability":"mutable","name":"spender","nameLocation":"2299:7:11","nodeType":"VariableDeclaration","scope":2793,"src":"2291:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2785,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"amount","nameLocation":"2316:6:11","nodeType":"VariableDeclaration","scope":2793,"src":"2308:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:11"},"returnParameters":{"id":2792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2791,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2793,"src":"2342:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2790,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:11"},"scope":2806,"src":"2274:74:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2794,"nodeType":"StructuredDocumentation","src":"2354:287:11","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2805,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:11","nodeType":"FunctionDefinition","parameters":{"id":2801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2796,"mutability":"mutable","name":"from","nameLocation":"2685:4:11","nodeType":"VariableDeclaration","scope":2805,"src":"2677:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2795,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2798,"mutability":"mutable","name":"to","nameLocation":"2707:2:11","nodeType":"VariableDeclaration","scope":2805,"src":"2699:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2797,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2800,"mutability":"mutable","name":"amount","nameLocation":"2727:6:11","nodeType":"VariableDeclaration","scope":2805,"src":"2719:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2799,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:11"},"returnParameters":{"id":2804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2803,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2805,"src":"2758:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2802,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:11"},"scope":2806,"src":"2646:118:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2807,"src":"202:2564:11","usedErrors":[]}],"src":"106:2661:11"},"id":11},"contracts/Paycrest.sol":{"ast":{"absolutePath":"contracts/Paycrest.sol","exportedSymbols":{"AddressUpgradeable":[1120],"ECDSAUpgradeable":[1757],"IERC20":[2806],"IERC20PermitUpgradeable":[414],"IERC20Upgradeable":[378],"IPaycrest":[3947],"MathUpgradeable":[2623],"Paycrest":[3519],"PaycrestSettingManager":[3758],"SafeERC20Upgradeable":[790],"SignedMathUpgradeable":[2728],"StringsUpgradeable":[1391]},"id":3520,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":2808,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:12"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","id":2809,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3520,"sourceUnit":1758,"src":"62:85:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":2810,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3520,"sourceUnit":791,"src":"148:88:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/PaycrestSettingManager.sol","file":"./PaycrestSettingManager.sol","id":2812,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3520,"sourceUnit":3759,"src":"237:68:12","symbolAliases":[{"foreign":{"id":2811,"name":"PaycrestSettingManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3758,"src":"245:22:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interface/IPaycrest.sol","file":"./interface/IPaycrest.sol","id":2815,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3520,"sourceUnit":3948,"src":"306:60:12","symbolAliases":[{"foreign":{"id":2813,"name":"IPaycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"314:9:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2814,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"325:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2816,"name":"IPaycrest","nameLocations":["388:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":3947,"src":"388:9:12"},"id":2817,"nodeType":"InheritanceSpecifier","src":"388:9:12"},{"baseName":{"id":2818,"name":"PaycrestSettingManager","nameLocations":["399:22:12"],"nodeType":"IdentifierPath","referencedDeclaration":3758,"src":"399:22:12"},"id":2819,"nodeType":"InheritanceSpecifier","src":"399:22:12"}],"canonicalName":"Paycrest","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3519,"linearizedBaseContracts":[3519,3758,131,1162,300,3947],"name":"Paycrest","nameLocation":"376:8:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2823,"libraryName":{"id":2820,"name":"SafeERC20Upgradeable","nameLocations":["435:20:12"],"nodeType":"IdentifierPath","referencedDeclaration":790,"src":"435:20:12"},"nodeType":"UsingForDirective","src":"429:38:12","typeName":{"id":2822,"nodeType":"UserDefinedTypeName","pathNode":{"id":2821,"name":"IERC20","nameLocations":["460:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":2806,"src":"460:6:12"},"referencedDeclaration":2806,"src":"460:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2806","typeString":"contract IERC20"}}},{"global":false,"id":2826,"libraryName":{"id":2824,"name":"ECDSAUpgradeable","nameLocations":["478:16:12"],"nodeType":"IdentifierPath","referencedDeclaration":1757,"src":"478:16:12"},"nodeType":"UsingForDirective","src":"472:35:12","typeName":{"id":2825,"name":"bytes32","nodeType":"ElementaryTypeName","src":"499:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"Paycrest.fee","id":2831,"members":[{"constant":false,"id":2828,"mutability":"mutable","name":"protocolFee","nameLocation":"541:11:12","nodeType":"VariableDeclaration","scope":2831,"src":"533:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2827,"name":"uint256","nodeType":"ElementaryTypeName","src":"533:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2830,"mutability":"mutable","name":"liquidityProviderAmount","nameLocation":"570:23:12","nodeType":"VariableDeclaration","scope":2831,"src":"562:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2829,"name":"uint256","nodeType":"ElementaryTypeName","src":"562:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"fee","nameLocation":"519:3:12","nodeType":"StructDefinition","scope":3519,"src":"512:88:12","visibility":"public"},{"constant":false,"id":2836,"mutability":"mutable","name":"order","nameLocation":"639:5:12","nodeType":"VariableDeclaration","scope":3519,"src":"605:39:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"typeName":{"id":2835,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2832,"name":"bytes32","nodeType":"ElementaryTypeName","src":"613:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"605:25:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2834,"nodeType":"UserDefinedTypeName","pathNode":{"id":2833,"name":"Order","nameLocations":["624:5:12"],"nodeType":"IdentifierPath","referencedDeclaration":3844,"src":"624:5:12"},"referencedDeclaration":3844,"src":"624:5:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage_ptr","typeString":"struct IPaycrest.Order"}}},"visibility":"private"},{"constant":false,"id":2840,"mutability":"mutable","name":"_nonce","nameLocation":"686:6:12","nodeType":"VariableDeclaration","scope":3519,"src":"650:42:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2839,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2837,"name":"address","nodeType":"ElementaryTypeName","src":"658:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"650:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2838,"name":"uint256","nodeType":"ElementaryTypeName","src":"669:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2844,"mutability":"mutable","name":"__gap","nameLocation":"718:5:12","nodeType":"VariableDeclaration","scope":3519,"src":"698:25:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2841,"name":"uint256","nodeType":"ElementaryTypeName","src":"698:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2843,"length":{"hexValue":"3530","id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"706:2:12","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"698:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"body":{"id":2851,"nodeType":"Block","src":"796:39:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2848,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"806:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"806:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2850,"nodeType":"ExpressionStatement","src":"806:22:12"}]},"documentation":{"id":2845,"nodeType":"StructuredDocumentation","src":"729:48:12","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":2852,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2846,"nodeType":"ParameterList","parameters":[],"src":"793:2:12"},"returnParameters":{"id":2847,"nodeType":"ParameterList","parameters":[],"src":"796:0:12"},"scope":3519,"src":"782:53:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2876,"nodeType":"Block","src":"897:150:12","statements":[{"expression":{"id":2863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2859,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"911:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2861,"indexExpression":{"id":2860,"name":"_usdc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"929:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"911:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"938:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"911:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2864,"nodeType":"ExpressionStatement","src":"911:31:12"},{"expression":{"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2865,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"955:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130305f303030","id":2866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"965:7:12","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100_000"},"src":"955:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2868,"nodeType":"ExpressionStatement","src":"955:17:12"},{"expression":{"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2869,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"983:18:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"35303030","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1004:4:12","typeDescriptions":{"typeIdentifier":"t_rational_5000_by_1","typeString":"int_const 5000"},"value":"5000"},"src":"983:25:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2872,"nodeType":"ExpressionStatement","src":"983:25:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2873,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1024:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2875,"nodeType":"ExpressionStatement","src":"1024:16:12"}]},"functionSelector":"c4d66de8","id":2877,"implemented":true,"kind":"function","modifiers":[{"id":2857,"kind":"modifierInvocation","modifierName":{"id":2856,"name":"initializer","nameLocations":["885:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":202,"src":"885:11:12"},"nodeType":"ModifierInvocation","src":"885:11:12"}],"name":"initialize","nameLocation":"850:10:12","nodeType":"FunctionDefinition","parameters":{"id":2855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2854,"mutability":"mutable","name":"_usdc","nameLocation":"869:5:12","nodeType":"VariableDeclaration","scope":2877,"src":"861:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2853,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"860:15:12"},"returnParameters":{"id":2858,"nodeType":"ParameterList","parameters":[],"src":"897:0:12"},"scope":3519,"src":"841:206:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2888,"nodeType":"Block","src":"1077:87:12","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2880,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1095:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1099:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1095:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2882,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"1109:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1095:32:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7941676772656761746f72","id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1129:16:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""},"value":"OnlyAggregator"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","typeString":"literal_string \"OnlyAggregator\""}],"id":2879,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1087:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1087:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2886,"nodeType":"ExpressionStatement","src":"1087:59:12"},{"id":2887,"nodeType":"PlaceholderStatement","src":"1156:1:12"}]},"id":2889,"name":"onlyAggregator","nameLocation":"1062:14:12","nodeType":"ModifierDefinition","parameters":{"id":2878,"nodeType":"ParameterList","parameters":[],"src":"1077:0:12"},"src":"1053:111:12","virtual":false,"visibility":"internal"},{"baseFunctions":[3868],"body":{"id":2996,"nodeType":"Block","src":"1739:1279:12","statements":[{"expression":{"arguments":[{"id":2914,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"1794:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2915,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"1802:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2916,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"1811:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2917,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"1827:19:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2918,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"1848:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2913,"name":"_handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3058,"src":"1785:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_address_$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,address,address,bytes32) view"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1785:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2920,"nodeType":"ExpressionStatement","src":"1785:80:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2922,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"1944:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2923,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"1959:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2924,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"1969:18:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1959:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2926,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1958:30:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2927,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"1991:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1958:40:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1944:54:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656e646572466565546f6f48696768","id":2930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2000:18:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","typeString":"literal_string \"SenderFeeTooHigh\""},"value":"SenderFeeTooHigh"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","typeString":"literal_string \"SenderFeeTooHigh\""}],"id":2921,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1936:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1936:83:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2932,"nodeType":"ExpressionStatement","src":"1936:83:12"},{"expression":{"arguments":[{"expression":{"id":2937,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2105:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2109:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2105:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2941,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2125:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_Paycrest_$3519","typeString":"contract Paycrest"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Paycrest_$3519","typeString":"contract Paycrest"}],"id":2940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2117:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2939,"name":"address","nodeType":"ElementaryTypeName","src":"2117:7:12","typeDescriptions":{}}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2117:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2943,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"2132:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":2934,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"2084:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2933,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"2077:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2806_$","typeString":"type(contract IERC20)"}},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2077:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2806","typeString":"contract IERC20"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2092:12:12","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2805,"src":"2077:27:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2077:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2945,"nodeType":"ExpressionStatement","src":"2077:63:12"},{"expression":{"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2206:21:12","subExpression":{"baseExpression":{"id":2946,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"2206:6:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2949,"indexExpression":{"expression":{"id":2947,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2213:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2217:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2213:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2206:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2951,"nodeType":"ExpressionStatement","src":"2206:21:12"},{"expression":{"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2952,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"2433:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":2956,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2464:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2468:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2464:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2958,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"2476:6:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2961,"indexExpression":{"expression":{"id":2959,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2483:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2487:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2483:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2476:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2954,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2453:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2457:6:12","memberName":"encode","nodeType":"MemberAccess","src":"2453:10:12","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2453:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2953,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2443:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2443:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2433:63:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2965,"nodeType":"ExpressionStatement","src":"2433:63:12"},{"expression":{"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2966,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"2536:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":2968,"indexExpression":{"id":2967,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"2542:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2536:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":2970,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2581:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2585:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2581:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2972,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"2612:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2973,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"2652:19:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2974,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"2696:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2975,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"2726:5:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"66616c7365","id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2758:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":2977,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"2792:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2980,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"2839:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":2978,"name":"uint64","nodeType":"ElementaryTypeName","src":"2832:6:12","typeDescriptions":{}}},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":2982,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"2869:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2969,"name":"Order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3844,"src":"2553:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Order_$3844_storage_ptr_$","typeString":"type(struct IPaycrest.Order storage pointer)"}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2573:6:12","2605:5:12","2632:18:12","2685:9:12","2720:4:12","2745:11:12","2777:13:12","2820:10:12","2861:6:12"],"names":["seller","token","senderFeeRecipient","senderFee","rate","isFulfilled","refundAddress","currentBPS","amount"],"nodeType":"FunctionCall","src":"2553:334:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_memory_ptr","typeString":"struct IPaycrest.Order memory"}},"src":"2536:351:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":2985,"nodeType":"ExpressionStatement","src":"2536:351:12"},{"eventCall":{"arguments":[{"id":2987,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"2940:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2988,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"2948:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2989,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"2957:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2990,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"2966:5:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":2991,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"2973:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2992,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2898,"src":"2991:6:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2993,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"2999:11:12","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":2986,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3780,"src":"2932:7:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes32,uint256,bytes32,bytes32,string memory)"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2932:79:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2995,"nodeType":"EmitStatement","src":"2927:84:12"}]},"documentation":{"id":2890,"nodeType":"StructuredDocumentation","src":"1365:40:12","text":"@dev See {createOrder-IPaycrest}. "},"functionSelector":"2654ec7e","id":2997,"implemented":true,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"1419:11:12","nodeType":"FunctionDefinition","parameters":{"id":2909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2892,"mutability":"mutable","name":"_token","nameLocation":"1448:6:12","nodeType":"VariableDeclaration","scope":2997,"src":"1440:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2891,"name":"address","nodeType":"ElementaryTypeName","src":"1440:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2894,"mutability":"mutable","name":"_amount","nameLocation":"1473:7:12","nodeType":"VariableDeclaration","scope":2997,"src":"1465:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2893,"name":"uint256","nodeType":"ElementaryTypeName","src":"1465:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2896,"mutability":"mutable","name":"_institutionCode","nameLocation":"1499:16:12","nodeType":"VariableDeclaration","scope":2997,"src":"1491:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2895,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1491:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2898,"mutability":"mutable","name":"_label","nameLocation":"1533:6:12","nodeType":"VariableDeclaration","scope":2997,"src":"1525:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2897,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1525:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2900,"mutability":"mutable","name":"_rate","nameLocation":"1556:5:12","nodeType":"VariableDeclaration","scope":2997,"src":"1549:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2899,"name":"uint96","nodeType":"ElementaryTypeName","src":"1549:6:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":2902,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"1580:19:12","nodeType":"VariableDeclaration","scope":2997,"src":"1572:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2901,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2904,"mutability":"mutable","name":"_senderFee","nameLocation":"1617:10:12","nodeType":"VariableDeclaration","scope":2997,"src":"1609:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2903,"name":"uint256","nodeType":"ElementaryTypeName","src":"1609:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2906,"mutability":"mutable","name":"_refundAddress","nameLocation":"1645:14:12","nodeType":"VariableDeclaration","scope":2997,"src":"1637:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2905,"name":"address","nodeType":"ElementaryTypeName","src":"1637:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2908,"mutability":"mutable","name":"messageHash","nameLocation":"1686:11:12","nodeType":"VariableDeclaration","scope":2997,"src":"1670:27:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2907,"name":"string","nodeType":"ElementaryTypeName","src":"1670:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1430:273:12"},"returnParameters":{"id":2912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2911,"mutability":"mutable","name":"orderId","nameLocation":"1730:7:12","nodeType":"VariableDeclaration","scope":2997,"src":"1722:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2910,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1722:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1721:17:12"},"scope":3519,"src":"1410:1608:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3057,"nodeType":"Block","src":"3168:415:12","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3011,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"3235:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3013,"indexExpression":{"id":3012,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"3253:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3235:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e4e6f74537570706f72746564","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3262:19:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""},"value":"TokenNotSupported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""}],"id":3010,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3227:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3227:55:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3016,"nodeType":"ExpressionStatement","src":"3227:55:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3018,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"3300:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3310:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3300:11:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7449735a65726f","id":3021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3313:14:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""},"value":"AmountIsZero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""}],"id":3017,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3292:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3292:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3023,"nodeType":"ExpressionStatement","src":"3292:36:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3025,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"3346:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3372:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3364:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3026,"name":"address","nodeType":"ElementaryTypeName","src":"3364:7:12","typeDescriptions":{}}},"id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3364:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3346:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":3031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3376:18:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":3024,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3338:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:57:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3033,"nodeType":"ExpressionStatement","src":"3338:57:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3035,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"3413:19:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3444:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3436:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3036,"name":"address","nodeType":"ElementaryTypeName","src":"3436:7:12","typeDescriptions":{}}},"id":3039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3436:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3413:33:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":3041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3448:18:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":3034,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3405:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3405:62:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3043,"nodeType":"ExpressionStatement","src":"3405:62:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3045,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"3485:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3534_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3047,"indexExpression":{"id":3046,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3007,"src":"3513:16:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3485:45:12","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3534_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":3048,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3531:4:12","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3531,"src":"3485:50:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3547:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3539:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3049,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3539:7:12","typeDescriptions":{}}},"id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3539:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3485:64:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","id":3054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3551:24:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""},"value":"InvalidInstitutionCode"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""}],"id":3044,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3477:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3477:99:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3056,"nodeType":"ExpressionStatement","src":"3477:99:12"}]},"id":3058,"implemented":true,"kind":"function","modifiers":[],"name":"_handler","nameLocation":"3033:8:12","nodeType":"FunctionDefinition","parameters":{"id":3008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2999,"mutability":"mutable","name":"_token","nameLocation":"3050:6:12","nodeType":"VariableDeclaration","scope":3058,"src":"3042:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2998,"name":"address","nodeType":"ElementaryTypeName","src":"3042:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3001,"mutability":"mutable","name":"_amount","nameLocation":"3066:7:12","nodeType":"VariableDeclaration","scope":3058,"src":"3058:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3000,"name":"uint256","nodeType":"ElementaryTypeName","src":"3058:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3003,"mutability":"mutable","name":"_refundAddress","nameLocation":"3083:14:12","nodeType":"VariableDeclaration","scope":3058,"src":"3075:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3002,"name":"address","nodeType":"ElementaryTypeName","src":"3075:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3005,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"3107:19:12","nodeType":"VariableDeclaration","scope":3058,"src":"3099:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3004,"name":"address","nodeType":"ElementaryTypeName","src":"3099:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3007,"mutability":"mutable","name":"_institutionCode","nameLocation":"3136:16:12","nodeType":"VariableDeclaration","scope":3058,"src":"3128:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3006,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3128:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3041:112:12"},"returnParameters":{"id":3009,"nodeType":"ParameterList","parameters":[],"src":"3168:0:12"},"scope":3519,"src":"3024:559:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[3891],"body":{"id":3178,"nodeType":"Block","src":"4125:1318:12","statements":[{"expression":{"arguments":[{"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4200:28:12","subExpression":{"expression":{"baseExpression":{"id":3084,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"4201:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3086,"indexExpression":{"id":3085,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4207:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4201:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4217:11:12","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3837,"src":"4201:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4230:16:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3083,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4192:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:55:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3091,"nodeType":"ExpressionStatement","src":"4192:55:12"},{"assignments":[3093],"declarations":[{"constant":false,"id":3093,"mutability":"mutable","name":"token","nameLocation":"4303:5:12","nodeType":"VariableDeclaration","scope":3178,"src":"4295:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3092,"name":"address","nodeType":"ElementaryTypeName","src":"4295:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3098,"initialValue":{"expression":{"baseExpression":{"id":3094,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"4311:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3096,"indexExpression":{"id":3095,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4317:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4311:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3097,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4327:5:12","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3829,"src":"4311:21:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4295:37:12"},{"expression":{"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3099,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"4411:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3101,"indexExpression":{"id":3100,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4417:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4411:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3102,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4427:10:12","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"4411:26:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3103,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"4441:14:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"4411:44:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3105,"nodeType":"ExpressionStatement","src":"4411:44:12"},{"assignments":[3108],"declarations":[{"constant":false,"id":3108,"mutability":"mutable","name":"_feeParams","nameLocation":"4608:10:12","nodeType":"VariableDeclaration","scope":3178,"src":"4597:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3107,"nodeType":"UserDefinedTypeName","pathNode":{"id":3106,"name":"fee","nameLocations":["4597:3:12"],"nodeType":"IdentifierPath","referencedDeclaration":2831,"src":"4597:3:12"},"referencedDeclaration":2831,"src":"4597:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"id":3114,"initialValue":{"arguments":[{"id":3110,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4639:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3111,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"4649:14:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3112,"name":"_isPartner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"4665:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3109,"name":"_calculateFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3354,"src":"4624:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_uint96_$_t_bool_$returns$_t_struct$_fee_$2831_memory_ptr_$","typeString":"function (bytes32,uint96,bool) view returns (struct Paycrest.fee memory)"}},"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4624:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"nodeType":"VariableDeclarationStatement","src":"4595:81:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3115,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"4689:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3117,"indexExpression":{"id":3116,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4695:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4689:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3118,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4705:10:12","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"4689:26:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4719:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4689:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3141,"nodeType":"IfStatement","src":"4686:296:12","trueBody":{"id":3140,"nodeType":"Block","src":"4722:260:12","statements":[{"expression":{"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3121,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"4790:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3123,"indexExpression":{"id":3122,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4796:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4790:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3124,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4806:11:12","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3837,"src":"4790:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4820:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4790:34:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3127,"nodeType":"ExpressionStatement","src":"4790:34:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3128,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"4842:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3130,"indexExpression":{"id":3129,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4848:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4842:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3131,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4858:9:12","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3833,"src":"4842:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4870:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4842:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3139,"nodeType":"IfStatement","src":"4838:134:12","trueBody":{"id":3138,"nodeType":"Block","src":"4873:99:12","statements":[{"expression":{"arguments":[{"id":3135,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4948:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3134,"name":"transferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3215,"src":"4930:17:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4930:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3137,"nodeType":"ExpressionStatement","src":"4930:27:12"}]}}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3142,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"5004:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5015:11:12","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2828,"src":"5004:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5029:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5004:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3156,"nodeType":"IfStatement","src":"5000:154:12","trueBody":{"id":3155,"nodeType":"Block","src":"5032:122:12","statements":[{"expression":{"arguments":[{"id":3150,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"5106:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3151,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"5120:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5131:11:12","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2828,"src":"5120:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3147,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"5090:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3146,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"5083:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2806_$","typeString":"type(contract IERC20)"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5083:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2806","typeString":"contract IERC20"}},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5097:8:12","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2773,"src":"5083:22:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5083:60:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3154,"nodeType":"ExpressionStatement","src":"5083:60:12"}]}},{"expression":{"arguments":[{"id":3161,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"5232:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3162,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"5252:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3163,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5263:23:12","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2830,"src":"5252:34:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3158,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"5216:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3157,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"5209:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2806_$","typeString":"type(contract IERC20)"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5209:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2806","typeString":"contract IERC20"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5223:8:12","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2773,"src":"5209:22:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5209:78:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3165,"nodeType":"ExpressionStatement","src":"5209:78:12"},{"eventCall":{"arguments":[{"id":3167,"name":"_splitOrderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"5333:13:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3168,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"5348:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3169,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3065,"src":"5358:6:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3170,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"5367:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3171,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"5387:14:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3166,"name":"Settled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3793,"src":"5325:7:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint96_$returns$__$","typeString":"function (bytes32,bytes32,bytes32,address,uint96)"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5325:77:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3173,"nodeType":"EmitStatement","src":"5320:82:12"},{"expression":{"components":[{"id":3174,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"5420:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3175,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"5430:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3176,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5419:17:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_address_$","typeString":"tuple(bytes32,address)"}},"functionReturnParameters":3082,"id":3177,"nodeType":"Return","src":"5412:24:12"}]},"documentation":{"id":3059,"nodeType":"StructuredDocumentation","src":"3790:35:12","text":"@dev See {settle-IPaycrest}. "},"functionSelector":"137764fb","id":3179,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3077,"kind":"modifierInvocation","modifierName":{"id":3076,"name":"onlyAggregator","nameLocations":["4082:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":2889,"src":"4082:14:12"},"nodeType":"ModifierInvocation","src":"4082:16:12"}],"name":"settle","nameLocation":"3839:6:12","nodeType":"FunctionDefinition","parameters":{"id":3075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3061,"mutability":"mutable","name":"_splitOrderId","nameLocation":"3863:13:12","nodeType":"VariableDeclaration","scope":3179,"src":"3855:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3060,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3855:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3063,"mutability":"mutable","name":"_orderId","nameLocation":"3894:8:12","nodeType":"VariableDeclaration","scope":3179,"src":"3886:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3886:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3065,"mutability":"mutable","name":"_label","nameLocation":"3921:6:12","nodeType":"VariableDeclaration","scope":3179,"src":"3913:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3064,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3913:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3068,"mutability":"mutable","name":"_validators","nameLocation":"3956:11:12","nodeType":"VariableDeclaration","scope":3179,"src":"3937:30:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3066,"name":"address","nodeType":"ElementaryTypeName","src":"3937:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3067,"nodeType":"ArrayTypeName","src":"3937:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3070,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"3986:18:12","nodeType":"VariableDeclaration","scope":3179,"src":"3978:26:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3069,"name":"address","nodeType":"ElementaryTypeName","src":"3978:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3072,"mutability":"mutable","name":"_settlePercent","nameLocation":"4022:14:12","nodeType":"VariableDeclaration","scope":3179,"src":"4015:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3071,"name":"uint64","nodeType":"ElementaryTypeName","src":"4015:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"_isPartner","nameLocation":"4051:10:12","nodeType":"VariableDeclaration","scope":3179,"src":"4046:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3073,"name":"bool","nodeType":"ElementaryTypeName","src":"4046:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3845:226:12"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3179,"src":"4107:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4107:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3179,"src":"4116:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3080,"name":"address","nodeType":"ElementaryTypeName","src":"4116:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4106:18:12"},"scope":3519,"src":"3830:1613:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3214,"nodeType":"Block","src":"5503:289:12","statements":[{"assignments":[3185],"declarations":[{"constant":false,"id":3185,"mutability":"mutable","name":"recipient","nameLocation":"5521:9:12","nodeType":"VariableDeclaration","scope":3214,"src":"5513:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3184,"name":"address","nodeType":"ElementaryTypeName","src":"5513:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3190,"initialValue":{"expression":{"baseExpression":{"id":3186,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"5533:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3188,"indexExpression":{"id":3187,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"5539:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5533:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3189,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5549:18:12","memberName":"senderFeeRecipient","nodeType":"MemberAccess","referencedDeclaration":3831,"src":"5533:34:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5513:54:12"},{"assignments":[3192],"declarations":[{"constant":false,"id":3192,"mutability":"mutable","name":"_fee","nameLocation":"5585:4:12","nodeType":"VariableDeclaration","scope":3214,"src":"5577:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3191,"name":"uint256","nodeType":"ElementaryTypeName","src":"5577:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3197,"initialValue":{"expression":{"baseExpression":{"id":3193,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"5592:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3195,"indexExpression":{"id":3194,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"5598:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5592:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3196,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5608:9:12","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3833,"src":"5592:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5577:40:12"},{"expression":{"arguments":[{"id":3205,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"5697:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3206,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"5708:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3199,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"5665:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3201,"indexExpression":{"id":3200,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"5671:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5665:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5681:5:12","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3829,"src":"5665:21:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3198,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"5658:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2806_$","typeString":"type(contract IERC20)"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5658:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2806","typeString":"contract IERC20"}},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5688:8:12","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2773,"src":"5658:38:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5658:55:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3208,"nodeType":"ExpressionStatement","src":"5658:55:12"},{"eventCall":{"arguments":[{"id":3210,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"5769:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3211,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3192,"src":"5780:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3209,"name":"TransferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"5751:17:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5751:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3213,"nodeType":"EmitStatement","src":"5746:39:12"}]},"id":3215,"implemented":true,"kind":"function","modifiers":[],"name":"transferSenderFee","nameLocation":"5458:17:12","nodeType":"FunctionDefinition","parameters":{"id":3182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3181,"mutability":"mutable","name":"_orderId","nameLocation":"5484:8:12","nodeType":"VariableDeclaration","scope":3215,"src":"5476:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5476:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5475:18:12"},"returnParameters":{"id":3183,"nodeType":"ParameterList","parameters":[],"src":"5503:0:12"},"scope":3519,"src":"5449:343:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3901],"body":{"id":3274,"nodeType":"Block","src":"5929:455:12","statements":[{"expression":{"arguments":[{"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6004:28:12","subExpression":{"expression":{"baseExpression":{"id":3228,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"6005:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3230,"indexExpression":{"id":3229,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"6011:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6005:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3231,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6021:11:12","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3837,"src":"6005:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6034:16:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3227,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5996:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5996:55:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3235,"nodeType":"ExpressionStatement","src":"5996:55:12"},{"expression":{"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3236,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"6091:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3238,"indexExpression":{"id":3237,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"6097:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6091:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3239,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6107:11:12","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":3837,"src":"6091:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6121:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6091:34:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3242,"nodeType":"ExpressionStatement","src":"6091:34:12"},{"expression":{"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3243,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"6135:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3245,"indexExpression":{"id":3244,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"6141:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6135:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3246,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6151:10:12","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":3841,"src":"6135:26:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6164:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6135:30:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3249,"nodeType":"ExpressionStatement","src":"6135:30:12"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3257,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"6245:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3259,"indexExpression":{"id":3258,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"6251:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6245:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6261:13:12","memberName":"refundAddress","nodeType":"MemberAccess","referencedDeclaration":3839,"src":"6245:29:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3261,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"6276:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3263,"indexExpression":{"id":3262,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"6282:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6276:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6292:6:12","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3843,"src":"6276:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3251,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"6213:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3253,"indexExpression":{"id":3252,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"6219:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6213:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3254,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6229:5:12","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3829,"src":"6213:21:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3250,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"6206:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2806_$","typeString":"type(contract IERC20)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6206:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2806","typeString":"contract IERC20"}},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6236:8:12","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2773,"src":"6206:38:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6206:93:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3266,"nodeType":"ExpressionStatement","src":"6206:93:12"},{"eventCall":{"arguments":[{"id":3268,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"6339:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3269,"name":"_label","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3220,"src":"6349:6:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3267,"name":"Refunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3800,"src":"6330:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32)"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6330:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3271,"nodeType":"EmitStatement","src":"6325:31:12"},{"expression":{"hexValue":"74727565","id":3272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6373:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3226,"id":3273,"nodeType":"Return","src":"6366:11:12"}]},"documentation":{"id":3216,"nodeType":"StructuredDocumentation","src":"5798:35:12","text":"@dev See {refund-IPaycrest}. "},"functionSelector":"e4683a79","id":3275,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3223,"kind":"modifierInvocation","modifierName":{"id":3222,"name":"onlyAggregator","nameLocations":["5898:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":2889,"src":"5898:14:12"},"nodeType":"ModifierInvocation","src":"5898:16:12"}],"name":"refund","nameLocation":"5847:6:12","nodeType":"FunctionDefinition","parameters":{"id":3221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3218,"mutability":"mutable","name":"_orderId","nameLocation":"5862:8:12","nodeType":"VariableDeclaration","scope":3275,"src":"5854:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5854:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3220,"mutability":"mutable","name":"_label","nameLocation":"5880:6:12","nodeType":"VariableDeclaration","scope":3275,"src":"5872:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5872:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5853:34:12"},"returnParameters":{"id":3226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3275,"src":"5923:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3224,"name":"bool","nodeType":"ElementaryTypeName","src":"5923:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5922:6:12"},"scope":3519,"src":"5838:546:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3353,"nodeType":"Block","src":"6517:982:12","statements":[{"assignments":[3288],"declarations":[{"constant":false,"id":3288,"mutability":"mutable","name":"amount","nameLocation":"6595:6:12","nodeType":"VariableDeclaration","scope":3353,"src":"6587:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3287,"name":"uint256","nodeType":"ElementaryTypeName","src":"6587:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3293,"initialValue":{"expression":{"baseExpression":{"id":3289,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"6604:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3291,"indexExpression":{"id":3290,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"6610:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6604:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3292,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6620:6:12","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3843,"src":"6604:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6587:39:12"},{"expression":{"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3294,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"6674:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3295,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"6683:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"baseExpression":{"id":3296,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"6692:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3298,"indexExpression":{"id":3297,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"6698:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6692:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3299,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6708:9:12","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":3833,"src":"6692:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6683:34:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6674:43:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3302,"nodeType":"ExpressionStatement","src":"6674:43:12"},{"expression":{"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3303,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"6796:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6807:23:12","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2830,"src":"6796:34:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3306,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"6834:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3307,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3279,"src":"6843:14:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"6834:23:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3309,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6833:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3310,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"6861:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6833:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6796:72:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3313,"nodeType":"ExpressionStatement","src":"6796:72:12"},{"expression":{"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3314,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"6936:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6947:11:12","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2828,"src":"6936:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3317,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"6962:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6973:23:12","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2830,"src":"6962:34:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3319,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"6999:18:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6962:55:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3321,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6961:57:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3322,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"7021:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6961:67:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6936:92:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3325,"nodeType":"ExpressionStatement","src":"6936:92:12"},{"expression":{"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3326,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7126:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3328,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7137:23:12","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2830,"src":"7126:34:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3329,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7164:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3330,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7175:23:12","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2830,"src":"7164:34:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":3331,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7201:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3332,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7212:11:12","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2828,"src":"7201:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7164:59:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3334,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7163:61:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7126:98:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3336,"nodeType":"ExpressionStatement","src":"7126:98:12"},{"condition":{"id":3337,"name":"_isPartner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"7356:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3352,"nodeType":"IfStatement","src":"7352:141:12","trueBody":{"id":3351,"nodeType":"Block","src":"7368:125:12","statements":[{"expression":{"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3338,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7382:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7393:23:12","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2830,"src":"7382:34:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":3341,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7420:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3342,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7431:11:12","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2828,"src":"7420:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7382:60:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3344,"nodeType":"ExpressionStatement","src":"7382:60:12"},{"expression":{"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3345,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"7456:10:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3347,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7467:11:12","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2828,"src":"7456:22:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7481:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7456:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3350,"nodeType":"ExpressionStatement","src":"7456:26:12"}]}}]},"id":3354,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateFees","nameLocation":"6399:14:12","nodeType":"FunctionDefinition","parameters":{"id":3282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3277,"mutability":"mutable","name":"_orderId","nameLocation":"6422:8:12","nodeType":"VariableDeclaration","scope":3354,"src":"6414:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3276,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6414:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3279,"mutability":"mutable","name":"_settlePercent","nameLocation":"6439:14:12","nodeType":"VariableDeclaration","scope":3354,"src":"6432:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3278,"name":"uint96","nodeType":"ElementaryTypeName","src":"6432:6:12","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3281,"mutability":"mutable","name":"_isPartner","nameLocation":"6460:10:12","nodeType":"VariableDeclaration","scope":3354,"src":"6455:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3280,"name":"bool","nodeType":"ElementaryTypeName","src":"6455:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6413:58:12"},"returnParameters":{"id":3286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3285,"mutability":"mutable","name":"_feeParams","nameLocation":"6504:10:12","nodeType":"VariableDeclaration","scope":3354,"src":"6493:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3284,"nodeType":"UserDefinedTypeName","pathNode":{"id":3283,"name":"fee","nameLocations":["6493:3:12"],"nodeType":"IdentifierPath","referencedDeclaration":2831,"src":"6493:3:12"},"referencedDeclaration":2831,"src":"6493:3:12","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2831_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"src":"6492:24:12"},"scope":3519,"src":"6390:1109:12","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[3918],"body":{"id":3367,"nodeType":"Block","src":"7822:39:12","statements":[{"expression":{"baseExpression":{"id":3363,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"7839:5:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$3844_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3365,"indexExpression":{"id":3364,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3357,"src":"7845:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7839:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage","typeString":"struct IPaycrest.Order storage ref"}},"functionReturnParameters":3362,"id":3366,"nodeType":"Return","src":"7832:22:12"}]},"documentation":{"id":3355,"nodeType":"StructuredDocumentation","src":"7700:41:12","text":"@dev See {getOrderInfo-IPaycrest}. "},"functionSelector":"768c6ec0","id":3368,"implemented":true,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"7755:12:12","nodeType":"FunctionDefinition","parameters":{"id":3358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3357,"mutability":"mutable","name":"_orderId","nameLocation":"7776:8:12","nodeType":"VariableDeclaration","scope":3368,"src":"7768:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7768:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7767:18:12"},"returnParameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3368,"src":"7808:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":3360,"nodeType":"UserDefinedTypeName","pathNode":{"id":3359,"name":"Order","nameLocations":["7808:5:12"],"nodeType":"IdentifierPath","referencedDeclaration":3844,"src":"7808:5:12"},"referencedDeclaration":3844,"src":"7808:5:12","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"7807:14:12"},"scope":3519,"src":"7746:115:12","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3909],"body":{"id":3380,"nodeType":"Block","src":"7987:49:12","statements":[{"expression":{"baseExpression":{"id":3376,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"8004:17:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3378,"indexExpression":{"id":3377,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3371,"src":"8022:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8004:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3375,"id":3379,"nodeType":"Return","src":"7997:32:12"}]},"documentation":{"id":3369,"nodeType":"StructuredDocumentation","src":"7867:45:12","text":"@dev See {isTokenSupported-IPaycrest}. "},"functionSelector":"75151b63","id":3381,"implemented":true,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"7926:16:12","nodeType":"FunctionDefinition","parameters":{"id":3372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3371,"mutability":"mutable","name":"_token","nameLocation":"7951:6:12","nodeType":"VariableDeclaration","scope":3381,"src":"7943:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3370,"name":"address","nodeType":"ElementaryTypeName","src":"7943:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7942:16:12"},"returnParameters":{"id":3375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3381,"src":"7981:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3373,"name":"bool","nodeType":"ElementaryTypeName","src":"7981:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7980:6:12"},"scope":3519,"src":"7917:119:12","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3394,"nodeType":"Block","src":"8203:57:12","statements":[{"expression":{"baseExpression":{"id":3390,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"8220:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3534_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3392,"indexExpression":{"id":3391,"name":"code","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3384,"src":"8248:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8220:33:12","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3534_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"functionReturnParameters":3389,"id":3393,"nodeType":"Return","src":"8213:40:12"}]},"documentation":{"id":3382,"nodeType":"StructuredDocumentation","src":"8042:56:12","text":"@dev See {getSupportedInstitutionName-IPaycrest}. "},"functionSelector":"87490d86","id":3395,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutionName","nameLocation":"8112:27:12","nodeType":"FunctionDefinition","parameters":{"id":3385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3384,"mutability":"mutable","name":"code","nameLocation":"8148:4:12","nodeType":"VariableDeclaration","scope":3395,"src":"8140:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8140:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8139:14:12"},"returnParameters":{"id":3389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3395,"src":"8177:24:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3534_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"},"typeName":{"id":3387,"nodeType":"UserDefinedTypeName","pathNode":{"id":3386,"name":"InstitutionByCode","nameLocations":["8177:17:12"],"nodeType":"IdentifierPath","referencedDeclaration":3534,"src":"8177:17:12"},"referencedDeclaration":3534,"src":"8177:17:12","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3534_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}},"visibility":"internal"}],"src":"8176:26:12"},"scope":3519,"src":"8103:157:12","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3453,"nodeType":"Block","src":"8363:390:12","statements":[{"assignments":[3408],"declarations":[{"constant":false,"id":3408,"mutability":"mutable","name":"institutions","nameLocation":"8394:12:12","nodeType":"VariableDeclaration","scope":3453,"src":"8373:33:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3406,"nodeType":"UserDefinedTypeName","pathNode":{"id":3405,"name":"Institution","nameLocations":["8373:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":3529,"src":"8373:11:12"},"referencedDeclaration":3529,"src":"8373:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3407,"nodeType":"ArrayTypeName","src":"8373:13:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":3412,"initialValue":{"baseExpression":{"id":3409,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"8409:21:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":3411,"indexExpression":{"id":3410,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3397,"src":"8431:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8409:31:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8373:67:12"},{"assignments":[3414],"declarations":[{"constant":false,"id":3414,"mutability":"mutable","name":"length","nameLocation":"8458:6:12","nodeType":"VariableDeclaration","scope":3453,"src":"8450:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3413,"name":"uint256","nodeType":"ElementaryTypeName","src":"8450:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3417,"initialValue":{"expression":{"id":3415,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"8467:12:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8480:6:12","memberName":"length","nodeType":"MemberAccess","src":"8467:19:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8450:36:12"},{"assignments":[3422],"declarations":[{"constant":false,"id":3422,"mutability":"mutable","name":"result","nameLocation":"8517:6:12","nodeType":"VariableDeclaration","scope":3453,"src":"8496:27:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3420,"nodeType":"UserDefinedTypeName","pathNode":{"id":3419,"name":"Institution","nameLocations":["8496:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":3529,"src":"8496:11:12"},"referencedDeclaration":3529,"src":"8496:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3421,"nodeType":"ArrayTypeName","src":"8496:13:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":3429,"initialValue":{"arguments":[{"id":3427,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3414,"src":"8544:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3426,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8526:17:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct PaycrestSettingManager.Institution memory[] memory)"},"typeName":{"baseType":{"id":3424,"nodeType":"UserDefinedTypeName","pathNode":{"id":3423,"name":"Institution","nameLocations":["8530:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":3529,"src":"8530:11:12"},"referencedDeclaration":3529,"src":"8530:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3425,"nodeType":"ArrayTypeName","src":"8530:13:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8526:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8496:55:12"},{"body":{"id":3449,"nodeType":"Block","src":"8604:111:12","statements":[{"expression":{"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3437,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"8618:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3439,"indexExpression":{"id":3438,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"8625:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8618:9:12","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3440,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3408,"src":"8630:12:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3442,"indexExpression":{"id":3441,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"8643:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8630:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"src":"8618:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3444,"nodeType":"ExpressionStatement","src":"8618:27:12"},{"id":3448,"nodeType":"UncheckedBlock","src":"8659:46:12","statements":[{"expression":{"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8687:3:12","subExpression":{"id":3445,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"8687:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3447,"nodeType":"ExpressionStatement","src":"8687:3:12"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3434,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3431,"src":"8590:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3435,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3414,"src":"8594:6:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8590:10:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3450,"initializationExpression":{"assignments":[3431],"declarations":[{"constant":false,"id":3431,"mutability":"mutable","name":"i","nameLocation":"8583:1:12","nodeType":"VariableDeclaration","scope":3450,"src":"8575:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3430,"name":"uint256","nodeType":"ElementaryTypeName","src":"8575:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3433,"initialValue":{"hexValue":"30","id":3432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8575:13:12"},"nodeType":"ForStatement","src":"8570:145:12"},{"expression":{"id":3451,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"8740:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"functionReturnParameters":3403,"id":3452,"nodeType":"Return","src":"8733:13:12"}]},"functionSelector":"02621338","id":3454,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutions","nameLocation":"8275:24:12","nodeType":"FunctionDefinition","parameters":{"id":3398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3397,"mutability":"mutable","name":"currency","nameLocation":"8308:8:12","nodeType":"VariableDeclaration","scope":3454,"src":"8300:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3396,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8300:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8299:18:12"},"returnParameters":{"id":3403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3402,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3454,"src":"8341:20:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3400,"nodeType":"UserDefinedTypeName","pathNode":{"id":3399,"name":"Institution","nameLocations":["8341:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":3529,"src":"8341:11:12"},"referencedDeclaration":3529,"src":"8341:11:12","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3401,"nodeType":"ArrayTypeName","src":"8341:13:12","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"8340:22:12"},"scope":3519,"src":"8266:487:12","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3926],"body":{"id":3466,"nodeType":"Block","src":"8893:52:12","statements":[{"expression":{"components":[{"id":3462,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"8910:18:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":3463,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"8930:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8909:29:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint64_$_t_uint256_$","typeString":"tuple(uint64,uint256)"}},"functionReturnParameters":3461,"id":3465,"nodeType":"Return","src":"8903:35:12"}]},"documentation":{"id":3455,"nodeType":"StructuredDocumentation","src":"8759:42:12","text":"@dev See {getFeeDetails-IPaycrest}. "},"functionSelector":"b810c636","id":3467,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"8815:13:12","nodeType":"FunctionDefinition","parameters":{"id":3456,"nodeType":"ParameterList","parameters":[],"src":"8828:2:12"},"returnParameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3458,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3467,"src":"8862:6:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3457,"name":"uint64","nodeType":"ElementaryTypeName","src":"8862:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3467,"src":"8879:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3459,"name":"uint256","nodeType":"ElementaryTypeName","src":"8879:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8852:40:12"},"scope":3519,"src":"8806:139:12","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3932],"body":{"id":3475,"nodeType":"Block","src":"9068:42:12","statements":[{"expression":{"id":3473,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"9085:18:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3472,"id":3474,"nodeType":"Return","src":"9078:25:12"}]},"documentation":{"id":3468,"nodeType":"StructuredDocumentation","src":"8951:49:12","text":"@dev See {getAggregatorAddress-IPaycrest}. "},"functionSelector":"e8d6e0de","id":3476,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregatorAddress","nameLocation":"9014:20:12","nodeType":"FunctionDefinition","parameters":{"id":3469,"nodeType":"ParameterList","parameters":[],"src":"9034:2:12"},"returnParameters":{"id":3472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3476,"src":"9059:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3470,"name":"address","nodeType":"ElementaryTypeName","src":"9059:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9058:9:12"},"scope":3519,"src":"9005:105:12","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3946],"body":{"id":3488,"nodeType":"Block","src":"9244:46:12","statements":[{"expression":{"baseExpression":{"id":3484,"name":"_isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"9261:14:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3486,"indexExpression":{"id":3485,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"9276:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9261:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3483,"id":3487,"nodeType":"Return","src":"9254:29:12"}]},"documentation":{"id":3477,"nodeType":"StructuredDocumentation","src":"9116:49:12","text":"@dev See {getWhitelistedStatus-IPaycrest}. "},"functionSelector":"d8e8de34","id":3489,"implemented":true,"kind":"function","modifiers":[],"name":"getWhitelistedStatus","nameLocation":"9179:20:12","nodeType":"FunctionDefinition","parameters":{"id":3480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3479,"mutability":"mutable","name":"sender","nameLocation":"9208:6:12","nodeType":"VariableDeclaration","scope":3489,"src":"9200:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3478,"name":"address","nodeType":"ElementaryTypeName","src":"9200:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9199:16:12"},"returnParameters":{"id":3483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3482,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3489,"src":"9238:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3481,"name":"bool","nodeType":"ElementaryTypeName","src":"9238:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9237:6:12"},"scope":3519,"src":"9170:120:12","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[3938],"body":{"id":3497,"nodeType":"Block","src":"9404:35:12","statements":[{"expression":{"id":3495,"name":"_aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"9421:11:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":3494,"id":3496,"nodeType":"Return","src":"9414:18:12"}]},"documentation":{"id":3490,"nodeType":"StructuredDocumentation","src":"9296:42:12","text":"@dev See {getAggregator-IPaycrest}. "},"functionSelector":"3ad59dbc","id":3498,"implemented":true,"kind":"function","modifiers":[],"name":"getAggregator","nameLocation":"9352:13:12","nodeType":"FunctionDefinition","parameters":{"id":3491,"nodeType":"ParameterList","parameters":[],"src":"9365:2:12"},"returnParameters":{"id":3494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3498,"src":"9390:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3492,"name":"bytes","nodeType":"ElementaryTypeName","src":"9390:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9389:14:12"},"scope":3519,"src":"9343:96:12","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3517,"nodeType":"Block","src":"9626:61:12","statements":[{"expression":{"arguments":[{"id":3513,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"9660:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3514,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"9672:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3510,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3500,"src":"9643:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3509,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"9636:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2806_$","typeString":"type(contract IERC20)"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9636:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2806","typeString":"contract IERC20"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9651:8:12","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2773,"src":"9636:23:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9636:44:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3516,"nodeType":"ExpressionStatement","src":"9636:44:12"}]},"functionSelector":"d9caed12","id":3518,"implemented":true,"kind":"function","modifiers":[{"id":3507,"kind":"modifierInvocation","modifierName":{"id":3506,"name":"onlyOwner","nameLocations":["9616:9:12"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"9616:9:12"},"nodeType":"ModifierInvocation","src":"9616:9:12"}],"name":"withdraw","nameLocation":"9545:8:12","nodeType":"FunctionDefinition","parameters":{"id":3505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3500,"mutability":"mutable","name":"_token","nameLocation":"9562:6:12","nodeType":"VariableDeclaration","scope":3518,"src":"9554:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3499,"name":"address","nodeType":"ElementaryTypeName","src":"9554:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3502,"mutability":"mutable","name":"_recipient","nameLocation":"9578:10:12","nodeType":"VariableDeclaration","scope":3518,"src":"9570:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3501,"name":"address","nodeType":"ElementaryTypeName","src":"9570:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3504,"mutability":"mutable","name":"_amount","nameLocation":"9598:7:12","nodeType":"VariableDeclaration","scope":3518,"src":"9590:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3503,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9553:53:12"},"returnParameters":{"id":3508,"nodeType":"ParameterList","parameters":[],"src":"9626:0:12"},"scope":3519,"src":"9536:151:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3520,"src":"367:9323:12","usedErrors":[]}],"src":"38:9653:12"},"id":12},"contracts/PaycrestSettingManager.sol":{"ast":{"absolutePath":"contracts/PaycrestSettingManager.sol","exportedSymbols":{"AddressUpgradeable":[1120],"ContextUpgradeable":[1162],"Initializable":[300],"OwnableUpgradeable":[131],"PaycrestSettingManager":[3758]},"id":3759,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3521,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":3522,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3759,"sourceUnit":132,"src":"62:75:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3523,"name":"OwnableUpgradeable","nameLocations":["174:18:13"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"174:18:13"},"id":3524,"nodeType":"InheritanceSpecifier","src":"174:18:13"}],"canonicalName":"PaycrestSettingManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3758,"linearizedBaseContracts":[3758,131,1162,300],"name":"PaycrestSettingManager","nameLocation":"148:22:13","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PaycrestSettingManager.Institution","id":3529,"members":[{"constant":false,"id":3526,"mutability":"mutable","name":"code","nameLocation":"237:4:13","nodeType":"VariableDeclaration","scope":3529,"src":"229:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"229:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3528,"mutability":"mutable","name":"name","nameLocation":"294:4:13","nodeType":"VariableDeclaration","scope":3529,"src":"286:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3527,"name":"bytes32","nodeType":"ElementaryTypeName","src":"286:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Institution","nameLocation":"207:11:13","nodeType":"StructDefinition","scope":3758,"src":"200:109:13","visibility":"public"},{"canonicalName":"PaycrestSettingManager.InstitutionByCode","id":3534,"members":[{"constant":false,"id":3531,"mutability":"mutable","name":"name","nameLocation":"357:4:13","nodeType":"VariableDeclaration","scope":3534,"src":"349:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3530,"name":"bytes32","nodeType":"ElementaryTypeName","src":"349:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3533,"mutability":"mutable","name":"currency","nameLocation":"379:8:13","nodeType":"VariableDeclaration","scope":3534,"src":"371:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"371:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"InstitutionByCode","nameLocation":"321:17:13","nodeType":"StructDefinition","scope":3758,"src":"314:80:13","visibility":"public"},{"constant":false,"id":3536,"mutability":"mutable","name":"MAX_BPS","nameLocation":"416:7:13","nodeType":"VariableDeclaration","scope":3758,"src":"399:24:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3535,"name":"uint256","nodeType":"ElementaryTypeName","src":"399:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3538,"mutability":"mutable","name":"protocolFeePercent","nameLocation":"445:18:13","nodeType":"VariableDeclaration","scope":3758,"src":"429:34:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3537,"name":"uint64","nodeType":"ElementaryTypeName","src":"429:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3540,"mutability":"mutable","name":"feeRecipient","nameLocation":"492:12:13","nodeType":"VariableDeclaration","scope":3758,"src":"475:29:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3539,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3542,"mutability":"mutable","name":"_aggregatorAddress","nameLocation":"527:18:13","nodeType":"VariableDeclaration","scope":3758,"src":"510:35:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3541,"name":"address","nodeType":"ElementaryTypeName","src":"510:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3544,"mutability":"mutable","name":"_aggregator","nameLocation":"566:11:13","nodeType":"VariableDeclaration","scope":3758,"src":"551:26:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":3543,"name":"bytes","nodeType":"ElementaryTypeName","src":"551:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3548,"mutability":"mutable","name":"__gap","nameLocation":"717:5:13","nodeType":"VariableDeclaration","scope":3758,"src":"697:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3545,"name":"uint256","nodeType":"ElementaryTypeName","src":"697:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3547,"length":{"hexValue":"3530","id":3546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"705:2:13","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"697:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"constant":false,"id":3552,"mutability":"mutable","name":"_isTokenSupported","nameLocation":"763:17:13","nodeType":"VariableDeclaration","scope":3758,"src":"729:51:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3551,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3549,"name":"address","nodeType":"ElementaryTypeName","src":"737:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"729:24:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3550,"name":"bool","nodeType":"ElementaryTypeName","src":"748:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3556,"mutability":"mutable","name":"_isWhitelisted","nameLocation":"820:14:13","nodeType":"VariableDeclaration","scope":3758,"src":"786:48:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3555,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3553,"name":"address","nodeType":"ElementaryTypeName","src":"794:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"786:24:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3554,"name":"bool","nodeType":"ElementaryTypeName","src":"805:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3562,"mutability":"mutable","name":"supportedInstitutions","nameLocation":"884:21:13","nodeType":"VariableDeclaration","scope":3758,"src":"841:64:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"typeName":{"id":3561,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3557,"name":"bytes32","nodeType":"ElementaryTypeName","src":"849:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"841:33:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":3559,"nodeType":"UserDefinedTypeName","pathNode":{"id":3558,"name":"Institution","nameLocations":["860:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3529,"src":"860:11:13"},"referencedDeclaration":3529,"src":"860:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3560,"nodeType":"ArrayTypeName","src":"860:13:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"visibility":"internal"},{"constant":false,"id":3567,"mutability":"mutable","name":"supportedInstitutionsByCode","nameLocation":"958:27:13","nodeType":"VariableDeclaration","scope":3758,"src":"911:74:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3534_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"typeName":{"id":3566,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"919:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"911:37:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3534_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3565,"nodeType":"UserDefinedTypeName","pathNode":{"id":3564,"name":"InstitutionByCode","nameLocations":["930:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":3534,"src":"930:17:13"},"referencedDeclaration":3534,"src":"930:17:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3534_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}}},"visibility":"internal"},{"anonymous":false,"eventSelector":"e22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930","id":3575,"name":"SettingManagerBool","nameLocation":"998:18:13","nodeType":"EventDefinition","parameters":{"id":3574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3569,"indexed":false,"mutability":"mutable","name":"what","nameLocation":"1025:4:13","nodeType":"VariableDeclaration","scope":3575,"src":"1017:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1017:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3571,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1039:5:13","nodeType":"VariableDeclaration","scope":3575,"src":"1031:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3570,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3573,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"1051:6:13","nodeType":"VariableDeclaration","scope":3575,"src":"1046:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3572,"name":"bool","nodeType":"ElementaryTypeName","src":"1046:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1016:42:13"},"src":"992:67:13"},{"anonymous":false,"eventSelector":"c8ca786c100bc62a0dffbe768b5f0b770d84e8604c5de54b54197b9066bb42a9","id":3579,"name":"PaycrestFees","nameLocation":"1070:12:13","nodeType":"EventDefinition","parameters":{"id":3578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3577,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"1090:11:13","nodeType":"VariableDeclaration","scope":3579,"src":"1083:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3576,"name":"uint64","nodeType":"ElementaryTypeName","src":"1083:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1082:20:13"},"src":"1064:39:13"},{"anonymous":false,"eventSelector":"6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef","id":3583,"name":"SetAggregator","nameLocation":"1114:13:13","nodeType":"EventDefinition","parameters":{"id":3582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"indexed":false,"mutability":"mutable","name":"aggregator","nameLocation":"1134:10:13","nodeType":"VariableDeclaration","scope":3583,"src":"1128:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3580,"name":"bytes","nodeType":"ElementaryTypeName","src":"1128:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1127:18:13"},"src":"1108:38:13"},{"anonymous":false,"eventSelector":"2e979f80fe4d43055c584cf4a8467c55875ea36728fc37176c05acd784eb7a73","id":3587,"name":"SetFeeRecipient","nameLocation":"1157:15:13","nodeType":"EventDefinition","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3585,"indexed":false,"mutability":"mutable","name":"feeRecipient","nameLocation":"1181:12:13","nodeType":"VariableDeclaration","scope":3587,"src":"1173:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3584,"name":"address","nodeType":"ElementaryTypeName","src":"1173:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1172:22:13"},"src":"1151:44:13"},{"body":{"id":3634,"nodeType":"Block","src":"1490:255:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3599,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"1508:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1525:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1517:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3600,"name":"address","nodeType":"ElementaryTypeName","src":"1517:7:13","typeDescriptions":{}}},"id":3603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1517:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1508:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617963726573743a207a65726f2061646472657373","id":3605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1529:24:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""},"value":"Paycrest: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""}],"id":3598,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1500:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1500:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3607,"nodeType":"ExpressionStatement","src":"1500:54:13"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3608,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"1568:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"746f6b656e","id":3609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1576:7:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b9b0454cadcb5884dd3faa6ba975da4d2459aa3f11d31291a25a8358f84946d","typeString":"literal_string \"token\""},"value":"token"},"src":"1568:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3617,"nodeType":"IfStatement","src":"1564:54:13","trueBody":{"expression":{"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3611,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"1585:17:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3613,"indexExpression":{"id":3612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"1603:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1585:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3614,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"1612:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1585:33:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3616,"nodeType":"ExpressionStatement","src":"1585:33:13"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3618,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"1632:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"77686974656c697374","id":3619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1640:11:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_54c80de7e611b57d6d38523e3c0c59a6a3e72cddf62c95cf51a204e52c1a86ad","typeString":"literal_string \"whitelist\""},"value":"whitelist"},"src":"1632:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3627,"nodeType":"IfStatement","src":"1628:55:13","trueBody":{"expression":{"id":3625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3621,"name":"_isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"1653:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3623,"indexExpression":{"id":3622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"1668:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1653:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3624,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"1677:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1653:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3626,"nodeType":"ExpressionStatement","src":"1653:30:13"}},{"eventCall":{"arguments":[{"id":3629,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3589,"src":"1718:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3630,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3591,"src":"1724:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3631,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"1731:6:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3628,"name":"SettingManagerBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"1699:18:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bool_$returns$__$","typeString":"function (bytes32,address,bool)"}},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1699:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3633,"nodeType":"EmitStatement","src":"1694:44:13"}]},"functionSelector":"99e3c0b4","id":3635,"implemented":true,"kind":"function","modifiers":[{"id":3596,"kind":"modifierInvocation","modifierName":{"id":3595,"name":"onlyOwner","nameLocations":["1480:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1480:9:13"},"nodeType":"ModifierInvocation","src":"1480:9:13"}],"name":"settingManagerBool","nameLocation":"1410:18:13","nodeType":"FunctionDefinition","parameters":{"id":3594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3589,"mutability":"mutable","name":"what","nameLocation":"1437:4:13","nodeType":"VariableDeclaration","scope":3635,"src":"1429:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3588,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1429:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3591,"mutability":"mutable","name":"value","nameLocation":"1451:5:13","nodeType":"VariableDeclaration","scope":3635,"src":"1443:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3590,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3593,"mutability":"mutable","name":"status","nameLocation":"1463:6:13","nodeType":"VariableDeclaration","scope":3635,"src":"1458:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3592,"name":"bool","nodeType":"ElementaryTypeName","src":"1458:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1428:42:13"},"returnParameters":{"id":3597,"nodeType":"ParameterList","parameters":[],"src":"1490:0:13"},"scope":3758,"src":"1401:344:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3688,"nodeType":"Block","src":"1857:394:13","statements":[{"assignments":[3647],"declarations":[{"constant":false,"id":3647,"mutability":"mutable","name":"length","nameLocation":"1876:6:13","nodeType":"VariableDeclaration","scope":3688,"src":"1868:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3646,"name":"uint256","nodeType":"ElementaryTypeName","src":"1868:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3650,"initialValue":{"expression":{"id":3648,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"1885:12:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1898:6:13","memberName":"length","nodeType":"MemberAccess","src":"1885:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1868:36:13"},{"body":{"id":3686,"nodeType":"Block","src":"1945:300:13","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3662,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"1996:12:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3664,"indexExpression":{"id":3663,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"2009:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1996:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Institution_$3529_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}],"expression":{"baseExpression":{"id":3658,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"1959:21:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":3660,"indexExpression":{"id":3659,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"1981:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1959:31:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1991:4:13","memberName":"push","nodeType":"MemberAccess","src":"1959:36:13","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_ptr_$_t_struct$_Institution_$3529_storage_$returns$__$attached_to$_t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_ptr_$","typeString":"function (struct PaycrestSettingManager.Institution storage ref[] storage pointer,struct PaycrestSettingManager.Institution storage ref)"}},"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1959:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3666,"nodeType":"ExpressionStatement","src":"1959:53:13"},{"expression":{"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3667,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3567,"src":"2026:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3534_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3672,"indexExpression":{"expression":{"baseExpression":{"id":3668,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"2054:12:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3670,"indexExpression":{"id":3669,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"2067:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2054:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3671,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2070:4:13","memberName":"code","nodeType":"MemberAccess","referencedDeclaration":3526,"src":"2054:20:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2026:49:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3534_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":3674,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"2120:12:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3676,"indexExpression":{"id":3675,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"2133:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2120:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3677,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2136:4:13","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3528,"src":"2120:20:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3678,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"2152:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3673,"name":"InstitutionByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"2078:17:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_InstitutionByCode_$3534_storage_ptr_$","typeString":"type(struct PaycrestSettingManager.InstitutionByCode storage pointer)"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2114:4:13","2142:8:13"],"names":["name","currency"],"nodeType":"FunctionCall","src":"2078:97:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3534_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode memory"}},"src":"2026:149:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3534_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":3681,"nodeType":"ExpressionStatement","src":"2026:149:13"},{"id":3685,"nodeType":"UncheckedBlock","src":"2189:46:13","statements":[{"expression":{"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2217:3:13","subExpression":{"id":3682,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"2217:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3684,"nodeType":"ExpressionStatement","src":"2217:3:13"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3655,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"1931:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3656,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"1935:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1931:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3687,"initializationExpression":{"assignments":[3652],"declarations":[{"constant":false,"id":3652,"mutability":"mutable","name":"i","nameLocation":"1924:1:13","nodeType":"VariableDeclaration","scope":3687,"src":"1919:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3651,"name":"uint","nodeType":"ElementaryTypeName","src":"1919:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3654,"initialValue":{"hexValue":"30","id":3653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1928:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1919:10:13"},"nodeType":"ForStatement","src":"1914:331:13"}]},"functionSelector":"32200882","id":3689,"implemented":true,"kind":"function","modifiers":[{"id":3644,"kind":"modifierInvocation","modifierName":{"id":3643,"name":"onlyOwner","nameLocations":["1847:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1847:9:13"},"nodeType":"ModifierInvocation","src":"1847:9:13"}],"name":"setSupportedInstitutions","nameLocation":"1760:24:13","nodeType":"FunctionDefinition","parameters":{"id":3642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3637,"mutability":"mutable","name":"currency","nameLocation":"1793:8:13","nodeType":"VariableDeclaration","scope":3689,"src":"1785:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1785:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3641,"mutability":"mutable","name":"institutions","nameLocation":"1824:12:13","nodeType":"VariableDeclaration","scope":3689,"src":"1803:33:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3639,"nodeType":"UserDefinedTypeName","pathNode":{"id":3638,"name":"Institution","nameLocations":["1803:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3529,"src":"1803:11:13"},"referencedDeclaration":3529,"src":"1803:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3529_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3640,"nodeType":"ArrayTypeName","src":"1803:13:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3529_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"1784:53:13"},"returnParameters":{"id":3645,"nodeType":"ParameterList","parameters":[],"src":"1857:0:13"},"scope":3758,"src":"1751:500:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3704,"nodeType":"Block","src":"2332:105:13","statements":[{"expression":{"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3696,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"2342:18:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3697,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"2363:19:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"2342:40:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":3699,"nodeType":"ExpressionStatement","src":"2342:40:13"},{"eventCall":{"arguments":[{"id":3701,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"2410:19:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":3700,"name":"PaycrestFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"2397:12:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$returns$__$","typeString":"function (uint64)"}},"id":3702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2397:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3703,"nodeType":"EmitStatement","src":"2392:38:13"}]},"functionSelector":"84630736","id":3705,"implemented":true,"kind":"function","modifiers":[{"id":3694,"kind":"modifierInvocation","modifierName":{"id":3693,"name":"onlyOwner","nameLocations":["2322:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2322:9:13"},"nodeType":"ModifierInvocation","src":"2322:9:13"}],"name":"updateProtocolFees","nameLocation":"2266:18:13","nodeType":"FunctionDefinition","parameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"_protocolFeePercent","nameLocation":"2292:19:13","nodeType":"VariableDeclaration","scope":3705,"src":"2285:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3690,"name":"uint64","nodeType":"ElementaryTypeName","src":"2285:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2284:28:13"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[],"src":"2332:0:13"},"scope":3758,"src":"2257:180:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3740,"nodeType":"Block","src":"2524:182:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3715,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"2542:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2559:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2551:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3716,"name":"address","nodeType":"ElementaryTypeName","src":"2551:7:13","typeDescriptions":{}}},"id":3719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2551:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2542:19:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50617963726573743a207a65726f2061646472657373","id":3721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2563:24:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""},"value":"Paycrest: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","typeString":"literal_string \"Paycrest: zero address\""}],"id":3714,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2534:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2534:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3723,"nodeType":"ExpressionStatement","src":"2534:54:13"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3724,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3707,"src":"2602:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"666565","id":3725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2610:5:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02","typeString":"literal_string \"fee\""},"value":"fee"},"src":"2602:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3731,"nodeType":"IfStatement","src":"2598:39:13","trueBody":{"expression":{"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3727,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"2617:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3728,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"2632:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2617:20:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3730,"nodeType":"ExpressionStatement","src":"2617:20:13"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3732,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3707,"src":"2651:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"61676772656761746f72","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2659:12:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_e124d7cc79a19705865fa21b784ba187cd393559e960c0c071132cb60354d1a3","typeString":"literal_string \"aggregator\""},"value":"aggregator"},"src":"2651:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3739,"nodeType":"IfStatement","src":"2647:52:13","trueBody":{"expression":{"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3735,"name":"_aggregatorAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"2673:18:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3736,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3709,"src":"2694:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2673:26:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3738,"nodeType":"ExpressionStatement","src":"2673:26:13"}}]},"functionSelector":"79a0effb","id":3741,"implemented":true,"kind":"function","modifiers":[{"id":3712,"kind":"modifierInvocation","modifierName":{"id":3711,"name":"onlyOwner","nameLocations":["2514:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2514:9:13"},"nodeType":"ModifierInvocation","src":"2514:9:13"}],"name":"updateProtocolAddresses","nameLocation":"2452:23:13","nodeType":"FunctionDefinition","parameters":{"id":3710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3707,"mutability":"mutable","name":"what","nameLocation":"2484:4:13","nodeType":"VariableDeclaration","scope":3741,"src":"2476:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3706,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2476:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3709,"mutability":"mutable","name":"value","nameLocation":"2498:5:13","nodeType":"VariableDeclaration","scope":3741,"src":"2490:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3708,"name":"address","nodeType":"ElementaryTypeName","src":"2490:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2475:29:13"},"returnParameters":{"id":3713,"nodeType":"ParameterList","parameters":[],"src":"2524:0:13"},"scope":3758,"src":"2443:263:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3756,"nodeType":"Block","src":"2792:81:13","statements":[{"expression":{"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3748,"name":"_aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"2802:11:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3749,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"2816:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"src":"2802:24:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":3751,"nodeType":"ExpressionStatement","src":"2802:24:13"},{"eventCall":{"arguments":[{"id":3753,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"2855:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3752,"name":"SetAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3583,"src":"2841:13:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory)"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2841:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3755,"nodeType":"EmitStatement","src":"2836:30:13"}]},"functionSelector":"cb79455b","id":3757,"implemented":true,"kind":"function","modifiers":[{"id":3746,"kind":"modifierInvocation","modifierName":{"id":3745,"name":"onlyOwner","nameLocations":["2782:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2782:9:13"},"nodeType":"ModifierInvocation","src":"2782:9:13"}],"name":"updateProtocolAggregator","nameLocation":"2721:24:13","nodeType":"FunctionDefinition","parameters":{"id":3744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3743,"mutability":"mutable","name":"aggregator","nameLocation":"2761:10:13","nodeType":"VariableDeclaration","scope":3757,"src":"2746:25:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3742,"name":"bytes","nodeType":"ElementaryTypeName","src":"2746:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2745:27:13"},"returnParameters":{"id":3747,"nodeType":"ParameterList","parameters":[],"src":"2792:0:13"},"scope":3758,"src":"2712:161:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3759,"src":"139:2737:13","usedErrors":[]}],"src":"38:2839:13"},"id":13},"contracts/interface/IPaycrest.sol":{"ast":{"absolutePath":"contracts/interface/IPaycrest.sol","exportedSymbols":{"IERC20":[2806],"IPaycrest":[3947]},"id":3948,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3760,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:14"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3762,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3948,"sourceUnit":2807,"src":"63:70:14","symbolAliases":[{"foreign":{"id":3761,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"71:6:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrest","contractDependencies":[],"contractKind":"interface","documentation":{"id":3763,"nodeType":"StructuredDocumentation","src":"134:130:14","text":" @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\n Factory and global config params"},"fullyImplemented":false,"id":3947,"linearizedBaseContracts":[3947],"name":"IPaycrest","nameLocation":"275:9:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3764,"nodeType":"StructuredDocumentation","src":"483:38:14","text":"@dev Emitted when deposit is made."},"eventSelector":"2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b","id":3780,"name":"Deposit","nameLocation":"532:7:14","nodeType":"EventDefinition","parameters":{"id":3779,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3766,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"556:5:14","nodeType":"VariableDeclaration","scope":3780,"src":"540:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3765,"name":"address","nodeType":"ElementaryTypeName","src":"540:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3768,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"579:6:14","nodeType":"VariableDeclaration","scope":3780,"src":"563:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3767,"name":"uint256","nodeType":"ElementaryTypeName","src":"563:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3770,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"603:7:14","nodeType":"VariableDeclaration","scope":3780,"src":"587:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3769,"name":"bytes32","nodeType":"ElementaryTypeName","src":"587:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3772,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"620:4:14","nodeType":"VariableDeclaration","scope":3780,"src":"612:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3771,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3774,"indexed":false,"mutability":"mutable","name":"institutionCode","nameLocation":"634:15:14","nodeType":"VariableDeclaration","scope":3780,"src":"626:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3773,"name":"bytes32","nodeType":"ElementaryTypeName","src":"626:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3776,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"659:5:14","nodeType":"VariableDeclaration","scope":3780,"src":"651:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3775,"name":"bytes32","nodeType":"ElementaryTypeName","src":"651:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3778,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"673:11:14","nodeType":"VariableDeclaration","scope":3780,"src":"666:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3777,"name":"string","nodeType":"ElementaryTypeName","src":"666:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"539:146:14"},"src":"526:160:14"},{"anonymous":false,"documentation":{"id":3781,"nodeType":"StructuredDocumentation","src":"691:52:14","text":"@dev Emitted when aggregator settle transaction."},"eventSelector":"f26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c05326","id":3793,"name":"Settled","nameLocation":"754:7:14","nodeType":"EventDefinition","parameters":{"id":3792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3783,"indexed":false,"mutability":"mutable","name":"_splitOrderId","nameLocation":"770:13:14","nodeType":"VariableDeclaration","scope":3793,"src":"762:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3782,"name":"bytes32","nodeType":"ElementaryTypeName","src":"762:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3785,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"801:7:14","nodeType":"VariableDeclaration","scope":3793,"src":"785:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3784,"name":"bytes32","nodeType":"ElementaryTypeName","src":"785:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3787,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"818:5:14","nodeType":"VariableDeclaration","scope":3793,"src":"810:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3786,"name":"bytes32","nodeType":"ElementaryTypeName","src":"810:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3789,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"841:17:14","nodeType":"VariableDeclaration","scope":3793,"src":"825:33:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3788,"name":"address","nodeType":"ElementaryTypeName","src":"825:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3791,"indexed":false,"mutability":"mutable","name":"settlePercent","nameLocation":"867:13:14","nodeType":"VariableDeclaration","scope":3793,"src":"860:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3790,"name":"uint96","nodeType":"ElementaryTypeName","src":"860:6:14","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"761:120:14"},"src":"748:134:14"},{"anonymous":false,"documentation":{"id":3794,"nodeType":"StructuredDocumentation","src":"887:52:14","text":"@dev Emitted when aggregator refund transaction."},"eventSelector":"007c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f","id":3800,"name":"Refunded","nameLocation":"950:8:14","nodeType":"EventDefinition","parameters":{"id":3799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3796,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"975:7:14","nodeType":"VariableDeclaration","scope":3800,"src":"959:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3795,"name":"bytes32","nodeType":"ElementaryTypeName","src":"959:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3798,"indexed":false,"mutability":"mutable","name":"label","nameLocation":"992:5:14","nodeType":"VariableDeclaration","scope":3800,"src":"984:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"984:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"958:40:14"},"src":"944:55:14"},{"anonymous":false,"documentation":{"id":3801,"nodeType":"StructuredDocumentation","src":"1004:48:14","text":"@dev Emitted when sender get therir rewards."},"eventSelector":"96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2","id":3807,"name":"TransferSenderFee","nameLocation":"1063:17:14","nodeType":"EventDefinition","parameters":{"id":3806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3803,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1097:6:14","nodeType":"VariableDeclaration","scope":3807,"src":"1081:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3802,"name":"address","nodeType":"ElementaryTypeName","src":"1081:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3805,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1121:6:14","nodeType":"VariableDeclaration","scope":3807,"src":"1105:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1105:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1080:48:14"},"src":"1057:72:14"},{"anonymous":false,"documentation":{"id":3808,"nodeType":"StructuredDocumentation","src":"1134:59:14","text":"@dev Emitted when primary validator get therir rewards."},"eventSelector":"61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c2","id":3814,"name":"RewardValidator","nameLocation":"1204:15:14","nodeType":"EventDefinition","parameters":{"id":3813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3810,"indexed":true,"mutability":"mutable","name":"validator","nameLocation":"1236:9:14","nodeType":"VariableDeclaration","scope":3814,"src":"1220:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3809,"name":"address","nodeType":"ElementaryTypeName","src":"1220:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3812,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1263:6:14","nodeType":"VariableDeclaration","scope":3814,"src":"1247:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3811,"name":"uint256","nodeType":"ElementaryTypeName","src":"1247:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1219:51:14"},"src":"1198:73:14"},{"canonicalName":"IPaycrest.TransactionMetadata","id":3825,"members":[{"constant":false,"id":3816,"mutability":"mutable","name":"identifier","nameLocation":"1509:10:14","nodeType":"VariableDeclaration","scope":3825,"src":"1502:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3815,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1502:6:14","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3818,"mutability":"mutable","name":"institution","nameLocation":"1628:11:14","nodeType":"VariableDeclaration","scope":3825,"src":"1621:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3817,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1621:6:14","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3820,"mutability":"mutable","name":"name","nameLocation":"1747:4:14","nodeType":"VariableDeclaration","scope":3825,"src":"1740:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3819,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1740:6:14","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3822,"mutability":"mutable","name":"currency","nameLocation":"1866:8:14","nodeType":"VariableDeclaration","scope":3825,"src":"1859:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3821,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1859:6:14","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3824,"mutability":"mutable","name":"liquidityProviderID","nameLocation":"1986:19:14","nodeType":"VariableDeclaration","scope":3825,"src":"1978:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3823,"name":"uint256","nodeType":"ElementaryTypeName","src":"1978:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TransactionMetadata","nameLocation":"1472:19:14","nodeType":"StructDefinition","scope":3947,"src":"1465:629:14","visibility":"public"},{"canonicalName":"IPaycrest.Order","id":3844,"members":[{"constant":false,"id":3827,"mutability":"mutable","name":"seller","nameLocation":"2131:6:14","nodeType":"VariableDeclaration","scope":3844,"src":"2123:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3826,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3829,"mutability":"mutable","name":"token","nameLocation":"2251:5:14","nodeType":"VariableDeclaration","scope":3844,"src":"2243:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3828,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3831,"mutability":"mutable","name":"senderFeeRecipient","nameLocation":"2371:18:14","nodeType":"VariableDeclaration","scope":3844,"src":"2363:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3830,"name":"address","nodeType":"ElementaryTypeName","src":"2363:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3833,"mutability":"mutable","name":"senderFee","nameLocation":"2407:9:14","nodeType":"VariableDeclaration","scope":3844,"src":"2399:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3832,"name":"uint256","nodeType":"ElementaryTypeName","src":"2399:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3835,"mutability":"mutable","name":"rate","nameLocation":"2433:4:14","nodeType":"VariableDeclaration","scope":3844,"src":"2426:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3834,"name":"uint96","nodeType":"ElementaryTypeName","src":"2426:6:14","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3837,"mutability":"mutable","name":"isFulfilled","nameLocation":"2551:11:14","nodeType":"VariableDeclaration","scope":3844,"src":"2546:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3836,"name":"bool","nodeType":"ElementaryTypeName","src":"2546:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3839,"mutability":"mutable","name":"refundAddress","nameLocation":"2695:13:14","nodeType":"VariableDeclaration","scope":3844,"src":"2687:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3838,"name":"address","nodeType":"ElementaryTypeName","src":"2687:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3841,"mutability":"mutable","name":"currentBPS","nameLocation":"2835:10:14","nodeType":"VariableDeclaration","scope":3844,"src":"2828:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3840,"name":"uint96","nodeType":"ElementaryTypeName","src":"2828:6:14","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3843,"mutability":"mutable","name":"amount","nameLocation":"2959:6:14","nodeType":"VariableDeclaration","scope":3844,"src":"2951:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3842,"name":"uint256","nodeType":"ElementaryTypeName","src":"2951:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Order","nameLocation":"2107:5:14","nodeType":"StructDefinition","scope":3947,"src":"2100:968:14","visibility":"public"},{"documentation":{"id":3845,"nodeType":"StructuredDocumentation","src":"3270:1232:14","text":"@notice lock sender `_amount` of `token` into Paycrest.\n Requirements:\n `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n `_token` must be an acceptable token. @dev See {isTokenSupported}.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _token address of the token.\n @param _amount amount in the decimal of `_token` above.\n @param _institutionCode institution code of the sender.\n @param _label reference of the sender.\n @param _rate rate at which sender intended to sell `_amount` of `_token`.\n @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\n @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\n @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n @return _orderId the bytes20 which is the orderId"},"functionSelector":"2654ec7e","id":3868,"implemented":false,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"4516:11:14","nodeType":"FunctionDefinition","parameters":{"id":3864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"_token","nameLocation":"4545:6:14","nodeType":"VariableDeclaration","scope":3868,"src":"4537:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3846,"name":"address","nodeType":"ElementaryTypeName","src":"4537:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3849,"mutability":"mutable","name":"_amount","nameLocation":"4570:7:14","nodeType":"VariableDeclaration","scope":3868,"src":"4562:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3848,"name":"uint256","nodeType":"ElementaryTypeName","src":"4562:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3851,"mutability":"mutable","name":"_institutionCode","nameLocation":"4596:16:14","nodeType":"VariableDeclaration","scope":3868,"src":"4588:24:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3850,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4588:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3853,"mutability":"mutable","name":"_label","nameLocation":"4630:6:14","nodeType":"VariableDeclaration","scope":3868,"src":"4622:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3852,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4622:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3855,"mutability":"mutable","name":"_rate","nameLocation":"4653:5:14","nodeType":"VariableDeclaration","scope":3868,"src":"4646:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3854,"name":"uint96","nodeType":"ElementaryTypeName","src":"4646:6:14","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":3857,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"4677:19:14","nodeType":"VariableDeclaration","scope":3868,"src":"4669:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3856,"name":"address","nodeType":"ElementaryTypeName","src":"4669:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3859,"mutability":"mutable","name":"_senderFee","nameLocation":"4714:10:14","nodeType":"VariableDeclaration","scope":3868,"src":"4706:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3858,"name":"uint256","nodeType":"ElementaryTypeName","src":"4706:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3861,"mutability":"mutable","name":"_refundAddress","nameLocation":"4742:14:14","nodeType":"VariableDeclaration","scope":3868,"src":"4734:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3860,"name":"address","nodeType":"ElementaryTypeName","src":"4734:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3863,"mutability":"mutable","name":"messageHash","nameLocation":"4783:11:14","nodeType":"VariableDeclaration","scope":3868,"src":"4767:27:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3862,"name":"string","nodeType":"ElementaryTypeName","src":"4767:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4527:268:14"},"returnParameters":{"id":3867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3866,"mutability":"mutable","name":"_orderId","nameLocation":"4822:8:14","nodeType":"VariableDeclaration","scope":3868,"src":"4814:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3865,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4814:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4813:18:14"},"scope":3947,"src":"4507:325:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3869,"nodeType":"StructuredDocumentation","src":"4838:891:14","text":"@notice settle transaction and distribute rewards accordingly.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `_primaryValidator` must have stake on the Paycrest staking platform.\n `_secondaryValidators` must have stake on the Paycrest staking platform.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _orderId transaction Id.\n @param _label reference of the sender.\n @param _validators arrays of secondary validators.\n @param _liquidityProvider address of the liquidity provider.\n @param _settlePercent rate at which the transaction is settled.\n @param _isPartner is the liquidity provider a partner.\n @return return the status of transaction {bool}"},"functionSelector":"137764fb","id":3891,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"5743:6:14","nodeType":"FunctionDefinition","parameters":{"id":3885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3871,"mutability":"mutable","name":"_splitOrderId","nameLocation":"5758:13:14","nodeType":"VariableDeclaration","scope":3891,"src":"5750:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5750:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3873,"mutability":"mutable","name":"_orderId","nameLocation":"5781:8:14","nodeType":"VariableDeclaration","scope":3891,"src":"5773:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5773:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3875,"mutability":"mutable","name":"_label","nameLocation":"5799:6:14","nodeType":"VariableDeclaration","scope":3891,"src":"5791:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3874,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5791:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3878,"mutability":"mutable","name":"_validators","nameLocation":"5826:11:14","nodeType":"VariableDeclaration","scope":3891,"src":"5807:30:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3876,"name":"address","nodeType":"ElementaryTypeName","src":"5807:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3877,"nodeType":"ArrayTypeName","src":"5807:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3880,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"5847:18:14","nodeType":"VariableDeclaration","scope":3891,"src":"5839:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3879,"name":"address","nodeType":"ElementaryTypeName","src":"5839:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3882,"mutability":"mutable","name":"_settlePercent","nameLocation":"5874:14:14","nodeType":"VariableDeclaration","scope":3891,"src":"5867:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3881,"name":"uint64","nodeType":"ElementaryTypeName","src":"5867:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3884,"mutability":"mutable","name":"_isPartner","nameLocation":"5895:10:14","nodeType":"VariableDeclaration","scope":3891,"src":"5890:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3883,"name":"bool","nodeType":"ElementaryTypeName","src":"5890:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5749:157:14"},"returnParameters":{"id":3890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3891,"src":"5925:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3886,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5925:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3891,"src":"5934:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3888,"name":"address","nodeType":"ElementaryTypeName","src":"5934:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5924:18:14"},"scope":3947,"src":"5734:209:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3892,"nodeType":"StructuredDocumentation","src":"5949:383:14","text":"@notice refund to the specified refundable address.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `isFulfilled` must be false.\n @param _orderId transaction Id.\n @param _label reference of the sender.\n @return return the status of transaction {bool}"},"functionSelector":"e4683a79","id":3901,"implemented":false,"kind":"function","modifiers":[],"name":"refund","nameLocation":"6346:6:14","nodeType":"FunctionDefinition","parameters":{"id":3897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3894,"mutability":"mutable","name":"_orderId","nameLocation":"6361:8:14","nodeType":"VariableDeclaration","scope":3901,"src":"6353:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3893,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6353:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3896,"mutability":"mutable","name":"_label","nameLocation":"6379:6:14","nodeType":"VariableDeclaration","scope":3901,"src":"6371:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3895,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6371:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6352:34:14"},"returnParameters":{"id":3900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3901,"src":"6405:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3898,"name":"bool","nodeType":"ElementaryTypeName","src":"6405:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6404:6:14"},"scope":3947,"src":"6337:74:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3902,"nodeType":"StructuredDocumentation","src":"6417:152:14","text":"@notice get supported token from Paycrest.\n @param _token address of the token to check.\n @return return the status of `_token` {bool}"},"functionSelector":"75151b63","id":3909,"implemented":false,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"6583:16:14","nodeType":"FunctionDefinition","parameters":{"id":3905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3904,"mutability":"mutable","name":"_token","nameLocation":"6608:6:14","nodeType":"VariableDeclaration","scope":3909,"src":"6600:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3903,"name":"address","nodeType":"ElementaryTypeName","src":"6600:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6599:16:14"},"returnParameters":{"id":3908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3909,"src":"6638:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3906,"name":"bool","nodeType":"ElementaryTypeName","src":"6638:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6637:6:14"},"scope":3947,"src":"6574:70:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3910,"nodeType":"StructuredDocumentation","src":"6650:70:14","text":"@notice get order details.\n @param _orderId transaction Id."},"functionSelector":"768c6ec0","id":3918,"implemented":false,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"6734:12:14","nodeType":"FunctionDefinition","parameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3912,"mutability":"mutable","name":"_orderId","nameLocation":"6755:8:14","nodeType":"VariableDeclaration","scope":3918,"src":"6747:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6747:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6746:18:14"},"returnParameters":{"id":3917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3918,"src":"6787:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":3915,"nodeType":"UserDefinedTypeName","pathNode":{"id":3914,"name":"Order","nameLocations":["6787:5:14"],"nodeType":"IdentifierPath","referencedDeclaration":3844,"src":"6787:5:14"},"referencedDeclaration":3844,"src":"6787:5:14","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$3844_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"6786:14:14"},"scope":3947,"src":"6725:76:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3919,"nodeType":"StructuredDocumentation","src":"6807:204:14","text":"@notice get every rewards and address on Paycrest.\n @return protocolReward amount that will be taken in percentage on all trade.\n @return max_bps maximum amount in bps \"100% == 100_000\"."},"functionSelector":"b810c636","id":3926,"implemented":false,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"7025:13:14","nodeType":"FunctionDefinition","parameters":{"id":3920,"nodeType":"ParameterList","parameters":[],"src":"7038:2:14"},"returnParameters":{"id":3925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3922,"mutability":"mutable","name":"protocolReward","nameLocation":"7079:14:14","nodeType":"VariableDeclaration","scope":3926,"src":"7072:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":3921,"name":"uint64","nodeType":"ElementaryTypeName","src":"7072:6:14","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":3924,"mutability":"mutable","name":"max_bps","nameLocation":"7112:7:14","nodeType":"VariableDeclaration","scope":3926,"src":"7104:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3923,"name":"uint256","nodeType":"ElementaryTypeName","src":"7104:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7062:63:14"},"scope":3947,"src":"7016:110:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3927,"nodeType":"StructuredDocumentation","src":"7132:89:14","text":"@notice get address of liquidity aggregator.\n @return address of `Aggregator`."},"functionSelector":"e8d6e0de","id":3932,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregatorAddress","nameLocation":"7235:20:14","nodeType":"FunctionDefinition","parameters":{"id":3928,"nodeType":"ParameterList","parameters":[],"src":"7255:2:14"},"returnParameters":{"id":3931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3932,"src":"7280:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3929,"name":"address","nodeType":"ElementaryTypeName","src":"7280:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7279:9:14"},"scope":3947,"src":"7226:63:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3933,"nodeType":"StructuredDocumentation","src":"7295:77:14","text":"@notice get aggregator public key.\n @return aggregator public key."},"functionSelector":"3ad59dbc","id":3938,"implemented":false,"kind":"function","modifiers":[],"name":"getAggregator","nameLocation":"7386:13:14","nodeType":"FunctionDefinition","parameters":{"id":3934,"nodeType":"ParameterList","parameters":[],"src":"7399:2:14"},"returnParameters":{"id":3937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3938,"src":"7424:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3935,"name":"bytes","nodeType":"ElementaryTypeName","src":"7424:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7423:14:14"},"scope":3947,"src":"7377:61:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3939,"nodeType":"StructuredDocumentation","src":"7448:136:14","text":"@notice get address of sender whitelisting status.\n @param sender address of the sender.\n @return address of `status`."},"functionSelector":"d8e8de34","id":3946,"implemented":false,"kind":"function","modifiers":[],"name":"getWhitelistedStatus","nameLocation":"7598:20:14","nodeType":"FunctionDefinition","parameters":{"id":3942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3941,"mutability":"mutable","name":"sender","nameLocation":"7627:6:14","nodeType":"VariableDeclaration","scope":3946,"src":"7619:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3940,"name":"address","nodeType":"ElementaryTypeName","src":"7619:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7618:16:14"},"returnParameters":{"id":3945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3944,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3946,"src":"7657:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3943,"name":"bool","nodeType":"ElementaryTypeName","src":"7657:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7656:6:14"},"scope":3947,"src":"7589:74:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3948,"src":"265:7401:14","usedErrors":[]}],"src":"38:7629:14"},"id":14}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1161,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)":"infinite","forceApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1161,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Paycrest.sol":{"Paycrest":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"PaycrestFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardValidator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"SetAggregator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAggregator","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAggregatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"}],"name":"getSupportedInstitutionName","outputs":[{"components":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"bytes32","name":"currency","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.InstitutionByCode","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"}],"name":"getSupportedInstitutions","outputs":[{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"getWhitelistedStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_usdc","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"address[]","name":"_validators","type":"address[]"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"},{"internalType":"bool","name":"_isPartner","type":"bool"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"updateProtocolAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)":{"details":"Emitted when deposit is made."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Refunded(bytes32,bytes32)":{"details":"Emitted when aggregator refund transaction."},"RewardValidator(address,uint256)":{"details":"Emitted when primary validator get therir rewards."},"Settled(bytes32,bytes32,bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get therir rewards."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"details":"See {createOrder-IPaycrest}. "},"getAggregator()":{"details":"See {getAggregator-IPaycrest}. "},"getAggregatorAddress()":{"details":"See {getAggregatorAddress-IPaycrest}. "},"getFeeDetails()":{"details":"See {getFeeDetails-IPaycrest}. "},"getOrderInfo(bytes32)":{"details":"See {getOrderInfo-IPaycrest}. "},"getSupportedInstitutionName(bytes32)":{"details":"See {getSupportedInstitutionName-IPaycrest}. "},"getWhitelistedStatus(address)":{"details":"See {getWhitelistedStatus-IPaycrest}. "},"isTokenSupported(address)":{"details":"See {isTokenSupported-IPaycrest}. "},"owner()":{"details":"Returns the address of the current owner."},"refund(bytes32,bytes32)":{"details":"See {refund-IPaycrest}. "},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)":{"details":"See {settle-IPaycrest}. "},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2852":{"entryPoint":null,"id":2852,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_281":{"entryPoint":40,"id":281,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:15","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:15"},"nodeType":"YulFunctionCall","src":"113:19:15"},"nodeType":"YulExpressionStatement","src":"113:19:15"},{"nodeType":"YulAssignment","src":"141:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:15"},"nodeType":"YulFunctionCall","src":"156:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:15","type":""}],"src":"7:169:15"},{"body":{"nodeType":"YulBlock","src":"288:120:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:15"},"nodeType":"YulFunctionCall","src":"306:14:15"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:15","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:15"},"nodeType":"YulFunctionCall","src":"299:58:15"},"nodeType":"YulExpressionStatement","src":"299:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:15"},"nodeType":"YulFunctionCall","src":"374:15:15"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:15","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:15"},"nodeType":"YulFunctionCall","src":"367:34:15"},"nodeType":"YulExpressionStatement","src":"367:34:15"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:15","type":""}],"src":"182:226:15"},{"body":{"nodeType":"YulBlock","src":"560:220:15","statements":[{"nodeType":"YulAssignment","src":"570:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:15","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:15"},"nodeType":"YulFunctionCall","src":"577:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:15"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:15"},"nodeType":"YulFunctionCall","src":"653:93:15"},"nodeType":"YulExpressionStatement","src":"653:93:15"},{"nodeType":"YulAssignment","src":"755:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:15"},"nodeType":"YulFunctionCall","src":"762:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:15"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:15","type":""}],"src":"414:366:15"},{"body":{"nodeType":"YulBlock","src":"957:248:15","statements":[{"nodeType":"YulAssignment","src":"967:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:15"},"nodeType":"YulFunctionCall","src":"975:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:15"},"nodeType":"YulFunctionCall","src":"1010:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:15"},"nodeType":"YulFunctionCall","src":"1029:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:15"},"nodeType":"YulFunctionCall","src":"1003:47:15"},"nodeType":"YulExpressionStatement","src":"1003:47:15"},{"nodeType":"YulAssignment","src":"1059:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:15"},"nodeType":"YulFunctionCall","src":"1067:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:15","type":""}],"src":"786:419:15"},{"body":{"nodeType":"YulBlock","src":"1254:43:15","statements":[{"nodeType":"YulAssignment","src":"1264:27:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:15","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:15"},"nodeType":"YulFunctionCall","src":"1275:16:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:15"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:15","type":""}],"src":"1211:86:15"},{"body":{"nodeType":"YulBlock","src":"1364:51:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:15"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:15"},"nodeType":"YulFunctionCall","src":"1386:22:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:15"},"nodeType":"YulFunctionCall","src":"1374:35:15"},"nodeType":"YulExpressionStatement","src":"1374:35:15"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:15","type":""}],"src":"1303:112:15"},{"body":{"nodeType":"YulBlock","src":"1515:120:15","statements":[{"nodeType":"YulAssignment","src":"1525:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:15"},"nodeType":"YulFunctionCall","src":"1533:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:15"},"nodeType":"YulFunctionCall","src":"1610:17:15"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:15"},"nodeType":"YulFunctionCall","src":"1561:67:15"},"nodeType":"YulExpressionStatement","src":"1561:67:15"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:15","type":""}],"src":"1421:214:15"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b613e2b80620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806387490d86116100b8578063cb79455b1161007c578063cb79455b1461034e578063d8e8de341461036a578063d9caed121461039a578063e4683a79146103b6578063e8d6e0de146103e6578063f2fde38b1461040457610137565b806387490d86146102a95780638da5cb5b146102d957806399e3c0b4146102f7578063b810c63614610313578063c4d66de81461033257610137565b8063715018a6116100ff578063715018a61461020757806375151b6314610211578063768c6ec01461024157806379a0effb14610271578063846307361461028d57610137565b8063026213381461013c578063137764fb1461016c5780632654ec7e1461019d57806332200882146101cd5780633ad59dbc146101e9575b600080fd5b610156600480360381019061015191906124c1565b610420565b60405161016391906125db565b60405180910390f35b61018660048036038101906101819190612738565b61055e565b604051610194929190612818565b60405180910390f35b6101b760048036038101906101b29190612911565b610959565b6040516101c491906129fc565b60405180910390f35b6101e760048036038101906101e29190612bbb565b610e21565b005b6101f1610f35565b6040516101fe9190612c96565b60405180910390f35b61020f610fc7565b005b61022b60048036038101906102269190612cb8565b610fdb565b6040516102389190612cf4565b60405180910390f35b61025b600480360381019061025691906124c1565b611031565b6040516102689190612e02565b60405180910390f35b61028b60048036038101906102869190612e1e565b611262565b005b6102a760048036038101906102a29190612e5e565b6113af565b005b6102c360048036038101906102be91906124c1565b61141a565b6040516102d09190612eba565b60405180910390f35b6102e161145b565b6040516102ee9190612ed5565b60405180910390f35b610311600480360381019061030c9190612ef0565b611485565b005b61031b61163a565b604051610329929190612f61565b60405180910390f35b61034c60048036038101906103479190612cb8565b61165f565b005b61036860048036038101906103639190612fe0565b61182b565b005b610384600480360381019061037f9190612cb8565b611882565b6040516103919190612cf4565b60405180910390f35b6103b460048036038101906103af919061302d565b6118d8565b005b6103d060048036038101906103cb9190613080565b611964565b6040516103dd9190612cf4565b60405180910390f35b6103ee611c11565b6040516103fb9190612ed5565b60405180910390f35b61041e60048036038101906104199190612cb8565b611c3b565b005b60606000609d6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561049d57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610457565b50505050905060008151905060008167ffffffffffffffff8111156104c5576104c4612a28565b5b6040519080825280602002602001820160405280156104fe57816020015b6104eb61235b565b8152602001906001900390816104e35790505b50905060005b828110156105525783818151811061051f5761051e6130c0565b5b602002602001015182828151811061053a576105396130c0565b5b60200260200101819052508080600101915050610504565b50809350505050919050565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e89061314c565b60405180910390fd5b609f60008a8152602001908152602001600020600401600c9054906101000a900460ff1615610655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064c906131b8565b60405180910390fd5b6000609f60008b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508467ffffffffffffffff16609f60008c815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff166106d79190613207565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600061071c8b8767ffffffffffffffff1687611cbe565b90506000609f60008d815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16036107bb576001609f60008d8152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000609f60008d81526020019081526020016000206003015411156107ba576107b98b611dcf565b5b5b60008160000151111561086e578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606660089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600001516040518363ffffffff1660e01b8152600401610829929190613247565b6020604051808303816000875af1158015610848573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086c9190613285565b505b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8883602001516040518363ffffffff1660e01b81526004016108ad929190613247565b6020604051808303816000875af11580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190613285565b508673ffffffffffffffffffffffffffffffffffffffff168b7ff26de978cbaea68ea699627155a10ad53df3321b0f95a08264c0cfd6d4c053268e8d8a60405161093c939291906132ed565b60405180910390a38a829350935050509850989650505050505050565b60006109688b8b86898d611f23565b606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff168b6109979190613324565b6109a19190613395565b8511156109e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109da90613412565b60405180910390fd5b8a73ffffffffffffffffffffffffffffffffffffffff166323b872dd33308d6040518463ffffffff1660e01b8152600401610a2093929190613432565b6020604051808303816000875af1158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a639190613285565b5060a060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610ab490613469565b91905055503360a060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054604051602001610b0b929190613247565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff16815260200160655467ffffffffffffffff166bffffffffffffffffffffffff1681526020018b815250609f600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506101008201518160060155905050808a8c73ffffffffffffffffffffffffffffffffffffffff167f2c205f90c01160d42994a0eb521810056d94bb82a1fcb038d7179c4158a1f15b8a8d8d8989604051610e0b95949392919061351e565b60405180910390a49a9950505050505050505050565b610e29612132565b60008151905060005b81811015610f2f57609d6000858152602001908152602001600020838281518110610e6057610e5f6130c0565b5b60200260200101519080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506040518060400160405280848381518110610ec557610ec46130c0565b5b602002602001015160200151815260200185815250609e6000858481518110610ef157610ef06130c0565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610e32565b50505050565b606060688054610f449061359b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f709061359b565b8015610fbd5780601f10610f9257610100808354040283529160200191610fbd565b820191906000526020600020905b815481529060010190602001808311610fa057829003601f168201915b5050505050905090565b610fcf612132565b610fd960006121b0565b565b6000609b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61103961237b565b609f6000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b61126a612132565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d090613618565b60405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036113425780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036113ab5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6113b7612132565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc8ca786c100bc62a0dffbe768b5f0b770d84e8604c5de54b54197b9066bb42a98160405161140f9190613638565b60405180910390a150565b61142261243d565b609e6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61148d612132565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f390613618565b60405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361157b5780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036115fa5780609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161162d93929190613653565b60405180910390a1505050565b600080606660009054906101000a900467ffffffffffffffff16606554915091509091565b60008060019054906101000a900460ff161590508080156116905750600160008054906101000a900460ff1660ff16105b806116bd575061169f30612276565b1580156116bc5750600160008054906101000a900460ff1660ff16145b5b6116fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f3906136fc565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611739576001600060016101000a81548160ff0219169083151502179055505b6001609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620186a0606581905550611388606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506117ce612299565b80156118275760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161181e9190613764565b60405180910390a15b5050565b611833612132565b81816068918261184492919061392c565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef8282604051611876929190613a29565b60405180910390a15050565b6000609c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6118e0612132565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161191b929190613247565b6020604051808303816000875af115801561193a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195e9190613285565b50505050565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ed9061314c565b60405180910390fd5b609f6000848152602001908152602001600020600401600c9054906101000a900460ff1615611a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a51906131b8565b60405180910390fd5b6001609f6000858152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000609f600085815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550609f600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb609f600086815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16609f6000878152602001908152602001600020600601546040518363ffffffff1660e01b8152600401611b8c929190613247565b6020604051808303816000875af1158015611bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcf9190613285565b50827e7c875846b687732a7579c19bb1dade66cd14e9f4f809565e2b2b5e76c72b4f83604051611bff91906129fc565b60405180910390a26001905092915050565b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611c43612132565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca990613abf565b60405180910390fd5b611cbb816121b0565b50565b611cc661245d565b6000609f6000868152602001908152602001600020600601549050609f60008681526020019081526020016000206003015481611d039190613adf565b9050606554846bffffffffffffffffffffffff1682611d229190613324565b611d2c9190613395565b826020018181525050606554606660009054906101000a900467ffffffffffffffff1667ffffffffffffffff168360200151611d689190613324565b611d729190613395565b82600001818152505081600001518260200151611d8f9190613adf565b8260200181815250508215611dc757816000015182602001818151611db49190613b13565b9150818152505060008260000181815250505b509392505050565b6000609f600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000609f6000848152602001908152602001600020600301549050609f600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611e96929190613247565b6020604051808303816000875af1158015611eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed99190613285565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b609b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa690613b93565b60405180910390fd5b60008411611ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe990613bff565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205890613c6b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c790613c6b565b60405180910390fd5b6000801b609e6000838152602001908152602001600020600001540361212b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212290613cd7565b60405180910390fd5b5050505050565b61213a6122f2565b73ffffffffffffffffffffffffffffffffffffffff1661215861145b565b73ffffffffffffffffffffffffffffffffffffffff16146121ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a590613d43565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166122e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122df90613dd5565b60405180910390fd5b6122f06122fa565b565b600033905090565b600060019054906101000a900460ff16612349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234090613dd5565b60405180910390fd5b6123596123546122f2565b6121b0565b565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b604051806040016040528060008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61249e8161248b565b81146124a957600080fd5b50565b6000813590506124bb81612495565b92915050565b6000602082840312156124d7576124d6612481565b5b60006124e5848285016124ac565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125238161248b565b82525050565b60408201600082015161253f600085018261251a565b506020820151612552602085018261251a565b50505050565b60006125648383612529565b60408301905092915050565b6000602082019050919050565b6000612588826124ee565b61259281856124f9565b935061259d8361250a565b8060005b838110156125ce5781516125b58882612558565b97506125c083612570565b9250506001810190506125a1565b5085935050505092915050565b600060208201905081810360008301526125f5818461257d565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612622576126216125fd565b5b8235905067ffffffffffffffff81111561263f5761263e612602565b5b60208301915083602082028301111561265b5761265a612607565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061268d82612662565b9050919050565b61269d81612682565b81146126a857600080fd5b50565b6000813590506126ba81612694565b92915050565b600067ffffffffffffffff82169050919050565b6126dd816126c0565b81146126e857600080fd5b50565b6000813590506126fa816126d4565b92915050565b60008115159050919050565b61271581612700565b811461272057600080fd5b50565b6000813590506127328161270c565b92915050565b60008060008060008060008060e0898b03121561275857612757612481565b5b60006127668b828c016124ac565b98505060206127778b828c016124ac565b97505060406127888b828c016124ac565b965050606089013567ffffffffffffffff8111156127a9576127a8612486565b5b6127b58b828c0161260c565b955095505060806127c88b828c016126ab565b93505060a06127d98b828c016126eb565b92505060c06127ea8b828c01612723565b9150509295985092959890939650565b6128038161248b565b82525050565b61281281612682565b82525050565b600060408201905061282d60008301856127fa565b61283a6020830184612809565b9392505050565b6000819050919050565b61285481612841565b811461285f57600080fd5b50565b6000813590506128718161284b565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61289881612877565b81146128a357600080fd5b50565b6000813590506128b58161288f565b92915050565b60008083601f8401126128d1576128d06125fd565b5b8235905067ffffffffffffffff8111156128ee576128ed612602565b5b60208301915083600182028301111561290a57612909612607565b5b9250929050565b6000806000806000806000806000806101208b8d03121561293557612934612481565b5b60006129438d828e016126ab565b9a505060206129548d828e01612862565b99505060406129658d828e016124ac565b98505060606129768d828e016124ac565b97505060806129878d828e016128a6565b96505060a06129988d828e016126ab565b95505060c06129a98d828e01612862565b94505060e06129ba8d828e016126ab565b9350506101008b013567ffffffffffffffff8111156129dc576129db612486565b5b6129e88d828e016128bb565b92509250509295989b9194979a5092959850565b6000602082019050612a1160008301846127fa565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a6082612a17565b810181811067ffffffffffffffff82111715612a7f57612a7e612a28565b5b80604052505050565b6000612a92612477565b9050612a9e8282612a57565b919050565b600067ffffffffffffffff821115612abe57612abd612a28565b5b602082029050602081019050919050565b600080fd5b600060408284031215612aea57612ae9612acf565b5b612af46040612a88565b90506000612b04848285016124ac565b6000830152506020612b18848285016124ac565b60208301525092915050565b6000612b37612b3284612aa3565b612a88565b90508083825260208201905060408402830185811115612b5a57612b59612607565b5b835b81811015612b835780612b6f8882612ad4565b845260208401935050604081019050612b5c565b5050509392505050565b600082601f830112612ba257612ba16125fd565b5b8135612bb2848260208601612b24565b91505092915050565b60008060408385031215612bd257612bd1612481565b5b6000612be0858286016124ac565b925050602083013567ffffffffffffffff811115612c0157612c00612486565b5b612c0d85828601612b8d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c51578082015181840152602081019050612c36565b60008484015250505050565b6000612c6882612c17565b612c728185612c22565b9350612c82818560208601612c33565b612c8b81612a17565b840191505092915050565b60006020820190508181036000830152612cb08184612c5d565b905092915050565b600060208284031215612cce57612ccd612481565b5b6000612cdc848285016126ab565b91505092915050565b612cee81612700565b82525050565b6000602082019050612d096000830184612ce5565b92915050565b612d1881612682565b82525050565b612d2781612841565b82525050565b612d3681612877565b82525050565b612d4581612700565b82525050565b61012082016000820151612d626000850182612d0f565b506020820151612d756020850182612d0f565b506040820151612d886040850182612d0f565b506060820151612d9b6060850182612d1e565b506080820151612dae6080850182612d2d565b5060a0820151612dc160a0850182612d3c565b5060c0820151612dd460c0850182612d0f565b5060e0820151612de760e0850182612d2d565b50610100820151612dfc610100850182612d1e565b50505050565b600061012082019050612e186000830184612d4b565b92915050565b60008060408385031215612e3557612e34612481565b5b6000612e43858286016124ac565b9250506020612e54858286016126ab565b9150509250929050565b600060208284031215612e7457612e73612481565b5b6000612e82848285016126eb565b91505092915050565b604082016000820151612ea1600085018261251a565b506020820151612eb4602085018261251a565b50505050565b6000604082019050612ecf6000830184612e8b565b92915050565b6000602082019050612eea6000830184612809565b92915050565b600080600060608486031215612f0957612f08612481565b5b6000612f17868287016124ac565b9350506020612f28868287016126ab565b9250506040612f3986828701612723565b9150509250925092565b612f4c816126c0565b82525050565b612f5b81612841565b82525050565b6000604082019050612f766000830185612f43565b612f836020830184612f52565b9392505050565b60008083601f840112612fa057612f9f6125fd565b5b8235905067ffffffffffffffff811115612fbd57612fbc612602565b5b602083019150836001820283011115612fd957612fd8612607565b5b9250929050565b60008060208385031215612ff757612ff6612481565b5b600083013567ffffffffffffffff81111561301557613014612486565b5b61302185828601612f8a565b92509250509250929050565b60008060006060848603121561304657613045612481565b5b6000613054868287016126ab565b9350506020613065868287016126ab565b925050604061307686828701612862565b9150509250925092565b6000806040838503121561309757613096612481565b5b60006130a5858286016124ac565b92505060206130b6858286016124ac565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f6e6c7941676772656761746f72000000000000000000000000000000000000600082015250565b6000613136600e836130ef565b915061314182613100565b602082019050919050565b6000602082019050818103600083015261316581613129565b9050919050565b7f4f7264657246756c66696c6c6564000000000000000000000000000000000000600082015250565b60006131a2600e836130ef565b91506131ad8261316c565b602082019050919050565b600060208201905081810360008301526131d181613195565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061321282612877565b915061321d83612877565b925082820390506bffffffffffffffffffffffff811115613241576132406131d8565b5b92915050565b600060408201905061325c6000830185612809565b6132696020830184612f52565b9392505050565b60008151905061327f8161270c565b92915050565b60006020828403121561329b5761329a612481565b5b60006132a984828501613270565b91505092915050565b6000819050919050565b60006132d76132d26132cd846126c0565b6132b2565b612877565b9050919050565b6132e7816132bc565b82525050565b600060608201905061330260008301866127fa565b61330f60208301856127fa565b61331c60408301846132de565b949350505050565b600061332f82612841565b915061333a83612841565b925082820261334881612841565b9150828204841483151761335f5761335e6131d8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133a082612841565b91506133ab83612841565b9250826133bb576133ba613366565b5b828204905092915050565b7f53656e646572466565546f6f4869676800000000000000000000000000000000600082015250565b60006133fc6010836130ef565b9150613407826133c6565b602082019050919050565b6000602082019050818103600083015261342b816133ef565b9050919050565b60006060820190506134476000830186612809565b6134546020830185612809565b6134616040830184612f52565b949350505050565b600061347482612841565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134a6576134a56131d8565b5b600182019050919050565b60006134cc6134c76134c284612877565b6132b2565b612841565b9050919050565b6134dc816134b1565b82525050565b82818337600083830152505050565b60006134fd83856130ef565b935061350a8385846134e2565b61351383612a17565b840190509392505050565b600060808201905061353360008301886134d3565b61354060208301876127fa565b61354d60408301866127fa565b81810360608301526135608184866134f1565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806135b357607f821691505b6020821081036135c6576135c561356c565b5b50919050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b60006136026016836130ef565b915061360d826135cc565b602082019050919050565b60006020820190508181036000830152613631816135f5565b9050919050565b600060208201905061364d6000830184612f43565b92915050565b600060608201905061366860008301866127fa565b6136756020830185612809565b6136826040830184612ce5565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006136e6602e836130ef565b91506136f18261368a565b604082019050919050565b60006020820190508181036000830152613715816136d9565b9050919050565b6000819050919050565b600060ff82169050919050565b600061374e6137496137448461371c565b6132b2565b613726565b9050919050565b61375e81613733565b82525050565b60006020820190506137796000830184613755565b92915050565b600082905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026137ec7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826137af565b6137f686836137af565b95508019841693508086168417925050509392505050565b600061382961382461381f84612841565b6132b2565b612841565b9050919050565b6000819050919050565b6138438361380e565b61385761384f82613830565b8484546137bc565b825550505050565b600090565b61386c61385f565b61387781848461383a565b505050565b5b8181101561389b57613890600082613864565b60018101905061387d565b5050565b601f8211156138e0576138b18161378a565b6138ba8461379f565b810160208510156138c9578190505b6138dd6138d58561379f565b83018261387c565b50505b505050565b600082821c905092915050565b6000613903600019846008026138e5565b1980831691505092915050565b600061391c83836138f2565b9150826002028217905092915050565b613936838361377f565b67ffffffffffffffff81111561394f5761394e612a28565b5b613959825461359b565b61396482828561389f565b6000601f8311600181146139935760008415613981578287013590505b61398b8582613910565b8655506139f3565b601f1984166139a18661378a565b60005b828110156139c9578489013582556001820191506020850194506020810190506139a4565b868310156139e657848901356139e2601f8916826138f2565b8355505b6001600288020188555050505b50505050505050565b6000613a088385612c22565b9350613a158385846134e2565b613a1e83612a17565b840190509392505050565b60006020820190508181036000830152613a448184866139fc565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613aa96026836130ef565b9150613ab482613a4d565b604082019050919050565b60006020820190508181036000830152613ad881613a9c565b9050919050565b6000613aea82612841565b9150613af583612841565b9250828203905081811115613b0d57613b0c6131d8565b5b92915050565b6000613b1e82612841565b9150613b2983612841565b9250828201905080821115613b4157613b406131d8565b5b92915050565b7f546f6b656e4e6f74537570706f72746564000000000000000000000000000000600082015250565b6000613b7d6011836130ef565b9150613b8882613b47565b602082019050919050565b60006020820190508181036000830152613bac81613b70565b9050919050565b7f416d6f756e7449735a65726f0000000000000000000000000000000000000000600082015250565b6000613be9600c836130ef565b9150613bf482613bb3565b602082019050919050565b60006020820190508181036000830152613c1881613bdc565b9050919050565b7f5468726f775a65726f4164647265737300000000000000000000000000000000600082015250565b6000613c556010836130ef565b9150613c6082613c1f565b602082019050919050565b60006020820190508181036000830152613c8481613c48565b9050919050565b7f496e76616c6964496e737469747574696f6e436f646500000000000000000000600082015250565b6000613cc16016836130ef565b9150613ccc82613c8b565b602082019050919050565b60006020820190508181036000830152613cf081613cb4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613d2d6020836130ef565b9150613d3882613cf7565b602082019050919050565b60006020820190508181036000830152613d5c81613d20565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613dbf602b836130ef565b9150613dca82613d63565b604082019050919050565b60006020820190508181036000830152613dee81613db2565b905091905056fea264697066735822122095bbf3973ced310cd8777c31ea538f4beed34d4fea5f26c4beee1d63073174ea64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E2B DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87490D86 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xCB79455B GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xD8E8DE34 EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0xD9CAED12 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0xE4683A79 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0xE8D6E0DE EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x404 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x87490D86 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x332 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0x28D JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x137764FB EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x2654EC7E EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x3AD59DBC EQ PUSH2 0x1E9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH2 0x420 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x25DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x186 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x2738 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x194 SWAP3 SWAP2 SWAP1 PUSH2 0x2818 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0x2911 JUMP JUMPDEST PUSH2 0x959 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C4 SWAP2 SWAP1 PUSH2 0x29FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x2BBB JUMP JUMPDEST PUSH2 0xE21 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F1 PUSH2 0xF35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x2C96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH2 0xFC7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x2CB8 JUMP JUMPDEST PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x238 SWAP2 SWAP1 PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x256 SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH2 0x1031 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2E1E JUMP JUMPDEST PUSH2 0x1262 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A2 SWAP2 SWAP1 PUSH2 0x2E5E JUMP JUMPDEST PUSH2 0x13AF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH2 0x141A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x2EBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E1 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EE SWAP2 SWAP1 PUSH2 0x2ED5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x311 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x2EF0 JUMP JUMPDEST PUSH2 0x1485 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31B PUSH2 0x163A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x329 SWAP3 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x2CB8 JUMP JUMPDEST PUSH2 0x165F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x368 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x2FE0 JUMP JUMPDEST PUSH2 0x182B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x384 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x37F SWAP2 SWAP1 PUSH2 0x2CB8 JUMP JUMPDEST PUSH2 0x1882 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AF SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0x18D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0x3080 JUMP JUMPDEST PUSH2 0x1964 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DD SWAP2 SWAP1 PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EE PUSH2 0x1C11 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0x2ED5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x419 SWAP2 SWAP1 PUSH2 0x2CB8 JUMP JUMPDEST PUSH2 0x1C3B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x49D JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x457 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4C5 JUMPI PUSH2 0x4C4 PUSH2 0x2A28 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4EB PUSH2 0x235B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4E3 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x552 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x51F JUMPI PUSH2 0x51E PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53A JUMPI PUSH2 0x539 PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x504 JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E8 SWAP1 PUSH2 0x314C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64C SWAP1 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x9F PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x6D7 SWAP2 SWAP1 PUSH2 0x3207 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x71C DUP12 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x1CBE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7BB JUMPI PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0x7BA JUMPI PUSH2 0x7B9 DUP12 PUSH2 0x1DCF JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0x86E JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x829 SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x848 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86C SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP9 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8AD SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8F0 SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0xF26DE978CBAEA68EA699627155A10AD53DF3321B0F95A08264C0CFD6D4C05326 DUP15 DUP14 DUP11 PUSH1 0x40 MLOAD PUSH2 0x93C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x32ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP11 DUP3 SWAP4 POP SWAP4 POP POP POP SWAP9 POP SWAP9 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x968 DUP12 DUP12 DUP7 DUP10 DUP14 PUSH2 0x1F23 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH2 0x997 SWAP2 SWAP1 PUSH2 0x3324 JUMP JUMPDEST PUSH2 0x9A1 SWAP2 SWAP1 PUSH2 0x3395 JUMP JUMPDEST DUP6 GT ISZERO PUSH2 0x9E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9DA SWAP1 PUSH2 0x3412 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP14 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA20 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3432 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA3F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA63 SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP PUSH1 0xA0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xAB4 SWAP1 PUSH2 0x3469 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0xA0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB0B SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE POP PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP1 DUP11 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x2C205F90C01160D42994A0EB521810056D94BB82A1FCB038D7179C4158A1F15B DUP11 DUP14 DUP14 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xE0B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x351E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE29 PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF2F JUMPI PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE60 JUMPI PUSH2 0xE5F PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xEC5 JUMPI PUSH2 0xEC4 PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9E PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEF1 JUMPI PUSH2 0xEF0 PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xE32 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0xF44 SWAP1 PUSH2 0x359B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF70 SWAP1 PUSH2 0x359B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFBD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF92 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFBD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFA0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xFCF PUSH2 0x2132 JUMP JUMPDEST PUSH2 0xFD9 PUSH1 0x0 PUSH2 0x21B0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1039 PUSH2 0x237B JUMP JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x126A PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x12D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D0 SWAP1 PUSH2 0x3618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x1342 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x13AB JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x13B7 PUSH2 0x2132 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC8CA786C100BC62A0DFFBE768B5F0B770D84E8604C5DE54B54197B9066BB42A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x140F SWAP2 SWAP1 PUSH2 0x3638 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x1422 PUSH2 0x243D JUMP JUMPDEST PUSH1 0x9E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x148D PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F3 SWAP1 PUSH2 0x3618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x157B JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x15FA JUMPI DUP1 PUSH1 0x9C PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x162D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3653 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x1690 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x16BD JUMPI POP PUSH2 0x169F ADDRESS PUSH2 0x2276 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x16BC JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x16FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F3 SWAP1 PUSH2 0x36FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1739 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x1388 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x17CE PUSH2 0x2299 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1827 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x181E SWAP2 SWAP1 PUSH2 0x3764 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1833 PUSH2 0x2132 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x1844 SWAP3 SWAP2 SWAP1 PUSH2 0x392C JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1876 SWAP3 SWAP2 SWAP1 PUSH2 0x3A29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9C PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18E0 PUSH2 0x2132 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191B SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x193A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x195E SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19ED SWAP1 PUSH2 0x314C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1A5A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A51 SWAP1 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9F PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B8C SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BCF SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP DUP3 PUSH31 0x7C875846B687732A7579C19BB1DADE66CD14E9F4F809565E2B2B5E76C72B4F DUP4 PUSH1 0x40 MLOAD PUSH2 0x1BFF SWAP2 SWAP1 PUSH2 0x29FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1C43 PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1CB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA9 SWAP1 PUSH2 0x3ABF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CBB DUP2 PUSH2 0x21B0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1CC6 PUSH2 0x245D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x1D03 SWAP2 SWAP1 PUSH2 0x3ADF JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x1D22 SWAP2 SWAP1 PUSH2 0x3324 JUMP JUMPDEST PUSH2 0x1D2C SWAP2 SWAP1 PUSH2 0x3395 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1D68 SWAP2 SWAP1 PUSH2 0x3324 JUMP JUMPDEST PUSH2 0x1D72 SWAP2 SWAP1 PUSH2 0x3395 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1D8F SWAP2 SWAP1 PUSH2 0x3ADF JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP DUP3 ISZERO PUSH2 0x1DC7 JUMPI DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x1DB4 SWAP2 SWAP1 PUSH2 0x3B13 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E96 SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1EB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1ED9 SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x9B PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FA6 SWAP1 PUSH2 0x3B93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 GT PUSH2 0x1FF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FE9 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2061 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2058 SWAP1 PUSH2 0x3C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x20D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C7 SWAP1 PUSH2 0x3C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x9E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x212B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2122 SWAP1 PUSH2 0x3CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x213A PUSH2 0x22F2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2158 PUSH2 0x145B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21A5 SWAP1 PUSH2 0x3D43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22DF SWAP1 PUSH2 0x3DD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22F0 PUSH2 0x22FA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2349 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2340 SWAP1 PUSH2 0x3DD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2359 PUSH2 0x2354 PUSH2 0x22F2 JUMP JUMPDEST PUSH2 0x21B0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x249E DUP2 PUSH2 0x248B JUMP JUMPDEST DUP2 EQ PUSH2 0x24A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24BB DUP2 PUSH2 0x2495 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24D7 JUMPI PUSH2 0x24D6 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24E5 DUP5 DUP3 DUP6 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2523 DUP2 PUSH2 0x248B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x253F PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x251A JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2552 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x251A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2564 DUP4 DUP4 PUSH2 0x2529 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP3 PUSH2 0x24EE JUMP JUMPDEST PUSH2 0x2592 DUP2 DUP6 PUSH2 0x24F9 JUMP JUMPDEST SWAP4 POP PUSH2 0x259D DUP4 PUSH2 0x250A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25CE JUMPI DUP2 MLOAD PUSH2 0x25B5 DUP9 DUP3 PUSH2 0x2558 JUMP JUMPDEST SWAP8 POP PUSH2 0x25C0 DUP4 PUSH2 0x2570 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25A1 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25F5 DUP2 DUP5 PUSH2 0x257D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2622 JUMPI PUSH2 0x2621 PUSH2 0x25FD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x263F JUMPI PUSH2 0x263E PUSH2 0x2602 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x265B JUMPI PUSH2 0x265A PUSH2 0x2607 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x268D DUP3 PUSH2 0x2662 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x269D DUP2 PUSH2 0x2682 JUMP JUMPDEST DUP2 EQ PUSH2 0x26A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x26BA DUP2 PUSH2 0x2694 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26DD DUP2 PUSH2 0x26C0 JUMP JUMPDEST DUP2 EQ PUSH2 0x26E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x26FA DUP2 PUSH2 0x26D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2715 DUP2 PUSH2 0x2700 JUMP JUMPDEST DUP2 EQ PUSH2 0x2720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2732 DUP2 PUSH2 0x270C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2758 JUMPI PUSH2 0x2757 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2766 DUP12 DUP3 DUP13 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x2777 DUP12 DUP3 DUP13 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 PUSH2 0x2788 DUP12 DUP3 DUP13 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP7 POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27A9 JUMPI PUSH2 0x27A8 PUSH2 0x2486 JUMP JUMPDEST JUMPDEST PUSH2 0x27B5 DUP12 DUP3 DUP13 ADD PUSH2 0x260C JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0x80 PUSH2 0x27C8 DUP12 DUP3 DUP13 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x27D9 DUP12 DUP3 DUP13 ADD PUSH2 0x26EB JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x27EA DUP12 DUP3 DUP13 ADD PUSH2 0x2723 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH2 0x2803 DUP2 PUSH2 0x248B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2812 DUP2 PUSH2 0x2682 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x282D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x283A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2809 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2854 DUP2 PUSH2 0x2841 JUMP JUMPDEST DUP2 EQ PUSH2 0x285F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2871 DUP2 PUSH2 0x284B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2898 DUP2 PUSH2 0x2877 JUMP JUMPDEST DUP2 EQ PUSH2 0x28A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x28B5 DUP2 PUSH2 0x288F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x28D1 JUMPI PUSH2 0x28D0 PUSH2 0x25FD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28EE JUMPI PUSH2 0x28ED PUSH2 0x2602 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x290A JUMPI PUSH2 0x2909 PUSH2 0x2607 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x2935 JUMPI PUSH2 0x2934 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2943 DUP14 DUP3 DUP15 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP11 POP POP PUSH1 0x20 PUSH2 0x2954 DUP14 DUP3 DUP15 ADD PUSH2 0x2862 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x40 PUSH2 0x2965 DUP14 DUP3 DUP15 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP9 POP POP PUSH1 0x60 PUSH2 0x2976 DUP14 DUP3 DUP15 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP8 POP POP PUSH1 0x80 PUSH2 0x2987 DUP14 DUP3 DUP15 ADD PUSH2 0x28A6 JUMP JUMPDEST SWAP7 POP POP PUSH1 0xA0 PUSH2 0x2998 DUP14 DUP3 DUP15 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP6 POP POP PUSH1 0xC0 PUSH2 0x29A9 DUP14 DUP3 DUP15 ADD PUSH2 0x2862 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xE0 PUSH2 0x29BA DUP14 DUP3 DUP15 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP4 POP POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29DC JUMPI PUSH2 0x29DB PUSH2 0x2486 JUMP JUMPDEST JUMPDEST PUSH2 0x29E8 DUP14 DUP3 DUP15 ADD PUSH2 0x28BB JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2A11 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27FA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2A60 DUP3 PUSH2 0x2A17 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2A7F JUMPI PUSH2 0x2A7E PUSH2 0x2A28 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A92 PUSH2 0x2477 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A9E DUP3 DUP3 PUSH2 0x2A57 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2ABE JUMPI PUSH2 0x2ABD PUSH2 0x2A28 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AEA JUMPI PUSH2 0x2AE9 PUSH2 0x2ACF JUMP JUMPDEST JUMPDEST PUSH2 0x2AF4 PUSH1 0x40 PUSH2 0x2A88 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B04 DUP5 DUP3 DUP6 ADD PUSH2 0x24AC JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2B18 DUP5 DUP3 DUP6 ADD PUSH2 0x24AC JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B37 PUSH2 0x2B32 DUP5 PUSH2 0x2AA3 JUMP JUMPDEST PUSH2 0x2A88 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2B5A JUMPI PUSH2 0x2B59 PUSH2 0x2607 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2B83 JUMPI DUP1 PUSH2 0x2B6F DUP9 DUP3 PUSH2 0x2AD4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2B5C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2BA2 JUMPI PUSH2 0x2BA1 PUSH2 0x25FD JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2BB2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2B24 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BD2 JUMPI PUSH2 0x2BD1 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BE0 DUP6 DUP3 DUP7 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2C01 JUMPI PUSH2 0x2C00 PUSH2 0x2486 JUMP JUMPDEST JUMPDEST PUSH2 0x2C0D DUP6 DUP3 DUP7 ADD PUSH2 0x2B8D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2C51 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2C36 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C68 DUP3 PUSH2 0x2C17 JUMP JUMPDEST PUSH2 0x2C72 DUP2 DUP6 PUSH2 0x2C22 JUMP JUMPDEST SWAP4 POP PUSH2 0x2C82 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2C33 JUMP JUMPDEST PUSH2 0x2C8B DUP2 PUSH2 0x2A17 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CB0 DUP2 DUP5 PUSH2 0x2C5D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CCE JUMPI PUSH2 0x2CCD PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CDC DUP5 DUP3 DUP6 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2CEE DUP2 PUSH2 0x2700 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2D09 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CE5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D18 DUP2 PUSH2 0x2682 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D27 DUP2 PUSH2 0x2841 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D36 DUP2 PUSH2 0x2877 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D45 DUP2 PUSH2 0x2700 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2D62 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2D0F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2D75 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2D0F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2D88 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2D0F JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2D9B PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2D1E JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2DAE PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2D2D JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2DC1 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2D3C JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2DD4 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2D0F JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2DE7 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2D2D JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2DFC PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2D1E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2E18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D4B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E35 JUMPI PUSH2 0x2E34 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E43 DUP6 DUP3 DUP7 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2E54 DUP6 DUP3 DUP7 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E74 JUMPI PUSH2 0x2E73 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E82 DUP5 DUP3 DUP6 ADD PUSH2 0x26EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2EA1 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x251A JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2EB4 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x251A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2ECF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E8B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EEA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2809 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F09 JUMPI PUSH2 0x2F08 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F17 DUP7 DUP3 DUP8 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2F28 DUP7 DUP3 DUP8 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2F39 DUP7 DUP3 DUP8 ADD PUSH2 0x2723 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2F4C DUP2 PUSH2 0x26C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2F5B DUP2 PUSH2 0x2841 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F76 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F43 JUMP JUMPDEST PUSH2 0x2F83 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F52 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2FA0 JUMPI PUSH2 0x2F9F PUSH2 0x25FD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FBD JUMPI PUSH2 0x2FBC PUSH2 0x2602 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2FD9 JUMPI PUSH2 0x2FD8 PUSH2 0x2607 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FF7 JUMPI PUSH2 0x2FF6 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3015 JUMPI PUSH2 0x3014 PUSH2 0x2486 JUMP JUMPDEST JUMPDEST PUSH2 0x3021 DUP6 DUP3 DUP7 ADD PUSH2 0x2F8A JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3046 JUMPI PUSH2 0x3045 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3054 DUP7 DUP3 DUP8 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3065 DUP7 DUP3 DUP8 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3076 DUP7 DUP3 DUP8 ADD PUSH2 0x2862 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3097 JUMPI PUSH2 0x3096 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30A5 DUP6 DUP3 DUP7 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x30B6 DUP6 DUP3 DUP7 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7941676772656761746F72000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3136 PUSH1 0xE DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3141 DUP3 PUSH2 0x3100 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3165 DUP2 PUSH2 0x3129 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31A2 PUSH1 0xE DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x31AD DUP3 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31D1 DUP2 PUSH2 0x3195 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3212 DUP3 PUSH2 0x2877 JUMP JUMPDEST SWAP2 POP PUSH2 0x321D DUP4 PUSH2 0x2877 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3241 JUMPI PUSH2 0x3240 PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x325C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2809 JUMP JUMPDEST PUSH2 0x3269 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F52 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x327F DUP2 PUSH2 0x270C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x329B JUMPI PUSH2 0x329A PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x32A9 DUP5 DUP3 DUP6 ADD PUSH2 0x3270 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32D7 PUSH2 0x32D2 PUSH2 0x32CD DUP5 PUSH2 0x26C0 JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST PUSH2 0x2877 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32E7 DUP2 PUSH2 0x32BC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3302 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x330F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x331C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x32DE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x332F DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH2 0x333A DUP4 PUSH2 0x2841 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x3348 DUP2 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x335F JUMPI PUSH2 0x335E PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x33A0 DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH2 0x33AB DUP4 PUSH2 0x2841 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x33BB JUMPI PUSH2 0x33BA PUSH2 0x3366 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656E646572466565546F6F4869676800000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33FC PUSH1 0x10 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3407 DUP3 PUSH2 0x33C6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x342B DUP2 PUSH2 0x33EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3447 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2809 JUMP JUMPDEST PUSH2 0x3454 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2809 JUMP JUMPDEST PUSH2 0x3461 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F52 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3474 DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x34A6 JUMPI PUSH2 0x34A5 PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CC PUSH2 0x34C7 PUSH2 0x34C2 DUP5 PUSH2 0x2877 JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST PUSH2 0x2841 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34DC DUP2 PUSH2 0x34B1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34FD DUP4 DUP6 PUSH2 0x30EF JUMP JUMPDEST SWAP4 POP PUSH2 0x350A DUP4 DUP6 DUP5 PUSH2 0x34E2 JUMP JUMPDEST PUSH2 0x3513 DUP4 PUSH2 0x2A17 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3533 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x34D3 JUMP JUMPDEST PUSH2 0x3540 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x354D PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x27FA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3560 DUP2 DUP5 DUP7 PUSH2 0x34F1 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x35B3 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x35C6 JUMPI PUSH2 0x35C5 PUSH2 0x356C JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3602 PUSH1 0x16 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x360D DUP3 PUSH2 0x35CC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3631 DUP2 PUSH2 0x35F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x364D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F43 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3668 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x3675 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2809 JUMP JUMPDEST PUSH2 0x3682 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2CE5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36E6 PUSH1 0x2E DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x36F1 DUP3 PUSH2 0x368A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3715 DUP2 PUSH2 0x36D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x374E PUSH2 0x3749 PUSH2 0x3744 DUP5 PUSH2 0x371C JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST PUSH2 0x3726 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x375E DUP2 PUSH2 0x3733 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3779 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3755 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x37EC PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x37AF JUMP JUMPDEST PUSH2 0x37F6 DUP7 DUP4 PUSH2 0x37AF JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3829 PUSH2 0x3824 PUSH2 0x381F DUP5 PUSH2 0x2841 JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST PUSH2 0x2841 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3843 DUP4 PUSH2 0x380E JUMP JUMPDEST PUSH2 0x3857 PUSH2 0x384F DUP3 PUSH2 0x3830 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x37BC JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x386C PUSH2 0x385F JUMP JUMPDEST PUSH2 0x3877 DUP2 DUP5 DUP5 PUSH2 0x383A JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x389B JUMPI PUSH2 0x3890 PUSH1 0x0 DUP3 PUSH2 0x3864 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x387D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x38E0 JUMPI PUSH2 0x38B1 DUP2 PUSH2 0x378A JUMP JUMPDEST PUSH2 0x38BA DUP5 PUSH2 0x379F JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x38C9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x38DD PUSH2 0x38D5 DUP6 PUSH2 0x379F JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x387C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3903 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x38E5 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x391C DUP4 DUP4 PUSH2 0x38F2 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3936 DUP4 DUP4 PUSH2 0x377F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x394F JUMPI PUSH2 0x394E PUSH2 0x2A28 JUMP JUMPDEST JUMPDEST PUSH2 0x3959 DUP3 SLOAD PUSH2 0x359B JUMP JUMPDEST PUSH2 0x3964 DUP3 DUP3 DUP6 PUSH2 0x389F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3993 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3981 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x398B DUP6 DUP3 PUSH2 0x3910 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x39F3 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x39A1 DUP7 PUSH2 0x378A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x39C9 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x39A4 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x39E6 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x39E2 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x38F2 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A08 DUP4 DUP6 PUSH2 0x2C22 JUMP JUMPDEST SWAP4 POP PUSH2 0x3A15 DUP4 DUP6 DUP5 PUSH2 0x34E2 JUMP JUMPDEST PUSH2 0x3A1E DUP4 PUSH2 0x2A17 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A44 DUP2 DUP5 DUP7 PUSH2 0x39FC JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AA9 PUSH1 0x26 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3AB4 DUP3 PUSH2 0x3A4D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AD8 DUP2 PUSH2 0x3A9C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AEA DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AF5 DUP4 PUSH2 0x2841 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3B0D JUMPI PUSH2 0x3B0C PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B1E DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B29 DUP4 PUSH2 0x2841 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B41 JUMPI PUSH2 0x3B40 PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B7D PUSH1 0x11 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3B88 DUP3 PUSH2 0x3B47 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BAC DUP2 PUSH2 0x3B70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BE9 PUSH1 0xC DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3BF4 DUP3 PUSH2 0x3BB3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C18 DUP2 PUSH2 0x3BDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C55 PUSH1 0x10 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3C60 DUP3 PUSH2 0x3C1F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C84 DUP2 PUSH2 0x3C48 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CC1 PUSH1 0x16 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3CCC DUP3 PUSH2 0x3C8B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CF0 DUP2 PUSH2 0x3CB4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D2D PUSH1 0x20 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3D38 DUP3 PUSH2 0x3CF7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D5C DUP2 PUSH2 0x3D20 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DBF PUSH1 0x2B DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3DCA DUP3 PUSH2 0x3D63 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DEE DUP2 PUSH2 0x3DB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xBB RETURN SWAP8 EXTCODECOPY 0xED BALANCE 0xC 0xD8 PUSH24 0x7C31EA538F4BEED34D4FEA5F26C4BEEE1D63073174EA6473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"367:9323:12:-:0;;;782:53;;;;;;;;;;806:22;:20;;;:22;;:::i;:::-;367:9323;;5939:280:1;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:15:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;367:9323:12:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_26":{"entryPoint":8857,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":8954,"id":37,"parameterSlots":0,"returnSlots":0},"@_calculateFees_3354":{"entryPoint":7358,"id":3354,"parameterSlots":3,"returnSlots":1},"@_checkOwner_68":{"entryPoint":8498,"id":68,"parameterSlots":0,"returnSlots":0},"@_handler_3058":{"entryPoint":7971,"id":3058,"parameterSlots":5,"returnSlots":0},"@_msgSender_1147":{"entryPoint":8946,"id":1147,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":8624,"id":125,"parameterSlots":1,"returnSlots":0},"@createOrder_2997":{"entryPoint":2393,"id":2997,"parameterSlots":10,"returnSlots":1},"@getAggregatorAddress_3476":{"entryPoint":7185,"id":3476,"parameterSlots":0,"returnSlots":1},"@getAggregator_3498":{"entryPoint":3893,"id":3498,"parameterSlots":0,"returnSlots":1},"@getFeeDetails_3467":{"entryPoint":5690,"id":3467,"parameterSlots":0,"returnSlots":2},"@getOrderInfo_3368":{"entryPoint":4145,"id":3368,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutionName_3395":{"entryPoint":5146,"id":3395,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutions_3454":{"entryPoint":1056,"id":3454,"parameterSlots":1,"returnSlots":1},"@getWhitelistedStatus_3489":{"entryPoint":6274,"id":3489,"parameterSlots":1,"returnSlots":1},"@initialize_2877":{"entryPoint":5727,"id":2877,"parameterSlots":1,"returnSlots":0},"@isContract_808":{"entryPoint":8822,"id":808,"parameterSlots":1,"returnSlots":1},"@isTokenSupported_3381":{"entryPoint":4059,"id":3381,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":5211,"id":54,"parameterSlots":0,"returnSlots":1},"@refund_3275":{"entryPoint":6500,"id":3275,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":4039,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_3689":{"entryPoint":3617,"id":3689,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_3635":{"entryPoint":5253,"id":3635,"parameterSlots":3,"returnSlots":0},"@settle_3179":{"entryPoint":1374,"id":3179,"parameterSlots":8,"returnSlots":2},"@transferOwnership_105":{"entryPoint":7227,"id":105,"parameterSlots":1,"returnSlots":0},"@transferSenderFee_3215":{"entryPoint":7631,"id":3215,"parameterSlots":1,"returnSlots":0},"@updateProtocolAddresses_3741":{"entryPoint":4706,"id":3741,"parameterSlots":2,"returnSlots":0},"@updateProtocolAggregator_3757":{"entryPoint":6187,"id":3757,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_3705":{"entryPoint":5039,"id":3705,"parameterSlots":1,"returnSlots":0},"@withdraw_3518":{"entryPoint":6360,"id":3518,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":11044,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9899,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":9740,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":11149,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":10019,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":12912,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":9388,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":12170,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_string_calldata_ptr":{"entryPoint":10427,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$3529_memory_ptr":{"entryPoint":10964,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":10338,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":9963,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint96":{"entryPoint":10406,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":11448,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12333,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr":{"entryPoint":10513,"id":null,"parameterSlots":2,"returnSlots":10},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":12933,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9409,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":11806,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":12016,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":11195,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32":{"entryPoint":12416,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_array$_t_address_$dyn_calldata_ptrt_addresst_uint64t_bool":{"entryPoint":10040,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":12256,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64":{"entryPoint":11870,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr":{"entryPoint":9560,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":11535,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":10249,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9597,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":11580,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11493,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":9498,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":10234,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":14844,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":11357,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":14165,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":13553,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":15004,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack":{"entryPoint":15324,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack":{"entryPoint":13813,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack":{"entryPoint":13295,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":14041,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack":{"entryPoint":12693,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack":{"entryPoint":15540,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":15648,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack":{"entryPoint":15432,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack":{"entryPoint":15216,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":15794,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack":{"entryPoint":12585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_InstitutionByCode_$3534_memory_ptr_to_t_struct$_InstitutionByCode_$3534_memory_ptr_fromStack":{"entryPoint":11915,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr":{"entryPoint":9513,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Order_$3844_memory_ptr_to_t_struct$_Order_$3844_memory_ptr_fromStack":{"entryPoint":11595,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":11550,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":12114,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":12099,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint96_fromStack":{"entryPoint":13022,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint256_fromStack":{"entryPoint":13523,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96":{"entryPoint":11565,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":11989,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":13362,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12871,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9691,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":11508,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":10748,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":10264,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":13907,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed":{"entryPoint":13037,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14889,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11414,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":14180,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15039,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15359,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13848,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13330,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14076,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12728,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15575,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15683,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15467,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15251,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":15829,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12620,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_InstitutionByCode_$3534_memory_ptr__to_t_struct$_InstitutionByCode_$3534_memory_ptr__fromStack_reversed":{"entryPoint":11962,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_Order_$3844_memory_ptr__to_t_struct$_Order_$3844_memory_ptr__fromStack_reversed":{"entryPoint":11778,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":13880,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed":{"entryPoint":12129,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13598,"id":null,"parameterSlots":6,"returnSlots":1},"allocate_memory":{"entryPoint":10888,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9335,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":10915,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":9482,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":14218,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":9454,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_calldata_ptr":{"entryPoint":14207,"id":null,"parameterSlots":2,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11287,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":9584,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9465,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":11298,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":12527,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":15123,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":13205,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":13092,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":15071,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint96":{"entryPoint":12807,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":14495,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":9858,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":9984,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9355,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":14108,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9826,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":10305,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":9920,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":14118,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":10359,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":14460,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":14131,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":14350,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint64_to_t_uint96":{"entryPoint":12988,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint96_to_t_uint256":{"entryPoint":13489,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":14636,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":13538,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":11315,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":14239,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":13723,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":14608,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":10839,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":12978,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":13417,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":14578,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":12760,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":13158,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":13676,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12480,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10792,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":14384,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":9730,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9725,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":10959,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":9735,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9350,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9345,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":10775,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":14255,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":14565,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":14436,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":14925,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2":{"entryPoint":15283,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4":{"entryPoint":13772,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4":{"entryPoint":13254,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":13962,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5":{"entryPoint":12652,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5":{"entryPoint":15499,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":15607,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7":{"entryPoint":15391,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1":{"entryPoint":15175,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":15715,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243":{"entryPoint":12544,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":14268,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":14394,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9876,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":9996,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":9365,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":10315,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":9940,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":10383,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":14431,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:50222:15","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:15","statements":[{"nodeType":"YulAssignment","src":"57:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:15"},"nodeType":"YulFunctionCall","src":"67:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:15"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:15","type":""}],"src":"7:75:15"},{"body":{"nodeType":"YulBlock","src":"177:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:15"},"nodeType":"YulFunctionCall","src":"187:12:15"},"nodeType":"YulExpressionStatement","src":"187:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:15"},{"body":{"nodeType":"YulBlock","src":"300:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:15"},"nodeType":"YulFunctionCall","src":"310:12:15"},"nodeType":"YulExpressionStatement","src":"310:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:15"},{"body":{"nodeType":"YulBlock","src":"379:32:15","statements":[{"nodeType":"YulAssignment","src":"389:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:15"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:15","type":""}],"src":"334:77:15"},{"body":{"nodeType":"YulBlock","src":"460:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:15"},"nodeType":"YulFunctionCall","src":"519:12:15"},"nodeType":"YulExpressionStatement","src":"519:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:15"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:15"},"nodeType":"YulFunctionCall","src":"490:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:15"},"nodeType":"YulFunctionCall","src":"480:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:15"},"nodeType":"YulFunctionCall","src":"473:43:15"},"nodeType":"YulIf","src":"470:63:15"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:15","type":""}],"src":"417:122:15"},{"body":{"nodeType":"YulBlock","src":"597:87:15","statements":[{"nodeType":"YulAssignment","src":"607:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:15"},"nodeType":"YulFunctionCall","src":"616:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:15"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:15"},"nodeType":"YulFunctionCall","src":"645:33:15"},"nodeType":"YulExpressionStatement","src":"645:33:15"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:15","type":""}],"src":"545:139:15"},{"body":{"nodeType":"YulBlock","src":"756:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:15"},"nodeType":"YulFunctionCall","src":"804:79:15"},"nodeType":"YulExpressionStatement","src":"804:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:15"},"nodeType":"YulFunctionCall","src":"773:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:15"},"nodeType":"YulFunctionCall","src":"769:32:15"},"nodeType":"YulIf","src":"766:119:15"},{"nodeType":"YulBlock","src":"895:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:15","type":""}]},{"nodeType":"YulAssignment","src":"939:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:15"},"nodeType":"YulFunctionCall","src":"970:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"949:20:15"},"nodeType":"YulFunctionCall","src":"949:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:15","type":""}],"src":"690:329:15"},{"body":{"nodeType":"YulBlock","src":"1128:40:15","statements":[{"nodeType":"YulAssignment","src":"1139:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1155:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1149:5:15"},"nodeType":"YulFunctionCall","src":"1149:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1139:6:15"}]}]},"name":"array_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1111:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1121:6:15","type":""}],"src":"1025:143:15"},{"body":{"nodeType":"YulBlock","src":"1314:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1331:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1336:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1324:6:15"},"nodeType":"YulFunctionCall","src":"1324:19:15"},"nodeType":"YulExpressionStatement","src":"1324:19:15"},{"nodeType":"YulAssignment","src":"1352:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1371:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"1376:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1367:3:15"},"nodeType":"YulFunctionCall","src":"1367:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1352:11:15"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1286:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"1291:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1302:11:15","type":""}],"src":"1174:213:15"},{"body":{"nodeType":"YulBlock","src":"1494:60:15","statements":[{"nodeType":"YulAssignment","src":"1504:11:15","value":{"name":"ptr","nodeType":"YulIdentifier","src":"1512:3:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1504:4:15"}]},{"nodeType":"YulAssignment","src":"1525:22:15","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1537:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"1542:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:15"},"nodeType":"YulFunctionCall","src":"1533:14:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1525:4:15"}]}]},"name":"array_dataslot_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1481:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1489:4:15","type":""}],"src":"1393:161:15"},{"body":{"nodeType":"YulBlock","src":"1615:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1632:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1655:5:15"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1637:17:15"},"nodeType":"YulFunctionCall","src":"1637:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1625:6:15"},"nodeType":"YulFunctionCall","src":"1625:37:15"},"nodeType":"YulExpressionStatement","src":"1625:37:15"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1603:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1610:3:15","type":""}],"src":"1560:108:15"},{"body":{"nodeType":"YulBlock","src":"1882:391:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1892:26:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1908:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"1913:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1904:3:15"},"nodeType":"YulFunctionCall","src":"1904:14:15"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"1896:4:15","type":""}]},{"nodeType":"YulBlock","src":"1928:164:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1963:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1993:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"2000:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1989:3:15"},"nodeType":"YulFunctionCall","src":"1989:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1983:5:15"},"nodeType":"YulFunctionCall","src":"1983:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"1967:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2053:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2071:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2076:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:15"},"nodeType":"YulFunctionCall","src":"2067:14:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2019:33:15"},"nodeType":"YulFunctionCall","src":"2019:63:15"},"nodeType":"YulExpressionStatement","src":"2019:63:15"}]},{"nodeType":"YulBlock","src":"2102:164:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2137:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2167:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"2174:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2163:3:15"},"nodeType":"YulFunctionCall","src":"2163:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2157:5:15"},"nodeType":"YulFunctionCall","src":"2157:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"2141:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2227:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2245:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2250:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2241:3:15"},"nodeType":"YulFunctionCall","src":"2241:14:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2193:33:15"},"nodeType":"YulFunctionCall","src":"2193:63:15"},"nodeType":"YulExpressionStatement","src":"2193:63:15"}]}]},"name":"abi_encode_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1869:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1876:3:15","type":""}],"src":"1768:505:15"},{"body":{"nodeType":"YulBlock","src":"2417:157:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2519:6:15"},{"name":"pos","nodeType":"YulIdentifier","src":"2527:3:15"}],"functionName":{"name":"abi_encode_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr","nodeType":"YulIdentifier","src":"2427:91:15"},"nodeType":"YulFunctionCall","src":"2427:104:15"},"nodeType":"YulExpressionStatement","src":"2427:104:15"},{"nodeType":"YulAssignment","src":"2540:28:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2558:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2563:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2554:3:15"},"nodeType":"YulFunctionCall","src":"2554:14:15"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"2540:10:15"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"2390:6:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2398:3:15","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"2406:10:15","type":""}],"src":"2279:295:15"},{"body":{"nodeType":"YulBlock","src":"2684:38:15","statements":[{"nodeType":"YulAssignment","src":"2694:22:15","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2706:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2711:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2702:3:15"},"nodeType":"YulFunctionCall","src":"2702:14:15"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"2694:4:15"}]}]},"name":"array_nextElement_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2671:3:15","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"2679:4:15","type":""}],"src":"2580:142:15"},{"body":{"nodeType":"YulBlock","src":"3008:782:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3018:97:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3109:5:15"}],"functionName":{"name":"array_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3032:76:15"},"nodeType":"YulFunctionCall","src":"3032:83:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3022:6:15","type":""}]},{"nodeType":"YulAssignment","src":"3124:122:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3234:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"3239:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3131:102:15"},"nodeType":"YulFunctionCall","src":"3131:115:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3124:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"3255:100:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3349:5:15"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3270:78:15"},"nodeType":"YulFunctionCall","src":"3270:85:15"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"3259:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3364:21:15","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"3378:7:15"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3368:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3454:311:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3468:34:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3495:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3489:5:15"},"nodeType":"YulFunctionCall","src":"3489:13:15"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"3472:13:15","type":""}]},{"nodeType":"YulAssignment","src":"3515:128:15","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"3624:13:15"},{"name":"pos","nodeType":"YulIdentifier","src":"3639:3:15"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr","nodeType":"YulIdentifier","src":"3522:101:15"},"nodeType":"YulFunctionCall","src":"3522:121:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3515:3:15"}]},{"nodeType":"YulAssignment","src":"3656:99:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3748:6:15"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3666:81:15"},"nodeType":"YulFunctionCall","src":"3666:89:15"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3656:6:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3416:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"3419:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3413:2:15"},"nodeType":"YulFunctionCall","src":"3413:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3427:18:15","statements":[{"nodeType":"YulAssignment","src":"3429:14:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3438:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"3441:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3434:3:15"},"nodeType":"YulFunctionCall","src":"3434:9:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3429:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"3398:14:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3400:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"3409:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3404:1:15","type":""}]}]},"src":"3394:371:15"},{"nodeType":"YulAssignment","src":"3774:10:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"3781:3:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3774:3:15"}]}]},"name":"abi_encode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2987:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2994:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3003:3:15","type":""}],"src":"2826:964:15"},{"body":{"nodeType":"YulBlock","src":"4002:283:15","statements":[{"nodeType":"YulAssignment","src":"4012:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4024:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4035:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4020:3:15"},"nodeType":"YulFunctionCall","src":"4020:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4012:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4059:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4070:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:15"},"nodeType":"YulFunctionCall","src":"4055:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4078:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4084:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4074:3:15"},"nodeType":"YulFunctionCall","src":"4074:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4048:6:15"},"nodeType":"YulFunctionCall","src":"4048:47:15"},"nodeType":"YulExpressionStatement","src":"4048:47:15"},{"nodeType":"YulAssignment","src":"4104:174:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4264:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"4273:4:15"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4112:151:15"},"nodeType":"YulFunctionCall","src":"4112:166:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4104:4:15"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3974:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3986:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3997:4:15","type":""}],"src":"3796:489:15"},{"body":{"nodeType":"YulBlock","src":"4380:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4397:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4400:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4390:6:15"},"nodeType":"YulFunctionCall","src":"4390:12:15"},"nodeType":"YulExpressionStatement","src":"4390:12:15"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"4291:117:15"},{"body":{"nodeType":"YulBlock","src":"4503:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4520:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4523:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4513:6:15"},"nodeType":"YulFunctionCall","src":"4513:12:15"},"nodeType":"YulExpressionStatement","src":"4513:12:15"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"4414:117:15"},{"body":{"nodeType":"YulBlock","src":"4626:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4643:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4646:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4636:6:15"},"nodeType":"YulFunctionCall","src":"4636:12:15"},"nodeType":"YulExpressionStatement","src":"4636:12:15"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"4537:117:15"},{"body":{"nodeType":"YulBlock","src":"4767:478:15","statements":[{"body":{"nodeType":"YulBlock","src":"4816:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"4818:77:15"},"nodeType":"YulFunctionCall","src":"4818:79:15"},"nodeType":"YulExpressionStatement","src":"4818:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4795:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4803:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4791:3:15"},"nodeType":"YulFunctionCall","src":"4791:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"4810:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4787:3:15"},"nodeType":"YulFunctionCall","src":"4787:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4780:6:15"},"nodeType":"YulFunctionCall","src":"4780:35:15"},"nodeType":"YulIf","src":"4777:122:15"},{"nodeType":"YulAssignment","src":"4908:30:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4931:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4918:12:15"},"nodeType":"YulFunctionCall","src":"4918:20:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4908:6:15"}]},{"body":{"nodeType":"YulBlock","src":"4981:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"4983:77:15"},"nodeType":"YulFunctionCall","src":"4983:79:15"},"nodeType":"YulExpressionStatement","src":"4983:79:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4953:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4961:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4950:2:15"},"nodeType":"YulFunctionCall","src":"4950:30:15"},"nodeType":"YulIf","src":"4947:117:15"},{"nodeType":"YulAssignment","src":"5073:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5089:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5097:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5085:3:15"},"nodeType":"YulFunctionCall","src":"5085:17:15"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"5073:8:15"}]},{"body":{"nodeType":"YulBlock","src":"5156:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"5158:77:15"},"nodeType":"YulFunctionCall","src":"5158:79:15"},"nodeType":"YulExpressionStatement","src":"5158:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"5121:8:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5135:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5143:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5131:3:15"},"nodeType":"YulFunctionCall","src":"5131:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5117:3:15"},"nodeType":"YulFunctionCall","src":"5117:32:15"},{"name":"end","nodeType":"YulIdentifier","src":"5151:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5114:2:15"},"nodeType":"YulFunctionCall","src":"5114:41:15"},"nodeType":"YulIf","src":"5111:128:15"}]},"name":"abi_decode_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4734:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"4742:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"4750:8:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"4760:6:15","type":""}],"src":"4677:568:15"},{"body":{"nodeType":"YulBlock","src":"5296:81:15","statements":[{"nodeType":"YulAssignment","src":"5306:65:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5321:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"5328:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5317:3:15"},"nodeType":"YulFunctionCall","src":"5317:54:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5306:7:15"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5278:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5288:7:15","type":""}],"src":"5251:126:15"},{"body":{"nodeType":"YulBlock","src":"5428:51:15","statements":[{"nodeType":"YulAssignment","src":"5438:35:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5467:5:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5449:17:15"},"nodeType":"YulFunctionCall","src":"5449:24:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5438:7:15"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5410:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5420:7:15","type":""}],"src":"5383:96:15"},{"body":{"nodeType":"YulBlock","src":"5528:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"5585:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5594:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5597:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5587:6:15"},"nodeType":"YulFunctionCall","src":"5587:12:15"},"nodeType":"YulExpressionStatement","src":"5587:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5551:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5576:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5558:17:15"},"nodeType":"YulFunctionCall","src":"5558:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5548:2:15"},"nodeType":"YulFunctionCall","src":"5548:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5541:6:15"},"nodeType":"YulFunctionCall","src":"5541:43:15"},"nodeType":"YulIf","src":"5538:63:15"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5521:5:15","type":""}],"src":"5485:122:15"},{"body":{"nodeType":"YulBlock","src":"5665:87:15","statements":[{"nodeType":"YulAssignment","src":"5675:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5697:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5684:12:15"},"nodeType":"YulFunctionCall","src":"5684:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5675:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5740:5:15"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5713:26:15"},"nodeType":"YulFunctionCall","src":"5713:33:15"},"nodeType":"YulExpressionStatement","src":"5713:33:15"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5643:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"5651:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5659:5:15","type":""}],"src":"5613:139:15"},{"body":{"nodeType":"YulBlock","src":"5802:57:15","statements":[{"nodeType":"YulAssignment","src":"5812:41:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5827:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"5834:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5823:3:15"},"nodeType":"YulFunctionCall","src":"5823:30:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5812:7:15"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5784:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5794:7:15","type":""}],"src":"5758:101:15"},{"body":{"nodeType":"YulBlock","src":"5907:78:15","statements":[{"body":{"nodeType":"YulBlock","src":"5963:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5972:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5975:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5965:6:15"},"nodeType":"YulFunctionCall","src":"5965:12:15"},"nodeType":"YulExpressionStatement","src":"5965:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5930:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5954:5:15"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"5937:16:15"},"nodeType":"YulFunctionCall","src":"5937:23:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5927:2:15"},"nodeType":"YulFunctionCall","src":"5927:34:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5920:6:15"},"nodeType":"YulFunctionCall","src":"5920:42:15"},"nodeType":"YulIf","src":"5917:62:15"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5900:5:15","type":""}],"src":"5865:120:15"},{"body":{"nodeType":"YulBlock","src":"6042:86:15","statements":[{"nodeType":"YulAssignment","src":"6052:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6074:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6061:12:15"},"nodeType":"YulFunctionCall","src":"6061:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6052:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6116:5:15"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"6090:25:15"},"nodeType":"YulFunctionCall","src":"6090:32:15"},"nodeType":"YulExpressionStatement","src":"6090:32:15"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6020:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"6028:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6036:5:15","type":""}],"src":"5991:137:15"},{"body":{"nodeType":"YulBlock","src":"6176:48:15","statements":[{"nodeType":"YulAssignment","src":"6186:32:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6211:5:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6204:6:15"},"nodeType":"YulFunctionCall","src":"6204:13:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6197:6:15"},"nodeType":"YulFunctionCall","src":"6197:21:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6186:7:15"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6158:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6168:7:15","type":""}],"src":"6134:90:15"},{"body":{"nodeType":"YulBlock","src":"6270:76:15","statements":[{"body":{"nodeType":"YulBlock","src":"6324:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6333:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6336:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6326:6:15"},"nodeType":"YulFunctionCall","src":"6326:12:15"},"nodeType":"YulExpressionStatement","src":"6326:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6293:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6315:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6300:14:15"},"nodeType":"YulFunctionCall","src":"6300:21:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6290:2:15"},"nodeType":"YulFunctionCall","src":"6290:32:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6283:6:15"},"nodeType":"YulFunctionCall","src":"6283:40:15"},"nodeType":"YulIf","src":"6280:60:15"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6263:5:15","type":""}],"src":"6230:116:15"},{"body":{"nodeType":"YulBlock","src":"6401:84:15","statements":[{"nodeType":"YulAssignment","src":"6411:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6433:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6420:12:15"},"nodeType":"YulFunctionCall","src":"6420:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6411:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6473:5:15"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6449:23:15"},"nodeType":"YulFunctionCall","src":"6449:30:15"},"nodeType":"YulExpressionStatement","src":"6449:30:15"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6379:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"6387:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6395:5:15","type":""}],"src":"6352:133:15"},{"body":{"nodeType":"YulBlock","src":"6690:1226:15","statements":[{"body":{"nodeType":"YulBlock","src":"6737:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6739:77:15"},"nodeType":"YulFunctionCall","src":"6739:79:15"},"nodeType":"YulExpressionStatement","src":"6739:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6711:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"6720:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6707:3:15"},"nodeType":"YulFunctionCall","src":"6707:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"6732:3:15","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6703:3:15"},"nodeType":"YulFunctionCall","src":"6703:33:15"},"nodeType":"YulIf","src":"6700:120:15"},{"nodeType":"YulBlock","src":"6830:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6845:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6859:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6849:6:15","type":""}]},{"nodeType":"YulAssignment","src":"6874:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6909:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"6920:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6905:3:15"},"nodeType":"YulFunctionCall","src":"6905:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6929:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6884:20:15"},"nodeType":"YulFunctionCall","src":"6884:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6874:6:15"}]}]},{"nodeType":"YulBlock","src":"6957:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6972:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6986:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6976:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7002:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7037:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7048:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7033:3:15"},"nodeType":"YulFunctionCall","src":"7033:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7057:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7012:20:15"},"nodeType":"YulFunctionCall","src":"7012:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7002:6:15"}]}]},{"nodeType":"YulBlock","src":"7085:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7100:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7114:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7104:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7130:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7165:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7176:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7161:3:15"},"nodeType":"YulFunctionCall","src":"7161:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7185:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7140:20:15"},"nodeType":"YulFunctionCall","src":"7140:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7130:6:15"}]}]},{"nodeType":"YulBlock","src":"7213:313:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7228:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7259:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7270:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7255:3:15"},"nodeType":"YulFunctionCall","src":"7255:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7242:12:15"},"nodeType":"YulFunctionCall","src":"7242:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7232:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"7321:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7323:77:15"},"nodeType":"YulFunctionCall","src":"7323:79:15"},"nodeType":"YulExpressionStatement","src":"7323:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7293:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"7301:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7290:2:15"},"nodeType":"YulFunctionCall","src":"7290:30:15"},"nodeType":"YulIf","src":"7287:117:15"},{"nodeType":"YulAssignment","src":"7418:98:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7488:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7499:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7484:3:15"},"nodeType":"YulFunctionCall","src":"7484:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7508:7:15"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"7436:47:15"},"nodeType":"YulFunctionCall","src":"7436:80:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7418:6:15"},{"name":"value4","nodeType":"YulIdentifier","src":"7426:6:15"}]}]},{"nodeType":"YulBlock","src":"7536:119:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7551:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7565:3:15","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7555:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7582:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7617:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7628:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7613:3:15"},"nodeType":"YulFunctionCall","src":"7613:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7637:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7592:20:15"},"nodeType":"YulFunctionCall","src":"7592:53:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7582:6:15"}]}]},{"nodeType":"YulBlock","src":"7665:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7680:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7694:3:15","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7684:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7711:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7745:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7756:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7741:3:15"},"nodeType":"YulFunctionCall","src":"7741:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7765:7:15"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"7721:19:15"},"nodeType":"YulFunctionCall","src":"7721:52:15"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"7711:6:15"}]}]},{"nodeType":"YulBlock","src":"7793:116:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7808:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7822:3:15","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7812:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7839:60:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7871:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7882:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7867:3:15"},"nodeType":"YulFunctionCall","src":"7867:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7891:7:15"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"7849:17:15"},"nodeType":"YulFunctionCall","src":"7849:50:15"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"7839:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_array$_t_address_$dyn_calldata_ptrt_addresst_uint64t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6604:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6615:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6627:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6635:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6643:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6651:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6659:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6667:6:15","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6675:6:15","type":""},{"name":"value7","nodeType":"YulTypedName","src":"6683:6:15","type":""}],"src":"6491:1425:15"},{"body":{"nodeType":"YulBlock","src":"7987:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8004:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8027:5:15"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"8009:17:15"},"nodeType":"YulFunctionCall","src":"8009:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7997:6:15"},"nodeType":"YulFunctionCall","src":"7997:37:15"},"nodeType":"YulExpressionStatement","src":"7997:37:15"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7975:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7982:3:15","type":""}],"src":"7922:118:15"},{"body":{"nodeType":"YulBlock","src":"8111:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8128:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8151:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"8133:17:15"},"nodeType":"YulFunctionCall","src":"8133:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8121:6:15"},"nodeType":"YulFunctionCall","src":"8121:37:15"},"nodeType":"YulExpressionStatement","src":"8121:37:15"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8099:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8106:3:15","type":""}],"src":"8046:118:15"},{"body":{"nodeType":"YulBlock","src":"8296:206:15","statements":[{"nodeType":"YulAssignment","src":"8306:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8318:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8329:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8314:3:15"},"nodeType":"YulFunctionCall","src":"8314:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8306:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8386:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8399:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8410:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8395:3:15"},"nodeType":"YulFunctionCall","src":"8395:17:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8342:43:15"},"nodeType":"YulFunctionCall","src":"8342:71:15"},"nodeType":"YulExpressionStatement","src":"8342:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8467:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8480:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8491:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8476:3:15"},"nodeType":"YulFunctionCall","src":"8476:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"8423:43:15"},"nodeType":"YulFunctionCall","src":"8423:72:15"},"nodeType":"YulExpressionStatement","src":"8423:72:15"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8260:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8272:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8280:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8291:4:15","type":""}],"src":"8170:332:15"},{"body":{"nodeType":"YulBlock","src":"8553:32:15","statements":[{"nodeType":"YulAssignment","src":"8563:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"8574:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8563:7:15"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8535:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8545:7:15","type":""}],"src":"8508:77:15"},{"body":{"nodeType":"YulBlock","src":"8634:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"8691:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8700:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8703:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8693:6:15"},"nodeType":"YulFunctionCall","src":"8693:12:15"},"nodeType":"YulExpressionStatement","src":"8693:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8657:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8682:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8664:17:15"},"nodeType":"YulFunctionCall","src":"8664:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8654:2:15"},"nodeType":"YulFunctionCall","src":"8654:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8647:6:15"},"nodeType":"YulFunctionCall","src":"8647:43:15"},"nodeType":"YulIf","src":"8644:63:15"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8627:5:15","type":""}],"src":"8591:122:15"},{"body":{"nodeType":"YulBlock","src":"8771:87:15","statements":[{"nodeType":"YulAssignment","src":"8781:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8803:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8790:12:15"},"nodeType":"YulFunctionCall","src":"8790:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8781:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8846:5:15"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"8819:26:15"},"nodeType":"YulFunctionCall","src":"8819:33:15"},"nodeType":"YulExpressionStatement","src":"8819:33:15"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8749:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"8757:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8765:5:15","type":""}],"src":"8719:139:15"},{"body":{"nodeType":"YulBlock","src":"8908:65:15","statements":[{"nodeType":"YulAssignment","src":"8918:49:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8933:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"8940:26:15","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8929:3:15"},"nodeType":"YulFunctionCall","src":"8929:38:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8918:7:15"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8890:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8900:7:15","type":""}],"src":"8864:109:15"},{"body":{"nodeType":"YulBlock","src":"9021:78:15","statements":[{"body":{"nodeType":"YulBlock","src":"9077:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9086:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9089:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9079:6:15"},"nodeType":"YulFunctionCall","src":"9079:12:15"},"nodeType":"YulExpressionStatement","src":"9079:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9044:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9068:5:15"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"9051:16:15"},"nodeType":"YulFunctionCall","src":"9051:23:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9041:2:15"},"nodeType":"YulFunctionCall","src":"9041:34:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9034:6:15"},"nodeType":"YulFunctionCall","src":"9034:42:15"},"nodeType":"YulIf","src":"9031:62:15"}]},"name":"validator_revert_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9014:5:15","type":""}],"src":"8979:120:15"},{"body":{"nodeType":"YulBlock","src":"9156:86:15","statements":[{"nodeType":"YulAssignment","src":"9166:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9188:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9175:12:15"},"nodeType":"YulFunctionCall","src":"9175:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9166:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9230:5:15"}],"functionName":{"name":"validator_revert_t_uint96","nodeType":"YulIdentifier","src":"9204:25:15"},"nodeType":"YulFunctionCall","src":"9204:32:15"},"nodeType":"YulExpressionStatement","src":"9204:32:15"}]},"name":"abi_decode_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9134:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"9142:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9150:5:15","type":""}],"src":"9105:137:15"},{"body":{"nodeType":"YulBlock","src":"9337:478:15","statements":[{"body":{"nodeType":"YulBlock","src":"9386:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"9388:77:15"},"nodeType":"YulFunctionCall","src":"9388:79:15"},"nodeType":"YulExpressionStatement","src":"9388:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9365:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"9373:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9361:3:15"},"nodeType":"YulFunctionCall","src":"9361:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"9380:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9357:3:15"},"nodeType":"YulFunctionCall","src":"9357:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9350:6:15"},"nodeType":"YulFunctionCall","src":"9350:35:15"},"nodeType":"YulIf","src":"9347:122:15"},{"nodeType":"YulAssignment","src":"9478:30:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9501:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9488:12:15"},"nodeType":"YulFunctionCall","src":"9488:20:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9478:6:15"}]},{"body":{"nodeType":"YulBlock","src":"9551:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"9553:77:15"},"nodeType":"YulFunctionCall","src":"9553:79:15"},"nodeType":"YulExpressionStatement","src":"9553:79:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9523:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"9531:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9520:2:15"},"nodeType":"YulFunctionCall","src":"9520:30:15"},"nodeType":"YulIf","src":"9517:117:15"},{"nodeType":"YulAssignment","src":"9643:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9659:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"9667:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9655:3:15"},"nodeType":"YulFunctionCall","src":"9655:17:15"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"9643:8:15"}]},{"body":{"nodeType":"YulBlock","src":"9726:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"9728:77:15"},"nodeType":"YulFunctionCall","src":"9728:79:15"},"nodeType":"YulExpressionStatement","src":"9728:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"9691:8:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9705:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"9713:4:15","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9701:3:15"},"nodeType":"YulFunctionCall","src":"9701:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9687:3:15"},"nodeType":"YulFunctionCall","src":"9687:32:15"},{"name":"end","nodeType":"YulIdentifier","src":"9721:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9684:2:15"},"nodeType":"YulFunctionCall","src":"9684:41:15"},"nodeType":"YulIf","src":"9681:128:15"}]},"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9304:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"9312:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"9320:8:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"9330:6:15","type":""}],"src":"9262:553:15"},{"body":{"nodeType":"YulBlock","src":"10042:1472:15","statements":[{"body":{"nodeType":"YulBlock","src":"10089:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10091:77:15"},"nodeType":"YulFunctionCall","src":"10091:79:15"},"nodeType":"YulExpressionStatement","src":"10091:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10063:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"10072:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10059:3:15"},"nodeType":"YulFunctionCall","src":"10059:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"10084:3:15","type":"","value":"288"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10055:3:15"},"nodeType":"YulFunctionCall","src":"10055:33:15"},"nodeType":"YulIf","src":"10052:120:15"},{"nodeType":"YulBlock","src":"10182:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10197:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"10211:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10201:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10226:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10261:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"10272:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10257:3:15"},"nodeType":"YulFunctionCall","src":"10257:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10281:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10236:20:15"},"nodeType":"YulFunctionCall","src":"10236:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10226:6:15"}]}]},{"nodeType":"YulBlock","src":"10309:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10324:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"10338:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10328:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10354:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10389:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"10400:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10385:3:15"},"nodeType":"YulFunctionCall","src":"10385:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10409:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"10364:20:15"},"nodeType":"YulFunctionCall","src":"10364:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10354:6:15"}]}]},{"nodeType":"YulBlock","src":"10437:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10452:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"10466:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10456:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10482:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10517:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"10528:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10513:3:15"},"nodeType":"YulFunctionCall","src":"10513:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10537:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10492:20:15"},"nodeType":"YulFunctionCall","src":"10492:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10482:6:15"}]}]},{"nodeType":"YulBlock","src":"10565:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10580:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"10594:2:15","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10584:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10610:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10645:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"10656:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10641:3:15"},"nodeType":"YulFunctionCall","src":"10641:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10665:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10620:20:15"},"nodeType":"YulFunctionCall","src":"10620:53:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10610:6:15"}]}]},{"nodeType":"YulBlock","src":"10693:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10708:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"10722:3:15","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10712:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10739:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10773:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"10784:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10769:3:15"},"nodeType":"YulFunctionCall","src":"10769:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10793:7:15"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"10749:19:15"},"nodeType":"YulFunctionCall","src":"10749:52:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10739:6:15"}]}]},{"nodeType":"YulBlock","src":"10821:119:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10836:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"10850:3:15","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10840:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10867:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10902:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"10913:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10898:3:15"},"nodeType":"YulFunctionCall","src":"10898:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10922:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10877:20:15"},"nodeType":"YulFunctionCall","src":"10877:53:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"10867:6:15"}]}]},{"nodeType":"YulBlock","src":"10950:119:15","statements":[{"nodeType":"YulVariableDeclaration","src":"10965:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"10979:3:15","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10969:6:15","type":""}]},{"nodeType":"YulAssignment","src":"10996:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11031:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"11042:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11027:3:15"},"nodeType":"YulFunctionCall","src":"11027:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11051:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11006:20:15"},"nodeType":"YulFunctionCall","src":"11006:53:15"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"10996:6:15"}]}]},{"nodeType":"YulBlock","src":"11079:119:15","statements":[{"nodeType":"YulVariableDeclaration","src":"11094:17:15","value":{"kind":"number","nodeType":"YulLiteral","src":"11108:3:15","type":"","value":"224"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11098:6:15","type":""}]},{"nodeType":"YulAssignment","src":"11125:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11160:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"11171:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11156:3:15"},"nodeType":"YulFunctionCall","src":"11156:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11180:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11135:20:15"},"nodeType":"YulFunctionCall","src":"11135:53:15"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"11125:6:15"}]}]},{"nodeType":"YulBlock","src":"11208:299:15","statements":[{"nodeType":"YulVariableDeclaration","src":"11223:47:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11254:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11265:3:15","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11250:3:15"},"nodeType":"YulFunctionCall","src":"11250:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11237:12:15"},"nodeType":"YulFunctionCall","src":"11237:33:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11227:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"11317:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"11319:77:15"},"nodeType":"YulFunctionCall","src":"11319:79:15"},"nodeType":"YulExpressionStatement","src":"11319:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11289:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"11297:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11286:2:15"},"nodeType":"YulFunctionCall","src":"11286:30:15"},"nodeType":"YulIf","src":"11283:117:15"},{"nodeType":"YulAssignment","src":"11414:83:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11469:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"11480:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11465:3:15"},"nodeType":"YulFunctionCall","src":"11465:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11489:7:15"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"11432:32:15"},"nodeType":"YulFunctionCall","src":"11432:65:15"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"11414:6:15"},{"name":"value9","nodeType":"YulIdentifier","src":"11422:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9940:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9951:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9963:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9971:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9979:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9987:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9995:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"10003:6:15","type":""},{"name":"value6","nodeType":"YulTypedName","src":"10011:6:15","type":""},{"name":"value7","nodeType":"YulTypedName","src":"10019:6:15","type":""},{"name":"value8","nodeType":"YulTypedName","src":"10027:6:15","type":""},{"name":"value9","nodeType":"YulTypedName","src":"10035:6:15","type":""}],"src":"9821:1693:15"},{"body":{"nodeType":"YulBlock","src":"11618:124:15","statements":[{"nodeType":"YulAssignment","src":"11628:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11640:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11651:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11636:3:15"},"nodeType":"YulFunctionCall","src":"11636:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11628:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11708:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11721:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11732:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11717:3:15"},"nodeType":"YulFunctionCall","src":"11717:17:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11664:43:15"},"nodeType":"YulFunctionCall","src":"11664:71:15"},"nodeType":"YulExpressionStatement","src":"11664:71:15"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11590:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11602:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11613:4:15","type":""}],"src":"11520:222:15"},{"body":{"nodeType":"YulBlock","src":"11796:54:15","statements":[{"nodeType":"YulAssignment","src":"11806:38:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11824:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"11831:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11820:3:15"},"nodeType":"YulFunctionCall","src":"11820:14:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11840:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11836:3:15"},"nodeType":"YulFunctionCall","src":"11836:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11816:3:15"},"nodeType":"YulFunctionCall","src":"11816:28:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"11806:6:15"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11779:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"11789:6:15","type":""}],"src":"11748:102:15"},{"body":{"nodeType":"YulBlock","src":"11884:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11901:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11904:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11894:6:15"},"nodeType":"YulFunctionCall","src":"11894:88:15"},"nodeType":"YulExpressionStatement","src":"11894:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11998:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12001:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11991:6:15"},"nodeType":"YulFunctionCall","src":"11991:15:15"},"nodeType":"YulExpressionStatement","src":"11991:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12022:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12025:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12015:6:15"},"nodeType":"YulFunctionCall","src":"12015:15:15"},"nodeType":"YulExpressionStatement","src":"12015:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"11856:180:15"},{"body":{"nodeType":"YulBlock","src":"12085:238:15","statements":[{"nodeType":"YulVariableDeclaration","src":"12095:58:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12117:6:15"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"12147:4:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"12125:21:15"},"nodeType":"YulFunctionCall","src":"12125:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12113:3:15"},"nodeType":"YulFunctionCall","src":"12113:40:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"12099:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"12264:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12266:16:15"},"nodeType":"YulFunctionCall","src":"12266:18:15"},"nodeType":"YulExpressionStatement","src":"12266:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12207:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"12219:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12204:2:15"},"nodeType":"YulFunctionCall","src":"12204:34:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12243:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"12255:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12240:2:15"},"nodeType":"YulFunctionCall","src":"12240:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"12201:2:15"},"nodeType":"YulFunctionCall","src":"12201:62:15"},"nodeType":"YulIf","src":"12198:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12302:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"12306:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12295:6:15"},"nodeType":"YulFunctionCall","src":"12295:22:15"},"nodeType":"YulExpressionStatement","src":"12295:22:15"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12071:6:15","type":""},{"name":"size","nodeType":"YulTypedName","src":"12079:4:15","type":""}],"src":"12042:281:15"},{"body":{"nodeType":"YulBlock","src":"12370:88:15","statements":[{"nodeType":"YulAssignment","src":"12380:30:15","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"12390:18:15"},"nodeType":"YulFunctionCall","src":"12390:20:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12380:6:15"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12439:6:15"},{"name":"size","nodeType":"YulIdentifier","src":"12447:4:15"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"12419:19:15"},"nodeType":"YulFunctionCall","src":"12419:33:15"},"nodeType":"YulExpressionStatement","src":"12419:33:15"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"12354:4:15","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"12363:6:15","type":""}],"src":"12329:129:15"},{"body":{"nodeType":"YulBlock","src":"12575:229:15","statements":[{"body":{"nodeType":"YulBlock","src":"12680:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12682:16:15"},"nodeType":"YulFunctionCall","src":"12682:18:15"},"nodeType":"YulExpressionStatement","src":"12682:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12652:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"12660:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12649:2:15"},"nodeType":"YulFunctionCall","src":"12649:30:15"},"nodeType":"YulIf","src":"12646:56:15"},{"nodeType":"YulAssignment","src":"12712:25:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12724:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"12732:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12720:3:15"},"nodeType":"YulFunctionCall","src":"12720:17:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12712:4:15"}]},{"nodeType":"YulAssignment","src":"12774:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"12786:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"12792:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12782:3:15"},"nodeType":"YulFunctionCall","src":"12782:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12774:4:15"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"12559:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"12570:4:15","type":""}],"src":"12464:340:15"},{"body":{"nodeType":"YulBlock","src":"12899:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12916:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12919:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12909:6:15"},"nodeType":"YulFunctionCall","src":"12909:12:15"},"nodeType":"YulExpressionStatement","src":"12909:12:15"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"12810:117:15"},{"body":{"nodeType":"YulBlock","src":"13022:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13039:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13042:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13032:6:15"},"nodeType":"YulFunctionCall","src":"13032:12:15"},"nodeType":"YulExpressionStatement","src":"13032:12:15"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"12933:117:15"},{"body":{"nodeType":"YulBlock","src":"13189:494:15","statements":[{"body":{"nodeType":"YulBlock","src":"13233:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"13235:77:15"},"nodeType":"YulFunctionCall","src":"13235:79:15"},"nodeType":"YulExpressionStatement","src":"13235:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"13210:3:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"13215:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13206:3:15"},"nodeType":"YulFunctionCall","src":"13206:19:15"},{"kind":"number","nodeType":"YulLiteral","src":"13227:4:15","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13202:3:15"},"nodeType":"YulFunctionCall","src":"13202:30:15"},"nodeType":"YulIf","src":"13199:117:15"},{"nodeType":"YulAssignment","src":"13325:30:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13350:4:15","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"13334:15:15"},"nodeType":"YulFunctionCall","src":"13334:21:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13325:5:15"}]},{"nodeType":"YulBlock","src":"13365:150:15","statements":[{"nodeType":"YulVariableDeclaration","src":"13400:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"13414:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13404:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13440:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"13447:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13436:3:15"},"nodeType":"YulFunctionCall","src":"13436:16:15"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13479:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"13490:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13475:3:15"},"nodeType":"YulFunctionCall","src":"13475:22:15"},{"name":"end","nodeType":"YulIdentifier","src":"13499:3:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"13454:20:15"},"nodeType":"YulFunctionCall","src":"13454:49:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13429:6:15"},"nodeType":"YulFunctionCall","src":"13429:75:15"},"nodeType":"YulExpressionStatement","src":"13429:75:15"}]},{"nodeType":"YulBlock","src":"13525:151:15","statements":[{"nodeType":"YulVariableDeclaration","src":"13560:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"13574:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13564:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13601:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"13608:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13597:3:15"},"nodeType":"YulFunctionCall","src":"13597:16:15"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13640:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"13651:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13636:3:15"},"nodeType":"YulFunctionCall","src":"13636:22:15"},{"name":"end","nodeType":"YulIdentifier","src":"13660:3:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"13615:20:15"},"nodeType":"YulFunctionCall","src":"13615:49:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13590:6:15"},"nodeType":"YulFunctionCall","src":"13590:75:15"},"nodeType":"YulExpressionStatement","src":"13590:75:15"}]}]},"name":"abi_decode_t_struct$_Institution_$3529_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13164:9:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"13175:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13183:5:15","type":""}],"src":"13105:578:15"},{"body":{"nodeType":"YulBlock","src":"13871:666:15","statements":[{"nodeType":"YulAssignment","src":"13881:119:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13992:6:15"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"13906:85:15"},"nodeType":"YulFunctionCall","src":"13906:93:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"13890:15:15"},"nodeType":"YulFunctionCall","src":"13890:110:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13881:5:15"}]},{"nodeType":"YulVariableDeclaration","src":"14009:16:15","value":{"name":"array","nodeType":"YulIdentifier","src":"14020:5:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"14013:3:15","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14042:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"14049:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14035:6:15"},"nodeType":"YulFunctionCall","src":"14035:21:15"},"nodeType":"YulExpressionStatement","src":"14035:21:15"},{"nodeType":"YulAssignment","src":"14065:23:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14076:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"14083:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14072:3:15"},"nodeType":"YulFunctionCall","src":"14072:16:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"14065:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"14098:44:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14116:6:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"14128:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"14136:4:15","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"14124:3:15"},"nodeType":"YulFunctionCall","src":"14124:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14112:3:15"},"nodeType":"YulFunctionCall","src":"14112:30:15"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"14102:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"14170:103:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"14184:77:15"},"nodeType":"YulFunctionCall","src":"14184:79:15"},"nodeType":"YulExpressionStatement","src":"14184:79:15"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"14157:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"14165:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14154:2:15"},"nodeType":"YulFunctionCall","src":"14154:15:15"},"nodeType":"YulIf","src":"14151:122:15"},{"body":{"nodeType":"YulBlock","src":"14358:173:15","statements":[{"nodeType":"YulVariableDeclaration","src":"14373:21:15","value":{"name":"src","nodeType":"YulIdentifier","src":"14391:3:15"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"14377:10:15","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"14415:3:15"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"14470:10:15"},{"name":"end","nodeType":"YulIdentifier","src":"14482:3:15"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$3529_memory_ptr","nodeType":"YulIdentifier","src":"14420:49:15"},"nodeType":"YulFunctionCall","src":"14420:66:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14408:6:15"},"nodeType":"YulFunctionCall","src":"14408:79:15"},"nodeType":"YulExpressionStatement","src":"14408:79:15"},{"nodeType":"YulAssignment","src":"14500:21:15","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"14511:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14516:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14507:3:15"},"nodeType":"YulFunctionCall","src":"14507:14:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"14500:3:15"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14311:3:15"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"14316:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14308:2:15"},"nodeType":"YulFunctionCall","src":"14308:15:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14324:25:15","statements":[{"nodeType":"YulAssignment","src":"14326:21:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14337:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14342:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14333:3:15"},"nodeType":"YulFunctionCall","src":"14333:14:15"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"14326:3:15"}]}]},"pre":{"nodeType":"YulBlock","src":"14286:21:15","statements":[{"nodeType":"YulVariableDeclaration","src":"14288:17:15","value":{"name":"offset","nodeType":"YulIdentifier","src":"14299:6:15"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"14292:3:15","type":""}]}]},"src":"14282:249:15"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13841:6:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"13849:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"13857:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13865:5:15","type":""}],"src":"13740:797:15"},{"body":{"nodeType":"YulBlock","src":"14700:322:15","statements":[{"body":{"nodeType":"YulBlock","src":"14749:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"14751:77:15"},"nodeType":"YulFunctionCall","src":"14751:79:15"},"nodeType":"YulExpressionStatement","src":"14751:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14728:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"14736:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14724:3:15"},"nodeType":"YulFunctionCall","src":"14724:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"14743:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14720:3:15"},"nodeType":"YulFunctionCall","src":"14720:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14713:6:15"},"nodeType":"YulFunctionCall","src":"14713:35:15"},"nodeType":"YulIf","src":"14710:122:15"},{"nodeType":"YulVariableDeclaration","src":"14841:34:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14868:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14855:12:15"},"nodeType":"YulFunctionCall","src":"14855:20:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14845:6:15","type":""}]},{"nodeType":"YulAssignment","src":"14884:132:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14989:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"14997:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14985:3:15"},"nodeType":"YulFunctionCall","src":"14985:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"15004:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"15012:3:15"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14893:91:15"},"nodeType":"YulFunctionCall","src":"14893:123:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"14884:5:15"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"14678:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"14686:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"14694:5:15","type":""}],"src":"14594:428:15"},{"body":{"nodeType":"YulBlock","src":"15165:605:15","statements":[{"body":{"nodeType":"YulBlock","src":"15211:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15213:77:15"},"nodeType":"YulFunctionCall","src":"15213:79:15"},"nodeType":"YulExpressionStatement","src":"15213:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15186:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"15195:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15182:3:15"},"nodeType":"YulFunctionCall","src":"15182:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"15207:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15178:3:15"},"nodeType":"YulFunctionCall","src":"15178:32:15"},"nodeType":"YulIf","src":"15175:119:15"},{"nodeType":"YulBlock","src":"15304:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15319:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"15333:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15323:6:15","type":""}]},{"nodeType":"YulAssignment","src":"15348:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15383:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"15394:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15379:3:15"},"nodeType":"YulFunctionCall","src":"15379:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15403:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"15358:20:15"},"nodeType":"YulFunctionCall","src":"15358:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15348:6:15"}]}]},{"nodeType":"YulBlock","src":"15431:332:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15446:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15477:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15488:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15473:3:15"},"nodeType":"YulFunctionCall","src":"15473:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15460:12:15"},"nodeType":"YulFunctionCall","src":"15460:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15450:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"15539:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"15541:77:15"},"nodeType":"YulFunctionCall","src":"15541:79:15"},"nodeType":"YulExpressionStatement","src":"15541:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15511:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"15519:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15508:2:15"},"nodeType":"YulFunctionCall","src":"15508:30:15"},"nodeType":"YulIf","src":"15505:117:15"},{"nodeType":"YulAssignment","src":"15636:117:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15725:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"15736:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15721:3:15"},"nodeType":"YulFunctionCall","src":"15721:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15745:7:15"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"15646:74:15"},"nodeType":"YulFunctionCall","src":"15646:107:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15636:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15127:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15138:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15150:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15158:6:15","type":""}],"src":"15028:742:15"},{"body":{"nodeType":"YulBlock","src":"15834:40:15","statements":[{"nodeType":"YulAssignment","src":"15845:22:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15861:5:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15855:5:15"},"nodeType":"YulFunctionCall","src":"15855:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15845:6:15"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15817:5:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"15827:6:15","type":""}],"src":"15776:98:15"},{"body":{"nodeType":"YulBlock","src":"15975:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15992:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"15997:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15985:6:15"},"nodeType":"YulFunctionCall","src":"15985:19:15"},"nodeType":"YulExpressionStatement","src":"15985:19:15"},{"nodeType":"YulAssignment","src":"16013:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16032:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"16037:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16028:3:15"},"nodeType":"YulFunctionCall","src":"16028:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16013:11:15"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15947:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"15952:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"15963:11:15","type":""}],"src":"15880:168:15"},{"body":{"nodeType":"YulBlock","src":"16116:184:15","statements":[{"nodeType":"YulVariableDeclaration","src":"16126:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"16135:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16130:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"16195:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16220:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"16225:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16216:3:15"},"nodeType":"YulFunctionCall","src":"16216:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16239:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"16244:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16235:3:15"},"nodeType":"YulFunctionCall","src":"16235:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16229:5:15"},"nodeType":"YulFunctionCall","src":"16229:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16209:6:15"},"nodeType":"YulFunctionCall","src":"16209:39:15"},"nodeType":"YulExpressionStatement","src":"16209:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16156:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"16159:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16153:2:15"},"nodeType":"YulFunctionCall","src":"16153:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16167:19:15","statements":[{"nodeType":"YulAssignment","src":"16169:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16178:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"16181:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16174:3:15"},"nodeType":"YulFunctionCall","src":"16174:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16169:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"16149:3:15","statements":[]},"src":"16145:113:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16278:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"16283:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16274:3:15"},"nodeType":"YulFunctionCall","src":"16274:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"16292:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16267:6:15"},"nodeType":"YulFunctionCall","src":"16267:27:15"},"nodeType":"YulExpressionStatement","src":"16267:27:15"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"16098:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"16103:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"16108:6:15","type":""}],"src":"16054:246:15"},{"body":{"nodeType":"YulBlock","src":"16396:283:15","statements":[{"nodeType":"YulVariableDeclaration","src":"16406:52:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16452:5:15"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"16420:31:15"},"nodeType":"YulFunctionCall","src":"16420:38:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16410:6:15","type":""}]},{"nodeType":"YulAssignment","src":"16467:77:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16532:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"16537:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16474:57:15"},"nodeType":"YulFunctionCall","src":"16474:70:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16467:3:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16592:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"16599:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16588:3:15"},"nodeType":"YulFunctionCall","src":"16588:16:15"},{"name":"pos","nodeType":"YulIdentifier","src":"16606:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"16611:6:15"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16553:34:15"},"nodeType":"YulFunctionCall","src":"16553:65:15"},"nodeType":"YulExpressionStatement","src":"16553:65:15"},{"nodeType":"YulAssignment","src":"16627:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16638:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16665:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"16643:21:15"},"nodeType":"YulFunctionCall","src":"16643:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16634:3:15"},"nodeType":"YulFunctionCall","src":"16634:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16627:3:15"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16377:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16384:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16392:3:15","type":""}],"src":"16306:373:15"},{"body":{"nodeType":"YulBlock","src":"16801:193:15","statements":[{"nodeType":"YulAssignment","src":"16811:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16823:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16834:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16819:3:15"},"nodeType":"YulFunctionCall","src":"16819:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16811:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16858:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16869:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16854:3:15"},"nodeType":"YulFunctionCall","src":"16854:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16877:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"16883:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16873:3:15"},"nodeType":"YulFunctionCall","src":"16873:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16847:6:15"},"nodeType":"YulFunctionCall","src":"16847:47:15"},"nodeType":"YulExpressionStatement","src":"16847:47:15"},{"nodeType":"YulAssignment","src":"16903:84:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16973:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"16982:4:15"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16911:61:15"},"nodeType":"YulFunctionCall","src":"16911:76:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16903:4:15"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16773:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16785:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16796:4:15","type":""}],"src":"16685:309:15"},{"body":{"nodeType":"YulBlock","src":"17066:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"17112:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17114:77:15"},"nodeType":"YulFunctionCall","src":"17114:79:15"},"nodeType":"YulExpressionStatement","src":"17114:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17087:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"17096:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17083:3:15"},"nodeType":"YulFunctionCall","src":"17083:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"17108:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17079:3:15"},"nodeType":"YulFunctionCall","src":"17079:32:15"},"nodeType":"YulIf","src":"17076:119:15"},{"nodeType":"YulBlock","src":"17205:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"17220:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"17234:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17224:6:15","type":""}]},{"nodeType":"YulAssignment","src":"17249:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17284:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"17295:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17280:3:15"},"nodeType":"YulFunctionCall","src":"17280:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17304:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"17259:20:15"},"nodeType":"YulFunctionCall","src":"17259:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17249:6:15"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17036:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17047:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17059:6:15","type":""}],"src":"17000:329:15"},{"body":{"nodeType":"YulBlock","src":"17394:50:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17411:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17431:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"17416:14:15"},"nodeType":"YulFunctionCall","src":"17416:21:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17404:6:15"},"nodeType":"YulFunctionCall","src":"17404:34:15"},"nodeType":"YulExpressionStatement","src":"17404:34:15"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17382:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17389:3:15","type":""}],"src":"17335:109:15"},{"body":{"nodeType":"YulBlock","src":"17542:118:15","statements":[{"nodeType":"YulAssignment","src":"17552:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17564:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17575:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17560:3:15"},"nodeType":"YulFunctionCall","src":"17560:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17552:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17626:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17639:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17650:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17635:3:15"},"nodeType":"YulFunctionCall","src":"17635:17:15"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"17588:37:15"},"nodeType":"YulFunctionCall","src":"17588:65:15"},"nodeType":"YulExpressionStatement","src":"17588:65:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17514:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17526:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17537:4:15","type":""}],"src":"17450:210:15"},{"body":{"nodeType":"YulBlock","src":"17721:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17738:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17761:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"17743:17:15"},"nodeType":"YulFunctionCall","src":"17743:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17731:6:15"},"nodeType":"YulFunctionCall","src":"17731:37:15"},"nodeType":"YulExpressionStatement","src":"17731:37:15"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17709:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17716:3:15","type":""}],"src":"17666:108:15"},{"body":{"nodeType":"YulBlock","src":"17835:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17852:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17875:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"17857:17:15"},"nodeType":"YulFunctionCall","src":"17857:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17845:6:15"},"nodeType":"YulFunctionCall","src":"17845:37:15"},"nodeType":"YulExpressionStatement","src":"17845:37:15"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17823:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17830:3:15","type":""}],"src":"17780:108:15"},{"body":{"nodeType":"YulBlock","src":"17947:52:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17964:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17986:5:15"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"17969:16:15"},"nodeType":"YulFunctionCall","src":"17969:23:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17957:6:15"},"nodeType":"YulFunctionCall","src":"17957:36:15"},"nodeType":"YulExpressionStatement","src":"17957:36:15"}]},"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17935:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17942:3:15","type":""}],"src":"17894:105:15"},{"body":{"nodeType":"YulBlock","src":"18054:50:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18071:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18091:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"18076:14:15"},"nodeType":"YulFunctionCall","src":"18076:21:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18064:6:15"},"nodeType":"YulFunctionCall","src":"18064:34:15"},"nodeType":"YulExpressionStatement","src":"18064:34:15"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18042:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18049:3:15","type":""}],"src":"18005:99:15"},{"body":{"nodeType":"YulBlock","src":"18278:1651:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18288:28:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18304:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18309:6:15","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18300:3:15"},"nodeType":"YulFunctionCall","src":"18300:16:15"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"18292:4:15","type":""}]},{"nodeType":"YulBlock","src":"18326:166:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18363:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18393:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18400:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18389:3:15"},"nodeType":"YulFunctionCall","src":"18389:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18383:5:15"},"nodeType":"YulFunctionCall","src":"18383:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18367:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18453:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18471:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18476:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18467:3:15"},"nodeType":"YulFunctionCall","src":"18467:14:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"18419:33:15"},"nodeType":"YulFunctionCall","src":"18419:63:15"},"nodeType":"YulExpressionStatement","src":"18419:63:15"}]},{"nodeType":"YulBlock","src":"18502:165:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18538:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18568:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18575:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18564:3:15"},"nodeType":"YulFunctionCall","src":"18564:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18558:5:15"},"nodeType":"YulFunctionCall","src":"18558:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18542:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18628:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18646:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18651:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18642:3:15"},"nodeType":"YulFunctionCall","src":"18642:14:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"18594:33:15"},"nodeType":"YulFunctionCall","src":"18594:63:15"},"nodeType":"YulExpressionStatement","src":"18594:63:15"}]},{"nodeType":"YulBlock","src":"18677:178:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18726:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18756:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18763:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18752:3:15"},"nodeType":"YulFunctionCall","src":"18752:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18746:5:15"},"nodeType":"YulFunctionCall","src":"18746:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18730:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18816:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18834:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18839:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18830:3:15"},"nodeType":"YulFunctionCall","src":"18830:14:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"18782:33:15"},"nodeType":"YulFunctionCall","src":"18782:63:15"},"nodeType":"YulExpressionStatement","src":"18782:63:15"}]},{"nodeType":"YulBlock","src":"18865:169:15","statements":[{"nodeType":"YulVariableDeclaration","src":"18905:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18935:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"18942:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18931:3:15"},"nodeType":"YulFunctionCall","src":"18931:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18925:5:15"},"nodeType":"YulFunctionCall","src":"18925:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"18909:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"18995:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19013:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"19018:4:15","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19009:3:15"},"nodeType":"YulFunctionCall","src":"19009:14:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"18961:33:15"},"nodeType":"YulFunctionCall","src":"18961:63:15"},"nodeType":"YulExpressionStatement","src":"18961:63:15"}]},{"nodeType":"YulBlock","src":"19044:162:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19079:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19109:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"19116:4:15","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19105:3:15"},"nodeType":"YulFunctionCall","src":"19105:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19099:5:15"},"nodeType":"YulFunctionCall","src":"19099:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"19083:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"19167:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19185:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"19190:4:15","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19181:3:15"},"nodeType":"YulFunctionCall","src":"19181:14:15"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"19135:31:15"},"nodeType":"YulFunctionCall","src":"19135:61:15"},"nodeType":"YulExpressionStatement","src":"19135:61:15"}]},{"nodeType":"YulBlock","src":"19216:165:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19258:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19288:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"19295:4:15","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19284:3:15"},"nodeType":"YulFunctionCall","src":"19284:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19278:5:15"},"nodeType":"YulFunctionCall","src":"19278:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"19262:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"19342:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19360:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"19365:4:15","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19356:3:15"},"nodeType":"YulFunctionCall","src":"19356:14:15"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"19314:27:15"},"nodeType":"YulFunctionCall","src":"19314:57:15"},"nodeType":"YulExpressionStatement","src":"19314:57:15"}]},{"nodeType":"YulBlock","src":"19391:173:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19435:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19465:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"19472:4:15","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19461:3:15"},"nodeType":"YulFunctionCall","src":"19461:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19455:5:15"},"nodeType":"YulFunctionCall","src":"19455:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"19439:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"19525:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19543:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"19548:4:15","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19539:3:15"},"nodeType":"YulFunctionCall","src":"19539:14:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"19491:33:15"},"nodeType":"YulFunctionCall","src":"19491:63:15"},"nodeType":"YulExpressionStatement","src":"19491:63:15"}]},{"nodeType":"YulBlock","src":"19574:168:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19615:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19645:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"19652:4:15","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19641:3:15"},"nodeType":"YulFunctionCall","src":"19641:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19635:5:15"},"nodeType":"YulFunctionCall","src":"19635:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"19619:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"19703:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19721:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"19726:4:15","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19717:3:15"},"nodeType":"YulFunctionCall","src":"19717:14:15"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"19671:31:15"},"nodeType":"YulFunctionCall","src":"19671:61:15"},"nodeType":"YulExpressionStatement","src":"19671:61:15"}]},{"nodeType":"YulBlock","src":"19752:170:15","statements":[{"nodeType":"YulVariableDeclaration","src":"19789:45:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19819:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"19826:6:15","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19815:3:15"},"nodeType":"YulFunctionCall","src":"19815:18:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19809:5:15"},"nodeType":"YulFunctionCall","src":"19809:25:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"19793:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"19881:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19899:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"19904:6:15","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19895:3:15"},"nodeType":"YulFunctionCall","src":"19895:16:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"19847:33:15"},"nodeType":"YulFunctionCall","src":"19847:65:15"},"nodeType":"YulExpressionStatement","src":"19847:65:15"}]}]},"name":"abi_encode_t_struct$_Order_$3844_memory_ptr_to_t_struct$_Order_$3844_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18265:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18272:3:15","type":""}],"src":"18166:1763:15"},{"body":{"nodeType":"YulBlock","src":"20079:171:15","statements":[{"nodeType":"YulAssignment","src":"20089:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20101:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20112:3:15","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20097:3:15"},"nodeType":"YulFunctionCall","src":"20097:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20089:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20216:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20229:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20240:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20225:3:15"},"nodeType":"YulFunctionCall","src":"20225:17:15"}],"functionName":{"name":"abi_encode_t_struct$_Order_$3844_memory_ptr_to_t_struct$_Order_$3844_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20126:89:15"},"nodeType":"YulFunctionCall","src":"20126:117:15"},"nodeType":"YulExpressionStatement","src":"20126:117:15"}]},"name":"abi_encode_tuple_t_struct$_Order_$3844_memory_ptr__to_t_struct$_Order_$3844_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20051:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20063:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20074:4:15","type":""}],"src":"19935:315:15"},{"body":{"nodeType":"YulBlock","src":"20339:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"20385:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20387:77:15"},"nodeType":"YulFunctionCall","src":"20387:79:15"},"nodeType":"YulExpressionStatement","src":"20387:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20360:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"20369:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20356:3:15"},"nodeType":"YulFunctionCall","src":"20356:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"20381:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20352:3:15"},"nodeType":"YulFunctionCall","src":"20352:32:15"},"nodeType":"YulIf","src":"20349:119:15"},{"nodeType":"YulBlock","src":"20478:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"20493:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"20507:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20497:6:15","type":""}]},{"nodeType":"YulAssignment","src":"20522:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20557:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"20568:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20553:3:15"},"nodeType":"YulFunctionCall","src":"20553:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20577:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"20532:20:15"},"nodeType":"YulFunctionCall","src":"20532:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20522:6:15"}]}]},{"nodeType":"YulBlock","src":"20605:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"20620:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"20634:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20624:6:15","type":""}]},{"nodeType":"YulAssignment","src":"20650:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20685:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"20696:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20681:3:15"},"nodeType":"YulFunctionCall","src":"20681:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20705:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20660:20:15"},"nodeType":"YulFunctionCall","src":"20660:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20650:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20301:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20312:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20324:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20332:6:15","type":""}],"src":"20256:474:15"},{"body":{"nodeType":"YulBlock","src":"20801:262:15","statements":[{"body":{"nodeType":"YulBlock","src":"20847:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20849:77:15"},"nodeType":"YulFunctionCall","src":"20849:79:15"},"nodeType":"YulExpressionStatement","src":"20849:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20822:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"20831:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20818:3:15"},"nodeType":"YulFunctionCall","src":"20818:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"20843:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20814:3:15"},"nodeType":"YulFunctionCall","src":"20814:32:15"},"nodeType":"YulIf","src":"20811:119:15"},{"nodeType":"YulBlock","src":"20940:116:15","statements":[{"nodeType":"YulVariableDeclaration","src":"20955:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"20969:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20959:6:15","type":""}]},{"nodeType":"YulAssignment","src":"20984:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21018:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"21029:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21014:3:15"},"nodeType":"YulFunctionCall","src":"21014:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21038:7:15"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"20994:19:15"},"nodeType":"YulFunctionCall","src":"20994:52:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20984:6:15"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20771:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20782:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20794:6:15","type":""}],"src":"20736:327:15"},{"body":{"nodeType":"YulBlock","src":"21311:395:15","statements":[{"nodeType":"YulVariableDeclaration","src":"21321:26:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21337:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"21342:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21333:3:15"},"nodeType":"YulFunctionCall","src":"21333:14:15"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"21325:4:15","type":""}]},{"nodeType":"YulBlock","src":"21357:164:15","statements":[{"nodeType":"YulVariableDeclaration","src":"21392:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21422:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"21429:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21418:3:15"},"nodeType":"YulFunctionCall","src":"21418:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21412:5:15"},"nodeType":"YulFunctionCall","src":"21412:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"21396:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"21482:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21500:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"21505:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21496:3:15"},"nodeType":"YulFunctionCall","src":"21496:14:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"21448:33:15"},"nodeType":"YulFunctionCall","src":"21448:63:15"},"nodeType":"YulExpressionStatement","src":"21448:63:15"}]},{"nodeType":"YulBlock","src":"21531:168:15","statements":[{"nodeType":"YulVariableDeclaration","src":"21570:43:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21600:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"21607:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21596:3:15"},"nodeType":"YulFunctionCall","src":"21596:16:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21590:5:15"},"nodeType":"YulFunctionCall","src":"21590:23:15"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"21574:12:15","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"21660:12:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21678:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"21683:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21674:3:15"},"nodeType":"YulFunctionCall","src":"21674:14:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"21626:33:15"},"nodeType":"YulFunctionCall","src":"21626:63:15"},"nodeType":"YulExpressionStatement","src":"21626:63:15"}]}]},"name":"abi_encode_t_struct$_InstitutionByCode_$3534_memory_ptr_to_t_struct$_InstitutionByCode_$3534_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21298:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21305:3:15","type":""}],"src":"21175:531:15"},{"body":{"nodeType":"YulBlock","src":"21880:194:15","statements":[{"nodeType":"YulAssignment","src":"21890:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21902:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21913:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21898:3:15"},"nodeType":"YulFunctionCall","src":"21898:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21890:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22040:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22053:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22064:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22049:3:15"},"nodeType":"YulFunctionCall","src":"22049:17:15"}],"functionName":{"name":"abi_encode_t_struct$_InstitutionByCode_$3534_memory_ptr_to_t_struct$_InstitutionByCode_$3534_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21926:113:15"},"nodeType":"YulFunctionCall","src":"21926:141:15"},"nodeType":"YulExpressionStatement","src":"21926:141:15"}]},"name":"abi_encode_tuple_t_struct$_InstitutionByCode_$3534_memory_ptr__to_t_struct$_InstitutionByCode_$3534_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21852:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21864:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21875:4:15","type":""}],"src":"21712:362:15"},{"body":{"nodeType":"YulBlock","src":"22178:124:15","statements":[{"nodeType":"YulAssignment","src":"22188:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22200:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22211:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22196:3:15"},"nodeType":"YulFunctionCall","src":"22196:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22188:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22268:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22281:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22292:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22277:3:15"},"nodeType":"YulFunctionCall","src":"22277:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22224:43:15"},"nodeType":"YulFunctionCall","src":"22224:71:15"},"nodeType":"YulExpressionStatement","src":"22224:71:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22150:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22162:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22173:4:15","type":""}],"src":"22080:222:15"},{"body":{"nodeType":"YulBlock","src":"22405:516:15","statements":[{"body":{"nodeType":"YulBlock","src":"22451:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"22453:77:15"},"nodeType":"YulFunctionCall","src":"22453:79:15"},"nodeType":"YulExpressionStatement","src":"22453:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22426:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"22435:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22422:3:15"},"nodeType":"YulFunctionCall","src":"22422:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"22447:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22418:3:15"},"nodeType":"YulFunctionCall","src":"22418:32:15"},"nodeType":"YulIf","src":"22415:119:15"},{"nodeType":"YulBlock","src":"22544:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"22559:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"22573:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22563:6:15","type":""}]},{"nodeType":"YulAssignment","src":"22588:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22623:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"22634:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22619:3:15"},"nodeType":"YulFunctionCall","src":"22619:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22643:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"22598:20:15"},"nodeType":"YulFunctionCall","src":"22598:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22588:6:15"}]}]},{"nodeType":"YulBlock","src":"22671:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"22686:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"22700:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22690:6:15","type":""}]},{"nodeType":"YulAssignment","src":"22716:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22751:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"22762:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22747:3:15"},"nodeType":"YulFunctionCall","src":"22747:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22771:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"22726:20:15"},"nodeType":"YulFunctionCall","src":"22726:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"22716:6:15"}]}]},{"nodeType":"YulBlock","src":"22799:115:15","statements":[{"nodeType":"YulVariableDeclaration","src":"22814:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"22828:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22818:6:15","type":""}]},{"nodeType":"YulAssignment","src":"22844:60:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22876:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"22887:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22872:3:15"},"nodeType":"YulFunctionCall","src":"22872:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22896:7:15"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"22854:17:15"},"nodeType":"YulFunctionCall","src":"22854:50:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"22844:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22359:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22370:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22382:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22390:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22398:6:15","type":""}],"src":"22308:613:15"},{"body":{"nodeType":"YulBlock","src":"22990:52:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23007:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23029:5:15"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"23012:16:15"},"nodeType":"YulFunctionCall","src":"23012:23:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23000:6:15"},"nodeType":"YulFunctionCall","src":"23000:36:15"},"nodeType":"YulExpressionStatement","src":"23000:36:15"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22978:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22985:3:15","type":""}],"src":"22927:115:15"},{"body":{"nodeType":"YulBlock","src":"23113:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23130:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23153:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"23135:17:15"},"nodeType":"YulFunctionCall","src":"23135:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23123:6:15"},"nodeType":"YulFunctionCall","src":"23123:37:15"},"nodeType":"YulExpressionStatement","src":"23123:37:15"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23101:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23108:3:15","type":""}],"src":"23048:118:15"},{"body":{"nodeType":"YulBlock","src":"23296:204:15","statements":[{"nodeType":"YulAssignment","src":"23306:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23318:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23329:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23314:3:15"},"nodeType":"YulFunctionCall","src":"23314:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23306:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23384:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23397:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23408:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23393:3:15"},"nodeType":"YulFunctionCall","src":"23393:17:15"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"23342:41:15"},"nodeType":"YulFunctionCall","src":"23342:69:15"},"nodeType":"YulExpressionStatement","src":"23342:69:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23465:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23478:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23489:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23474:3:15"},"nodeType":"YulFunctionCall","src":"23474:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23421:43:15"},"nodeType":"YulFunctionCall","src":"23421:72:15"},"nodeType":"YulExpressionStatement","src":"23421:72:15"}]},"name":"abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23260:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23272:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23280:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23291:4:15","type":""}],"src":"23172:328:15"},{"body":{"nodeType":"YulBlock","src":"23593:478:15","statements":[{"body":{"nodeType":"YulBlock","src":"23642:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"23644:77:15"},"nodeType":"YulFunctionCall","src":"23644:79:15"},"nodeType":"YulExpressionStatement","src":"23644:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23621:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23629:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23617:3:15"},"nodeType":"YulFunctionCall","src":"23617:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"23636:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23613:3:15"},"nodeType":"YulFunctionCall","src":"23613:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23606:6:15"},"nodeType":"YulFunctionCall","src":"23606:35:15"},"nodeType":"YulIf","src":"23603:122:15"},{"nodeType":"YulAssignment","src":"23734:30:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23757:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"23744:12:15"},"nodeType":"YulFunctionCall","src":"23744:20:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"23734:6:15"}]},{"body":{"nodeType":"YulBlock","src":"23807:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"23809:77:15"},"nodeType":"YulFunctionCall","src":"23809:79:15"},"nodeType":"YulExpressionStatement","src":"23809:79:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"23779:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23787:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23776:2:15"},"nodeType":"YulFunctionCall","src":"23776:30:15"},"nodeType":"YulIf","src":"23773:117:15"},{"nodeType":"YulAssignment","src":"23899:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23915:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23923:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23911:3:15"},"nodeType":"YulFunctionCall","src":"23911:17:15"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"23899:8:15"}]},{"body":{"nodeType":"YulBlock","src":"23982:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"23984:77:15"},"nodeType":"YulFunctionCall","src":"23984:79:15"},"nodeType":"YulExpressionStatement","src":"23984:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"23947:8:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"23961:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"23969:4:15","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"23957:3:15"},"nodeType":"YulFunctionCall","src":"23957:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23943:3:15"},"nodeType":"YulFunctionCall","src":"23943:32:15"},{"name":"end","nodeType":"YulIdentifier","src":"23977:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23940:2:15"},"nodeType":"YulFunctionCall","src":"23940:41:15"},"nodeType":"YulIf","src":"23937:128:15"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23560:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"23568:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"23576:8:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"23586:6:15","type":""}],"src":"23519:552:15"},{"body":{"nodeType":"YulBlock","src":"24162:442:15","statements":[{"body":{"nodeType":"YulBlock","src":"24208:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"24210:77:15"},"nodeType":"YulFunctionCall","src":"24210:79:15"},"nodeType":"YulExpressionStatement","src":"24210:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24183:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"24192:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24179:3:15"},"nodeType":"YulFunctionCall","src":"24179:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"24204:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24175:3:15"},"nodeType":"YulFunctionCall","src":"24175:32:15"},"nodeType":"YulIf","src":"24172:119:15"},{"nodeType":"YulBlock","src":"24301:296:15","statements":[{"nodeType":"YulVariableDeclaration","src":"24316:45:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24347:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24358:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24343:3:15"},"nodeType":"YulFunctionCall","src":"24343:17:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"24330:12:15"},"nodeType":"YulFunctionCall","src":"24330:31:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24320:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"24408:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"24410:77:15"},"nodeType":"YulFunctionCall","src":"24410:79:15"},"nodeType":"YulExpressionStatement","src":"24410:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24380:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"24388:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24377:2:15"},"nodeType":"YulFunctionCall","src":"24377:30:15"},"nodeType":"YulIf","src":"24374:117:15"},{"nodeType":"YulAssignment","src":"24505:82:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24559:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"24570:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24555:3:15"},"nodeType":"YulFunctionCall","src":"24555:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24579:7:15"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"24523:31:15"},"nodeType":"YulFunctionCall","src":"24523:64:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24505:6:15"},{"name":"value1","nodeType":"YulIdentifier","src":"24513:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24124:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24135:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24147:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24155:6:15","type":""}],"src":"24077:527:15"},{"body":{"nodeType":"YulBlock","src":"24710:519:15","statements":[{"body":{"nodeType":"YulBlock","src":"24756:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"24758:77:15"},"nodeType":"YulFunctionCall","src":"24758:79:15"},"nodeType":"YulExpressionStatement","src":"24758:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24731:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"24740:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24727:3:15"},"nodeType":"YulFunctionCall","src":"24727:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"24752:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24723:3:15"},"nodeType":"YulFunctionCall","src":"24723:32:15"},"nodeType":"YulIf","src":"24720:119:15"},{"nodeType":"YulBlock","src":"24849:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"24864:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"24878:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24868:6:15","type":""}]},{"nodeType":"YulAssignment","src":"24893:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24928:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"24939:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24924:3:15"},"nodeType":"YulFunctionCall","src":"24924:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24948:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"24903:20:15"},"nodeType":"YulFunctionCall","src":"24903:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24893:6:15"}]}]},{"nodeType":"YulBlock","src":"24976:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"24991:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"25005:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24995:6:15","type":""}]},{"nodeType":"YulAssignment","src":"25021:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25056:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"25067:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25052:3:15"},"nodeType":"YulFunctionCall","src":"25052:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"25076:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"25031:20:15"},"nodeType":"YulFunctionCall","src":"25031:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"25021:6:15"}]}]},{"nodeType":"YulBlock","src":"25104:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"25119:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"25133:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25123:6:15","type":""}]},{"nodeType":"YulAssignment","src":"25149:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25184:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"25195:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25180:3:15"},"nodeType":"YulFunctionCall","src":"25180:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"25204:7:15"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"25159:20:15"},"nodeType":"YulFunctionCall","src":"25159:53:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"25149:6:15"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24664:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24675:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24687:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24695:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"24703:6:15","type":""}],"src":"24610:619:15"},{"body":{"nodeType":"YulBlock","src":"25318:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"25364:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"25366:77:15"},"nodeType":"YulFunctionCall","src":"25366:79:15"},"nodeType":"YulExpressionStatement","src":"25366:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"25339:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"25348:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25335:3:15"},"nodeType":"YulFunctionCall","src":"25335:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"25360:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"25331:3:15"},"nodeType":"YulFunctionCall","src":"25331:32:15"},"nodeType":"YulIf","src":"25328:119:15"},{"nodeType":"YulBlock","src":"25457:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"25472:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"25486:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25476:6:15","type":""}]},{"nodeType":"YulAssignment","src":"25501:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25536:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"25547:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25532:3:15"},"nodeType":"YulFunctionCall","src":"25532:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"25556:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"25511:20:15"},"nodeType":"YulFunctionCall","src":"25511:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"25501:6:15"}]}]},{"nodeType":"YulBlock","src":"25584:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"25599:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"25613:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"25603:6:15","type":""}]},{"nodeType":"YulAssignment","src":"25629:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25664:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"25675:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25660:3:15"},"nodeType":"YulFunctionCall","src":"25660:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"25684:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"25639:20:15"},"nodeType":"YulFunctionCall","src":"25639:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"25629:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25280:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"25291:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"25303:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25311:6:15","type":""}],"src":"25235:474:15"},{"body":{"nodeType":"YulBlock","src":"25743:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25760:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25763:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25753:6:15"},"nodeType":"YulFunctionCall","src":"25753:88:15"},"nodeType":"YulExpressionStatement","src":"25753:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25857:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25860:4:15","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25850:6:15"},"nodeType":"YulFunctionCall","src":"25850:15:15"},"nodeType":"YulExpressionStatement","src":"25850:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25881:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25884:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25874:6:15"},"nodeType":"YulFunctionCall","src":"25874:15:15"},"nodeType":"YulExpressionStatement","src":"25874:15:15"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"25715:180:15"},{"body":{"nodeType":"YulBlock","src":"25997:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26014:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"26019:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26007:6:15"},"nodeType":"YulFunctionCall","src":"26007:19:15"},"nodeType":"YulExpressionStatement","src":"26007:19:15"},{"nodeType":"YulAssignment","src":"26035:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26054:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"26059:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26050:3:15"},"nodeType":"YulFunctionCall","src":"26050:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"26035:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25969:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"25974:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"25985:11:15","type":""}],"src":"25901:169:15"},{"body":{"nodeType":"YulBlock","src":"26182:58:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26204:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"26212:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26200:3:15"},"nodeType":"YulFunctionCall","src":"26200:14:15"},{"hexValue":"4f6e6c7941676772656761746f72","kind":"string","nodeType":"YulLiteral","src":"26216:16:15","type":"","value":"OnlyAggregator"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26193:6:15"},"nodeType":"YulFunctionCall","src":"26193:40:15"},"nodeType":"YulExpressionStatement","src":"26193:40:15"}]},"name":"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26174:6:15","type":""}],"src":"26076:164:15"},{"body":{"nodeType":"YulBlock","src":"26392:220:15","statements":[{"nodeType":"YulAssignment","src":"26402:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26468:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"26473:2:15","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26409:58:15"},"nodeType":"YulFunctionCall","src":"26409:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26402:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26574:3:15"}],"functionName":{"name":"store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243","nodeType":"YulIdentifier","src":"26485:88:15"},"nodeType":"YulFunctionCall","src":"26485:93:15"},"nodeType":"YulExpressionStatement","src":"26485:93:15"},{"nodeType":"YulAssignment","src":"26587:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26598:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"26603:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26594:3:15"},"nodeType":"YulFunctionCall","src":"26594:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26587:3:15"}]}]},"name":"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26380:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26388:3:15","type":""}],"src":"26246:366:15"},{"body":{"nodeType":"YulBlock","src":"26789:248:15","statements":[{"nodeType":"YulAssignment","src":"26799:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26811:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26822:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26807:3:15"},"nodeType":"YulFunctionCall","src":"26807:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26799:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26846:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26857:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26842:3:15"},"nodeType":"YulFunctionCall","src":"26842:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26865:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"26871:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26861:3:15"},"nodeType":"YulFunctionCall","src":"26861:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26835:6:15"},"nodeType":"YulFunctionCall","src":"26835:47:15"},"nodeType":"YulExpressionStatement","src":"26835:47:15"},{"nodeType":"YulAssignment","src":"26891:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27025:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26899:124:15"},"nodeType":"YulFunctionCall","src":"26899:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26891:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26769:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26784:4:15","type":""}],"src":"26618:419:15"},{"body":{"nodeType":"YulBlock","src":"27149:58:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27171:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"27179:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27167:3:15"},"nodeType":"YulFunctionCall","src":"27167:14:15"},{"hexValue":"4f7264657246756c66696c6c6564","kind":"string","nodeType":"YulLiteral","src":"27183:16:15","type":"","value":"OrderFulfilled"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27160:6:15"},"nodeType":"YulFunctionCall","src":"27160:40:15"},"nodeType":"YulExpressionStatement","src":"27160:40:15"}]},"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27141:6:15","type":""}],"src":"27043:164:15"},{"body":{"nodeType":"YulBlock","src":"27359:220:15","statements":[{"nodeType":"YulAssignment","src":"27369:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27435:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"27440:2:15","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27376:58:15"},"nodeType":"YulFunctionCall","src":"27376:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27369:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27541:3:15"}],"functionName":{"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulIdentifier","src":"27452:88:15"},"nodeType":"YulFunctionCall","src":"27452:93:15"},"nodeType":"YulExpressionStatement","src":"27452:93:15"},{"nodeType":"YulAssignment","src":"27554:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27565:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"27570:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27561:3:15"},"nodeType":"YulFunctionCall","src":"27561:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27554:3:15"}]}]},"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27347:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27355:3:15","type":""}],"src":"27213:366:15"},{"body":{"nodeType":"YulBlock","src":"27756:248:15","statements":[{"nodeType":"YulAssignment","src":"27766:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27778:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27789:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27774:3:15"},"nodeType":"YulFunctionCall","src":"27774:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27766:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27813:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27824:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27809:3:15"},"nodeType":"YulFunctionCall","src":"27809:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27832:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"27838:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27828:3:15"},"nodeType":"YulFunctionCall","src":"27828:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27802:6:15"},"nodeType":"YulFunctionCall","src":"27802:47:15"},"nodeType":"YulExpressionStatement","src":"27802:47:15"},{"nodeType":"YulAssignment","src":"27858:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27992:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27866:124:15"},"nodeType":"YulFunctionCall","src":"27866:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27858:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27736:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27751:4:15","type":""}],"src":"27585:419:15"},{"body":{"nodeType":"YulBlock","src":"28038:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28055:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28058:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28048:6:15"},"nodeType":"YulFunctionCall","src":"28048:88:15"},"nodeType":"YulExpressionStatement","src":"28048:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28152:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28155:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28145:6:15"},"nodeType":"YulFunctionCall","src":"28145:15:15"},"nodeType":"YulExpressionStatement","src":"28145:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28176:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28179:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28169:6:15"},"nodeType":"YulFunctionCall","src":"28169:15:15"},"nodeType":"YulExpressionStatement","src":"28169:15:15"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"28010:180:15"},{"body":{"nodeType":"YulBlock","src":"28240:172:15","statements":[{"nodeType":"YulAssignment","src":"28250:24:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28272:1:15"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"28255:16:15"},"nodeType":"YulFunctionCall","src":"28255:19:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28250:1:15"}]},{"nodeType":"YulAssignment","src":"28283:24:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28305:1:15"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"28288:16:15"},"nodeType":"YulFunctionCall","src":"28288:19:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"28283:1:15"}]},{"nodeType":"YulAssignment","src":"28316:17:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28328:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"28331:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28324:3:15"},"nodeType":"YulFunctionCall","src":"28324:9:15"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"28316:4:15"}]},{"body":{"nodeType":"YulBlock","src":"28383:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28385:16:15"},"nodeType":"YulFunctionCall","src":"28385:18:15"},"nodeType":"YulExpressionStatement","src":"28385:18:15"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"28349:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"28355:26:15","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28346:2:15"},"nodeType":"YulFunctionCall","src":"28346:36:15"},"nodeType":"YulIf","src":"28343:62:15"}]},"name":"checked_sub_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28226:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"28229:1:15","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"28235:4:15","type":""}],"src":"28196:216:15"},{"body":{"nodeType":"YulBlock","src":"28544:206:15","statements":[{"nodeType":"YulAssignment","src":"28554:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28566:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28577:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28562:3:15"},"nodeType":"YulFunctionCall","src":"28562:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28554:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28634:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28647:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28658:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28643:3:15"},"nodeType":"YulFunctionCall","src":"28643:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28590:43:15"},"nodeType":"YulFunctionCall","src":"28590:71:15"},"nodeType":"YulExpressionStatement","src":"28590:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28715:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28728:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28739:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28724:3:15"},"nodeType":"YulFunctionCall","src":"28724:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28671:43:15"},"nodeType":"YulFunctionCall","src":"28671:72:15"},"nodeType":"YulExpressionStatement","src":"28671:72:15"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28508:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28520:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28528:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28539:4:15","type":""}],"src":"28418:332:15"},{"body":{"nodeType":"YulBlock","src":"28816:77:15","statements":[{"nodeType":"YulAssignment","src":"28826:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"28841:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"28835:5:15"},"nodeType":"YulFunctionCall","src":"28835:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28826:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28881:5:15"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"28857:23:15"},"nodeType":"YulFunctionCall","src":"28857:30:15"},"nodeType":"YulExpressionStatement","src":"28857:30:15"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"28794:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"28802:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"28810:5:15","type":""}],"src":"28756:137:15"},{"body":{"nodeType":"YulBlock","src":"28973:271:15","statements":[{"body":{"nodeType":"YulBlock","src":"29019:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"29021:77:15"},"nodeType":"YulFunctionCall","src":"29021:79:15"},"nodeType":"YulExpressionStatement","src":"29021:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"28994:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"29003:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28990:3:15"},"nodeType":"YulFunctionCall","src":"28990:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"29015:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"28986:3:15"},"nodeType":"YulFunctionCall","src":"28986:32:15"},"nodeType":"YulIf","src":"28983:119:15"},{"nodeType":"YulBlock","src":"29112:125:15","statements":[{"nodeType":"YulVariableDeclaration","src":"29127:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"29141:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"29131:6:15","type":""}]},{"nodeType":"YulAssignment","src":"29156:71:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29199:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"29210:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29195:3:15"},"nodeType":"YulFunctionCall","src":"29195:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"29219:7:15"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"29166:28:15"},"nodeType":"YulFunctionCall","src":"29166:61:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"29156:6:15"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28943:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"28954:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"28966:6:15","type":""}],"src":"28899:345:15"},{"body":{"nodeType":"YulBlock","src":"29282:28:15","statements":[{"nodeType":"YulAssignment","src":"29292:12:15","value":{"name":"value","nodeType":"YulIdentifier","src":"29299:5:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"29292:3:15"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29268:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"29278:3:15","type":""}],"src":"29250:60:15"},{"body":{"nodeType":"YulBlock","src":"29374:80:15","statements":[{"nodeType":"YulAssignment","src":"29384:64:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29440:5:15"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"29423:16:15"},"nodeType":"YulFunctionCall","src":"29423:23:15"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"29414:8:15"},"nodeType":"YulFunctionCall","src":"29414:33:15"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"29397:16:15"},"nodeType":"YulFunctionCall","src":"29397:51:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"29384:9:15"}]}]},"name":"convert_t_uint64_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29354:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"29364:9:15","type":""}],"src":"29316:138:15"},{"body":{"nodeType":"YulBlock","src":"29523:64:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29540:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29574:5:15"}],"functionName":{"name":"convert_t_uint64_to_t_uint96","nodeType":"YulIdentifier","src":"29545:28:15"},"nodeType":"YulFunctionCall","src":"29545:35:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29533:6:15"},"nodeType":"YulFunctionCall","src":"29533:48:15"},"nodeType":"YulExpressionStatement","src":"29533:48:15"}]},"name":"abi_encode_t_uint64_to_t_uint96_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29511:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29518:3:15","type":""}],"src":"29460:127:15"},{"body":{"nodeType":"YulBlock","src":"29745:286:15","statements":[{"nodeType":"YulAssignment","src":"29755:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29767:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29778:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29763:3:15"},"nodeType":"YulFunctionCall","src":"29763:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29755:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29835:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29848:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29859:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29844:3:15"},"nodeType":"YulFunctionCall","src":"29844:17:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29791:43:15"},"nodeType":"YulFunctionCall","src":"29791:71:15"},"nodeType":"YulExpressionStatement","src":"29791:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29916:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29929:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29940:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29925:3:15"},"nodeType":"YulFunctionCall","src":"29925:18:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"29872:43:15"},"nodeType":"YulFunctionCall","src":"29872:72:15"},"nodeType":"YulExpressionStatement","src":"29872:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"29996:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30009:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30020:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30005:3:15"},"nodeType":"YulFunctionCall","src":"30005:18:15"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"29954:41:15"},"nodeType":"YulFunctionCall","src":"29954:70:15"},"nodeType":"YulExpressionStatement","src":"29954:70:15"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29701:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29713:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29721:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29729:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29740:4:15","type":""}],"src":"29593:438:15"},{"body":{"nodeType":"YulBlock","src":"30085:362:15","statements":[{"nodeType":"YulAssignment","src":"30095:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30118:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30100:17:15"},"nodeType":"YulFunctionCall","src":"30100:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"30095:1:15"}]},{"nodeType":"YulAssignment","src":"30129:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30152:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30134:17:15"},"nodeType":"YulFunctionCall","src":"30134:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"30129:1:15"}]},{"nodeType":"YulVariableDeclaration","src":"30163:28:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30186:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"30189:1:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"30182:3:15"},"nodeType":"YulFunctionCall","src":"30182:9:15"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"30167:11:15","type":""}]},{"nodeType":"YulAssignment","src":"30200:41:15","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"30229:11:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30211:17:15"},"nodeType":"YulFunctionCall","src":"30211:30:15"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"30200:7:15"}]},{"body":{"nodeType":"YulBlock","src":"30418:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30420:16:15"},"nodeType":"YulFunctionCall","src":"30420:18:15"},"nodeType":"YulExpressionStatement","src":"30420:18:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30351:1:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30344:6:15"},"nodeType":"YulFunctionCall","src":"30344:9:15"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30374:1:15"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"30381:7:15"},{"name":"x","nodeType":"YulIdentifier","src":"30390:1:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"30377:3:15"},"nodeType":"YulFunctionCall","src":"30377:15:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"30371:2:15"},"nodeType":"YulFunctionCall","src":"30371:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"30324:2:15"},"nodeType":"YulFunctionCall","src":"30324:83:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30304:6:15"},"nodeType":"YulFunctionCall","src":"30304:113:15"},"nodeType":"YulIf","src":"30301:139:15"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"30068:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"30071:1:15","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"30077:7:15","type":""}],"src":"30037:410:15"},{"body":{"nodeType":"YulBlock","src":"30481:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30498:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30501:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30491:6:15"},"nodeType":"YulFunctionCall","src":"30491:88:15"},"nodeType":"YulExpressionStatement","src":"30491:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30595:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"30598:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30588:6:15"},"nodeType":"YulFunctionCall","src":"30588:15:15"},"nodeType":"YulExpressionStatement","src":"30588:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30619:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"30622:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30612:6:15"},"nodeType":"YulFunctionCall","src":"30612:15:15"},"nodeType":"YulExpressionStatement","src":"30612:15:15"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"30453:180:15"},{"body":{"nodeType":"YulBlock","src":"30681:143:15","statements":[{"nodeType":"YulAssignment","src":"30691:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30714:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30696:17:15"},"nodeType":"YulFunctionCall","src":"30696:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"30691:1:15"}]},{"nodeType":"YulAssignment","src":"30725:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30748:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"30730:17:15"},"nodeType":"YulFunctionCall","src":"30730:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"30725:1:15"}]},{"body":{"nodeType":"YulBlock","src":"30772:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"30774:16:15"},"nodeType":"YulFunctionCall","src":"30774:18:15"},"nodeType":"YulExpressionStatement","src":"30774:18:15"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30769:1:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30762:6:15"},"nodeType":"YulFunctionCall","src":"30762:9:15"},"nodeType":"YulIf","src":"30759:35:15"},{"nodeType":"YulAssignment","src":"30804:14:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30813:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"30816:1:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"30809:3:15"},"nodeType":"YulFunctionCall","src":"30809:9:15"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"30804:1:15"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"30670:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"30673:1:15","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"30679:1:15","type":""}],"src":"30639:185:15"},{"body":{"nodeType":"YulBlock","src":"30936:60:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30958:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"30966:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30954:3:15"},"nodeType":"YulFunctionCall","src":"30954:14:15"},{"hexValue":"53656e646572466565546f6f48696768","kind":"string","nodeType":"YulLiteral","src":"30970:18:15","type":"","value":"SenderFeeTooHigh"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30947:6:15"},"nodeType":"YulFunctionCall","src":"30947:42:15"},"nodeType":"YulExpressionStatement","src":"30947:42:15"}]},"name":"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30928:6:15","type":""}],"src":"30830:166:15"},{"body":{"nodeType":"YulBlock","src":"31148:220:15","statements":[{"nodeType":"YulAssignment","src":"31158:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31224:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"31229:2:15","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31165:58:15"},"nodeType":"YulFunctionCall","src":"31165:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31158:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31330:3:15"}],"functionName":{"name":"store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4","nodeType":"YulIdentifier","src":"31241:88:15"},"nodeType":"YulFunctionCall","src":"31241:93:15"},"nodeType":"YulExpressionStatement","src":"31241:93:15"},{"nodeType":"YulAssignment","src":"31343:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31354:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"31359:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31350:3:15"},"nodeType":"YulFunctionCall","src":"31350:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31343:3:15"}]}]},"name":"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31136:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31144:3:15","type":""}],"src":"31002:366:15"},{"body":{"nodeType":"YulBlock","src":"31545:248:15","statements":[{"nodeType":"YulAssignment","src":"31555:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31567:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"31578:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31563:3:15"},"nodeType":"YulFunctionCall","src":"31563:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31555:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31602:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"31613:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31598:3:15"},"nodeType":"YulFunctionCall","src":"31598:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31621:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"31627:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31617:3:15"},"nodeType":"YulFunctionCall","src":"31617:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31591:6:15"},"nodeType":"YulFunctionCall","src":"31591:47:15"},"nodeType":"YulExpressionStatement","src":"31591:47:15"},{"nodeType":"YulAssignment","src":"31647:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31781:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31655:124:15"},"nodeType":"YulFunctionCall","src":"31655:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31647:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31525:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31540:4:15","type":""}],"src":"31374:419:15"},{"body":{"nodeType":"YulBlock","src":"31953:288:15","statements":[{"nodeType":"YulAssignment","src":"31963:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31975:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"31986:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31971:3:15"},"nodeType":"YulFunctionCall","src":"31971:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31963:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"32043:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32056:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"32067:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32052:3:15"},"nodeType":"YulFunctionCall","src":"32052:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"31999:43:15"},"nodeType":"YulFunctionCall","src":"31999:71:15"},"nodeType":"YulExpressionStatement","src":"31999:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"32124:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32137:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"32148:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32133:3:15"},"nodeType":"YulFunctionCall","src":"32133:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"32080:43:15"},"nodeType":"YulFunctionCall","src":"32080:72:15"},"nodeType":"YulExpressionStatement","src":"32080:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"32206:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32219:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"32230:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32215:3:15"},"nodeType":"YulFunctionCall","src":"32215:18:15"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"32162:43:15"},"nodeType":"YulFunctionCall","src":"32162:72:15"},"nodeType":"YulExpressionStatement","src":"32162:72:15"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31909:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"31921:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"31929:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"31937:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31948:4:15","type":""}],"src":"31799:442:15"},{"body":{"nodeType":"YulBlock","src":"32290:190:15","statements":[{"nodeType":"YulAssignment","src":"32300:33:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32327:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32309:17:15"},"nodeType":"YulFunctionCall","src":"32309:24:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"32300:5:15"}]},{"body":{"nodeType":"YulBlock","src":"32423:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"32425:16:15"},"nodeType":"YulFunctionCall","src":"32425:18:15"},"nodeType":"YulExpressionStatement","src":"32425:18:15"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32348:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"32355:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"32345:2:15"},"nodeType":"YulFunctionCall","src":"32345:77:15"},"nodeType":"YulIf","src":"32342:103:15"},{"nodeType":"YulAssignment","src":"32454:20:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32465:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"32472:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32461:3:15"},"nodeType":"YulFunctionCall","src":"32461:13:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"32454:3:15"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32276:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"32286:3:15","type":""}],"src":"32247:233:15"},{"body":{"nodeType":"YulBlock","src":"32545:81:15","statements":[{"nodeType":"YulAssignment","src":"32555:65:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32612:5:15"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"32595:16:15"},"nodeType":"YulFunctionCall","src":"32595:23:15"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"32586:8:15"},"nodeType":"YulFunctionCall","src":"32586:33:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32568:17:15"},"nodeType":"YulFunctionCall","src":"32568:52:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"32555:9:15"}]}]},"name":"convert_t_uint96_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32525:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"32535:9:15","type":""}],"src":"32486:140:15"},{"body":{"nodeType":"YulBlock","src":"32696:65:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32713:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"32748:5:15"}],"functionName":{"name":"convert_t_uint96_to_t_uint256","nodeType":"YulIdentifier","src":"32718:29:15"},"nodeType":"YulFunctionCall","src":"32718:36:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32706:6:15"},"nodeType":"YulFunctionCall","src":"32706:49:15"},"nodeType":"YulExpressionStatement","src":"32706:49:15"}]},"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"32684:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"32691:3:15","type":""}],"src":"32632:129:15"},{"body":{"nodeType":"YulBlock","src":"32831:82:15","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"32854:3:15"},{"name":"src","nodeType":"YulIdentifier","src":"32859:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"32864:6:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"32841:12:15"},"nodeType":"YulFunctionCall","src":"32841:30:15"},"nodeType":"YulExpressionStatement","src":"32841:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"32891:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"32896:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32887:3:15"},"nodeType":"YulFunctionCall","src":"32887:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"32905:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32880:6:15"},"nodeType":"YulFunctionCall","src":"32880:27:15"},"nodeType":"YulExpressionStatement","src":"32880:27:15"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"32813:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"32818:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"32823:6:15","type":""}],"src":"32767:146:15"},{"body":{"nodeType":"YulBlock","src":"33045:215:15","statements":[{"nodeType":"YulAssignment","src":"33055:78:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33121:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"33126:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33062:58:15"},"nodeType":"YulFunctionCall","src":"33062:71:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33055:3:15"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"33180:5:15"},{"name":"pos","nodeType":"YulIdentifier","src":"33187:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"33192:6:15"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"33143:36:15"},"nodeType":"YulFunctionCall","src":"33143:56:15"},"nodeType":"YulExpressionStatement","src":"33143:56:15"},{"nodeType":"YulAssignment","src":"33208:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33219:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"33246:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"33224:21:15"},"nodeType":"YulFunctionCall","src":"33224:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33215:3:15"},"nodeType":"YulFunctionCall","src":"33215:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33208:3:15"}]}]},"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"33018:5:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"33025:6:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"33033:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33041:3:15","type":""}],"src":"32943:317:15"},{"body":{"nodeType":"YulBlock","src":"33477:451:15","statements":[{"nodeType":"YulAssignment","src":"33487:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33499:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"33510:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33495:3:15"},"nodeType":"YulFunctionCall","src":"33495:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33487:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33567:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33580:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"33591:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33576:3:15"},"nodeType":"YulFunctionCall","src":"33576:17:15"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"33524:42:15"},"nodeType":"YulFunctionCall","src":"33524:70:15"},"nodeType":"YulExpressionStatement","src":"33524:70:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"33648:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33661:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"33672:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33657:3:15"},"nodeType":"YulFunctionCall","src":"33657:18:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"33604:43:15"},"nodeType":"YulFunctionCall","src":"33604:72:15"},"nodeType":"YulExpressionStatement","src":"33604:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"33730:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33743:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"33754:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33739:3:15"},"nodeType":"YulFunctionCall","src":"33739:18:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"33686:43:15"},"nodeType":"YulFunctionCall","src":"33686:72:15"},"nodeType":"YulExpressionStatement","src":"33686:72:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"33779:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"33790:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33775:3:15"},"nodeType":"YulFunctionCall","src":"33775:18:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"33799:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"33805:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33795:3:15"},"nodeType":"YulFunctionCall","src":"33795:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33768:6:15"},"nodeType":"YulFunctionCall","src":"33768:48:15"},"nodeType":"YulExpressionStatement","src":"33768:48:15"},{"nodeType":"YulAssignment","src":"33825:96:15","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"33899:6:15"},{"name":"value4","nodeType":"YulIdentifier","src":"33907:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"33916:4:15"}],"functionName":{"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33833:65:15"},"nodeType":"YulFunctionCall","src":"33833:88:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"33825:4:15"}]}]},"name":"abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"33417:9:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"33429:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"33437:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"33445:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"33453:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33461:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"33472:4:15","type":""}],"src":"33266:662:15"},{"body":{"nodeType":"YulBlock","src":"33962:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"33979:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"33982:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33972:6:15"},"nodeType":"YulFunctionCall","src":"33972:88:15"},"nodeType":"YulExpressionStatement","src":"33972:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34076:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"34079:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34069:6:15"},"nodeType":"YulFunctionCall","src":"34069:15:15"},"nodeType":"YulExpressionStatement","src":"34069:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34100:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"34103:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"34093:6:15"},"nodeType":"YulFunctionCall","src":"34093:15:15"},"nodeType":"YulExpressionStatement","src":"34093:15:15"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"33934:180:15"},{"body":{"nodeType":"YulBlock","src":"34171:269:15","statements":[{"nodeType":"YulAssignment","src":"34181:22:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34195:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"34201:1:15","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"34191:3:15"},"nodeType":"YulFunctionCall","src":"34191:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"34181:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"34212:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34242:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"34248:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34238:3:15"},"nodeType":"YulFunctionCall","src":"34238:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"34216:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"34289:51:15","statements":[{"nodeType":"YulAssignment","src":"34303:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"34317:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"34325:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"34313:3:15"},"nodeType":"YulFunctionCall","src":"34313:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"34303:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"34269:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"34262:6:15"},"nodeType":"YulFunctionCall","src":"34262:26:15"},"nodeType":"YulIf","src":"34259:81:15"},{"body":{"nodeType":"YulBlock","src":"34392:42:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"34406:16:15"},"nodeType":"YulFunctionCall","src":"34406:18:15"},"nodeType":"YulExpressionStatement","src":"34406:18:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"34356:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"34379:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"34387:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"34376:2:15"},"nodeType":"YulFunctionCall","src":"34376:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"34353:2:15"},"nodeType":"YulFunctionCall","src":"34353:38:15"},"nodeType":"YulIf","src":"34350:84:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"34155:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"34164:6:15","type":""}],"src":"34120:320:15"},{"body":{"nodeType":"YulBlock","src":"34552:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34574:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"34582:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34570:3:15"},"nodeType":"YulFunctionCall","src":"34570:14:15"},{"hexValue":"50617963726573743a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"34586:24:15","type":"","value":"Paycrest: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34563:6:15"},"nodeType":"YulFunctionCall","src":"34563:48:15"},"nodeType":"YulExpressionStatement","src":"34563:48:15"}]},"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34544:6:15","type":""}],"src":"34446:172:15"},{"body":{"nodeType":"YulBlock","src":"34770:220:15","statements":[{"nodeType":"YulAssignment","src":"34780:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34846:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"34851:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34787:58:15"},"nodeType":"YulFunctionCall","src":"34787:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"34780:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34952:3:15"}],"functionName":{"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulIdentifier","src":"34863:88:15"},"nodeType":"YulFunctionCall","src":"34863:93:15"},"nodeType":"YulExpressionStatement","src":"34863:93:15"},{"nodeType":"YulAssignment","src":"34965:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34976:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"34981:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34972:3:15"},"nodeType":"YulFunctionCall","src":"34972:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"34965:3:15"}]}]},"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"34758:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"34766:3:15","type":""}],"src":"34624:366:15"},{"body":{"nodeType":"YulBlock","src":"35167:248:15","statements":[{"nodeType":"YulAssignment","src":"35177:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35189:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"35200:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35185:3:15"},"nodeType":"YulFunctionCall","src":"35185:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35177:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35224:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"35235:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35220:3:15"},"nodeType":"YulFunctionCall","src":"35220:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35243:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"35249:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35239:3:15"},"nodeType":"YulFunctionCall","src":"35239:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35213:6:15"},"nodeType":"YulFunctionCall","src":"35213:47:15"},"nodeType":"YulExpressionStatement","src":"35213:47:15"},{"nodeType":"YulAssignment","src":"35269:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35403:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35277:124:15"},"nodeType":"YulFunctionCall","src":"35277:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35269:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35147:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35162:4:15","type":""}],"src":"34996:419:15"},{"body":{"nodeType":"YulBlock","src":"35517:122:15","statements":[{"nodeType":"YulAssignment","src":"35527:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35539:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"35550:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35535:3:15"},"nodeType":"YulFunctionCall","src":"35535:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35527:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35605:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35618:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"35629:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35614:3:15"},"nodeType":"YulFunctionCall","src":"35614:17:15"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"35563:41:15"},"nodeType":"YulFunctionCall","src":"35563:69:15"},"nodeType":"YulExpressionStatement","src":"35563:69:15"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35489:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35501:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35512:4:15","type":""}],"src":"35421:218:15"},{"body":{"nodeType":"YulBlock","src":"35793:282:15","statements":[{"nodeType":"YulAssignment","src":"35803:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35815:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"35826:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35811:3:15"},"nodeType":"YulFunctionCall","src":"35811:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35803:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35883:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35896:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"35907:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35892:3:15"},"nodeType":"YulFunctionCall","src":"35892:17:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"35839:43:15"},"nodeType":"YulFunctionCall","src":"35839:71:15"},"nodeType":"YulExpressionStatement","src":"35839:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"35964:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35977:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"35988:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35973:3:15"},"nodeType":"YulFunctionCall","src":"35973:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"35920:43:15"},"nodeType":"YulFunctionCall","src":"35920:72:15"},"nodeType":"YulExpressionStatement","src":"35920:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"36040:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36053:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"36064:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36049:3:15"},"nodeType":"YulFunctionCall","src":"36049:18:15"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"36002:37:15"},"nodeType":"YulFunctionCall","src":"36002:66:15"},"nodeType":"YulExpressionStatement","src":"36002:66:15"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35749:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"35761:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35769:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35777:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35788:4:15","type":""}],"src":"35645:430:15"},{"body":{"nodeType":"YulBlock","src":"36187:127:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36209:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36217:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36205:3:15"},"nodeType":"YulFunctionCall","src":"36205:14:15"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"36221:34:15","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36198:6:15"},"nodeType":"YulFunctionCall","src":"36198:58:15"},"nodeType":"YulExpressionStatement","src":"36198:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36277:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"36285:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36273:3:15"},"nodeType":"YulFunctionCall","src":"36273:15:15"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"36290:16:15","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36266:6:15"},"nodeType":"YulFunctionCall","src":"36266:41:15"},"nodeType":"YulExpressionStatement","src":"36266:41:15"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36179:6:15","type":""}],"src":"36081:233:15"},{"body":{"nodeType":"YulBlock","src":"36466:220:15","statements":[{"nodeType":"YulAssignment","src":"36476:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36542:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"36547:2:15","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36483:58:15"},"nodeType":"YulFunctionCall","src":"36483:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36476:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36648:3:15"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"36559:88:15"},"nodeType":"YulFunctionCall","src":"36559:93:15"},"nodeType":"YulExpressionStatement","src":"36559:93:15"},{"nodeType":"YulAssignment","src":"36661:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36672:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"36677:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36668:3:15"},"nodeType":"YulFunctionCall","src":"36668:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36661:3:15"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36454:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36462:3:15","type":""}],"src":"36320:366:15"},{"body":{"nodeType":"YulBlock","src":"36863:248:15","statements":[{"nodeType":"YulAssignment","src":"36873:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36885:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"36896:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36881:3:15"},"nodeType":"YulFunctionCall","src":"36881:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36873:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36920:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"36931:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36916:3:15"},"nodeType":"YulFunctionCall","src":"36916:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36939:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"36945:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36935:3:15"},"nodeType":"YulFunctionCall","src":"36935:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36909:6:15"},"nodeType":"YulFunctionCall","src":"36909:47:15"},"nodeType":"YulExpressionStatement","src":"36909:47:15"},{"nodeType":"YulAssignment","src":"36965:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37099:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36973:124:15"},"nodeType":"YulFunctionCall","src":"36973:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36965:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36843:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36858:4:15","type":""}],"src":"36692:419:15"},{"body":{"nodeType":"YulBlock","src":"37170:32:15","statements":[{"nodeType":"YulAssignment","src":"37180:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"37191:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"37180:7:15"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37152:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"37162:7:15","type":""}],"src":"37117:85:15"},{"body":{"nodeType":"YulBlock","src":"37251:43:15","statements":[{"nodeType":"YulAssignment","src":"37261:27:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37276:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"37283:4:15","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"37272:3:15"},"nodeType":"YulFunctionCall","src":"37272:16:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"37261:7:15"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37233:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"37243:7:15","type":""}],"src":"37208:86:15"},{"body":{"nodeType":"YulBlock","src":"37366:88:15","statements":[{"nodeType":"YulAssignment","src":"37376:72:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37440:5:15"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"37414:25:15"},"nodeType":"YulFunctionCall","src":"37414:32:15"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"37405:8:15"},"nodeType":"YulFunctionCall","src":"37405:42:15"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"37389:15:15"},"nodeType":"YulFunctionCall","src":"37389:59:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"37376:9:15"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37346:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"37356:9:15","type":""}],"src":"37300:154:15"},{"body":{"nodeType":"YulBlock","src":"37531:72:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37548:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"37590:5:15"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"37553:36:15"},"nodeType":"YulFunctionCall","src":"37553:43:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37541:6:15"},"nodeType":"YulFunctionCall","src":"37541:56:15"},"nodeType":"YulExpressionStatement","src":"37541:56:15"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37519:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"37526:3:15","type":""}],"src":"37460:143:15"},{"body":{"nodeType":"YulBlock","src":"37713:130:15","statements":[{"nodeType":"YulAssignment","src":"37723:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37735:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"37746:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37731:3:15"},"nodeType":"YulFunctionCall","src":"37731:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37723:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"37809:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37822:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"37833:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37818:3:15"},"nodeType":"YulFunctionCall","src":"37818:17:15"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"37759:49:15"},"nodeType":"YulFunctionCall","src":"37759:77:15"},"nodeType":"YulExpressionStatement","src":"37759:77:15"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37685:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"37697:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37708:4:15","type":""}],"src":"37609:234:15"},{"body":{"nodeType":"YulBlock","src":"37914:31:15","statements":[{"nodeType":"YulAssignment","src":"37925:13:15","value":{"name":"len","nodeType":"YulIdentifier","src":"37935:3:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"37925:6:15"}]}]},"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"37892:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"37899:3:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"37907:6:15","type":""}],"src":"37849:96:15"},{"body":{"nodeType":"YulBlock","src":"38004:87:15","statements":[{"nodeType":"YulAssignment","src":"38014:11:15","value":{"name":"ptr","nodeType":"YulIdentifier","src":"38022:3:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"38014:4:15"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38042:1:15","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"38045:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38035:6:15"},"nodeType":"YulFunctionCall","src":"38035:14:15"},"nodeType":"YulExpressionStatement","src":"38035:14:15"},{"nodeType":"YulAssignment","src":"38058:26:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38076:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38079:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"38066:9:15"},"nodeType":"YulFunctionCall","src":"38066:18:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"38058:4:15"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"37991:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"37999:4:15","type":""}],"src":"37951:140:15"},{"body":{"nodeType":"YulBlock","src":"38141:49:15","statements":[{"nodeType":"YulAssignment","src":"38151:33:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38169:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"38176:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38165:3:15"},"nodeType":"YulFunctionCall","src":"38165:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"38181:2:15","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"38161:3:15"},"nodeType":"YulFunctionCall","src":"38161:23:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"38151:6:15"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38124:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"38134:6:15","type":""}],"src":"38097:93:15"},{"body":{"nodeType":"YulBlock","src":"38249:54:15","statements":[{"nodeType":"YulAssignment","src":"38259:37:15","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"38284:4:15"},{"name":"value","nodeType":"YulIdentifier","src":"38290:5:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"38280:3:15"},"nodeType":"YulFunctionCall","src":"38280:16:15"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"38259:8:15"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"38224:4:15","type":""},{"name":"value","nodeType":"YulTypedName","src":"38230:5:15","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"38240:8:15","type":""}],"src":"38196:107:15"},{"body":{"nodeType":"YulBlock","src":"38385:317:15","statements":[{"nodeType":"YulVariableDeclaration","src":"38395:35:15","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"38416:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"38428:1:15","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"38412:3:15"},"nodeType":"YulFunctionCall","src":"38412:18:15"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"38399:9:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"38439:109:15","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"38470:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"38481:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"38451:18:15"},"nodeType":"YulFunctionCall","src":"38451:97:15"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"38443:4:15","type":""}]},{"nodeType":"YulAssignment","src":"38557:51:15","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"38588:9:15"},{"name":"toInsert","nodeType":"YulIdentifier","src":"38599:8:15"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"38569:18:15"},"nodeType":"YulFunctionCall","src":"38569:39:15"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"38557:8:15"}]},{"nodeType":"YulAssignment","src":"38617:30:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38630:5:15"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"38641:4:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"38637:3:15"},"nodeType":"YulFunctionCall","src":"38637:9:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"38626:3:15"},"nodeType":"YulFunctionCall","src":"38626:21:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"38617:5:15"}]},{"nodeType":"YulAssignment","src":"38656:40:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38669:5:15"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"38680:8:15"},{"name":"mask","nodeType":"YulIdentifier","src":"38690:4:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"38676:3:15"},"nodeType":"YulFunctionCall","src":"38676:19:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"38666:2:15"},"nodeType":"YulFunctionCall","src":"38666:30:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"38656:6:15"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38346:5:15","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"38353:10:15","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"38365:8:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"38378:6:15","type":""}],"src":"38309:393:15"},{"body":{"nodeType":"YulBlock","src":"38768:82:15","statements":[{"nodeType":"YulAssignment","src":"38778:66:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"38836:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"38818:17:15"},"nodeType":"YulFunctionCall","src":"38818:24:15"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"38809:8:15"},"nodeType":"YulFunctionCall","src":"38809:34:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"38791:17:15"},"nodeType":"YulFunctionCall","src":"38791:53:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"38778:9:15"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38748:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"38758:9:15","type":""}],"src":"38708:142:15"},{"body":{"nodeType":"YulBlock","src":"38903:28:15","statements":[{"nodeType":"YulAssignment","src":"38913:12:15","value":{"name":"value","nodeType":"YulIdentifier","src":"38920:5:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"38913:3:15"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"38889:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"38899:3:15","type":""}],"src":"38856:75:15"},{"body":{"nodeType":"YulBlock","src":"39013:193:15","statements":[{"nodeType":"YulVariableDeclaration","src":"39023:63:15","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"39078:7:15"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"39047:30:15"},"nodeType":"YulFunctionCall","src":"39047:39:15"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"39027:16:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"39102:4:15"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"39142:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"39136:5:15"},"nodeType":"YulFunctionCall","src":"39136:11:15"},{"name":"offset","nodeType":"YulIdentifier","src":"39149:6:15"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"39181:16:15"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"39157:23:15"},"nodeType":"YulFunctionCall","src":"39157:41:15"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"39108:27:15"},"nodeType":"YulFunctionCall","src":"39108:91:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"39095:6:15"},"nodeType":"YulFunctionCall","src":"39095:105:15"},"nodeType":"YulExpressionStatement","src":"39095:105:15"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"38990:4:15","type":""},{"name":"offset","nodeType":"YulTypedName","src":"38996:6:15","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"39004:7:15","type":""}],"src":"38937:269:15"},{"body":{"nodeType":"YulBlock","src":"39261:24:15","statements":[{"nodeType":"YulAssignment","src":"39271:8:15","value":{"kind":"number","nodeType":"YulLiteral","src":"39278:1:15","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"39271:3:15"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"39257:3:15","type":""}],"src":"39212:73:15"},{"body":{"nodeType":"YulBlock","src":"39344:136:15","statements":[{"nodeType":"YulVariableDeclaration","src":"39354:46:15","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"39368:30:15"},"nodeType":"YulFunctionCall","src":"39368:32:15"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"39358:6:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"39453:4:15"},{"name":"offset","nodeType":"YulIdentifier","src":"39459:6:15"},{"name":"zero_0","nodeType":"YulIdentifier","src":"39467:6:15"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"39409:43:15"},"nodeType":"YulFunctionCall","src":"39409:65:15"},"nodeType":"YulExpressionStatement","src":"39409:65:15"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"39330:4:15","type":""},{"name":"offset","nodeType":"YulTypedName","src":"39336:6:15","type":""}],"src":"39291:189:15"},{"body":{"nodeType":"YulBlock","src":"39536:136:15","statements":[{"body":{"nodeType":"YulBlock","src":"39603:63:15","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"39647:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"39654:1:15","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"39617:29:15"},"nodeType":"YulFunctionCall","src":"39617:39:15"},"nodeType":"YulExpressionStatement","src":"39617:39:15"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"39556:5:15"},{"name":"end","nodeType":"YulIdentifier","src":"39563:3:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"39553:2:15"},"nodeType":"YulFunctionCall","src":"39553:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"39568:26:15","statements":[{"nodeType":"YulAssignment","src":"39570:22:15","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"39583:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"39590:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39579:3:15"},"nodeType":"YulFunctionCall","src":"39579:13:15"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"39570:5:15"}]}]},"pre":{"nodeType":"YulBlock","src":"39550:2:15","statements":[]},"src":"39546:120:15"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"39524:5:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"39531:3:15","type":""}],"src":"39486:186:15"},{"body":{"nodeType":"YulBlock","src":"39756:463:15","statements":[{"body":{"nodeType":"YulBlock","src":"39782:430:15","statements":[{"nodeType":"YulVariableDeclaration","src":"39796:53:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"39843:5:15"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"39812:30:15"},"nodeType":"YulFunctionCall","src":"39812:37:15"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"39800:8:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"39862:63:15","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"39885:8:15"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"39913:10:15"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"39895:17:15"},"nodeType":"YulFunctionCall","src":"39895:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39881:3:15"},"nodeType":"YulFunctionCall","src":"39881:44:15"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"39866:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"40082:27:15","statements":[{"nodeType":"YulAssignment","src":"40084:23:15","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"40099:8:15"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"40084:11:15"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"40066:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"40078:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"40063:2:15"},"nodeType":"YulFunctionCall","src":"40063:18:15"},"nodeType":"YulIf","src":"40060:49:15"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"40151:11:15"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"40168:8:15"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"40196:3:15"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"40178:17:15"},"nodeType":"YulFunctionCall","src":"40178:22:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40164:3:15"},"nodeType":"YulFunctionCall","src":"40164:37:15"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"40122:28:15"},"nodeType":"YulFunctionCall","src":"40122:80:15"},"nodeType":"YulExpressionStatement","src":"40122:80:15"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"39773:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"39778:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"39770:2:15"},"nodeType":"YulFunctionCall","src":"39770:11:15"},"nodeType":"YulIf","src":"39767:445:15"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"39732:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"39739:3:15","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"39744:10:15","type":""}],"src":"39678:541:15"},{"body":{"nodeType":"YulBlock","src":"40288:54:15","statements":[{"nodeType":"YulAssignment","src":"40298:37:15","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"40323:4:15"},{"name":"value","nodeType":"YulIdentifier","src":"40329:5:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"40319:3:15"},"nodeType":"YulFunctionCall","src":"40319:16:15"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"40298:8:15"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"40263:4:15","type":""},{"name":"value","nodeType":"YulTypedName","src":"40269:5:15","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"40279:8:15","type":""}],"src":"40225:117:15"},{"body":{"nodeType":"YulBlock","src":"40399:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"40409:68:15","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40458:1:15","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"40461:5:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"40454:3:15"},"nodeType":"YulFunctionCall","src":"40454:13:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40473:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"40469:3:15"},"nodeType":"YulFunctionCall","src":"40469:6:15"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"40425:28:15"},"nodeType":"YulFunctionCall","src":"40425:51:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"40421:3:15"},"nodeType":"YulFunctionCall","src":"40421:56:15"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"40413:4:15","type":""}]},{"nodeType":"YulAssignment","src":"40486:25:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"40500:4:15"},{"name":"mask","nodeType":"YulIdentifier","src":"40506:4:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"40496:3:15"},"nodeType":"YulFunctionCall","src":"40496:15:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"40486:6:15"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"40376:4:15","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"40382:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"40392:6:15","type":""}],"src":"40348:169:15"},{"body":{"nodeType":"YulBlock","src":"40603:214:15","statements":[{"nodeType":"YulAssignment","src":"40736:37:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"40763:4:15"},{"name":"len","nodeType":"YulIdentifier","src":"40769:3:15"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"40744:18:15"},"nodeType":"YulFunctionCall","src":"40744:29:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"40736:4:15"}]},{"nodeType":"YulAssignment","src":"40782:29:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"40793:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40803:1:15","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"40806:3:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"40799:3:15"},"nodeType":"YulFunctionCall","src":"40799:11:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"40790:2:15"},"nodeType":"YulFunctionCall","src":"40790:21:15"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"40782:4:15"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"40584:4:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"40590:3:15","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"40598:4:15","type":""}],"src":"40522:295:15"},{"body":{"nodeType":"YulBlock","src":"40919:1301:15","statements":[{"nodeType":"YulVariableDeclaration","src":"40930:57:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"40978:3:15"},{"name":"len","nodeType":"YulIdentifier","src":"40983:3:15"}],"functionName":{"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"40944:33:15"},"nodeType":"YulFunctionCall","src":"40944:43:15"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"40934:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"41072:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"41074:16:15"},"nodeType":"YulFunctionCall","src":"41074:18:15"},"nodeType":"YulExpressionStatement","src":"41074:18:15"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"41044:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"41052:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"41041:2:15"},"nodeType":"YulFunctionCall","src":"41041:30:15"},"nodeType":"YulIf","src":"41038:56:15"},{"nodeType":"YulVariableDeclaration","src":"41104:52:15","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"41150:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"41144:5:15"},"nodeType":"YulFunctionCall","src":"41144:11:15"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"41118:25:15"},"nodeType":"YulFunctionCall","src":"41118:38:15"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"41108:6:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"41248:4:15"},{"name":"oldLen","nodeType":"YulIdentifier","src":"41254:6:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"41262:6:15"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"41203:44:15"},"nodeType":"YulFunctionCall","src":"41203:66:15"},"nodeType":"YulExpressionStatement","src":"41203:66:15"},{"nodeType":"YulVariableDeclaration","src":"41279:18:15","value":{"kind":"number","nodeType":"YulLiteral","src":"41296:1:15","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"41283:9:15","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"41344:624:15","statements":[{"nodeType":"YulVariableDeclaration","src":"41358:37:15","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"41377:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41389:4:15","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"41385:3:15"},"nodeType":"YulFunctionCall","src":"41385:9:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41373:3:15"},"nodeType":"YulFunctionCall","src":"41373:22:15"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"41362:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"41409:50:15","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"41454:4:15"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"41423:30:15"},"nodeType":"YulFunctionCall","src":"41423:36:15"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"41413:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"41472:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"41481:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"41476:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"41540:170:15","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"41565:6:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"41590:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"41595:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41586:3:15"},"nodeType":"YulFunctionCall","src":"41586:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"41573:12:15"},"nodeType":"YulFunctionCall","src":"41573:33:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"41558:6:15"},"nodeType":"YulFunctionCall","src":"41558:49:15"},"nodeType":"YulExpressionStatement","src":"41558:49:15"},{"nodeType":"YulAssignment","src":"41624:24:15","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"41638:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"41646:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41634:3:15"},"nodeType":"YulFunctionCall","src":"41634:14:15"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"41624:6:15"}]},{"nodeType":"YulAssignment","src":"41665:31:15","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"41682:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"41693:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41678:3:15"},"nodeType":"YulFunctionCall","src":"41678:18:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"41665:9:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"41506:1:15"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"41509:7:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"41503:2:15"},"nodeType":"YulFunctionCall","src":"41503:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"41518:21:15","statements":[{"nodeType":"YulAssignment","src":"41520:17:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"41529:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"41532:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41525:3:15"},"nodeType":"YulFunctionCall","src":"41525:12:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"41520:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"41499:3:15","statements":[]},"src":"41495:215:15"},{"body":{"nodeType":"YulBlock","src":"41746:163:15","statements":[{"nodeType":"YulVariableDeclaration","src":"41764:50:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"41798:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"41803:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41794:3:15"},"nodeType":"YulFunctionCall","src":"41794:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"41781:12:15"},"nodeType":"YulFunctionCall","src":"41781:33:15"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"41768:9:15","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"41838:6:15"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"41865:9:15"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"41880:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"41888:4:15","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"41876:3:15"},"nodeType":"YulFunctionCall","src":"41876:17:15"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"41846:18:15"},"nodeType":"YulFunctionCall","src":"41846:48:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"41831:6:15"},"nodeType":"YulFunctionCall","src":"41831:64:15"},"nodeType":"YulExpressionStatement","src":"41831:64:15"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"41729:7:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"41738:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"41726:2:15"},"nodeType":"YulFunctionCall","src":"41726:19:15"},"nodeType":"YulIf","src":"41723:186:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"41929:4:15"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"41943:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"41951:1:15","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"41939:3:15"},"nodeType":"YulFunctionCall","src":"41939:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"41955:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"41935:3:15"},"nodeType":"YulFunctionCall","src":"41935:22:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"41922:6:15"},"nodeType":"YulFunctionCall","src":"41922:36:15"},"nodeType":"YulExpressionStatement","src":"41922:36:15"}]},"nodeType":"YulCase","src":"41337:631:15","value":{"kind":"number","nodeType":"YulLiteral","src":"41342:1:15","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"41985:229:15","statements":[{"nodeType":"YulVariableDeclaration","src":"41999:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"42012:1:15","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"42003:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"42036:74:15","statements":[{"nodeType":"YulAssignment","src":"42054:42:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"42080:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"42085:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42076:3:15"},"nodeType":"YulFunctionCall","src":"42076:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"42063:12:15"},"nodeType":"YulFunctionCall","src":"42063:33:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"42054:5:15"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"42029:6:15"},"nodeType":"YulIf","src":"42026:84:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"42130:4:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"42189:5:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"42196:6:15"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"42136:52:15"},"nodeType":"YulFunctionCall","src":"42136:67:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"42123:6:15"},"nodeType":"YulFunctionCall","src":"42123:81:15"},"nodeType":"YulExpressionStatement","src":"42123:81:15"}]},"nodeType":"YulCase","src":"41977:237:15","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"41317:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"41325:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"41314:2:15"},"nodeType":"YulFunctionCall","src":"41314:14:15"},"nodeType":"YulSwitch","src":"41307:907:15"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"40903:4:15","type":""},{"name":"src","nodeType":"YulTypedName","src":"40909:3:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"40914:3:15","type":""}],"src":"40822:1398:15"},{"body":{"nodeType":"YulBlock","src":"42348:214:15","statements":[{"nodeType":"YulAssignment","src":"42358:77:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42423:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"42428:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42365:57:15"},"nodeType":"YulFunctionCall","src":"42365:70:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"42358:3:15"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"42482:5:15"},{"name":"pos","nodeType":"YulIdentifier","src":"42489:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"42494:6:15"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"42445:36:15"},"nodeType":"YulFunctionCall","src":"42445:56:15"},"nodeType":"YulExpressionStatement","src":"42445:56:15"},{"nodeType":"YulAssignment","src":"42510:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"42521:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"42548:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"42526:21:15"},"nodeType":"YulFunctionCall","src":"42526:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42517:3:15"},"nodeType":"YulFunctionCall","src":"42517:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"42510:3:15"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"42321:5:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"42328:6:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"42336:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"42344:3:15","type":""}],"src":"42248:314:15"},{"body":{"nodeType":"YulBlock","src":"42694:203:15","statements":[{"nodeType":"YulAssignment","src":"42704:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42716:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"42727:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42712:3:15"},"nodeType":"YulFunctionCall","src":"42712:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42704:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"42751:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"42762:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"42747:3:15"},"nodeType":"YulFunctionCall","src":"42747:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"42770:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"42776:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"42766:3:15"},"nodeType":"YulFunctionCall","src":"42766:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"42740:6:15"},"nodeType":"YulFunctionCall","src":"42740:47:15"},"nodeType":"YulExpressionStatement","src":"42740:47:15"},{"nodeType":"YulAssignment","src":"42796:94:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"42868:6:15"},{"name":"value1","nodeType":"YulIdentifier","src":"42876:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"42885:4:15"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"42804:63:15"},"nodeType":"YulFunctionCall","src":"42804:86:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"42796:4:15"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"42658:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"42670:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"42678:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"42689:4:15","type":""}],"src":"42568:329:15"},{"body":{"nodeType":"YulBlock","src":"43009:119:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43031:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"43039:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43027:3:15"},"nodeType":"YulFunctionCall","src":"43027:14:15"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"43043:34:15","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43020:6:15"},"nodeType":"YulFunctionCall","src":"43020:58:15"},"nodeType":"YulExpressionStatement","src":"43020:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"43099:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"43107:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43095:3:15"},"nodeType":"YulFunctionCall","src":"43095:15:15"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"43112:8:15","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43088:6:15"},"nodeType":"YulFunctionCall","src":"43088:33:15"},"nodeType":"YulExpressionStatement","src":"43088:33:15"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"43001:6:15","type":""}],"src":"42903:225:15"},{"body":{"nodeType":"YulBlock","src":"43280:220:15","statements":[{"nodeType":"YulAssignment","src":"43290:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43356:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"43361:2:15","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43297:58:15"},"nodeType":"YulFunctionCall","src":"43297:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"43290:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43462:3:15"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"43373:88:15"},"nodeType":"YulFunctionCall","src":"43373:93:15"},"nodeType":"YulExpressionStatement","src":"43373:93:15"},{"nodeType":"YulAssignment","src":"43475:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"43486:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"43491:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43482:3:15"},"nodeType":"YulFunctionCall","src":"43482:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"43475:3:15"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"43268:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"43276:3:15","type":""}],"src":"43134:366:15"},{"body":{"nodeType":"YulBlock","src":"43677:248:15","statements":[{"nodeType":"YulAssignment","src":"43687:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43699:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"43710:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43695:3:15"},"nodeType":"YulFunctionCall","src":"43695:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43687:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"43734:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"43745:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"43730:3:15"},"nodeType":"YulFunctionCall","src":"43730:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43753:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"43759:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"43749:3:15"},"nodeType":"YulFunctionCall","src":"43749:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"43723:6:15"},"nodeType":"YulFunctionCall","src":"43723:47:15"},"nodeType":"YulExpressionStatement","src":"43723:47:15"},{"nodeType":"YulAssignment","src":"43779:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"43913:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"43787:124:15"},"nodeType":"YulFunctionCall","src":"43787:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"43779:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"43657:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"43672:4:15","type":""}],"src":"43506:419:15"},{"body":{"nodeType":"YulBlock","src":"43976:149:15","statements":[{"nodeType":"YulAssignment","src":"43986:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"44009:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"43991:17:15"},"nodeType":"YulFunctionCall","src":"43991:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"43986:1:15"}]},{"nodeType":"YulAssignment","src":"44020:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"44043:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"44025:17:15"},"nodeType":"YulFunctionCall","src":"44025:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"44020:1:15"}]},{"nodeType":"YulAssignment","src":"44054:17:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"44066:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"44069:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"44062:3:15"},"nodeType":"YulFunctionCall","src":"44062:9:15"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"44054:4:15"}]},{"body":{"nodeType":"YulBlock","src":"44096:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"44098:16:15"},"nodeType":"YulFunctionCall","src":"44098:18:15"},"nodeType":"YulExpressionStatement","src":"44098:18:15"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"44087:4:15"},{"name":"x","nodeType":"YulIdentifier","src":"44093:1:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"44084:2:15"},"nodeType":"YulFunctionCall","src":"44084:11:15"},"nodeType":"YulIf","src":"44081:37:15"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"43962:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"43965:1:15","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"43971:4:15","type":""}],"src":"43931:194:15"},{"body":{"nodeType":"YulBlock","src":"44175:147:15","statements":[{"nodeType":"YulAssignment","src":"44185:25:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"44208:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"44190:17:15"},"nodeType":"YulFunctionCall","src":"44190:20:15"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"44185:1:15"}]},{"nodeType":"YulAssignment","src":"44219:25:15","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"44242:1:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"44224:17:15"},"nodeType":"YulFunctionCall","src":"44224:20:15"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"44219:1:15"}]},{"nodeType":"YulAssignment","src":"44253:16:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"44264:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"44267:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44260:3:15"},"nodeType":"YulFunctionCall","src":"44260:9:15"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"44253:3:15"}]},{"body":{"nodeType":"YulBlock","src":"44293:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"44295:16:15"},"nodeType":"YulFunctionCall","src":"44295:18:15"},"nodeType":"YulExpressionStatement","src":"44295:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"44285:1:15"},{"name":"sum","nodeType":"YulIdentifier","src":"44288:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"44282:2:15"},"nodeType":"YulFunctionCall","src":"44282:10:15"},"nodeType":"YulIf","src":"44279:36:15"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"44162:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"44165:1:15","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"44171:3:15","type":""}],"src":"44131:191:15"},{"body":{"nodeType":"YulBlock","src":"44434:61:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"44456:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"44464:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44452:3:15"},"nodeType":"YulFunctionCall","src":"44452:14:15"},{"hexValue":"546f6b656e4e6f74537570706f72746564","kind":"string","nodeType":"YulLiteral","src":"44468:19:15","type":"","value":"TokenNotSupported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"44445:6:15"},"nodeType":"YulFunctionCall","src":"44445:43:15"},"nodeType":"YulExpressionStatement","src":"44445:43:15"}]},"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"44426:6:15","type":""}],"src":"44328:167:15"},{"body":{"nodeType":"YulBlock","src":"44647:220:15","statements":[{"nodeType":"YulAssignment","src":"44657:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44723:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"44728:2:15","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"44664:58:15"},"nodeType":"YulFunctionCall","src":"44664:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"44657:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44829:3:15"}],"functionName":{"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulIdentifier","src":"44740:88:15"},"nodeType":"YulFunctionCall","src":"44740:93:15"},"nodeType":"YulExpressionStatement","src":"44740:93:15"},{"nodeType":"YulAssignment","src":"44842:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"44853:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"44858:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"44849:3:15"},"nodeType":"YulFunctionCall","src":"44849:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"44842:3:15"}]}]},"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"44635:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"44643:3:15","type":""}],"src":"44501:366:15"},{"body":{"nodeType":"YulBlock","src":"45044:248:15","statements":[{"nodeType":"YulAssignment","src":"45054:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45066:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"45077:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45062:3:15"},"nodeType":"YulFunctionCall","src":"45062:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45054:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"45101:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"45112:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45097:3:15"},"nodeType":"YulFunctionCall","src":"45097:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45120:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"45126:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"45116:3:15"},"nodeType":"YulFunctionCall","src":"45116:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45090:6:15"},"nodeType":"YulFunctionCall","src":"45090:47:15"},"nodeType":"YulExpressionStatement","src":"45090:47:15"},{"nodeType":"YulAssignment","src":"45146:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"45280:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45154:124:15"},"nodeType":"YulFunctionCall","src":"45154:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"45146:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45024:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"45039:4:15","type":""}],"src":"44873:419:15"},{"body":{"nodeType":"YulBlock","src":"45404:56:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"45426:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"45434:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45422:3:15"},"nodeType":"YulFunctionCall","src":"45422:14:15"},{"hexValue":"416d6f756e7449735a65726f","kind":"string","nodeType":"YulLiteral","src":"45438:14:15","type":"","value":"AmountIsZero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"45415:6:15"},"nodeType":"YulFunctionCall","src":"45415:38:15"},"nodeType":"YulExpressionStatement","src":"45415:38:15"}]},"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"45396:6:15","type":""}],"src":"45298:162:15"},{"body":{"nodeType":"YulBlock","src":"45612:220:15","statements":[{"nodeType":"YulAssignment","src":"45622:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45688:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"45693:2:15","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"45629:58:15"},"nodeType":"YulFunctionCall","src":"45629:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"45622:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45794:3:15"}],"functionName":{"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulIdentifier","src":"45705:88:15"},"nodeType":"YulFunctionCall","src":"45705:93:15"},"nodeType":"YulExpressionStatement","src":"45705:93:15"},{"nodeType":"YulAssignment","src":"45807:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"45818:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"45823:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"45814:3:15"},"nodeType":"YulFunctionCall","src":"45814:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"45807:3:15"}]}]},"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"45600:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"45608:3:15","type":""}],"src":"45466:366:15"},{"body":{"nodeType":"YulBlock","src":"46009:248:15","statements":[{"nodeType":"YulAssignment","src":"46019:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46031:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"46042:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46027:3:15"},"nodeType":"YulFunctionCall","src":"46027:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46019:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"46066:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"46077:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46062:3:15"},"nodeType":"YulFunctionCall","src":"46062:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46085:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"46091:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"46081:3:15"},"nodeType":"YulFunctionCall","src":"46081:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46055:6:15"},"nodeType":"YulFunctionCall","src":"46055:47:15"},"nodeType":"YulExpressionStatement","src":"46055:47:15"},{"nodeType":"YulAssignment","src":"46111:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"46245:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46119:124:15"},"nodeType":"YulFunctionCall","src":"46119:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46111:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"45989:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46004:4:15","type":""}],"src":"45838:419:15"},{"body":{"nodeType":"YulBlock","src":"46369:60:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"46391:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"46399:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46387:3:15"},"nodeType":"YulFunctionCall","src":"46387:14:15"},{"hexValue":"5468726f775a65726f41646472657373","kind":"string","nodeType":"YulLiteral","src":"46403:18:15","type":"","value":"ThrowZeroAddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"46380:6:15"},"nodeType":"YulFunctionCall","src":"46380:42:15"},"nodeType":"YulExpressionStatement","src":"46380:42:15"}]},"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"46361:6:15","type":""}],"src":"46263:166:15"},{"body":{"nodeType":"YulBlock","src":"46581:220:15","statements":[{"nodeType":"YulAssignment","src":"46591:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46657:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"46662:2:15","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"46598:58:15"},"nodeType":"YulFunctionCall","src":"46598:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"46591:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46763:3:15"}],"functionName":{"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulIdentifier","src":"46674:88:15"},"nodeType":"YulFunctionCall","src":"46674:93:15"},"nodeType":"YulExpressionStatement","src":"46674:93:15"},{"nodeType":"YulAssignment","src":"46776:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"46787:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"46792:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46783:3:15"},"nodeType":"YulFunctionCall","src":"46783:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"46776:3:15"}]}]},"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"46569:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"46577:3:15","type":""}],"src":"46435:366:15"},{"body":{"nodeType":"YulBlock","src":"46978:248:15","statements":[{"nodeType":"YulAssignment","src":"46988:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47000:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"47011:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"46996:3:15"},"nodeType":"YulFunctionCall","src":"46996:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"46988:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47035:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"47046:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47031:3:15"},"nodeType":"YulFunctionCall","src":"47031:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47054:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"47060:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"47050:3:15"},"nodeType":"YulFunctionCall","src":"47050:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47024:6:15"},"nodeType":"YulFunctionCall","src":"47024:47:15"},"nodeType":"YulExpressionStatement","src":"47024:47:15"},{"nodeType":"YulAssignment","src":"47080:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"47214:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"47088:124:15"},"nodeType":"YulFunctionCall","src":"47088:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47080:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"46958:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"46973:4:15","type":""}],"src":"46807:419:15"},{"body":{"nodeType":"YulBlock","src":"47338:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"47360:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"47368:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47356:3:15"},"nodeType":"YulFunctionCall","src":"47356:14:15"},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","kind":"string","nodeType":"YulLiteral","src":"47372:24:15","type":"","value":"InvalidInstitutionCode"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47349:6:15"},"nodeType":"YulFunctionCall","src":"47349:48:15"},"nodeType":"YulExpressionStatement","src":"47349:48:15"}]},"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"47330:6:15","type":""}],"src":"47232:172:15"},{"body":{"nodeType":"YulBlock","src":"47556:220:15","statements":[{"nodeType":"YulAssignment","src":"47566:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47632:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"47637:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"47573:58:15"},"nodeType":"YulFunctionCall","src":"47573:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"47566:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47738:3:15"}],"functionName":{"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulIdentifier","src":"47649:88:15"},"nodeType":"YulFunctionCall","src":"47649:93:15"},"nodeType":"YulExpressionStatement","src":"47649:93:15"},{"nodeType":"YulAssignment","src":"47751:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"47762:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"47767:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47758:3:15"},"nodeType":"YulFunctionCall","src":"47758:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"47751:3:15"}]}]},"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"47544:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"47552:3:15","type":""}],"src":"47410:366:15"},{"body":{"nodeType":"YulBlock","src":"47953:248:15","statements":[{"nodeType":"YulAssignment","src":"47963:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"47975:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"47986:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"47971:3:15"},"nodeType":"YulFunctionCall","src":"47971:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"47963:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48010:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"48021:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48006:3:15"},"nodeType":"YulFunctionCall","src":"48006:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48029:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"48035:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"48025:3:15"},"nodeType":"YulFunctionCall","src":"48025:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"47999:6:15"},"nodeType":"YulFunctionCall","src":"47999:47:15"},"nodeType":"YulExpressionStatement","src":"47999:47:15"},{"nodeType":"YulAssignment","src":"48055:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"48189:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48063:124:15"},"nodeType":"YulFunctionCall","src":"48063:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48055:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"47933:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"47948:4:15","type":""}],"src":"47782:419:15"},{"body":{"nodeType":"YulBlock","src":"48313:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"48335:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"48343:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48331:3:15"},"nodeType":"YulFunctionCall","src":"48331:14:15"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"48347:34:15","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48324:6:15"},"nodeType":"YulFunctionCall","src":"48324:58:15"},"nodeType":"YulExpressionStatement","src":"48324:58:15"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"48305:6:15","type":""}],"src":"48207:182:15"},{"body":{"nodeType":"YulBlock","src":"48541:220:15","statements":[{"nodeType":"YulAssignment","src":"48551:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48617:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"48622:2:15","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"48558:58:15"},"nodeType":"YulFunctionCall","src":"48558:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"48551:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48723:3:15"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"48634:88:15"},"nodeType":"YulFunctionCall","src":"48634:93:15"},"nodeType":"YulExpressionStatement","src":"48634:93:15"},{"nodeType":"YulAssignment","src":"48736:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"48747:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"48752:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48743:3:15"},"nodeType":"YulFunctionCall","src":"48743:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"48736:3:15"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"48529:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"48537:3:15","type":""}],"src":"48395:366:15"},{"body":{"nodeType":"YulBlock","src":"48938:248:15","statements":[{"nodeType":"YulAssignment","src":"48948:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48960:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"48971:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48956:3:15"},"nodeType":"YulFunctionCall","src":"48956:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"48948:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"48995:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"49006:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"48991:3:15"},"nodeType":"YulFunctionCall","src":"48991:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49014:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"49020:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"49010:3:15"},"nodeType":"YulFunctionCall","src":"49010:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"48984:6:15"},"nodeType":"YulFunctionCall","src":"48984:47:15"},"nodeType":"YulExpressionStatement","src":"48984:47:15"},{"nodeType":"YulAssignment","src":"49040:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"49174:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49048:124:15"},"nodeType":"YulFunctionCall","src":"49048:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49040:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"48918:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"48933:4:15","type":""}],"src":"48767:419:15"},{"body":{"nodeType":"YulBlock","src":"49298:124:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"49320:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"49328:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49316:3:15"},"nodeType":"YulFunctionCall","src":"49316:14:15"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"49332:34:15","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49309:6:15"},"nodeType":"YulFunctionCall","src":"49309:58:15"},"nodeType":"YulExpressionStatement","src":"49309:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"49388:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"49396:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49384:3:15"},"nodeType":"YulFunctionCall","src":"49384:15:15"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"49401:13:15","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"49377:6:15"},"nodeType":"YulFunctionCall","src":"49377:38:15"},"nodeType":"YulExpressionStatement","src":"49377:38:15"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"49290:6:15","type":""}],"src":"49192:230:15"},{"body":{"nodeType":"YulBlock","src":"49574:220:15","statements":[{"nodeType":"YulAssignment","src":"49584:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49650:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"49655:2:15","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"49591:58:15"},"nodeType":"YulFunctionCall","src":"49591:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"49584:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49756:3:15"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"49667:88:15"},"nodeType":"YulFunctionCall","src":"49667:93:15"},"nodeType":"YulExpressionStatement","src":"49667:93:15"},{"nodeType":"YulAssignment","src":"49769:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"49780:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"49785:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49776:3:15"},"nodeType":"YulFunctionCall","src":"49776:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"49769:3:15"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"49562:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"49570:3:15","type":""}],"src":"49428:366:15"},{"body":{"nodeType":"YulBlock","src":"49971:248:15","statements":[{"nodeType":"YulAssignment","src":"49981:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"49993:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"50004:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"49989:3:15"},"nodeType":"YulFunctionCall","src":"49989:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"49981:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"50028:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"50039:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"50024:3:15"},"nodeType":"YulFunctionCall","src":"50024:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50047:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"50053:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"50043:3:15"},"nodeType":"YulFunctionCall","src":"50043:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"50017:6:15"},"nodeType":"YulFunctionCall","src":"50017:47:15"},"nodeType":"YulExpressionStatement","src":"50017:47:15"},{"nodeType":"YulAssignment","src":"50073:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"50207:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"50081:124:15"},"nodeType":"YulFunctionCall","src":"50081:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"50073:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49951:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"49966:4:15","type":""}],"src":"49800:419:15"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    // struct PaycrestSettingManager.Institution -> struct PaycrestSettingManager.Institution\n    function abi_encode_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // code\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct PaycrestSettingManager.Institution[] -> struct PaycrestSettingManager.Institution[]\n    function abi_encode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Institution_$3529_memory_ptr_to_t_struct$_Institution_$3529_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes32t_bytes32t_array$_t_address_$dyn_calldata_ptrt_addresst_uint64t_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3, value4 := abi_decode_t_array$_t_address_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value5 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value6 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value7 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9 {\n        if slt(sub(dataEnd, headStart), 288) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 224\n\n            value7 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 256))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value8, value9 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$3529_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$3529_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint96_to_t_uint96(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct IPaycrest.Order -> struct IPaycrest.Order\n    function abi_encode_t_struct$_Order_$3844_memory_ptr_to_t_struct$_Order_$3844_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0120)\n\n        {\n            // seller\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // token\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // senderFeeRecipient\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // senderFee\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // rate\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // isFulfilled\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // refundAddress\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xc0))\n        }\n\n        {\n            // currentBPS\n\n            let memberValue0 := mload(add(value, 0xe0))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0xe0))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x0100))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0100))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_Order_$3844_memory_ptr__to_t_struct$_Order_$3844_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_struct$_Order_$3844_memory_ptr_to_t_struct$_Order_$3844_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    // struct PaycrestSettingManager.InstitutionByCode -> struct PaycrestSettingManager.InstitutionByCode\n    function abi_encode_t_struct$_InstitutionByCode_$3534_memory_ptr_to_t_struct$_InstitutionByCode_$3534_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // currency\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_InstitutionByCode_$3534_memory_ptr__to_t_struct$_InstitutionByCode_$3534_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_struct$_InstitutionByCode_$3534_memory_ptr_to_t_struct$_InstitutionByCode_$3534_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint64_t_uint256__to_t_uint64_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243(memPtr) {\n\n        mstore(add(memPtr, 0), \"OnlyAggregator\")\n\n    }\n\n    function abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_feafe41130685cc96aef13592e300ecc17e4f49a66bae4a40d65fbdcce6c7243_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(memPtr) {\n\n        mstore(add(memPtr, 0), \"OrderFulfilled\")\n\n    }\n\n    function abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint96(x, y) -> diff {\n        x := cleanup_t_uint96(x)\n        y := cleanup_t_uint96(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint64_to_t_uint96(value) -> converted {\n        converted := cleanup_t_uint96(identity(cleanup_t_uint64(value)))\n    }\n\n    function abi_encode_t_uint64_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, convert_t_uint64_to_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint64__to_t_bytes32_t_bytes32_t_uint96__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint64_to_t_uint96_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4(memPtr) {\n\n        mstore(add(memPtr, 0), \"SenderFeeTooHigh\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d3cba414c71660096f2f33e0114a439f35ba3656daa2c1cdeeda4e31a4145c4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function convert_t_uint96_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint96(value)))\n    }\n\n    function abi_encode_t_uint96_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint96_to_t_uint256(value))\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_uint96_t_bytes32_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_bytes32_t_string_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value3, value4,  tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Paycrest: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_bytes_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len) {\n\n        let newLen := array_length_t_bytes_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(memPtr) {\n\n        mstore(add(memPtr, 0), \"TokenNotSupported\")\n\n    }\n\n    function abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(memPtr) {\n\n        mstore(add(memPtr, 0), \"AmountIsZero\")\n\n    }\n\n    function abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(memPtr) {\n\n        mstore(add(memPtr, 0), \"ThrowZeroAddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(memPtr) {\n\n        mstore(add(memPtr, 0), \"InvalidInstitutionCode\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x137 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87490D86 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xCB79455B GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xD8E8DE34 EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0xD9CAED12 EQ PUSH2 0x39A JUMPI DUP1 PUSH4 0xE4683A79 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0xE8D6E0DE EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x404 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x87490D86 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x2F7 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x332 JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xFF JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0x28D JUMPI PUSH2 0x137 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x137764FB EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x2654EC7E EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x3AD59DBC EQ PUSH2 0x1E9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x156 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x151 SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH2 0x420 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x25DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x186 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x181 SWAP2 SWAP1 PUSH2 0x2738 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x194 SWAP3 SWAP2 SWAP1 PUSH2 0x2818 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B2 SWAP2 SWAP1 PUSH2 0x2911 JUMP JUMPDEST PUSH2 0x959 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C4 SWAP2 SWAP1 PUSH2 0x29FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x2BBB JUMP JUMPDEST PUSH2 0xE21 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F1 PUSH2 0xF35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x2C96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH2 0xFC7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x226 SWAP2 SWAP1 PUSH2 0x2CB8 JUMP JUMPDEST PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x238 SWAP2 SWAP1 PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x256 SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH2 0x1031 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x286 SWAP2 SWAP1 PUSH2 0x2E1E JUMP JUMPDEST PUSH2 0x1262 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A2 SWAP2 SWAP1 PUSH2 0x2E5E JUMP JUMPDEST PUSH2 0x13AF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH2 0x141A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D0 SWAP2 SWAP1 PUSH2 0x2EBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E1 PUSH2 0x145B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EE SWAP2 SWAP1 PUSH2 0x2ED5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x311 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x30C SWAP2 SWAP1 PUSH2 0x2EF0 JUMP JUMPDEST PUSH2 0x1485 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x31B PUSH2 0x163A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x329 SWAP3 SWAP2 SWAP1 PUSH2 0x2F61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x34C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x347 SWAP2 SWAP1 PUSH2 0x2CB8 JUMP JUMPDEST PUSH2 0x165F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x368 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x2FE0 JUMP JUMPDEST PUSH2 0x182B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x384 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x37F SWAP2 SWAP1 PUSH2 0x2CB8 JUMP JUMPDEST PUSH2 0x1882 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x391 SWAP2 SWAP1 PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AF SWAP2 SWAP1 PUSH2 0x302D JUMP JUMPDEST PUSH2 0x18D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0x3080 JUMP JUMPDEST PUSH2 0x1964 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DD SWAP2 SWAP1 PUSH2 0x2CF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3EE PUSH2 0x1C11 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0x2ED5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x41E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x419 SWAP2 SWAP1 PUSH2 0x2CB8 JUMP JUMPDEST PUSH2 0x1C3B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x9D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x49D JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x457 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4C5 JUMPI PUSH2 0x4C4 PUSH2 0x2A28 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4FE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x4EB PUSH2 0x235B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x4E3 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x552 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x51F JUMPI PUSH2 0x51E PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53A JUMPI PUSH2 0x539 PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x504 JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E8 SWAP1 PUSH2 0x314C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x64C SWAP1 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x9F PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x6D7 SWAP2 SWAP1 PUSH2 0x3207 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH2 0x71C DUP12 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP8 PUSH2 0x1CBE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7BB JUMPI PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO PUSH2 0x7BA JUMPI PUSH2 0x7B9 DUP12 PUSH2 0x1DCF JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT ISZERO PUSH2 0x86E JUMPI DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x66 PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x829 SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x848 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86C SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP9 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8AD SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8CC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8F0 SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0xF26DE978CBAEA68EA699627155A10AD53DF3321B0F95A08264C0CFD6D4C05326 DUP15 DUP14 DUP11 PUSH1 0x40 MLOAD PUSH2 0x93C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x32ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP11 DUP3 SWAP4 POP SWAP4 POP POP POP SWAP9 POP SWAP9 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x968 DUP12 DUP12 DUP7 DUP10 DUP14 PUSH2 0x1F23 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH2 0x997 SWAP2 SWAP1 PUSH2 0x3324 JUMP JUMPDEST PUSH2 0x9A1 SWAP2 SWAP1 PUSH2 0x3395 JUMP JUMPDEST DUP6 GT ISZERO PUSH2 0x9E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9DA SWAP1 PUSH2 0x3412 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP14 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA20 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3432 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA3F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA63 SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP PUSH1 0xA0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xAB4 SWAP1 PUSH2 0x3469 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0xA0 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB0B SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP2 MSTORE POP PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP1 DUP11 DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x2C205F90C01160D42994A0EB521810056D94BB82A1FCB038D7179C4158A1F15B DUP11 DUP14 DUP14 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xE0B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x351E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xE29 PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF2F JUMPI PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xE60 JUMPI PUSH2 0xE5F PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xEC5 JUMPI PUSH2 0xEC4 PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9E PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEF1 JUMPI PUSH2 0xEF0 PUSH2 0x30C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xE32 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x68 DUP1 SLOAD PUSH2 0xF44 SWAP1 PUSH2 0x359B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xF70 SWAP1 PUSH2 0x359B JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFBD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xF92 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFBD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFA0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xFCF PUSH2 0x2132 JUMP JUMPDEST PUSH2 0xFD9 PUSH1 0x0 PUSH2 0x21B0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9B PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1039 PUSH2 0x237B JUMP JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x126A PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x12D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12D0 SWAP1 PUSH2 0x3618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x1342 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x13AB JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x13B7 PUSH2 0x2132 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC8CA786C100BC62A0DFFBE768B5F0B770D84E8604C5DE54B54197B9066BB42A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x140F SWAP2 SWAP1 PUSH2 0x3638 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x1422 PUSH2 0x243D JUMP JUMPDEST PUSH1 0x9E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x148D PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14F3 SWAP1 PUSH2 0x3618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x157B JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x15FA JUMPI DUP1 PUSH1 0x9C PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x162D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3653 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x1690 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x16BD JUMPI POP PUSH2 0x169F ADDRESS PUSH2 0x2276 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x16BC JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x16FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F3 SWAP1 PUSH2 0x36FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1739 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x1388 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x17CE PUSH2 0x2299 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1827 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x181E SWAP2 SWAP1 PUSH2 0x3764 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x1833 PUSH2 0x2132 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x1844 SWAP3 SWAP2 SWAP1 PUSH2 0x392C JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1876 SWAP3 SWAP2 SWAP1 PUSH2 0x3A29 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9C PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18E0 PUSH2 0x2132 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191B SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x193A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x195E SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x19F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19ED SWAP1 PUSH2 0x314C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1A5A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A51 SWAP1 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x9F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x9F PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B8C SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1BAB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BCF SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP DUP3 PUSH31 0x7C875846B687732A7579C19BB1DADE66CD14E9F4F809565E2B2B5E76C72B4F DUP4 PUSH1 0x40 MLOAD PUSH2 0x1BFF SWAP2 SWAP1 PUSH2 0x29FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1C43 PUSH2 0x2132 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1CB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA9 SWAP1 PUSH2 0x3ABF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CBB DUP2 PUSH2 0x21B0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1CC6 PUSH2 0x245D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x9F PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x1D03 SWAP2 SWAP1 PUSH2 0x3ADF JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP5 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x1D22 SWAP2 SWAP1 PUSH2 0x3324 JUMP JUMPDEST PUSH2 0x1D2C SWAP2 SWAP1 PUSH2 0x3395 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1D68 SWAP2 SWAP1 PUSH2 0x3324 JUMP JUMPDEST PUSH2 0x1D72 SWAP2 SWAP1 PUSH2 0x3395 JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1D8F SWAP2 SWAP1 PUSH2 0x3ADF JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP DUP3 ISZERO PUSH2 0x1DC7 JUMPI DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x1DB4 SWAP2 SWAP1 PUSH2 0x3B13 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 MSTORE POP POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x9F PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E96 SWAP3 SWAP2 SWAP1 PUSH2 0x3247 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1EB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1ED9 SWAP2 SWAP1 PUSH2 0x3285 JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x9B PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1FAF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FA6 SWAP1 PUSH2 0x3B93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 GT PUSH2 0x1FF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FE9 SWAP1 PUSH2 0x3BFF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2061 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2058 SWAP1 PUSH2 0x3C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x20D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C7 SWAP1 PUSH2 0x3C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x9E PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x212B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2122 SWAP1 PUSH2 0x3CD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x213A PUSH2 0x22F2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x2158 PUSH2 0x145B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21A5 SWAP1 PUSH2 0x3D43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x22E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22DF SWAP1 PUSH2 0x3DD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x22F0 PUSH2 0x22FA JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2349 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2340 SWAP1 PUSH2 0x3DD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2359 PUSH2 0x2354 PUSH2 0x22F2 JUMP JUMPDEST PUSH2 0x21B0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x249E DUP2 PUSH2 0x248B JUMP JUMPDEST DUP2 EQ PUSH2 0x24A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24BB DUP2 PUSH2 0x2495 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24D7 JUMPI PUSH2 0x24D6 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24E5 DUP5 DUP3 DUP6 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2523 DUP2 PUSH2 0x248B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x253F PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x251A JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2552 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x251A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2564 DUP4 DUP4 PUSH2 0x2529 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP3 PUSH2 0x24EE JUMP JUMPDEST PUSH2 0x2592 DUP2 DUP6 PUSH2 0x24F9 JUMP JUMPDEST SWAP4 POP PUSH2 0x259D DUP4 PUSH2 0x250A JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25CE JUMPI DUP2 MLOAD PUSH2 0x25B5 DUP9 DUP3 PUSH2 0x2558 JUMP JUMPDEST SWAP8 POP PUSH2 0x25C0 DUP4 PUSH2 0x2570 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x25A1 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25F5 DUP2 DUP5 PUSH2 0x257D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2622 JUMPI PUSH2 0x2621 PUSH2 0x25FD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x263F JUMPI PUSH2 0x263E PUSH2 0x2602 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x265B JUMPI PUSH2 0x265A PUSH2 0x2607 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x268D DUP3 PUSH2 0x2662 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x269D DUP2 PUSH2 0x2682 JUMP JUMPDEST DUP2 EQ PUSH2 0x26A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x26BA DUP2 PUSH2 0x2694 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26DD DUP2 PUSH2 0x26C0 JUMP JUMPDEST DUP2 EQ PUSH2 0x26E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x26FA DUP2 PUSH2 0x26D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2715 DUP2 PUSH2 0x2700 JUMP JUMPDEST DUP2 EQ PUSH2 0x2720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2732 DUP2 PUSH2 0x270C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x2758 JUMPI PUSH2 0x2757 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2766 DUP12 DUP3 DUP13 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP9 POP POP PUSH1 0x20 PUSH2 0x2777 DUP12 DUP3 DUP13 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP8 POP POP PUSH1 0x40 PUSH2 0x2788 DUP12 DUP3 DUP13 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP7 POP POP PUSH1 0x60 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27A9 JUMPI PUSH2 0x27A8 PUSH2 0x2486 JUMP JUMPDEST JUMPDEST PUSH2 0x27B5 DUP12 DUP3 DUP13 ADD PUSH2 0x260C JUMP JUMPDEST SWAP6 POP SWAP6 POP POP PUSH1 0x80 PUSH2 0x27C8 DUP12 DUP3 DUP13 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x27D9 DUP12 DUP3 DUP13 ADD PUSH2 0x26EB JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x27EA DUP12 DUP3 DUP13 ADD PUSH2 0x2723 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 SWAP1 SWAP4 SWAP7 POP JUMP JUMPDEST PUSH2 0x2803 DUP2 PUSH2 0x248B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2812 DUP2 PUSH2 0x2682 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x282D PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x283A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2809 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2854 DUP2 PUSH2 0x2841 JUMP JUMPDEST DUP2 EQ PUSH2 0x285F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2871 DUP2 PUSH2 0x284B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2898 DUP2 PUSH2 0x2877 JUMP JUMPDEST DUP2 EQ PUSH2 0x28A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x28B5 DUP2 PUSH2 0x288F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x28D1 JUMPI PUSH2 0x28D0 PUSH2 0x25FD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28EE JUMPI PUSH2 0x28ED PUSH2 0x2602 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x290A JUMPI PUSH2 0x2909 PUSH2 0x2607 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP12 DUP14 SUB SLT ISZERO PUSH2 0x2935 JUMPI PUSH2 0x2934 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2943 DUP14 DUP3 DUP15 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP11 POP POP PUSH1 0x20 PUSH2 0x2954 DUP14 DUP3 DUP15 ADD PUSH2 0x2862 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x40 PUSH2 0x2965 DUP14 DUP3 DUP15 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP9 POP POP PUSH1 0x60 PUSH2 0x2976 DUP14 DUP3 DUP15 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP8 POP POP PUSH1 0x80 PUSH2 0x2987 DUP14 DUP3 DUP15 ADD PUSH2 0x28A6 JUMP JUMPDEST SWAP7 POP POP PUSH1 0xA0 PUSH2 0x2998 DUP14 DUP3 DUP15 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP6 POP POP PUSH1 0xC0 PUSH2 0x29A9 DUP14 DUP3 DUP15 ADD PUSH2 0x2862 JUMP JUMPDEST SWAP5 POP POP PUSH1 0xE0 PUSH2 0x29BA DUP14 DUP3 DUP15 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP4 POP POP PUSH2 0x100 DUP12 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29DC JUMPI PUSH2 0x29DB PUSH2 0x2486 JUMP JUMPDEST JUMPDEST PUSH2 0x29E8 DUP14 DUP3 DUP15 ADD PUSH2 0x28BB JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2A11 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27FA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2A60 DUP3 PUSH2 0x2A17 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2A7F JUMPI PUSH2 0x2A7E PUSH2 0x2A28 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A92 PUSH2 0x2477 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A9E DUP3 DUP3 PUSH2 0x2A57 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2ABE JUMPI PUSH2 0x2ABD PUSH2 0x2A28 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AEA JUMPI PUSH2 0x2AE9 PUSH2 0x2ACF JUMP JUMPDEST JUMPDEST PUSH2 0x2AF4 PUSH1 0x40 PUSH2 0x2A88 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2B04 DUP5 DUP3 DUP6 ADD PUSH2 0x24AC JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2B18 DUP5 DUP3 DUP6 ADD PUSH2 0x24AC JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B37 PUSH2 0x2B32 DUP5 PUSH2 0x2AA3 JUMP JUMPDEST PUSH2 0x2A88 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2B5A JUMPI PUSH2 0x2B59 PUSH2 0x2607 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2B83 JUMPI DUP1 PUSH2 0x2B6F DUP9 DUP3 PUSH2 0x2AD4 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2B5C JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2BA2 JUMPI PUSH2 0x2BA1 PUSH2 0x25FD JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2BB2 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2B24 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BD2 JUMPI PUSH2 0x2BD1 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BE0 DUP6 DUP3 DUP7 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2C01 JUMPI PUSH2 0x2C00 PUSH2 0x2486 JUMP JUMPDEST JUMPDEST PUSH2 0x2C0D DUP6 DUP3 DUP7 ADD PUSH2 0x2B8D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2C51 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2C36 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C68 DUP3 PUSH2 0x2C17 JUMP JUMPDEST PUSH2 0x2C72 DUP2 DUP6 PUSH2 0x2C22 JUMP JUMPDEST SWAP4 POP PUSH2 0x2C82 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2C33 JUMP JUMPDEST PUSH2 0x2C8B DUP2 PUSH2 0x2A17 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CB0 DUP2 DUP5 PUSH2 0x2C5D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CCE JUMPI PUSH2 0x2CCD PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CDC DUP5 DUP3 DUP6 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2CEE DUP2 PUSH2 0x2700 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2D09 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2CE5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D18 DUP2 PUSH2 0x2682 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D27 DUP2 PUSH2 0x2841 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D36 DUP2 PUSH2 0x2877 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D45 DUP2 PUSH2 0x2700 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2D62 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2D0F JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2D75 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2D0F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2D88 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2D0F JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2D9B PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2D1E JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2DAE PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2D2D JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2DC1 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2D3C JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2DD4 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2D0F JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2DE7 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2D2D JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2DFC PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2D1E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2E18 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2D4B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2E35 JUMPI PUSH2 0x2E34 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E43 DUP6 DUP3 DUP7 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2E54 DUP6 DUP3 DUP7 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E74 JUMPI PUSH2 0x2E73 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E82 DUP5 DUP3 DUP6 ADD PUSH2 0x26EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2EA1 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x251A JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2EB4 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x251A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2ECF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2E8B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EEA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2809 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F09 JUMPI PUSH2 0x2F08 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F17 DUP7 DUP3 DUP8 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2F28 DUP7 DUP3 DUP8 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2F39 DUP7 DUP3 DUP8 ADD PUSH2 0x2723 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2F4C DUP2 PUSH2 0x26C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2F5B DUP2 PUSH2 0x2841 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2F76 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2F43 JUMP JUMPDEST PUSH2 0x2F83 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F52 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2FA0 JUMPI PUSH2 0x2F9F PUSH2 0x25FD JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2FBD JUMPI PUSH2 0x2FBC PUSH2 0x2602 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2FD9 JUMPI PUSH2 0x2FD8 PUSH2 0x2607 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FF7 JUMPI PUSH2 0x2FF6 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3015 JUMPI PUSH2 0x3014 PUSH2 0x2486 JUMP JUMPDEST JUMPDEST PUSH2 0x3021 DUP6 DUP3 DUP7 ADD PUSH2 0x2F8A JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3046 JUMPI PUSH2 0x3045 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3054 DUP7 DUP3 DUP8 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x3065 DUP7 DUP3 DUP8 ADD PUSH2 0x26AB JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x3076 DUP7 DUP3 DUP8 ADD PUSH2 0x2862 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3097 JUMPI PUSH2 0x3096 PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30A5 DUP6 DUP3 DUP7 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x30B6 DUP6 DUP3 DUP7 ADD PUSH2 0x24AC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F6E6C7941676772656761746F72000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3136 PUSH1 0xE DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3141 DUP3 PUSH2 0x3100 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3165 DUP2 PUSH2 0x3129 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31A2 PUSH1 0xE DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x31AD DUP3 PUSH2 0x316C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31D1 DUP2 PUSH2 0x3195 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3212 DUP3 PUSH2 0x2877 JUMP JUMPDEST SWAP2 POP PUSH2 0x321D DUP4 PUSH2 0x2877 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3241 JUMPI PUSH2 0x3240 PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x325C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2809 JUMP JUMPDEST PUSH2 0x3269 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2F52 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x327F DUP2 PUSH2 0x270C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x329B JUMPI PUSH2 0x329A PUSH2 0x2481 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x32A9 DUP5 DUP3 DUP6 ADD PUSH2 0x3270 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32D7 PUSH2 0x32D2 PUSH2 0x32CD DUP5 PUSH2 0x26C0 JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST PUSH2 0x2877 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32E7 DUP2 PUSH2 0x32BC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3302 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x330F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x331C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x32DE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x332F DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH2 0x333A DUP4 PUSH2 0x2841 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x3348 DUP2 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x335F JUMPI PUSH2 0x335E PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x33A0 DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH2 0x33AB DUP4 PUSH2 0x2841 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x33BB JUMPI PUSH2 0x33BA PUSH2 0x3366 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656E646572466565546F6F4869676800000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33FC PUSH1 0x10 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3407 DUP3 PUSH2 0x33C6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x342B DUP2 PUSH2 0x33EF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3447 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2809 JUMP JUMPDEST PUSH2 0x3454 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2809 JUMP JUMPDEST PUSH2 0x3461 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2F52 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3474 DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x34A6 JUMPI PUSH2 0x34A5 PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34CC PUSH2 0x34C7 PUSH2 0x34C2 DUP5 PUSH2 0x2877 JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST PUSH2 0x2841 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x34DC DUP2 PUSH2 0x34B1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34FD DUP4 DUP6 PUSH2 0x30EF JUMP JUMPDEST SWAP4 POP PUSH2 0x350A DUP4 DUP6 DUP5 PUSH2 0x34E2 JUMP JUMPDEST PUSH2 0x3513 DUP4 PUSH2 0x2A17 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3533 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x34D3 JUMP JUMPDEST PUSH2 0x3540 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x354D PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x27FA JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x3560 DUP2 DUP5 DUP7 PUSH2 0x34F1 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x35B3 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x35C6 JUMPI PUSH2 0x35C5 PUSH2 0x356C JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3602 PUSH1 0x16 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x360D DUP3 PUSH2 0x35CC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3631 DUP2 PUSH2 0x35F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x364D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2F43 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x3668 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x27FA JUMP JUMPDEST PUSH2 0x3675 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2809 JUMP JUMPDEST PUSH2 0x3682 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2CE5 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36E6 PUSH1 0x2E DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x36F1 DUP3 PUSH2 0x368A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3715 DUP2 PUSH2 0x36D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x374E PUSH2 0x3749 PUSH2 0x3744 DUP5 PUSH2 0x371C JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST PUSH2 0x3726 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x375E DUP2 PUSH2 0x3733 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3779 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3755 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x37EC PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x37AF JUMP JUMPDEST PUSH2 0x37F6 DUP7 DUP4 PUSH2 0x37AF JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3829 PUSH2 0x3824 PUSH2 0x381F DUP5 PUSH2 0x2841 JUMP JUMPDEST PUSH2 0x32B2 JUMP JUMPDEST PUSH2 0x2841 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3843 DUP4 PUSH2 0x380E JUMP JUMPDEST PUSH2 0x3857 PUSH2 0x384F DUP3 PUSH2 0x3830 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x37BC JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x386C PUSH2 0x385F JUMP JUMPDEST PUSH2 0x3877 DUP2 DUP5 DUP5 PUSH2 0x383A JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x389B JUMPI PUSH2 0x3890 PUSH1 0x0 DUP3 PUSH2 0x3864 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x387D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x38E0 JUMPI PUSH2 0x38B1 DUP2 PUSH2 0x378A JUMP JUMPDEST PUSH2 0x38BA DUP5 PUSH2 0x379F JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x38C9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x38DD PUSH2 0x38D5 DUP6 PUSH2 0x379F JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x387C JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3903 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x38E5 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x391C DUP4 DUP4 PUSH2 0x38F2 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3936 DUP4 DUP4 PUSH2 0x377F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x394F JUMPI PUSH2 0x394E PUSH2 0x2A28 JUMP JUMPDEST JUMPDEST PUSH2 0x3959 DUP3 SLOAD PUSH2 0x359B JUMP JUMPDEST PUSH2 0x3964 DUP3 DUP3 DUP6 PUSH2 0x389F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3993 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3981 JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x398B DUP6 DUP3 PUSH2 0x3910 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x39F3 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x39A1 DUP7 PUSH2 0x378A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x39C9 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x39A4 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x39E6 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x39E2 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x38F2 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A08 DUP4 DUP6 PUSH2 0x2C22 JUMP JUMPDEST SWAP4 POP PUSH2 0x3A15 DUP4 DUP6 DUP5 PUSH2 0x34E2 JUMP JUMPDEST PUSH2 0x3A1E DUP4 PUSH2 0x2A17 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A44 DUP2 DUP5 DUP7 PUSH2 0x39FC JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AA9 PUSH1 0x26 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3AB4 DUP3 PUSH2 0x3A4D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3AD8 DUP2 PUSH2 0x3A9C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AEA DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH2 0x3AF5 DUP4 PUSH2 0x2841 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x3B0D JUMPI PUSH2 0x3B0C PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B1E DUP3 PUSH2 0x2841 JUMP JUMPDEST SWAP2 POP PUSH2 0x3B29 DUP4 PUSH2 0x2841 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B41 JUMPI PUSH2 0x3B40 PUSH2 0x31D8 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B7D PUSH1 0x11 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3B88 DUP3 PUSH2 0x3B47 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3BAC DUP2 PUSH2 0x3B70 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BE9 PUSH1 0xC DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3BF4 DUP3 PUSH2 0x3BB3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C18 DUP2 PUSH2 0x3BDC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C55 PUSH1 0x10 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3C60 DUP3 PUSH2 0x3C1F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3C84 DUP2 PUSH2 0x3C48 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3CC1 PUSH1 0x16 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3CCC DUP3 PUSH2 0x3C8B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CF0 DUP2 PUSH2 0x3CB4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3D2D PUSH1 0x20 DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3D38 DUP3 PUSH2 0x3CF7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3D5C DUP2 PUSH2 0x3D20 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DBF PUSH1 0x2B DUP4 PUSH2 0x30EF JUMP JUMPDEST SWAP2 POP PUSH2 0x3DCA DUP3 PUSH2 0x3D63 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DEE DUP2 PUSH2 0x3DB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 0xBB RETURN SWAP8 EXTCODECOPY 0xED BALANCE 0xC 0xD8 PUSH24 0x7C31EA538F4BEED34D4FEA5F26C4BEEE1D63073174EA6473 PUSH16 0x6C634300081200330000000000000000 ","sourceMap":"367:9323:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8266:487;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3830:1613;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1410:1608;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1751:500:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9343:96:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2064:101:0;;;:::i;:::-;;7917:119:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7746:115;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2443:263:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2257:180;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8103:157:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1401:344:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8806:139:12;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;841:206;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2712:161:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9170:120:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9536:151;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5838:546;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9005:105;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8266:487:12;8341:20;8373:33;8409:21;:31;8431:8;8409:31;;;;;;;;;;;8373:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8450:14;8467:12;:19;8450:36;;8496:27;8544:6;8526:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8496:55;;8575:9;8570:145;8594:6;8590:1;:10;8570:145;;;8630:12;8643:1;8630:15;;;;;;;;:::i;:::-;;;;;;;;8618:6;8625:1;8618:9;;;;;;;;:::i;:::-;;;;;;;:27;;;;8687:3;;;;;;;8570:145;;;;8740:6;8733:13;;;;;8266:487;;;:::o;3830:1613::-;4107:7;4116;1109:18;;;;;;;;;;;1095:32;;:10;:32;;;1087:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;4201:5:::1;:15;4207:8;4201:15;;;;;;;;;;;:27;;;;;;;;;;;;4200:28;4192:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;4295:13;4311:5;:15;4317:8;4311:15;;;;;;;;;;;:21;;;;;;;;;;;;4295:37;;4441:14;4411:44;;:5;:15;4417:8;4411:15;;;;;;;;;;;:26;;;:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4597:21;4624:52;4639:8;4649:14;4624:52;;4665:10;4624:14;:52::i;:::-;4595:81;;4719:1;4689:5;:15;4695:8;4689:15;;;;;;;;;;;:26;;;;;;;;;;;;:31;;::::0;4686:296:::1;;4820:4;4790:5;:15;4796:8;4790:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;4870:1;4842:5;:15;4848:8;4842:15;;;;;;;;;;;:25;;;:29;4838:134;;;4930:27;4948:8;4930:17;:27::i;:::-;4838:134;4686:296;5029:1;5004:10;:22;;;:26;5000:154;;;5090:5;5083:22;;;5106:12;;;;;;;;;;;5120:10;:22;;;5083:60;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5000:154;5216:5;5209:22;;;5232:18;5252:10;:34;;;5209:78;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5367:18;5325:77;;5348:8;5325:77;5333:13;5358:6;5387:14;5325:77;;;;;;;;:::i;:::-;;;;;;;;5420:8;5430:5;5412:24;;;;;;3830:1613:::0;;;;;;;;;;;:::o;1410:1608::-;1722:15;1785:80;1794:6;1802:7;1811:14;1827:19;1848:16;1785:8;:80::i;:::-;1991:7;;1969:18;;;;;;;;;;;1959:28;;:7;:28;;;;:::i;:::-;1958:40;;;;:::i;:::-;1944:10;:54;;1936:83;;;;;;;;;;;;:::i;:::-;;;;;;;;;2084:6;2077:27;;;2105:10;2125:4;2132:7;2077:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2206:6;:18;2213:10;2206:18;;;;;;;;;;;;;;;;:21;;;;;;;;;:::i;:::-;;;;;;2464:10;2476:6;:18;2483:10;2476:18;;;;;;;;;;;;;;;;2453:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2443:53;;;;;;2433:63;;2553:334;;;;;;;;2581:10;2553:334;;;;;;2612:6;2553:334;;;;;;2652:19;2553:334;;;;;;2696:10;2553:334;;;;2726:5;2553:334;;;;;;2758:5;2553:334;;;;;;2792:14;2553:334;;;;;;2839:7;;2553:334;;;;;;;;2869:7;2553:334;;;2536:5;:14;2542:7;2536:14;;;;;;;;;;;:351;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2957:7;2948;2940:6;2932:79;;;2966:5;2973:16;2991:6;2999:11;;2932:79;;;;;;;;;;:::i;:::-;;;;;;;;1410:1608;;;;;;;;;;;;:::o;1751:500:13:-;1334:13:0;:11;:13::i;:::-;1868:14:13::1;1885:12;:19;1868:36;;1919:6;1914:331;1935:6;1931:1;:10;1914:331;;;1959:21;:31;1981:8;1959:31;;;;;;;;;;;1996:12;2009:1;1996:15;;;;;;;;:::i;:::-;;;;;;;;1959:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2078:97;;;;;;;;2120:12;2133:1;2120:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2078:97;;;;2152:8;2078:97;;::::0;2026:27:::1;:49;2054:12;2067:1;2054:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2026:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2217:3;;;;;;;1914:331;;;;1857:394;1751:500:::0;;:::o;9343:96:12:-;9390:12;9421:11;9414:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9343:96;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;7917:119:12:-;7981:4;8004:17;:25;8022:6;8004:25;;;;;;;;;;;;;;;;;;;;;;;;;7997:32;;7917:119;;;:::o;7746:115::-;7808:12;;:::i;:::-;7839:5;:15;7845:8;7839:15;;;;;;;;;;;7832:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7746:115;;;:::o;2443:263:13:-;1334:13:0;:11;:13::i;:::-;2559:1:13::1;2542:19;;:5;:19;;::::0;2534:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2602:13;:4;:13:::0;2598:39:::1;;2632:5;2617:12;;:20;;;;;;;;;;;;;;;;;;2598:39;2651:20;:4;:20:::0;2647:52:::1;;2694:5;2673:18;;:26;;;;;;;;;;;;;;;;;;2647:52;2443:263:::0;;:::o;2257:180::-;1334:13:0;:11;:13::i;:::-;2363:19:13::1;2342:18;;:40;;;;;;;;;;;;;;;;;;2397:33;2410:19;2397:33;;;;;;:::i;:::-;;;;;;;;2257:180:::0;:::o;8103:157:12:-;8177:24;;:::i;:::-;8220:27;:33;8248:4;8220:33;;;;;;;;;;;8213:40;;;;;;;;;;;;;;;;;;;;;;;;;;;8103:157;;;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1401:344:13:-;1334:13:0;:11;:13::i;:::-;1525:1:13::1;1508:19;;:5;:19;;::::0;1500:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1568:15;:4;:15:::0;1564:54:::1;;1612:6;1585:17;:24;1603:5;1585:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1564:54;1632:19;:4;:19:::0;1628:55:::1;;1677:6;1653:14;:21;1668:5;1653:21;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;1628:55;1699:39;1718:4;1724:5;1731:6;1699:39;;;;;;;;:::i;:::-;;;;;;;;1401:344:::0;;;:::o;8806:139:12:-;8862:6;8879:7;8910:18;;;;;;;;;;;8930:7;;8903:35;;;;8806:139;;:::o;841:206::-;3279:19:1;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;938:4:12::1;911:17;:24;929:5;911:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;965:7;955;:17;;;;1004:4;983:18;;:25;;;;;;;;;;;;;;;;;;1024:16;:14;:16::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;841:206:12;:::o;2712:161:13:-;1334:13:0;:11;:13::i;:::-;2816:10:13::1;;2802:11;:24;;;;;;;:::i;:::-;;2841:25;2855:10;;2841:25;;;;;;;:::i;:::-;;;;;;;;2712:161:::0;;:::o;9170:120:12:-;9238:4;9261:14;:22;9276:6;9261:22;;;;;;;;;;;;;;;;;;;;;;;;;9254:29;;9170:120;;;:::o;9536:151::-;1334:13:0;:11;:13::i;:::-;9643:6:12::1;9636:23;;;9660:10;9672:7;9636:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9536:151:::0;;;:::o;5838:546::-;5923:4;1109:18;;;;;;;;;;;1095:32;;:10;:32;;;1087:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;6005:5:::1;:15;6011:8;6005:15;;;;;;;;;;;:27;;;;;;;;;;;;6004:28;5996:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;6121:4;6091:5;:15;6097:8;6091:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;6164:1;6135:5;:15;6141:8;6135:15;;;;;;;;;;;:26;;;:30;;;;;;;;;;;;;;;;;;6213:5;:15;6219:8;6213:15;;;;;;;;;;;:21;;;;;;;;;;;;6206:38;;;6245:5;:15;6251:8;6245:15;;;;;;;;;;;:29;;;;;;;;;;;;6276:5;:15;6282:8;6276:15;;;;;;;;;;;:22;;;6206:93;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6339:8;6330:26;6349:6;6330:26;;;;;;:::i;:::-;;;;;;;;6373:4;6366:11;;5838:546:::0;;;;:::o;9005:105::-;9059:7;9085:18;;;;;;;;;;;9078:25;;9005:105;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;6390:1109:12:-;6493:21;;:::i;:::-;6587:14;6604:5;:15;6610:8;6604:15;;;;;;;;;;;:22;;;6587:39;;6692:5;:15;6698:8;6692:15;;;;;;;;;;;:25;;;6683:6;:34;;;;:::i;:::-;6674:43;;6861:7;;6843:14;6834:23;;:6;:23;;;;:::i;:::-;6833:35;;;;:::i;:::-;6796:10;:34;;:72;;;;;7021:7;;6999:18;;;;;;;;;;;6962:55;;:10;:34;;;:55;;;;:::i;:::-;6961:67;;;;:::i;:::-;6936:10;:22;;:92;;;;;7201:10;:22;;;7164:10;:34;;;:59;;;;:::i;:::-;7126:10;:34;;:98;;;;;7356:10;7352:141;;;7420:10;:22;;;7382:10;:34;;:60;;;;;;;:::i;:::-;;;;;;;;7481:1;7456:10;:22;;:26;;;;;7352:141;6517:982;6390:1109;;;;;:::o;5449:343::-;5513:17;5533:5;:15;5539:8;5533:15;;;;;;;;;;;:34;;;;;;;;;;;;5513:54;;5577:12;5592:5;:15;5598:8;5592:15;;;;;;;;;;;:25;;;5577:40;;5665:5;:15;5671:8;5665:15;;;;;;;;;;;:21;;;;;;;;;;;;5658:38;;;5697:9;5708:4;5658:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5780:4;5769:9;5751:34;;;;;;;;;;;;5503:289;;5449:343;:::o;3024:559::-;3235:17;:25;3253:6;3235:25;;;;;;;;;;;;;;;;;;;;;;;;;3227:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;3310:1;3300:7;:11;3292:36;;;;;;;;;;;;:::i;:::-;;;;;;;;;3372:1;3346:28;;:14;:28;;;3338:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3444:1;3413:33;;:19;:33;;;3405:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;3547:1;3539:10;;3485:27;:45;3513:16;3485:45;;;;;;;;;;;:50;;;:64;3477:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;3024:559;;;;;:::o;1599:130:0:-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;1423:320:5:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1003:95:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;850:96:6:-;903:7;929:10;922:17;;850:96;:::o;1104:111:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;7:75:15:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:143::-;1121:6;1155:5;1149:12;1139:22;;1025:143;;;:::o;1174:213::-;1302:11;1336:6;1331:3;1324:19;1376:4;1371:3;1367:14;1352:29;;1174:213;;;;:::o;1393:161::-;1489:4;1512:3;1504:11;;1542:4;1537:3;1533:14;1525:22;;1393:161;;;:::o;1560:108::-;1637:24;1655:5;1637:24;:::i;:::-;1632:3;1625:37;1560:108;;:::o;1768:505::-;1913:4;1908:3;1904:14;2000:4;1993:5;1989:16;1983:23;2019:63;2076:4;2071:3;2067:14;2053:12;2019:63;:::i;:::-;1928:164;2174:4;2167:5;2163:16;2157:23;2193:63;2250:4;2245:3;2241:14;2227:12;2193:63;:::i;:::-;2102:164;1882:391;1768:505;;:::o;2279:295::-;2406:10;2427:104;2527:3;2519:6;2427:104;:::i;:::-;2563:4;2558:3;2554:14;2540:28;;2279:295;;;;:::o;2580:142::-;2679:4;2711;2706:3;2702:14;2694:22;;2580:142;;;:::o;2826:964::-;3003:3;3032:83;3109:5;3032:83;:::i;:::-;3131:115;3239:6;3234:3;3131:115;:::i;:::-;3124:122;;3270:85;3349:5;3270:85;:::i;:::-;3378:7;3409:1;3394:371;3419:6;3416:1;3413:13;3394:371;;;3495:6;3489:13;3522:121;3639:3;3624:13;3522:121;:::i;:::-;3515:128;;3666:89;3748:6;3666:89;:::i;:::-;3656:99;;3454:311;3441:1;3438;3434:9;3429:14;;3394:371;;;3398:14;3781:3;3774:10;;3008:782;;;2826:964;;;;:::o;3796:489::-;3997:4;4035:2;4024:9;4020:18;4012:26;;4084:9;4078:4;4074:20;4070:1;4059:9;4055:17;4048:47;4112:166;4273:4;4264:6;4112:166;:::i;:::-;4104:174;;3796:489;;;;:::o;4291:117::-;4400:1;4397;4390:12;4414:117;4523:1;4520;4513:12;4537:117;4646:1;4643;4636:12;4677:568;4750:8;4760:6;4810:3;4803:4;4795:6;4791:17;4787:27;4777:122;;4818:79;;:::i;:::-;4777:122;4931:6;4918:20;4908:30;;4961:18;4953:6;4950:30;4947:117;;;4983:79;;:::i;:::-;4947:117;5097:4;5089:6;5085:17;5073:29;;5151:3;5143:4;5135:6;5131:17;5121:8;5117:32;5114:41;5111:128;;;5158:79;;:::i;:::-;5111:128;4677:568;;;;;:::o;5251:126::-;5288:7;5328:42;5321:5;5317:54;5306:65;;5251:126;;;:::o;5383:96::-;5420:7;5449:24;5467:5;5449:24;:::i;:::-;5438:35;;5383:96;;;:::o;5485:122::-;5558:24;5576:5;5558:24;:::i;:::-;5551:5;5548:35;5538:63;;5597:1;5594;5587:12;5538:63;5485:122;:::o;5613:139::-;5659:5;5697:6;5684:20;5675:29;;5713:33;5740:5;5713:33;:::i;:::-;5613:139;;;;:::o;5758:101::-;5794:7;5834:18;5827:5;5823:30;5812:41;;5758:101;;;:::o;5865:120::-;5937:23;5954:5;5937:23;:::i;:::-;5930:5;5927:34;5917:62;;5975:1;5972;5965:12;5917:62;5865:120;:::o;5991:137::-;6036:5;6074:6;6061:20;6052:29;;6090:32;6116:5;6090:32;:::i;:::-;5991:137;;;;:::o;6134:90::-;6168:7;6211:5;6204:13;6197:21;6186:32;;6134:90;;;:::o;6230:116::-;6300:21;6315:5;6300:21;:::i;:::-;6293:5;6290:32;6280:60;;6336:1;6333;6326:12;6280:60;6230:116;:::o;6352:133::-;6395:5;6433:6;6420:20;6411:29;;6449:30;6473:5;6449:30;:::i;:::-;6352:133;;;;:::o;6491:1425::-;6627:6;6635;6643;6651;6659;6667;6675;6683;6732:3;6720:9;6711:7;6707:23;6703:33;6700:120;;;6739:79;;:::i;:::-;6700:120;6859:1;6884:53;6929:7;6920:6;6909:9;6905:22;6884:53;:::i;:::-;6874:63;;6830:117;6986:2;7012:53;7057:7;7048:6;7037:9;7033:22;7012:53;:::i;:::-;7002:63;;6957:118;7114:2;7140:53;7185:7;7176:6;7165:9;7161:22;7140:53;:::i;:::-;7130:63;;7085:118;7270:2;7259:9;7255:18;7242:32;7301:18;7293:6;7290:30;7287:117;;;7323:79;;:::i;:::-;7287:117;7436:80;7508:7;7499:6;7488:9;7484:22;7436:80;:::i;:::-;7418:98;;;;7213:313;7565:3;7592:53;7637:7;7628:6;7617:9;7613:22;7592:53;:::i;:::-;7582:63;;7536:119;7694:3;7721:52;7765:7;7756:6;7745:9;7741:22;7721:52;:::i;:::-;7711:62;;7665:118;7822:3;7849:50;7891:7;7882:6;7871:9;7867:22;7849:50;:::i;:::-;7839:60;;7793:116;6491:1425;;;;;;;;;;;:::o;7922:118::-;8009:24;8027:5;8009:24;:::i;:::-;8004:3;7997:37;7922:118;;:::o;8046:::-;8133:24;8151:5;8133:24;:::i;:::-;8128:3;8121:37;8046:118;;:::o;8170:332::-;8291:4;8329:2;8318:9;8314:18;8306:26;;8342:71;8410:1;8399:9;8395:17;8386:6;8342:71;:::i;:::-;8423:72;8491:2;8480:9;8476:18;8467:6;8423:72;:::i;:::-;8170:332;;;;;:::o;8508:77::-;8545:7;8574:5;8563:16;;8508:77;;;:::o;8591:122::-;8664:24;8682:5;8664:24;:::i;:::-;8657:5;8654:35;8644:63;;8703:1;8700;8693:12;8644:63;8591:122;:::o;8719:139::-;8765:5;8803:6;8790:20;8781:29;;8819:33;8846:5;8819:33;:::i;:::-;8719:139;;;;:::o;8864:109::-;8900:7;8940:26;8933:5;8929:38;8918:49;;8864:109;;;:::o;8979:120::-;9051:23;9068:5;9051:23;:::i;:::-;9044:5;9041:34;9031:62;;9089:1;9086;9079:12;9031:62;8979:120;:::o;9105:137::-;9150:5;9188:6;9175:20;9166:29;;9204:32;9230:5;9204:32;:::i;:::-;9105:137;;;;:::o;9262:553::-;9320:8;9330:6;9380:3;9373:4;9365:6;9361:17;9357:27;9347:122;;9388:79;;:::i;:::-;9347:122;9501:6;9488:20;9478:30;;9531:18;9523:6;9520:30;9517:117;;;9553:79;;:::i;:::-;9517:117;9667:4;9659:6;9655:17;9643:29;;9721:3;9713:4;9705:6;9701:17;9691:8;9687:32;9684:41;9681:128;;;9728:79;;:::i;:::-;9681:128;9262:553;;;;;:::o;9821:1693::-;9963:6;9971;9979;9987;9995;10003;10011;10019;10027;10035;10084:3;10072:9;10063:7;10059:23;10055:33;10052:120;;;10091:79;;:::i;:::-;10052:120;10211:1;10236:53;10281:7;10272:6;10261:9;10257:22;10236:53;:::i;:::-;10226:63;;10182:117;10338:2;10364:53;10409:7;10400:6;10389:9;10385:22;10364:53;:::i;:::-;10354:63;;10309:118;10466:2;10492:53;10537:7;10528:6;10517:9;10513:22;10492:53;:::i;:::-;10482:63;;10437:118;10594:2;10620:53;10665:7;10656:6;10645:9;10641:22;10620:53;:::i;:::-;10610:63;;10565:118;10722:3;10749:52;10793:7;10784:6;10773:9;10769:22;10749:52;:::i;:::-;10739:62;;10693:118;10850:3;10877:53;10922:7;10913:6;10902:9;10898:22;10877:53;:::i;:::-;10867:63;;10821:119;10979:3;11006:53;11051:7;11042:6;11031:9;11027:22;11006:53;:::i;:::-;10996:63;;10950:119;11108:3;11135:53;11180:7;11171:6;11160:9;11156:22;11135:53;:::i;:::-;11125:63;;11079:119;11265:3;11254:9;11250:19;11237:33;11297:18;11289:6;11286:30;11283:117;;;11319:79;;:::i;:::-;11283:117;11432:65;11489:7;11480:6;11469:9;11465:22;11432:65;:::i;:::-;11414:83;;;;11208:299;9821:1693;;;;;;;;;;;;;:::o;11520:222::-;11613:4;11651:2;11640:9;11636:18;11628:26;;11664:71;11732:1;11721:9;11717:17;11708:6;11664:71;:::i;:::-;11520:222;;;;:::o;11748:102::-;11789:6;11840:2;11836:7;11831:2;11824:5;11820:14;11816:28;11806:38;;11748:102;;;:::o;11856:180::-;11904:77;11901:1;11894:88;12001:4;11998:1;11991:15;12025:4;12022:1;12015:15;12042:281;12125:27;12147:4;12125:27;:::i;:::-;12117:6;12113:40;12255:6;12243:10;12240:22;12219:18;12207:10;12204:34;12201:62;12198:88;;;12266:18;;:::i;:::-;12198:88;12306:10;12302:2;12295:22;12085:238;12042:281;;:::o;12329:129::-;12363:6;12390:20;;:::i;:::-;12380:30;;12419:33;12447:4;12439:6;12419:33;:::i;:::-;12329:129;;;:::o;12464:340::-;12570:4;12660:18;12652:6;12649:30;12646:56;;;12682:18;;:::i;:::-;12646:56;12732:4;12724:6;12720:17;12712:25;;12792:4;12786;12782:15;12774:23;;12464:340;;;:::o;12810:117::-;12919:1;12916;12909:12;13105:578;13183:5;13227:4;13215:9;13210:3;13206:19;13202:30;13199:117;;;13235:79;;:::i;:::-;13199:117;13334:21;13350:4;13334:21;:::i;:::-;13325:30;;13414:1;13454:49;13499:3;13490:6;13479:9;13475:22;13454:49;:::i;:::-;13447:4;13440:5;13436:16;13429:75;13365:150;13574:2;13615:49;13660:3;13651:6;13640:9;13636:22;13615:49;:::i;:::-;13608:4;13601:5;13597:16;13590:75;13525:151;13105:578;;;;:::o;13740:797::-;13865:5;13890:110;13906:93;13992:6;13906:93;:::i;:::-;13890:110;:::i;:::-;13881:119;;14020:5;14049:6;14042:5;14035:21;14083:4;14076:5;14072:16;14065:23;;14136:4;14128:6;14124:17;14116:6;14112:30;14165:3;14157:6;14154:15;14151:122;;;14184:79;;:::i;:::-;14151:122;14299:6;14282:249;14316:6;14311:3;14308:15;14282:249;;;14391:3;14420:66;14482:3;14470:10;14420:66;:::i;:::-;14415:3;14408:79;14516:4;14511:3;14507:14;14500:21;;14358:173;14342:4;14337:3;14333:14;14326:21;;14282:249;;;14286:21;13871:666;;13740:797;;;;;:::o;14594:428::-;14694:5;14743:3;14736:4;14728:6;14724:17;14720:27;14710:122;;14751:79;;:::i;:::-;14710:122;14868:6;14855:20;14893:123;15012:3;15004:6;14997:4;14989:6;14985:17;14893:123;:::i;:::-;14884:132;;14700:322;14594:428;;;;:::o;15028:742::-;15150:6;15158;15207:2;15195:9;15186:7;15182:23;15178:32;15175:119;;;15213:79;;:::i;:::-;15175:119;15333:1;15358:53;15403:7;15394:6;15383:9;15379:22;15358:53;:::i;:::-;15348:63;;15304:117;15488:2;15477:9;15473:18;15460:32;15519:18;15511:6;15508:30;15505:117;;;15541:79;;:::i;:::-;15505:117;15646:107;15745:7;15736:6;15725:9;15721:22;15646:107;:::i;:::-;15636:117;;15431:332;15028:742;;;;;:::o;15776:98::-;15827:6;15861:5;15855:12;15845:22;;15776:98;;;:::o;15880:168::-;15963:11;15997:6;15992:3;15985:19;16037:4;16032:3;16028:14;16013:29;;15880:168;;;;:::o;16054:246::-;16135:1;16145:113;16159:6;16156:1;16153:13;16145:113;;;16244:1;16239:3;16235:11;16229:18;16225:1;16220:3;16216:11;16209:39;16181:2;16178:1;16174:10;16169:15;;16145:113;;;16292:1;16283:6;16278:3;16274:16;16267:27;16116:184;16054:246;;;:::o;16306:373::-;16392:3;16420:38;16452:5;16420:38;:::i;:::-;16474:70;16537:6;16532:3;16474:70;:::i;:::-;16467:77;;16553:65;16611:6;16606:3;16599:4;16592:5;16588:16;16553:65;:::i;:::-;16643:29;16665:6;16643:29;:::i;:::-;16638:3;16634:39;16627:46;;16396:283;16306:373;;;;:::o;16685:309::-;16796:4;16834:2;16823:9;16819:18;16811:26;;16883:9;16877:4;16873:20;16869:1;16858:9;16854:17;16847:47;16911:76;16982:4;16973:6;16911:76;:::i;:::-;16903:84;;16685:309;;;;:::o;17000:329::-;17059:6;17108:2;17096:9;17087:7;17083:23;17079:32;17076:119;;;17114:79;;:::i;:::-;17076:119;17234:1;17259:53;17304:7;17295:6;17284:9;17280:22;17259:53;:::i;:::-;17249:63;;17205:117;17000:329;;;;:::o;17335:109::-;17416:21;17431:5;17416:21;:::i;:::-;17411:3;17404:34;17335:109;;:::o;17450:210::-;17537:4;17575:2;17564:9;17560:18;17552:26;;17588:65;17650:1;17639:9;17635:17;17626:6;17588:65;:::i;:::-;17450:210;;;;:::o;17666:108::-;17743:24;17761:5;17743:24;:::i;:::-;17738:3;17731:37;17666:108;;:::o;17780:::-;17857:24;17875:5;17857:24;:::i;:::-;17852:3;17845:37;17780:108;;:::o;17894:105::-;17969:23;17986:5;17969:23;:::i;:::-;17964:3;17957:36;17894:105;;:::o;18005:99::-;18076:21;18091:5;18076:21;:::i;:::-;18071:3;18064:34;18005:99;;:::o;18166:1763::-;18309:6;18304:3;18300:16;18400:4;18393:5;18389:16;18383:23;18419:63;18476:4;18471:3;18467:14;18453:12;18419:63;:::i;:::-;18326:166;18575:4;18568:5;18564:16;18558:23;18594:63;18651:4;18646:3;18642:14;18628:12;18594:63;:::i;:::-;18502:165;18763:4;18756:5;18752:16;18746:23;18782:63;18839:4;18834:3;18830:14;18816:12;18782:63;:::i;:::-;18677:178;18942:4;18935:5;18931:16;18925:23;18961:63;19018:4;19013:3;19009:14;18995:12;18961:63;:::i;:::-;18865:169;19116:4;19109:5;19105:16;19099:23;19135:61;19190:4;19185:3;19181:14;19167:12;19135:61;:::i;:::-;19044:162;19295:4;19288:5;19284:16;19278:23;19314:57;19365:4;19360:3;19356:14;19342:12;19314:57;:::i;:::-;19216:165;19472:4;19465:5;19461:16;19455:23;19491:63;19548:4;19543:3;19539:14;19525:12;19491:63;:::i;:::-;19391:173;19652:4;19645:5;19641:16;19635:23;19671:61;19726:4;19721:3;19717:14;19703:12;19671:61;:::i;:::-;19574:168;19826:6;19819:5;19815:18;19809:25;19847:65;19904:6;19899:3;19895:16;19881:12;19847:65;:::i;:::-;19752:170;18278:1651;18166:1763;;:::o;19935:315::-;20074:4;20112:3;20101:9;20097:19;20089:27;;20126:117;20240:1;20229:9;20225:17;20216:6;20126:117;:::i;:::-;19935:315;;;;:::o;20256:474::-;20324:6;20332;20381:2;20369:9;20360:7;20356:23;20352:32;20349:119;;;20387:79;;:::i;:::-;20349:119;20507:1;20532:53;20577:7;20568:6;20557:9;20553:22;20532:53;:::i;:::-;20522:63;;20478:117;20634:2;20660:53;20705:7;20696:6;20685:9;20681:22;20660:53;:::i;:::-;20650:63;;20605:118;20256:474;;;;;:::o;20736:327::-;20794:6;20843:2;20831:9;20822:7;20818:23;20814:32;20811:119;;;20849:79;;:::i;:::-;20811:119;20969:1;20994:52;21038:7;21029:6;21018:9;21014:22;20994:52;:::i;:::-;20984:62;;20940:116;20736:327;;;;:::o;21175:531::-;21342:4;21337:3;21333:14;21429:4;21422:5;21418:16;21412:23;21448:63;21505:4;21500:3;21496:14;21482:12;21448:63;:::i;:::-;21357:164;21607:4;21600:5;21596:16;21590:23;21626:63;21683:4;21678:3;21674:14;21660:12;21626:63;:::i;:::-;21531:168;21311:395;21175:531;;:::o;21712:362::-;21875:4;21913:2;21902:9;21898:18;21890:26;;21926:141;22064:1;22053:9;22049:17;22040:6;21926:141;:::i;:::-;21712:362;;;;:::o;22080:222::-;22173:4;22211:2;22200:9;22196:18;22188:26;;22224:71;22292:1;22281:9;22277:17;22268:6;22224:71;:::i;:::-;22080:222;;;;:::o;22308:613::-;22382:6;22390;22398;22447:2;22435:9;22426:7;22422:23;22418:32;22415:119;;;22453:79;;:::i;:::-;22415:119;22573:1;22598:53;22643:7;22634:6;22623:9;22619:22;22598:53;:::i;:::-;22588:63;;22544:117;22700:2;22726:53;22771:7;22762:6;22751:9;22747:22;22726:53;:::i;:::-;22716:63;;22671:118;22828:2;22854:50;22896:7;22887:6;22876:9;22872:22;22854:50;:::i;:::-;22844:60;;22799:115;22308:613;;;;;:::o;22927:115::-;23012:23;23029:5;23012:23;:::i;:::-;23007:3;23000:36;22927:115;;:::o;23048:118::-;23135:24;23153:5;23135:24;:::i;:::-;23130:3;23123:37;23048:118;;:::o;23172:328::-;23291:4;23329:2;23318:9;23314:18;23306:26;;23342:69;23408:1;23397:9;23393:17;23384:6;23342:69;:::i;:::-;23421:72;23489:2;23478:9;23474:18;23465:6;23421:72;:::i;:::-;23172:328;;;;;:::o;23519:552::-;23576:8;23586:6;23636:3;23629:4;23621:6;23617:17;23613:27;23603:122;;23644:79;;:::i;:::-;23603:122;23757:6;23744:20;23734:30;;23787:18;23779:6;23776:30;23773:117;;;23809:79;;:::i;:::-;23773:117;23923:4;23915:6;23911:17;23899:29;;23977:3;23969:4;23961:6;23957:17;23947:8;23943:32;23940:41;23937:128;;;23984:79;;:::i;:::-;23937:128;23519:552;;;;;:::o;24077:527::-;24147:6;24155;24204:2;24192:9;24183:7;24179:23;24175:32;24172:119;;;24210:79;;:::i;:::-;24172:119;24358:1;24347:9;24343:17;24330:31;24388:18;24380:6;24377:30;24374:117;;;24410:79;;:::i;:::-;24374:117;24523:64;24579:7;24570:6;24559:9;24555:22;24523:64;:::i;:::-;24505:82;;;;24301:296;24077:527;;;;;:::o;24610:619::-;24687:6;24695;24703;24752:2;24740:9;24731:7;24727:23;24723:32;24720:119;;;24758:79;;:::i;:::-;24720:119;24878:1;24903:53;24948:7;24939:6;24928:9;24924:22;24903:53;:::i;:::-;24893:63;;24849:117;25005:2;25031:53;25076:7;25067:6;25056:9;25052:22;25031:53;:::i;:::-;25021:63;;24976:118;25133:2;25159:53;25204:7;25195:6;25184:9;25180:22;25159:53;:::i;:::-;25149:63;;25104:118;24610:619;;;;;:::o;25235:474::-;25303:6;25311;25360:2;25348:9;25339:7;25335:23;25331:32;25328:119;;;25366:79;;:::i;:::-;25328:119;25486:1;25511:53;25556:7;25547:6;25536:9;25532:22;25511:53;:::i;:::-;25501:63;;25457:117;25613:2;25639:53;25684:7;25675:6;25664:9;25660:22;25639:53;:::i;:::-;25629:63;;25584:118;25235:474;;;;;:::o;25715:180::-;25763:77;25760:1;25753:88;25860:4;25857:1;25850:15;25884:4;25881:1;25874:15;25901:169;25985:11;26019:6;26014:3;26007:19;26059:4;26054:3;26050:14;26035:29;;25901:169;;;;:::o;26076:164::-;26216:16;26212:1;26204:6;26200:14;26193:40;26076:164;:::o;26246:366::-;26388:3;26409:67;26473:2;26468:3;26409:67;:::i;:::-;26402:74;;26485:93;26574:3;26485:93;:::i;:::-;26603:2;26598:3;26594:12;26587:19;;26246:366;;;:::o;26618:419::-;26784:4;26822:2;26811:9;26807:18;26799:26;;26871:9;26865:4;26861:20;26857:1;26846:9;26842:17;26835:47;26899:131;27025:4;26899:131;:::i;:::-;26891:139;;26618:419;;;:::o;27043:164::-;27183:16;27179:1;27171:6;27167:14;27160:40;27043:164;:::o;27213:366::-;27355:3;27376:67;27440:2;27435:3;27376:67;:::i;:::-;27369:74;;27452:93;27541:3;27452:93;:::i;:::-;27570:2;27565:3;27561:12;27554:19;;27213:366;;;:::o;27585:419::-;27751:4;27789:2;27778:9;27774:18;27766:26;;27838:9;27832:4;27828:20;27824:1;27813:9;27809:17;27802:47;27866:131;27992:4;27866:131;:::i;:::-;27858:139;;27585:419;;;:::o;28010:180::-;28058:77;28055:1;28048:88;28155:4;28152:1;28145:15;28179:4;28176:1;28169:15;28196:216;28235:4;28255:19;28272:1;28255:19;:::i;:::-;28250:24;;28288:19;28305:1;28288:19;:::i;:::-;28283:24;;28331:1;28328;28324:9;28316:17;;28355:26;28349:4;28346:36;28343:62;;;28385:18;;:::i;:::-;28343:62;28196:216;;;;:::o;28418:332::-;28539:4;28577:2;28566:9;28562:18;28554:26;;28590:71;28658:1;28647:9;28643:17;28634:6;28590:71;:::i;:::-;28671:72;28739:2;28728:9;28724:18;28715:6;28671:72;:::i;:::-;28418:332;;;;;:::o;28756:137::-;28810:5;28841:6;28835:13;28826:22;;28857:30;28881:5;28857:30;:::i;:::-;28756:137;;;;:::o;28899:345::-;28966:6;29015:2;29003:9;28994:7;28990:23;28986:32;28983:119;;;29021:79;;:::i;:::-;28983:119;29141:1;29166:61;29219:7;29210:6;29199:9;29195:22;29166:61;:::i;:::-;29156:71;;29112:125;28899:345;;;;:::o;29250:60::-;29278:3;29299:5;29292:12;;29250:60;;;:::o;29316:138::-;29364:9;29397:51;29414:33;29423:23;29440:5;29423:23;:::i;:::-;29414:33;:::i;:::-;29397:51;:::i;:::-;29384:64;;29316:138;;;:::o;29460:127::-;29545:35;29574:5;29545:35;:::i;:::-;29540:3;29533:48;29460:127;;:::o;29593:438::-;29740:4;29778:2;29767:9;29763:18;29755:26;;29791:71;29859:1;29848:9;29844:17;29835:6;29791:71;:::i;:::-;29872:72;29940:2;29929:9;29925:18;29916:6;29872:72;:::i;:::-;29954:70;30020:2;30009:9;30005:18;29996:6;29954:70;:::i;:::-;29593:438;;;;;;:::o;30037:410::-;30077:7;30100:20;30118:1;30100:20;:::i;:::-;30095:25;;30134:20;30152:1;30134:20;:::i;:::-;30129:25;;30189:1;30186;30182:9;30211:30;30229:11;30211:30;:::i;:::-;30200:41;;30390:1;30381:7;30377:15;30374:1;30371:22;30351:1;30344:9;30324:83;30301:139;;30420:18;;:::i;:::-;30301:139;30085:362;30037:410;;;;:::o;30453:180::-;30501:77;30498:1;30491:88;30598:4;30595:1;30588:15;30622:4;30619:1;30612:15;30639:185;30679:1;30696:20;30714:1;30696:20;:::i;:::-;30691:25;;30730:20;30748:1;30730:20;:::i;:::-;30725:25;;30769:1;30759:35;;30774:18;;:::i;:::-;30759:35;30816:1;30813;30809:9;30804:14;;30639:185;;;;:::o;30830:166::-;30970:18;30966:1;30958:6;30954:14;30947:42;30830:166;:::o;31002:366::-;31144:3;31165:67;31229:2;31224:3;31165:67;:::i;:::-;31158:74;;31241:93;31330:3;31241:93;:::i;:::-;31359:2;31354:3;31350:12;31343:19;;31002:366;;;:::o;31374:419::-;31540:4;31578:2;31567:9;31563:18;31555:26;;31627:9;31621:4;31617:20;31613:1;31602:9;31598:17;31591:47;31655:131;31781:4;31655:131;:::i;:::-;31647:139;;31374:419;;;:::o;31799:442::-;31948:4;31986:2;31975:9;31971:18;31963:26;;31999:71;32067:1;32056:9;32052:17;32043:6;31999:71;:::i;:::-;32080:72;32148:2;32137:9;32133:18;32124:6;32080:72;:::i;:::-;32162;32230:2;32219:9;32215:18;32206:6;32162:72;:::i;:::-;31799:442;;;;;;:::o;32247:233::-;32286:3;32309:24;32327:5;32309:24;:::i;:::-;32300:33;;32355:66;32348:5;32345:77;32342:103;;32425:18;;:::i;:::-;32342:103;32472:1;32465:5;32461:13;32454:20;;32247:233;;;:::o;32486:140::-;32535:9;32568:52;32586:33;32595:23;32612:5;32595:23;:::i;:::-;32586:33;:::i;:::-;32568:52;:::i;:::-;32555:65;;32486:140;;;:::o;32632:129::-;32718:36;32748:5;32718:36;:::i;:::-;32713:3;32706:49;32632:129;;:::o;32767:146::-;32864:6;32859:3;32854;32841:30;32905:1;32896:6;32891:3;32887:16;32880:27;32767:146;;;:::o;32943:317::-;33041:3;33062:71;33126:6;33121:3;33062:71;:::i;:::-;33055:78;;33143:56;33192:6;33187:3;33180:5;33143:56;:::i;:::-;33224:29;33246:6;33224:29;:::i;:::-;33219:3;33215:39;33208:46;;32943:317;;;;;:::o;33266:662::-;33472:4;33510:3;33499:9;33495:19;33487:27;;33524:70;33591:1;33580:9;33576:17;33567:6;33524:70;:::i;:::-;33604:72;33672:2;33661:9;33657:18;33648:6;33604:72;:::i;:::-;33686;33754:2;33743:9;33739:18;33730:6;33686:72;:::i;:::-;33805:9;33799:4;33795:20;33790:2;33779:9;33775:18;33768:48;33833:88;33916:4;33907:6;33899;33833:88;:::i;:::-;33825:96;;33266:662;;;;;;;;:::o;33934:180::-;33982:77;33979:1;33972:88;34079:4;34076:1;34069:15;34103:4;34100:1;34093:15;34120:320;34164:6;34201:1;34195:4;34191:12;34181:22;;34248:1;34242:4;34238:12;34269:18;34259:81;;34325:4;34317:6;34313:17;34303:27;;34259:81;34387:2;34379:6;34376:14;34356:18;34353:38;34350:84;;34406:18;;:::i;:::-;34350:84;34171:269;34120:320;;;:::o;34446:172::-;34586:24;34582:1;34574:6;34570:14;34563:48;34446:172;:::o;34624:366::-;34766:3;34787:67;34851:2;34846:3;34787:67;:::i;:::-;34780:74;;34863:93;34952:3;34863:93;:::i;:::-;34981:2;34976:3;34972:12;34965:19;;34624:366;;;:::o;34996:419::-;35162:4;35200:2;35189:9;35185:18;35177:26;;35249:9;35243:4;35239:20;35235:1;35224:9;35220:17;35213:47;35277:131;35403:4;35277:131;:::i;:::-;35269:139;;34996:419;;;:::o;35421:218::-;35512:4;35550:2;35539:9;35535:18;35527:26;;35563:69;35629:1;35618:9;35614:17;35605:6;35563:69;:::i;:::-;35421:218;;;;:::o;35645:430::-;35788:4;35826:2;35815:9;35811:18;35803:26;;35839:71;35907:1;35896:9;35892:17;35883:6;35839:71;:::i;:::-;35920:72;35988:2;35977:9;35973:18;35964:6;35920:72;:::i;:::-;36002:66;36064:2;36053:9;36049:18;36040:6;36002:66;:::i;:::-;35645:430;;;;;;:::o;36081:233::-;36221:34;36217:1;36209:6;36205:14;36198:58;36290:16;36285:2;36277:6;36273:15;36266:41;36081:233;:::o;36320:366::-;36462:3;36483:67;36547:2;36542:3;36483:67;:::i;:::-;36476:74;;36559:93;36648:3;36559:93;:::i;:::-;36677:2;36672:3;36668:12;36661:19;;36320:366;;;:::o;36692:419::-;36858:4;36896:2;36885:9;36881:18;36873:26;;36945:9;36939:4;36935:20;36931:1;36920:9;36916:17;36909:47;36973:131;37099:4;36973:131;:::i;:::-;36965:139;;36692:419;;;:::o;37117:85::-;37162:7;37191:5;37180:16;;37117:85;;;:::o;37208:86::-;37243:7;37283:4;37276:5;37272:16;37261:27;;37208:86;;;:::o;37300:154::-;37356:9;37389:59;37405:42;37414:32;37440:5;37414:32;:::i;:::-;37405:42;:::i;:::-;37389:59;:::i;:::-;37376:72;;37300:154;;;:::o;37460:143::-;37553:43;37590:5;37553:43;:::i;:::-;37548:3;37541:56;37460:143;;:::o;37609:234::-;37708:4;37746:2;37735:9;37731:18;37723:26;;37759:77;37833:1;37822:9;37818:17;37809:6;37759:77;:::i;:::-;37609:234;;;;:::o;37849:96::-;37907:6;37935:3;37925:13;;37849:96;;;;:::o;37951:140::-;37999:4;38022:3;38014:11;;38045:3;38042:1;38035:14;38079:4;38076:1;38066:18;38058:26;;37951:140;;;:::o;38097:93::-;38134:6;38181:2;38176;38169:5;38165:14;38161:23;38151:33;;38097:93;;;:::o;38196:107::-;38240:8;38290:5;38284:4;38280:16;38259:37;;38196:107;;;;:::o;38309:393::-;38378:6;38428:1;38416:10;38412:18;38451:97;38481:66;38470:9;38451:97;:::i;:::-;38569:39;38599:8;38588:9;38569:39;:::i;:::-;38557:51;;38641:4;38637:9;38630:5;38626:21;38617:30;;38690:4;38680:8;38676:19;38669:5;38666:30;38656:40;;38385:317;;38309:393;;;;;:::o;38708:142::-;38758:9;38791:53;38809:34;38818:24;38836:5;38818:24;:::i;:::-;38809:34;:::i;:::-;38791:53;:::i;:::-;38778:66;;38708:142;;;:::o;38856:75::-;38899:3;38920:5;38913:12;;38856:75;;;:::o;38937:269::-;39047:39;39078:7;39047:39;:::i;:::-;39108:91;39157:41;39181:16;39157:41;:::i;:::-;39149:6;39142:4;39136:11;39108:91;:::i;:::-;39102:4;39095:105;39013:193;38937:269;;;:::o;39212:73::-;39257:3;39212:73;:::o;39291:189::-;39368:32;;:::i;:::-;39409:65;39467:6;39459;39453:4;39409:65;:::i;:::-;39344:136;39291:189;;:::o;39486:186::-;39546:120;39563:3;39556:5;39553:14;39546:120;;;39617:39;39654:1;39647:5;39617:39;:::i;:::-;39590:1;39583:5;39579:13;39570:22;;39546:120;;;39486:186;;:::o;39678:541::-;39778:2;39773:3;39770:11;39767:445;;;39812:37;39843:5;39812:37;:::i;:::-;39895:29;39913:10;39895:29;:::i;:::-;39885:8;39881:44;40078:2;40066:10;40063:18;40060:49;;;40099:8;40084:23;;40060:49;40122:80;40178:22;40196:3;40178:22;:::i;:::-;40168:8;40164:37;40151:11;40122:80;:::i;:::-;39782:430;;39767:445;39678:541;;;:::o;40225:117::-;40279:8;40329:5;40323:4;40319:16;40298:37;;40225:117;;;;:::o;40348:169::-;40392:6;40425:51;40473:1;40469:6;40461:5;40458:1;40454:13;40425:51;:::i;:::-;40421:56;40506:4;40500;40496:15;40486:25;;40399:118;40348:169;;;;:::o;40522:295::-;40598:4;40744:29;40769:3;40763:4;40744:29;:::i;:::-;40736:37;;40806:3;40803:1;40799:11;40793:4;40790:21;40782:29;;40522:295;;;;:::o;40822:1398::-;40944:43;40983:3;40978;40944:43;:::i;:::-;41052:18;41044:6;41041:30;41038:56;;;41074:18;;:::i;:::-;41038:56;41118:38;41150:4;41144:11;41118:38;:::i;:::-;41203:66;41262:6;41254;41248:4;41203:66;:::i;:::-;41296:1;41325:2;41317:6;41314:14;41342:1;41337:631;;;;42012:1;42029:6;42026:84;;;42085:9;42080:3;42076:19;42063:33;42054:42;;42026:84;42136:67;42196:6;42189:5;42136:67;:::i;:::-;42130:4;42123:81;41985:229;41307:907;;41337:631;41389:4;41385:9;41377:6;41373:22;41423:36;41454:4;41423:36;:::i;:::-;41481:1;41495:215;41509:7;41506:1;41503:14;41495:215;;;41595:9;41590:3;41586:19;41573:33;41565:6;41558:49;41646:1;41638:6;41634:14;41624:24;;41693:2;41682:9;41678:18;41665:31;;41532:4;41529:1;41525:12;41520:17;;41495:215;;;41738:6;41729:7;41726:19;41723:186;;;41803:9;41798:3;41794:19;41781:33;41846:48;41888:4;41880:6;41876:17;41865:9;41846:48;:::i;:::-;41838:6;41831:64;41746:163;41723:186;41955:1;41951;41943:6;41939:14;41935:22;41929:4;41922:36;41344:624;;;41307:907;;40919:1301;;;40822:1398;;;:::o;42248:314::-;42344:3;42365:70;42428:6;42423:3;42365:70;:::i;:::-;42358:77;;42445:56;42494:6;42489:3;42482:5;42445:56;:::i;:::-;42526:29;42548:6;42526:29;:::i;:::-;42521:3;42517:39;42510:46;;42248:314;;;;;:::o;42568:329::-;42689:4;42727:2;42716:9;42712:18;42704:26;;42776:9;42770:4;42766:20;42762:1;42751:9;42747:17;42740:47;42804:86;42885:4;42876:6;42868;42804:86;:::i;:::-;42796:94;;42568:329;;;;;:::o;42903:225::-;43043:34;43039:1;43031:6;43027:14;43020:58;43112:8;43107:2;43099:6;43095:15;43088:33;42903:225;:::o;43134:366::-;43276:3;43297:67;43361:2;43356:3;43297:67;:::i;:::-;43290:74;;43373:93;43462:3;43373:93;:::i;:::-;43491:2;43486:3;43482:12;43475:19;;43134:366;;;:::o;43506:419::-;43672:4;43710:2;43699:9;43695:18;43687:26;;43759:9;43753:4;43749:20;43745:1;43734:9;43730:17;43723:47;43787:131;43913:4;43787:131;:::i;:::-;43779:139;;43506:419;;;:::o;43931:194::-;43971:4;43991:20;44009:1;43991:20;:::i;:::-;43986:25;;44025:20;44043:1;44025:20;:::i;:::-;44020:25;;44069:1;44066;44062:9;44054:17;;44093:1;44087:4;44084:11;44081:37;;;44098:18;;:::i;:::-;44081:37;43931:194;;;;:::o;44131:191::-;44171:3;44190:20;44208:1;44190:20;:::i;:::-;44185:25;;44224:20;44242:1;44224:20;:::i;:::-;44219:25;;44267:1;44264;44260:9;44253:16;;44288:3;44285:1;44282:10;44279:36;;;44295:18;;:::i;:::-;44279:36;44131:191;;;;:::o;44328:167::-;44468:19;44464:1;44456:6;44452:14;44445:43;44328:167;:::o;44501:366::-;44643:3;44664:67;44728:2;44723:3;44664:67;:::i;:::-;44657:74;;44740:93;44829:3;44740:93;:::i;:::-;44858:2;44853:3;44849:12;44842:19;;44501:366;;;:::o;44873:419::-;45039:4;45077:2;45066:9;45062:18;45054:26;;45126:9;45120:4;45116:20;45112:1;45101:9;45097:17;45090:47;45154:131;45280:4;45154:131;:::i;:::-;45146:139;;44873:419;;;:::o;45298:162::-;45438:14;45434:1;45426:6;45422:14;45415:38;45298:162;:::o;45466:366::-;45608:3;45629:67;45693:2;45688:3;45629:67;:::i;:::-;45622:74;;45705:93;45794:3;45705:93;:::i;:::-;45823:2;45818:3;45814:12;45807:19;;45466:366;;;:::o;45838:419::-;46004:4;46042:2;46031:9;46027:18;46019:26;;46091:9;46085:4;46081:20;46077:1;46066:9;46062:17;46055:47;46119:131;46245:4;46119:131;:::i;:::-;46111:139;;45838:419;;;:::o;46263:166::-;46403:18;46399:1;46391:6;46387:14;46380:42;46263:166;:::o;46435:366::-;46577:3;46598:67;46662:2;46657:3;46598:67;:::i;:::-;46591:74;;46674:93;46763:3;46674:93;:::i;:::-;46792:2;46787:3;46783:12;46776:19;;46435:366;;;:::o;46807:419::-;46973:4;47011:2;47000:9;46996:18;46988:26;;47060:9;47054:4;47050:20;47046:1;47035:9;47031:17;47024:47;47088:131;47214:4;47088:131;:::i;:::-;47080:139;;46807:419;;;:::o;47232:172::-;47372:24;47368:1;47360:6;47356:14;47349:48;47232:172;:::o;47410:366::-;47552:3;47573:67;47637:2;47632:3;47573:67;:::i;:::-;47566:74;;47649:93;47738:3;47649:93;:::i;:::-;47767:2;47762:3;47758:12;47751:19;;47410:366;;;:::o;47782:419::-;47948:4;47986:2;47975:9;47971:18;47963:26;;48035:9;48029:4;48025:20;48021:1;48010:9;48006:17;47999:47;48063:131;48189:4;48063:131;:::i;:::-;48055:139;;47782:419;;;:::o;48207:182::-;48347:34;48343:1;48335:6;48331:14;48324:58;48207:182;:::o;48395:366::-;48537:3;48558:67;48622:2;48617:3;48558:67;:::i;:::-;48551:74;;48634:93;48723:3;48634:93;:::i;:::-;48752:2;48747:3;48743:12;48736:19;;48395:366;;;:::o;48767:419::-;48933:4;48971:2;48960:9;48956:18;48948:26;;49020:9;49014:4;49010:20;49006:1;48995:9;48991:17;48984:47;49048:131;49174:4;49048:131;:::i;:::-;49040:139;;48767:419;;;:::o;49192:230::-;49332:34;49328:1;49320:6;49316:14;49309:58;49401:13;49396:2;49388:6;49384:15;49377:38;49192:230;:::o;49428:366::-;49570:3;49591:67;49655:2;49650:3;49591:67;:::i;:::-;49584:74;;49667:93;49756:3;49667:93;:::i;:::-;49785:2;49780:3;49776:12;49769:19;;49428:366;;;:::o;49800:419::-;49966:4;50004:2;49993:9;49989:18;49981:26;;50053:9;50047:4;50043:20;50039:1;50028:9;50024:17;50017:47;50081:131;50207:4;50081:131;:::i;:::-;50073:139;;49800:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3183000","executionCost":"infinite","totalCost":"infinite"},"external":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"infinite","getAggregator()":"infinite","getAggregatorAddress()":"2632","getFeeDetails()":"4782","getOrderInfo(bytes32)":"infinite","getSupportedInstitutionName(bytes32)":"infinite","getSupportedInstitutions(bytes32)":"infinite","getWhitelistedStatus(address)":"2927","initialize(address)":"187287","isTokenSupported(address)":"2928","owner()":"2567","refund(bytes32,bytes32)":"infinite","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)":"infinite","transferOwnership(address)":"30876","updateProtocolAddresses(bytes32,address)":"51646","updateProtocolAggregator(bytes)":"infinite","updateProtocolFees(uint64)":"infinite","withdraw(address,address,uint256)":"infinite"},"internal":{"_calculateFees(bytes32,uint96,bool)":"infinite","_handler(address,uint256,address,address,bytes32)":"infinite","transferSenderFee(bytes32)":"infinite"}},"methodIdentifiers":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"2654ec7e","getAggregator()":"3ad59dbc","getAggregatorAddress()":"e8d6e0de","getFeeDetails()":"b810c636","getOrderInfo(bytes32)":"768c6ec0","getSupportedInstitutionName(bytes32)":"87490d86","getSupportedInstitutions(bytes32)":"02621338","getWhitelistedStatus(address)":"d8e8de34","initialize(address)":"c4d66de8","isTokenSupported(address)":"75151b63","owner()":"8da5cb5b","refund(bytes32,bytes32)":"e4683a79","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)":"137764fb","transferOwnership(address)":"f2fde38b","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolAggregator(bytes)":"cb79455b","updateProtocolFees(uint64)":"84630736","withdraw(address,address,uint256)":"d9caed12"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isPartner\",\"type\":\"bool\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Refunded(bytes32,bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"RewardValidator(address,uint256)\":{\"details\":\"Emitted when primary validator get therir rewards.\"},\"Settled(bytes32,bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {createOrder-IPaycrest}. \"},\"getAggregator()\":{\"details\":\"See {getAggregator-IPaycrest}. \"},\"getAggregatorAddress()\":{\"details\":\"See {getAggregatorAddress-IPaycrest}. \"},\"getFeeDetails()\":{\"details\":\"See {getFeeDetails-IPaycrest}. \"},\"getOrderInfo(bytes32)\":{\"details\":\"See {getOrderInfo-IPaycrest}. \"},\"getSupportedInstitutionName(bytes32)\":{\"details\":\"See {getSupportedInstitutionName-IPaycrest}. \"},\"getWhitelistedStatus(address)\":{\"details\":\"See {getWhitelistedStatus-IPaycrest}. \"},\"isTokenSupported(address)\":{\"details\":\"See {isTokenSupported-IPaycrest}. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refund(bytes32,bytes32)\":{\"details\":\"See {refund-IPaycrest}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)\":{\"details\":\"See {settle-IPaycrest}. \"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paycrest.sol\":\"Paycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Paycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {PaycrestSettingManager} from \\\"./PaycrestSettingManager.sol\\\";\\nimport {IPaycrest, IERC20} from \\\"./interface/IPaycrest.sol\\\";\\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \\n    using SafeERC20Upgradeable for IERC20;\\n    using ECDSAUpgradeable for bytes32;\\n    struct fee {\\n        uint256 protocolFee;\\n        uint256 liquidityProviderAmount;\\n    }\\n    mapping(bytes32 => Order) private order;\\n    mapping(address => uint256) private _nonce;\\n    uint256[50] private __gap;\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _usdc) external initializer {    \\n        _isTokenSupported[_usdc] = true;   \\n        MAX_BPS = 100_000; \\n        protocolFeePercent = 5000; // 5%\\n        __Ownable_init();\\n    }\\n\\n    modifier onlyAggregator {\\n        require(msg.sender == _aggregatorAddress, \\\"OnlyAggregator\\\");\\n        _;\\n    }\\n    \\n    /* ##################################################################\\n                                USER CALLS\\n    ################################################################## */\\n    /** @dev See {createOrder-IPaycrest}. */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    )  external returns(bytes32 orderId) {\\n        // checks that are required\\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\\n        // require that sender fee is less than protocol fee\\n        require(_senderFee <= (_amount * protocolFeePercent) / MAX_BPS, \\\"SenderFeeTooHigh\\\");\\n        // first transfer token from msg.sender\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        // increase users nonce to avoid replay attacks\\n        _nonce[msg.sender] ++;\\n        // @chibie @5ran6\\n        // @todo sender fee should have limit, let say the maximum amount of sender fee should be 1% of the amount\\n        // generate transaction id for the transaction\\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\\n        // update transaction\\n        order[orderId] = Order({\\n            seller: msg.sender,\\n            token: _token,\\n            senderFeeRecipient: _senderFeeRecipient,\\n            senderFee: _senderFee,\\n            rate: _rate,\\n            isFulfilled: false,\\n            refundAddress: _refundAddress,\\n            currentBPS: uint64(MAX_BPS),\\n            amount: _amount\\n        });\\n        // emit deposit event\\n        emit Deposit(_token, _amount, orderId, _rate, _institutionCode, _label, messageHash);\\n    }\\n\\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\\n        // use require for all the custom errors\\n        require(_isTokenSupported[_token], \\\"TokenNotSupported\\\");\\n        require(_amount > 0, \\\"AmountIsZero\\\");\\n        require(_refundAddress != address(0), \\\"ThrowZeroAddress\\\");\\n        require(_senderFeeRecipient != address(0), \\\"ThrowZeroAddress\\\");\\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \\\"InvalidInstitutionCode\\\");\\n    }\\n\\n    /* ##################################################################\\n                                AGGREGATOR FUNCTIONS\\n    ################################################################## */\\n    /** @dev See {settle-IPaycrest}. */\\n    function settle(\\n        bytes32 _splitOrderId,\\n        bytes32 _orderId, \\n        bytes32 _label,\\n        address[] calldata _validators, \\n        address _liquidityProvider, \\n        uint64 _settlePercent,\\n        bool _isPartner\\n        )  external onlyAggregator() returns(bytes32, address) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n        // load the token into memory\\n        address token = order[_orderId].token;\\n        // substract sum of amount based on the input _settlePercent\\n        order[_orderId].currentBPS -= _settlePercent;\\n        // if transaction amount is zero\\n        // load the fees and transfer associated protocol fees to protocol fee recipient\\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent, _isPartner);\\n        if(order[_orderId].currentBPS == 0) {\\n            // update the transaction to be fulfilled\\n            order[_orderId].isFulfilled = true;\\n            if (order[_orderId].senderFee > 0) {\\n                // transfer sender fee\\n                transferSenderFee(_orderId);\\n            }\\n        }\\n        \\n        if (_feeParams.protocolFee > 0) {\\n            // transfer protocol fee\\n            IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\\n        }\\n        // // transfer to liquidity provider \\n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\\n\\n        // emit event\\n        emit Settled(_splitOrderId, _orderId, _label,  _liquidityProvider, _settlePercent);\\n        return (_orderId, token);\\n    }\\n\\n    function transferSenderFee(bytes32 _orderId) internal {\\n        address recipient = order[_orderId].senderFeeRecipient;\\n        uint256 _fee = order[_orderId].senderFee;\\n        // transfer sender fee\\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\\n        // emmit event\\n        emit TransferSenderFee(recipient, _fee);\\n    }\\n\\n    /** @dev See {refund-IPaycrest}. */\\n    function refund(bytes32 _orderId, bytes32 _label)  external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n        // reser state values\\n        order[_orderId].isFulfilled = true;\\n        order[_orderId].currentBPS = 0;\\n        // transfer to seller \\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\\n        // emit\\n        emit Refunded(_orderId, _label);\\n        return true;\\n    }\\n\\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent, bool _isPartner) private view returns(fee memory _feeParams ) {\\n        // get the total amount associated with the orderId\\n        uint256 amount = order[_orderId].amount;\\n        // get sender fee from amount\\n        amount = amount - order[_orderId].senderFee;\\n        // get the settled percent that is scheduled for this amount\\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\\n        // deduct protocol fees from the new total amount\\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \\n        // substract total fees from the new amount after getting the scheduled amount\\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\\n        // if (_isPartner) protocol fee should be 0, and the whole protocol fee should be added to liquidity provider\\n        if (_isPartner) {\\n            _feeParams.liquidityProviderAmount += _feeParams.protocolFee;\\n            _feeParams.protocolFee = 0;\\n        }\\n    }\\n    \\n    /* ##################################################################\\n                                VIEW CALLS\\n    ################################################################## */\\n    /** @dev See {getOrderInfo-IPaycrest}. */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\\n        return order[_orderId];\\n    }\\n\\n    /** @dev See {isTokenSupported-IPaycrest}. */\\n    function isTokenSupported(address _token) external view returns(bool) {\\n        return _isTokenSupported[_token];\\n    }\\n\\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\\n        return supportedInstitutionsByCode[code];\\n    }\\n\\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\\n        Institution[] memory institutions = supportedInstitutions[currency];\\n        uint256 length = institutions.length;\\n        Institution[] memory result = new Institution[](length);\\n        \\n        for (uint256 i = 0; i < length; ) {\\n            result[i] = institutions[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n\\n    /** @dev See {getFeeDetails-IPaycrest}. */\\n    function getFeeDetails() external view returns(\\n        uint64, \\n        uint256\\n    ) {\\n        return(protocolFeePercent, MAX_BPS);\\n    }\\n\\n    /** @dev See {getAggregatorAddress-IPaycrest}. */\\n    function getAggregatorAddress() external view returns(address) {\\n        return _aggregatorAddress;\\n    }\\n\\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\\n    function getWhitelistedStatus(address sender) external view returns(bool) {\\n        return _isWhitelisted[sender];\\n    }\\n\\n    /** @dev See {getAggregator-IPaycrest}. */\\n    function getAggregator() external view returns(bytes memory) {\\n        return _aggregator;\\n    }\\n\\n\\n    // DECLARE A FUNCTION TO WITHDRAW ANY TOKEN FROM CONTRACT CAN ONLY NE CALLED BY OWNER\\n    function withdraw(address _token, address _recipient, uint256 _amount) external onlyOwner {\\n        IERC20(_token).transfer(_recipient, _amount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc1e0969044908481acc04b324fc755dd480cef392a7da363b7e1cc0257778035\",\"license\":\"UNLICENSED\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS;\\n    uint64 internal protocolFeePercent; // 5%\\n    address internal feeRecipient;\\n    address internal _aggregatorAddress;\\n    bytes internal _aggregator;\\n    \\n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n    uint256[50] private __gap;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event PaycrestFees(uint64 protocolFee);\\n    event SetAggregator(bytes aggregator);\\n    event SetFeeRecipient(address feeRecipient);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        emit PaycrestFees(_protocolFeePercent);\\n    }\\n\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _aggregatorAddress = value;\\n    }\\n\\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\\n        _aggregator = aggregator;\\n        emit SetAggregator(aggregator);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa7a73992f19899060ce30182c809c3bd02ce01e4675de7e0ddd1701deccb25f9\",\"license\":\"UNLICENSED\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId, bytes32 label);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n    /// @dev Emitted when primary validator get therir rewards.\\n    event RewardValidator(address indexed validator, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _institutionCode institution code of the sender.\\n    /// @param _label reference of the sender.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @param _validators arrays of secondary validators.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @param _isPartner is the liquidity provider a partner.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address[] calldata _validators, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId, bytes32 _label)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `Aggregator`.\\n    function getAggregatorAddress() external view returns(address);\\n\\n    /// @notice get aggregator public key.\\n    /// @return aggregator public key.\\n    function getAggregator() external view returns(bytes memory);\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x00812f530758d6736a16754a83c21f42c344651238f845ada8b6d996c7d2c051\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1161,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/Paycrest.sol:Paycrest","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3536,"contract":"contracts/Paycrest.sol:Paycrest","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":3538,"contract":"contracts/Paycrest.sol:Paycrest","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":3540,"contract":"contracts/Paycrest.sol:Paycrest","label":"feeRecipient","offset":8,"slot":"102","type":"t_address"},{"astId":3542,"contract":"contracts/Paycrest.sol:Paycrest","label":"_aggregatorAddress","offset":0,"slot":"103","type":"t_address"},{"astId":3544,"contract":"contracts/Paycrest.sol:Paycrest","label":"_aggregator","offset":0,"slot":"104","type":"t_bytes_storage"},{"astId":3548,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)50_storage"},{"astId":3552,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isTokenSupported","offset":0,"slot":"155","type":"t_mapping(t_address,t_bool)"},{"astId":3556,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isWhitelisted","offset":0,"slot":"156","type":"t_mapping(t_address,t_bool)"},{"astId":3562,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutions","offset":0,"slot":"157","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)3529_storage)dyn_storage)"},{"astId":3567,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutionsByCode","offset":0,"slot":"158","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)3534_storage)"},{"astId":2836,"contract":"contracts/Paycrest.sol:Paycrest","label":"order","offset":0,"slot":"159","type":"t_mapping(t_bytes32,t_struct(Order)3844_storage)"},{"astId":2840,"contract":"contracts/Paycrest.sol:Paycrest","label":"_nonce","offset":0,"slot":"160","type":"t_mapping(t_address,t_uint256)"},{"astId":2844,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"161","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)3529_storage)dyn_storage":{"base":"t_struct(Institution)3529_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_array(t_struct(Institution)3529_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)3529_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)3534_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)3534_storage"},"t_mapping(t_bytes32,t_struct(Order)3844_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IPaycrest.Order)","numberOfBytes":"32","value":"t_struct(Order)3844_storage"},"t_struct(Institution)3529_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":3526,"contract":"contracts/Paycrest.sol:Paycrest","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3528,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)3534_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":3531,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3533,"contract":"contracts/Paycrest.sol:Paycrest","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Order)3844_storage":{"encoding":"inplace","label":"struct IPaycrest.Order","members":[{"astId":3827,"contract":"contracts/Paycrest.sol:Paycrest","label":"seller","offset":0,"slot":"0","type":"t_address"},{"astId":3829,"contract":"contracts/Paycrest.sol:Paycrest","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":3831,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFeeRecipient","offset":0,"slot":"2","type":"t_address"},{"astId":3833,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFee","offset":0,"slot":"3","type":"t_uint256"},{"astId":3835,"contract":"contracts/Paycrest.sol:Paycrest","label":"rate","offset":0,"slot":"4","type":"t_uint96"},{"astId":3837,"contract":"contracts/Paycrest.sol:Paycrest","label":"isFulfilled","offset":12,"slot":"4","type":"t_bool"},{"astId":3839,"contract":"contracts/Paycrest.sol:Paycrest","label":"refundAddress","offset":0,"slot":"5","type":"t_address"},{"astId":3841,"contract":"contracts/Paycrest.sol:Paycrest","label":"currentBPS","offset":20,"slot":"5","type":"t_uint96"},{"astId":3843,"contract":"contracts/Paycrest.sol:Paycrest","label":"amount","offset":0,"slot":"6","type":"t_uint256"}],"numberOfBytes":"224"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/PaycrestSettingManager.sol":{"PaycrestSettingManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"protocolFee","type":"uint64"}],"name":"PaycrestFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"SetAggregator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"feeRecipient","type":"address"}],"name":"SetFeeRecipient","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"aggregator","type":"bytes"}],"name":"updateProtocolAggregator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_protocolFeePercent","type":"uint64"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b506112ec806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb57806399e3c0b414610109578063cb79455b14610125578063f2fde38b1461014157610088565b8063322008821461008d578063715018a6146100a957806379a0effb146100b357806384630736146100cf575b600080fd5b6100a760048036038101906100a29190610a3a565b61015d565b005b6100b1610271565b005b6100cd60048036038101906100c89190610af4565b610285565b005b6100e960048036038101906100e49190610b74565b6103d2565b005b6100f361043d565b6040516101009190610bb0565b60405180910390f35b610123600480360381019061011e9190610c03565b610467565b005b61013f600480360381019061013a9190610cb1565b61061c565b005b61015b60048036038101906101569190610cfe565b610673565b005b6101656106f6565b60008151905060005b8181101561026b57609d600085815260200190815260200160002083828151811061019c5761019b610d2b565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050604051806040016040528084838151811061020157610200610d2b565b5b602002602001015160200151815260200185815250609e600085848151811061022d5761022c610d2b565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061016e565b50505050565b6102796106f6565b6102836000610774565b565b61028d6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610db7565b60405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036103655780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036103ce5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6103da6106f6565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc8ca786c100bc62a0dffbe768b5f0b770d84e8604c5de54b54197b9066bb42a9816040516104329190610de6565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61046f6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d590610db7565b60405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361055d5780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036105dc5780609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161060f93929190610e1f565b60405180910390a1505050565b6106246106f6565b818160689182610635929190611077565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef8282604051610667929190611194565b60405180910390a15050565b61067b6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e19061122a565b60405180910390fd5b6106f381610774565b50565b6106fe61083a565b73ffffffffffffffffffffffffffffffffffffffff1661071c61043d565b73ffffffffffffffffffffffffffffffffffffffff1614610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076990611296565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61086981610856565b811461087457600080fd5b50565b60008135905061088681610860565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108da82610891565b810181811067ffffffffffffffff821117156108f9576108f86108a2565b5b80604052505050565b600061090c610842565b905061091882826108d1565b919050565b600067ffffffffffffffff821115610938576109376108a2565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156109695761096861094e565b5b6109736040610902565b9050600061098384828501610877565b600083015250602061099784828501610877565b60208301525092915050565b60006109b66109b18461091d565b610902565b905080838252602082019050604084028301858111156109d9576109d8610949565b5b835b81811015610a0257806109ee8882610953565b8452602084019350506040810190506109db565b5050509392505050565b600082601f830112610a2157610a2061088c565b5b8135610a318482602086016109a3565b91505092915050565b60008060408385031215610a5157610a5061084c565b5b6000610a5f85828601610877565b925050602083013567ffffffffffffffff811115610a8057610a7f610851565b5b610a8c85828601610a0c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac182610a96565b9050919050565b610ad181610ab6565b8114610adc57600080fd5b50565b600081359050610aee81610ac8565b92915050565b60008060408385031215610b0b57610b0a61084c565b5b6000610b1985828601610877565b9250506020610b2a85828601610adf565b9150509250929050565b600067ffffffffffffffff82169050919050565b610b5181610b34565b8114610b5c57600080fd5b50565b600081359050610b6e81610b48565b92915050565b600060208284031215610b8a57610b8961084c565b5b6000610b9884828501610b5f565b91505092915050565b610baa81610ab6565b82525050565b6000602082019050610bc56000830184610ba1565b92915050565b60008115159050919050565b610be081610bcb565b8114610beb57600080fd5b50565b600081359050610bfd81610bd7565b92915050565b600080600060608486031215610c1c57610c1b61084c565b5b6000610c2a86828701610877565b9350506020610c3b86828701610adf565b9250506040610c4c86828701610bee565b9150509250925092565b600080fd5b60008083601f840112610c7157610c7061088c565b5b8235905067ffffffffffffffff811115610c8e57610c8d610c56565b5b602083019150836001820283011115610caa57610ca9610949565b5b9250929050565b60008060208385031215610cc857610cc761084c565b5b600083013567ffffffffffffffff811115610ce657610ce5610851565b5b610cf285828601610c5b565b92509250509250929050565b600060208284031215610d1457610d1361084c565b5b6000610d2284828501610adf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000610da1601683610d5a565b9150610dac82610d6b565b602082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b610de081610b34565b82525050565b6000602082019050610dfb6000830184610dd7565b92915050565b610e0a81610856565b82525050565b610e1981610bcb565b82525050565b6000606082019050610e346000830186610e01565b610e416020830185610ba1565b610e4e6040830184610e10565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ea857607f821691505b602082108103610ebb57610eba610e61565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ee6565b610f2d8683610ee6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610f74610f6f610f6a84610f45565b610f4f565b610f45565b9050919050565b6000819050919050565b610f8e83610f59565b610fa2610f9a82610f7b565b848454610ef3565b825550505050565b600090565b610fb7610faa565b610fc2818484610f85565b505050565b5b81811015610fe657610fdb600082610faf565b600181019050610fc8565b5050565b601f82111561102b57610ffc81610ec1565b61100584610ed6565b81016020851015611014578190505b61102861102085610ed6565b830182610fc7565b50505b505050565b600082821c905092915050565b600061104e60001984600802611030565b1980831691505092915050565b6000611067838361103d565b9150826002028217905092915050565b6110818383610e56565b67ffffffffffffffff81111561109a576110996108a2565b5b6110a48254610e90565b6110af828285610fea565b6000601f8311600181146110de57600084156110cc578287013590505b6110d6858261105b565b86555061113e565b601f1984166110ec86610ec1565b60005b82811015611114578489013582556001820191506020850194506020810190506110ef565b86831015611131578489013561112d601f89168261103d565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b82818337600083830152505050565b60006111738385611147565b9350611180838584611158565b61118983610891565b840190509392505050565b600060208201905081810360008301526111af818486611167565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611214602683610d5a565b915061121f826111b8565b604082019050919050565b6000602082019050818103600083015261124381611207565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611280602083610d5a565b915061128b8261124a565b602082019050919050565b600060208201905081810360008301526112af81611273565b905091905056fea264697066735822122050b41f080926bf4f9f186583798e139b279542447fd028eba1d461cde298594564736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12EC DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x141 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xA3A JUMP JUMPDEST PUSH2 0x15D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xAF4 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x3D2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x43D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xBB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x123 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xC03 JUMP JUMPDEST PUSH2 0x467 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xCB1 JUMP JUMPDEST PUSH2 0x61C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x156 SWAP2 SWAP1 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x165 PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19C JUMPI PUSH2 0x19B PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x200 PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9E PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x16E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x279 PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0x283 PUSH1 0x0 PUSH2 0x774 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x28D PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x365 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x3CE JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x6F6 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC8CA786C100BC62A0DFFBE768B5F0B770D84E8604C5DE54B54197B9066BB42A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x432 SWAP2 SWAP1 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x46F PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D5 SWAP1 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x55D JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x5DC JUMPI DUP1 PUSH1 0x9C PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x60F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x624 PUSH2 0x6F6 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x635 SWAP3 SWAP2 SWAP1 PUSH2 0x1077 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x667 SWAP3 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x67B PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E1 SWAP1 PUSH2 0x122A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F3 DUP2 PUSH2 0x774 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6FE PUSH2 0x83A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x71C PUSH2 0x43D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x769 SWAP1 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x869 DUP2 PUSH2 0x856 JUMP JUMPDEST DUP2 EQ PUSH2 0x874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x886 DUP2 PUSH2 0x860 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8DA DUP3 PUSH2 0x891 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8F9 JUMPI PUSH2 0x8F8 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90C PUSH2 0x842 JUMP JUMPDEST SWAP1 POP PUSH2 0x918 DUP3 DUP3 PUSH2 0x8D1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x938 JUMPI PUSH2 0x937 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x969 JUMPI PUSH2 0x968 PUSH2 0x94E JUMP JUMPDEST JUMPDEST PUSH2 0x973 PUSH1 0x40 PUSH2 0x902 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x983 DUP5 DUP3 DUP6 ADD PUSH2 0x877 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x997 DUP5 DUP3 DUP6 ADD PUSH2 0x877 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B6 PUSH2 0x9B1 DUP5 PUSH2 0x91D JUMP JUMPDEST PUSH2 0x902 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x9D9 JUMPI PUSH2 0x9D8 PUSH2 0x949 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA02 JUMPI DUP1 PUSH2 0x9EE DUP9 DUP3 PUSH2 0x953 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x9DB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA21 JUMPI PUSH2 0xA20 PUSH2 0x88C JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA31 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x9A3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA51 JUMPI PUSH2 0xA50 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA5F DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA80 JUMPI PUSH2 0xA7F PUSH2 0x851 JUMP JUMPDEST JUMPDEST PUSH2 0xA8C DUP6 DUP3 DUP7 ADD PUSH2 0xA0C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC1 DUP3 PUSH2 0xA96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAD1 DUP2 PUSH2 0xAB6 JUMP JUMPDEST DUP2 EQ PUSH2 0xADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAEE DUP2 PUSH2 0xAC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB0B JUMPI PUSH2 0xB0A PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB19 DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB2A DUP6 DUP3 DUP7 ADD PUSH2 0xADF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB51 DUP2 PUSH2 0xB34 JUMP JUMPDEST DUP2 EQ PUSH2 0xB5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB6E DUP2 PUSH2 0xB48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8A JUMPI PUSH2 0xB89 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB98 DUP5 DUP3 DUP6 ADD PUSH2 0xB5F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBAA DUP2 PUSH2 0xAB6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBC5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBE0 DUP2 PUSH2 0xBCB JUMP JUMPDEST DUP2 EQ PUSH2 0xBEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBFD DUP2 PUSH2 0xBD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC1C JUMPI PUSH2 0xC1B PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC2A DUP7 DUP3 DUP8 ADD PUSH2 0x877 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC3B DUP7 DUP3 DUP8 ADD PUSH2 0xADF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC4C DUP7 DUP3 DUP8 ADD PUSH2 0xBEE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC71 JUMPI PUSH2 0xC70 PUSH2 0x88C JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC8E JUMPI PUSH2 0xC8D PUSH2 0xC56 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xCAA JUMPI PUSH2 0xCA9 PUSH2 0x949 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC8 JUMPI PUSH2 0xCC7 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCE6 JUMPI PUSH2 0xCE5 PUSH2 0x851 JUMP JUMPDEST JUMPDEST PUSH2 0xCF2 DUP6 DUP3 DUP7 ADD PUSH2 0xC5B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD14 JUMPI PUSH2 0xD13 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD22 DUP5 DUP3 DUP6 ADD PUSH2 0xADF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA1 PUSH1 0x16 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0xDAC DUP3 PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD0 DUP2 PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDE0 DUP2 PUSH2 0xB34 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDFB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE0A DUP2 PUSH2 0x856 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE19 DUP2 PUSH2 0xBCB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE34 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xE01 JUMP JUMPDEST PUSH2 0xE41 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0xE4E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xE10 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xEA8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xEBB JUMPI PUSH2 0xEBA PUSH2 0xE61 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0xF23 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0xF2D DUP7 DUP4 PUSH2 0xEE6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF74 PUSH2 0xF6F PUSH2 0xF6A DUP5 PUSH2 0xF45 JUMP JUMPDEST PUSH2 0xF4F JUMP JUMPDEST PUSH2 0xF45 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8E DUP4 PUSH2 0xF59 JUMP JUMPDEST PUSH2 0xFA2 PUSH2 0xF9A DUP3 PUSH2 0xF7B JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0xEF3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xFB7 PUSH2 0xFAA JUMP JUMPDEST PUSH2 0xFC2 DUP2 DUP5 DUP5 PUSH2 0xF85 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFE6 JUMPI PUSH2 0xFDB PUSH1 0x0 DUP3 PUSH2 0xFAF JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xFC8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x102B JUMPI PUSH2 0xFFC DUP2 PUSH2 0xEC1 JUMP JUMPDEST PUSH2 0x1005 DUP5 PUSH2 0xED6 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x1014 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1028 PUSH2 0x1020 DUP6 PUSH2 0xED6 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xFC7 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104E PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x1030 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1067 DUP4 DUP4 PUSH2 0x103D JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1081 DUP4 DUP4 PUSH2 0xE56 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109A JUMPI PUSH2 0x1099 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST PUSH2 0x10A4 DUP3 SLOAD PUSH2 0xE90 JUMP JUMPDEST PUSH2 0x10AF DUP3 DUP3 DUP6 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x10DE JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x10CC JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x10D6 DUP6 DUP3 PUSH2 0x105B JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x113E JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x10EC DUP7 PUSH2 0xEC1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1114 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10EF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x1131 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x112D PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x103D JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1173 DUP4 DUP6 PUSH2 0x1147 JUMP JUMPDEST SWAP4 POP PUSH2 0x1180 DUP4 DUP6 DUP5 PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x1189 DUP4 PUSH2 0x891 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11AF DUP2 DUP5 DUP7 PUSH2 0x1167 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1214 PUSH1 0x26 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0x121F DUP3 PUSH2 0x11B8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1243 DUP2 PUSH2 0x1207 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1280 PUSH1 0x20 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0x128B DUP3 PUSH2 0x124A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12AF DUP2 PUSH2 0x1273 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xB4 0x1F ADDMOD MULMOD 0x26 0xBF 0x4F SWAP16 XOR PUSH6 0x83798E139B27 SWAP6 TIMESTAMP PREVRANDAO PUSH32 0xD028EBA1D461CDE298594564736F6C6343000812003300000000000000000000 ","sourceMap":"139:2737:13:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_68":{"entryPoint":1782,"id":68,"parameterSlots":0,"returnSlots":0},"@_msgSender_1147":{"entryPoint":2106,"id":1147,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":1908,"id":125,"parameterSlots":1,"returnSlots":0},"@owner_54":{"entryPoint":1085,"id":54,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":625,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_3689":{"entryPoint":349,"id":3689,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_3635":{"entryPoint":1127,"id":3635,"parameterSlots":3,"returnSlots":0},"@transferOwnership_105":{"entryPoint":1651,"id":105,"parameterSlots":1,"returnSlots":0},"@updateProtocolAddresses_3741":{"entryPoint":645,"id":3741,"parameterSlots":2,"returnSlots":0},"@updateProtocolAggregator_3757":{"entryPoint":1564,"id":3757,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_3705":{"entryPoint":978,"id":3705,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":2467,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2783,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":2572,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":3054,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":2167,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":3163,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$3529_memory_ptr":{"entryPoint":2387,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":2911,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3326,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":2804,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":3075,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":2618,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":3249,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64":{"entryPoint":2932,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2977,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3600,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3585,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":4455,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":4615,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack":{"entryPoint":3476,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":4723,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":3543,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2992,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":3615,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4500,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4650,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3511,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4758,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":3558,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":2306,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":2114,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr":{"entryPoint":2333,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_bytes_storage":{"entryPoint":3777,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_calldata_ptr":{"entryPoint":3670,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":4423,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3418,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_bytes_storage":{"entryPoint":4074,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":2742,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3019,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2134,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2710,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":3909,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":2868,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":4039,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":3929,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage":{"entryPoint":4215,"id":null,"parameterSlots":3,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":4440,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":3798,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":3728,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":4187,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":2257,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":3919,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":4157,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":3681,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3371,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2210,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":3963,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":3158,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2188,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":2382,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2377,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":2129,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2124,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2193,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":3814,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":4144,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":4015,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":4536,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4":{"entryPoint":3435,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":4682,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":3827,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":3973,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2760,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":3031,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2144,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":2888,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":4010,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:19957:15","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:15","statements":[{"nodeType":"YulAssignment","src":"57:19:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:15"},"nodeType":"YulFunctionCall","src":"67:9:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:15"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:15","type":""}],"src":"7:75:15"},{"body":{"nodeType":"YulBlock","src":"177:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:15"},"nodeType":"YulFunctionCall","src":"187:12:15"},"nodeType":"YulExpressionStatement","src":"187:12:15"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:15"},{"body":{"nodeType":"YulBlock","src":"300:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:15"},"nodeType":"YulFunctionCall","src":"310:12:15"},"nodeType":"YulExpressionStatement","src":"310:12:15"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:15"},{"body":{"nodeType":"YulBlock","src":"379:32:15","statements":[{"nodeType":"YulAssignment","src":"389:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:15"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:15","type":""}],"src":"334:77:15"},{"body":{"nodeType":"YulBlock","src":"460:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:15"},"nodeType":"YulFunctionCall","src":"519:12:15"},"nodeType":"YulExpressionStatement","src":"519:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:15"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:15"},"nodeType":"YulFunctionCall","src":"490:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:15"},"nodeType":"YulFunctionCall","src":"480:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:15"},"nodeType":"YulFunctionCall","src":"473:43:15"},"nodeType":"YulIf","src":"470:63:15"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:15","type":""}],"src":"417:122:15"},{"body":{"nodeType":"YulBlock","src":"597:87:15","statements":[{"nodeType":"YulAssignment","src":"607:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:15"},"nodeType":"YulFunctionCall","src":"616:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:15"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:15"},"nodeType":"YulFunctionCall","src":"645:33:15"},"nodeType":"YulExpressionStatement","src":"645:33:15"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:15","type":""}],"src":"545:139:15"},{"body":{"nodeType":"YulBlock","src":"779:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"796:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"799:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"789:6:15"},"nodeType":"YulFunctionCall","src":"789:12:15"},"nodeType":"YulExpressionStatement","src":"789:12:15"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"690:117:15"},{"body":{"nodeType":"YulBlock","src":"861:54:15","statements":[{"nodeType":"YulAssignment","src":"871:38:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"889:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"885:3:15"},"nodeType":"YulFunctionCall","src":"885:14:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"901:3:15"},"nodeType":"YulFunctionCall","src":"901:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"881:3:15"},"nodeType":"YulFunctionCall","src":"881:28:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"871:6:15"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"844:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"854:6:15","type":""}],"src":"813:102:15"},{"body":{"nodeType":"YulBlock","src":"949:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"966:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"969:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"959:6:15"},"nodeType":"YulFunctionCall","src":"959:88:15"},"nodeType":"YulExpressionStatement","src":"959:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1063:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1066:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1056:6:15"},"nodeType":"YulFunctionCall","src":"1056:15:15"},"nodeType":"YulExpressionStatement","src":"1056:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:15"},"nodeType":"YulFunctionCall","src":"1080:15:15"},"nodeType":"YulExpressionStatement","src":"1080:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"921:180:15"},{"body":{"nodeType":"YulBlock","src":"1150:238:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1160:58:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1182:6:15"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1212:4:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1190:21:15"},"nodeType":"YulFunctionCall","src":"1190:27:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1178:3:15"},"nodeType":"YulFunctionCall","src":"1178:40:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1164:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1329:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1331:16:15"},"nodeType":"YulFunctionCall","src":"1331:18:15"},"nodeType":"YulExpressionStatement","src":"1331:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1272:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"1284:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1269:2:15"},"nodeType":"YulFunctionCall","src":"1269:34:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1308:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1320:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1305:2:15"},"nodeType":"YulFunctionCall","src":"1305:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1266:2:15"},"nodeType":"YulFunctionCall","src":"1266:62:15"},"nodeType":"YulIf","src":"1263:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1367:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1371:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1360:6:15"},"nodeType":"YulFunctionCall","src":"1360:22:15"},"nodeType":"YulExpressionStatement","src":"1360:22:15"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1136:6:15","type":""},{"name":"size","nodeType":"YulTypedName","src":"1144:4:15","type":""}],"src":"1107:281:15"},{"body":{"nodeType":"YulBlock","src":"1435:88:15","statements":[{"nodeType":"YulAssignment","src":"1445:30:15","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1455:18:15"},"nodeType":"YulFunctionCall","src":"1455:20:15"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1445:6:15"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1504:6:15"},{"name":"size","nodeType":"YulIdentifier","src":"1512:4:15"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1484:19:15"},"nodeType":"YulFunctionCall","src":"1484:33:15"},"nodeType":"YulExpressionStatement","src":"1484:33:15"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1419:4:15","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1428:6:15","type":""}],"src":"1394:129:15"},{"body":{"nodeType":"YulBlock","src":"1640:229:15","statements":[{"body":{"nodeType":"YulBlock","src":"1745:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1747:16:15"},"nodeType":"YulFunctionCall","src":"1747:18:15"},"nodeType":"YulExpressionStatement","src":"1747:18:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1717:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1725:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1714:2:15"},"nodeType":"YulFunctionCall","src":"1714:30:15"},"nodeType":"YulIf","src":"1711:56:15"},{"nodeType":"YulAssignment","src":"1777:25:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1789:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1797:4:15","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1785:3:15"},"nodeType":"YulFunctionCall","src":"1785:17:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1777:4:15"}]},{"nodeType":"YulAssignment","src":"1839:23:15","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1851:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"1857:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1847:3:15"},"nodeType":"YulFunctionCall","src":"1847:15:15"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1839:4:15"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1624:6:15","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1635:4:15","type":""}],"src":"1529:340:15"},{"body":{"nodeType":"YulBlock","src":"1964:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1981:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1984:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1974:6:15"},"nodeType":"YulFunctionCall","src":"1974:12:15"},"nodeType":"YulExpressionStatement","src":"1974:12:15"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1875:117:15"},{"body":{"nodeType":"YulBlock","src":"2087:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2104:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2107:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2097:6:15"},"nodeType":"YulFunctionCall","src":"2097:12:15"},"nodeType":"YulExpressionStatement","src":"2097:12:15"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"1998:117:15"},{"body":{"nodeType":"YulBlock","src":"2210:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2227:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2230:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2220:6:15"},"nodeType":"YulFunctionCall","src":"2220:12:15"},"nodeType":"YulExpressionStatement","src":"2220:12:15"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"2121:117:15"},{"body":{"nodeType":"YulBlock","src":"2377:494:15","statements":[{"body":{"nodeType":"YulBlock","src":"2421:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"2423:77:15"},"nodeType":"YulFunctionCall","src":"2423:79:15"},"nodeType":"YulExpressionStatement","src":"2423:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2398:3:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2403:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2394:3:15"},"nodeType":"YulFunctionCall","src":"2394:19:15"},{"kind":"number","nodeType":"YulLiteral","src":"2415:4:15","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2390:3:15"},"nodeType":"YulFunctionCall","src":"2390:30:15"},"nodeType":"YulIf","src":"2387:117:15"},{"nodeType":"YulAssignment","src":"2513:30:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2538:4:15","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2522:15:15"},"nodeType":"YulFunctionCall","src":"2522:21:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2513:5:15"}]},{"nodeType":"YulBlock","src":"2553:150:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2588:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2602:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2592:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2628:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"2635:4:15","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2624:3:15"},"nodeType":"YulFunctionCall","src":"2624:16:15"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2667:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"2678:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2663:3:15"},"nodeType":"YulFunctionCall","src":"2663:22:15"},{"name":"end","nodeType":"YulIdentifier","src":"2687:3:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2642:20:15"},"nodeType":"YulFunctionCall","src":"2642:49:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2617:6:15"},"nodeType":"YulFunctionCall","src":"2617:75:15"},"nodeType":"YulExpressionStatement","src":"2617:75:15"}]},{"nodeType":"YulBlock","src":"2713:151:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2748:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"2762:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2752:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2789:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"2796:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2785:3:15"},"nodeType":"YulFunctionCall","src":"2785:16:15"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2828:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"2839:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:15"},"nodeType":"YulFunctionCall","src":"2824:22:15"},{"name":"end","nodeType":"YulIdentifier","src":"2848:3:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2803:20:15"},"nodeType":"YulFunctionCall","src":"2803:49:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2778:6:15"},"nodeType":"YulFunctionCall","src":"2778:75:15"},"nodeType":"YulExpressionStatement","src":"2778:75:15"}]}]},"name":"abi_decode_t_struct$_Institution_$3529_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2352:9:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"2363:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2371:5:15","type":""}],"src":"2293:578:15"},{"body":{"nodeType":"YulBlock","src":"3059:666:15","statements":[{"nodeType":"YulAssignment","src":"3069:119:15","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3180:6:15"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3094:85:15"},"nodeType":"YulFunctionCall","src":"3094:93:15"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3078:15:15"},"nodeType":"YulFunctionCall","src":"3078:110:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3069:5:15"}]},{"nodeType":"YulVariableDeclaration","src":"3197:16:15","value":{"name":"array","nodeType":"YulIdentifier","src":"3208:5:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3201:3:15","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3230:5:15"},{"name":"length","nodeType":"YulIdentifier","src":"3237:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3223:6:15"},"nodeType":"YulFunctionCall","src":"3223:21:15"},"nodeType":"YulExpressionStatement","src":"3223:21:15"},{"nodeType":"YulAssignment","src":"3253:23:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3264:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"3271:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3260:3:15"},"nodeType":"YulFunctionCall","src":"3260:16:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3253:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"3286:44:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3316:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"3324:4:15","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3312:3:15"},"nodeType":"YulFunctionCall","src":"3312:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3300:3:15"},"nodeType":"YulFunctionCall","src":"3300:30:15"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3290:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3358:103:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"3372:77:15"},"nodeType":"YulFunctionCall","src":"3372:79:15"},"nodeType":"YulExpressionStatement","src":"3372:79:15"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3345:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"3353:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3342:2:15"},"nodeType":"YulFunctionCall","src":"3342:15:15"},"nodeType":"YulIf","src":"3339:122:15"},{"body":{"nodeType":"YulBlock","src":"3546:173:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3561:21:15","value":{"name":"src","nodeType":"YulIdentifier","src":"3579:3:15"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"3565:10:15","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3603:3:15"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"3658:10:15"},{"name":"end","nodeType":"YulIdentifier","src":"3670:3:15"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$3529_memory_ptr","nodeType":"YulIdentifier","src":"3608:49:15"},"nodeType":"YulFunctionCall","src":"3608:66:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3596:6:15"},"nodeType":"YulFunctionCall","src":"3596:79:15"},"nodeType":"YulExpressionStatement","src":"3596:79:15"},{"nodeType":"YulAssignment","src":"3688:21:15","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3699:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"3704:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3695:3:15"},"nodeType":"YulFunctionCall","src":"3695:14:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3688:3:15"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3499:3:15"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3504:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3496:2:15"},"nodeType":"YulFunctionCall","src":"3496:15:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3512:25:15","statements":[{"nodeType":"YulAssignment","src":"3514:21:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3525:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"3530:4:15","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3521:3:15"},"nodeType":"YulFunctionCall","src":"3521:14:15"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3514:3:15"}]}]},"pre":{"nodeType":"YulBlock","src":"3474:21:15","statements":[{"nodeType":"YulVariableDeclaration","src":"3476:17:15","value":{"name":"offset","nodeType":"YulIdentifier","src":"3487:6:15"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3480:3:15","type":""}]}]},"src":"3470:249:15"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3029:6:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"3037:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"3045:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3053:5:15","type":""}],"src":"2928:797:15"},{"body":{"nodeType":"YulBlock","src":"3888:322:15","statements":[{"body":{"nodeType":"YulBlock","src":"3937:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3939:77:15"},"nodeType":"YulFunctionCall","src":"3939:79:15"},"nodeType":"YulExpressionStatement","src":"3939:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3916:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3912:3:15"},"nodeType":"YulFunctionCall","src":"3912:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"3931:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3908:3:15"},"nodeType":"YulFunctionCall","src":"3908:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3901:6:15"},"nodeType":"YulFunctionCall","src":"3901:35:15"},"nodeType":"YulIf","src":"3898:122:15"},{"nodeType":"YulVariableDeclaration","src":"4029:34:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4056:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4043:12:15"},"nodeType":"YulFunctionCall","src":"4043:20:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4033:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4072:132:15","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4177:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4185:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4173:3:15"},"nodeType":"YulFunctionCall","src":"4173:17:15"},{"name":"length","nodeType":"YulIdentifier","src":"4192:6:15"},{"name":"end","nodeType":"YulIdentifier","src":"4200:3:15"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4081:91:15"},"nodeType":"YulFunctionCall","src":"4081:123:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4072:5:15"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3866:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"3874:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3882:5:15","type":""}],"src":"3782:428:15"},{"body":{"nodeType":"YulBlock","src":"4353:605:15","statements":[{"body":{"nodeType":"YulBlock","src":"4399:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4401:77:15"},"nodeType":"YulFunctionCall","src":"4401:79:15"},"nodeType":"YulExpressionStatement","src":"4401:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4374:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4383:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4370:3:15"},"nodeType":"YulFunctionCall","src":"4370:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4395:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4366:3:15"},"nodeType":"YulFunctionCall","src":"4366:32:15"},"nodeType":"YulIf","src":"4363:119:15"},{"nodeType":"YulBlock","src":"4492:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4507:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"4521:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4511:6:15","type":""}]},{"nodeType":"YulAssignment","src":"4536:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4582:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4567:3:15"},"nodeType":"YulFunctionCall","src":"4567:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4591:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4546:20:15"},"nodeType":"YulFunctionCall","src":"4546:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4536:6:15"}]}]},{"nodeType":"YulBlock","src":"4619:332:15","statements":[{"nodeType":"YulVariableDeclaration","src":"4634:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4665:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4676:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4661:3:15"},"nodeType":"YulFunctionCall","src":"4661:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4648:12:15"},"nodeType":"YulFunctionCall","src":"4648:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4638:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4727:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4729:77:15"},"nodeType":"YulFunctionCall","src":"4729:79:15"},"nodeType":"YulExpressionStatement","src":"4729:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4699:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4707:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4696:2:15"},"nodeType":"YulFunctionCall","src":"4696:30:15"},"nodeType":"YulIf","src":"4693:117:15"},{"nodeType":"YulAssignment","src":"4824:117:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4913:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4924:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4909:3:15"},"nodeType":"YulFunctionCall","src":"4909:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4933:7:15"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4834:74:15"},"nodeType":"YulFunctionCall","src":"4834:107:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4824:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4315:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4326:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4338:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4346:6:15","type":""}],"src":"4216:742:15"},{"body":{"nodeType":"YulBlock","src":"5009:81:15","statements":[{"nodeType":"YulAssignment","src":"5019:65:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5034:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"5041:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5030:3:15"},"nodeType":"YulFunctionCall","src":"5030:54:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5019:7:15"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4991:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5001:7:15","type":""}],"src":"4964:126:15"},{"body":{"nodeType":"YulBlock","src":"5141:51:15","statements":[{"nodeType":"YulAssignment","src":"5151:35:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5180:5:15"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5162:17:15"},"nodeType":"YulFunctionCall","src":"5162:24:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5151:7:15"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5123:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5133:7:15","type":""}],"src":"5096:96:15"},{"body":{"nodeType":"YulBlock","src":"5241:79:15","statements":[{"body":{"nodeType":"YulBlock","src":"5298:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5307:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5310:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5300:6:15"},"nodeType":"YulFunctionCall","src":"5300:12:15"},"nodeType":"YulExpressionStatement","src":"5300:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5264:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5289:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5271:17:15"},"nodeType":"YulFunctionCall","src":"5271:24:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5261:2:15"},"nodeType":"YulFunctionCall","src":"5261:35:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5254:6:15"},"nodeType":"YulFunctionCall","src":"5254:43:15"},"nodeType":"YulIf","src":"5251:63:15"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5234:5:15","type":""}],"src":"5198:122:15"},{"body":{"nodeType":"YulBlock","src":"5378:87:15","statements":[{"nodeType":"YulAssignment","src":"5388:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5410:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5397:12:15"},"nodeType":"YulFunctionCall","src":"5397:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5388:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5453:5:15"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5426:26:15"},"nodeType":"YulFunctionCall","src":"5426:33:15"},"nodeType":"YulExpressionStatement","src":"5426:33:15"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5356:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"5364:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5372:5:15","type":""}],"src":"5326:139:15"},{"body":{"nodeType":"YulBlock","src":"5554:391:15","statements":[{"body":{"nodeType":"YulBlock","src":"5600:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5602:77:15"},"nodeType":"YulFunctionCall","src":"5602:79:15"},"nodeType":"YulExpressionStatement","src":"5602:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5575:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"5584:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5571:3:15"},"nodeType":"YulFunctionCall","src":"5571:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"5596:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5567:3:15"},"nodeType":"YulFunctionCall","src":"5567:32:15"},"nodeType":"YulIf","src":"5564:119:15"},{"nodeType":"YulBlock","src":"5693:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5708:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5722:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5712:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5737:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5772:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5783:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5768:3:15"},"nodeType":"YulFunctionCall","src":"5768:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5792:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5747:20:15"},"nodeType":"YulFunctionCall","src":"5747:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5737:6:15"}]}]},{"nodeType":"YulBlock","src":"5820:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"5835:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"5849:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5839:6:15","type":""}]},{"nodeType":"YulAssignment","src":"5865:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5900:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"5911:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5896:3:15"},"nodeType":"YulFunctionCall","src":"5896:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5920:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5875:20:15"},"nodeType":"YulFunctionCall","src":"5875:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5865:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5516:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5527:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5539:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5547:6:15","type":""}],"src":"5471:474:15"},{"body":{"nodeType":"YulBlock","src":"5995:57:15","statements":[{"nodeType":"YulAssignment","src":"6005:41:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6020:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"6027:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6016:3:15"},"nodeType":"YulFunctionCall","src":"6016:30:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6005:7:15"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5977:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5987:7:15","type":""}],"src":"5951:101:15"},{"body":{"nodeType":"YulBlock","src":"6100:78:15","statements":[{"body":{"nodeType":"YulBlock","src":"6156:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6165:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6168:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6158:6:15"},"nodeType":"YulFunctionCall","src":"6158:12:15"},"nodeType":"YulExpressionStatement","src":"6158:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6123:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6147:5:15"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"6130:16:15"},"nodeType":"YulFunctionCall","src":"6130:23:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6120:2:15"},"nodeType":"YulFunctionCall","src":"6120:34:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6113:6:15"},"nodeType":"YulFunctionCall","src":"6113:42:15"},"nodeType":"YulIf","src":"6110:62:15"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6093:5:15","type":""}],"src":"6058:120:15"},{"body":{"nodeType":"YulBlock","src":"6235:86:15","statements":[{"nodeType":"YulAssignment","src":"6245:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6267:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6254:12:15"},"nodeType":"YulFunctionCall","src":"6254:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6245:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6309:5:15"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"6283:25:15"},"nodeType":"YulFunctionCall","src":"6283:32:15"},"nodeType":"YulExpressionStatement","src":"6283:32:15"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6213:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"6221:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6229:5:15","type":""}],"src":"6184:137:15"},{"body":{"nodeType":"YulBlock","src":"6392:262:15","statements":[{"body":{"nodeType":"YulBlock","src":"6438:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6440:77:15"},"nodeType":"YulFunctionCall","src":"6440:79:15"},"nodeType":"YulExpressionStatement","src":"6440:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6413:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"6422:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6409:3:15"},"nodeType":"YulFunctionCall","src":"6409:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"6434:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6405:3:15"},"nodeType":"YulFunctionCall","src":"6405:32:15"},"nodeType":"YulIf","src":"6402:119:15"},{"nodeType":"YulBlock","src":"6531:116:15","statements":[{"nodeType":"YulVariableDeclaration","src":"6546:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"6560:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6550:6:15","type":""}]},{"nodeType":"YulAssignment","src":"6575:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6609:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"6620:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6605:3:15"},"nodeType":"YulFunctionCall","src":"6605:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6629:7:15"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"6585:19:15"},"nodeType":"YulFunctionCall","src":"6585:52:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6575:6:15"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6362:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6373:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6385:6:15","type":""}],"src":"6327:327:15"},{"body":{"nodeType":"YulBlock","src":"6725:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6742:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6765:5:15"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6747:17:15"},"nodeType":"YulFunctionCall","src":"6747:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6735:6:15"},"nodeType":"YulFunctionCall","src":"6735:37:15"},"nodeType":"YulExpressionStatement","src":"6735:37:15"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6713:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6720:3:15","type":""}],"src":"6660:118:15"},{"body":{"nodeType":"YulBlock","src":"6882:124:15","statements":[{"nodeType":"YulAssignment","src":"6892:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6904:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6915:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6900:3:15"},"nodeType":"YulFunctionCall","src":"6900:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6892:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6972:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6985:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6996:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6981:3:15"},"nodeType":"YulFunctionCall","src":"6981:17:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6928:43:15"},"nodeType":"YulFunctionCall","src":"6928:71:15"},"nodeType":"YulExpressionStatement","src":"6928:71:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6854:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6866:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6877:4:15","type":""}],"src":"6784:222:15"},{"body":{"nodeType":"YulBlock","src":"7054:48:15","statements":[{"nodeType":"YulAssignment","src":"7064:32:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7089:5:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7082:6:15"},"nodeType":"YulFunctionCall","src":"7082:13:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7075:6:15"},"nodeType":"YulFunctionCall","src":"7075:21:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7064:7:15"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7036:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7046:7:15","type":""}],"src":"7012:90:15"},{"body":{"nodeType":"YulBlock","src":"7148:76:15","statements":[{"body":{"nodeType":"YulBlock","src":"7202:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7211:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7214:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7204:6:15"},"nodeType":"YulFunctionCall","src":"7204:12:15"},"nodeType":"YulExpressionStatement","src":"7204:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7171:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7193:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"7178:14:15"},"nodeType":"YulFunctionCall","src":"7178:21:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7168:2:15"},"nodeType":"YulFunctionCall","src":"7168:32:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7161:6:15"},"nodeType":"YulFunctionCall","src":"7161:40:15"},"nodeType":"YulIf","src":"7158:60:15"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7141:5:15","type":""}],"src":"7108:116:15"},{"body":{"nodeType":"YulBlock","src":"7279:84:15","statements":[{"nodeType":"YulAssignment","src":"7289:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7311:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7298:12:15"},"nodeType":"YulFunctionCall","src":"7298:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7289:5:15"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7351:5:15"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"7327:23:15"},"nodeType":"YulFunctionCall","src":"7327:30:15"},"nodeType":"YulExpressionStatement","src":"7327:30:15"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7257:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"7265:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7273:5:15","type":""}],"src":"7230:133:15"},{"body":{"nodeType":"YulBlock","src":"7466:516:15","statements":[{"body":{"nodeType":"YulBlock","src":"7512:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7514:77:15"},"nodeType":"YulFunctionCall","src":"7514:79:15"},"nodeType":"YulExpressionStatement","src":"7514:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7487:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"7496:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7483:3:15"},"nodeType":"YulFunctionCall","src":"7483:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"7508:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7479:3:15"},"nodeType":"YulFunctionCall","src":"7479:32:15"},"nodeType":"YulIf","src":"7476:119:15"},{"nodeType":"YulBlock","src":"7605:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7620:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7634:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7624:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7649:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7684:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7695:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7680:3:15"},"nodeType":"YulFunctionCall","src":"7680:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7704:7:15"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7659:20:15"},"nodeType":"YulFunctionCall","src":"7659:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7649:6:15"}]}]},{"nodeType":"YulBlock","src":"7732:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7747:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7761:2:15","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7751:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7777:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7812:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7823:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7808:3:15"},"nodeType":"YulFunctionCall","src":"7808:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7832:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7787:20:15"},"nodeType":"YulFunctionCall","src":"7787:53:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7777:6:15"}]}]},{"nodeType":"YulBlock","src":"7860:115:15","statements":[{"nodeType":"YulVariableDeclaration","src":"7875:16:15","value":{"kind":"number","nodeType":"YulLiteral","src":"7889:2:15","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7879:6:15","type":""}]},{"nodeType":"YulAssignment","src":"7905:60:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7937:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7948:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7933:3:15"},"nodeType":"YulFunctionCall","src":"7933:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7957:7:15"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"7915:17:15"},"nodeType":"YulFunctionCall","src":"7915:50:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7905:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7420:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7431:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7443:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7451:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7459:6:15","type":""}],"src":"7369:613:15"},{"body":{"nodeType":"YulBlock","src":"8077:28:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8094:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8097:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8087:6:15"},"nodeType":"YulFunctionCall","src":"8087:12:15"},"nodeType":"YulExpressionStatement","src":"8087:12:15"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"7988:117:15"},{"body":{"nodeType":"YulBlock","src":"8198:478:15","statements":[{"body":{"nodeType":"YulBlock","src":"8247:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8249:77:15"},"nodeType":"YulFunctionCall","src":"8249:79:15"},"nodeType":"YulExpressionStatement","src":"8249:79:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8226:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"8234:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8222:3:15"},"nodeType":"YulFunctionCall","src":"8222:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"8241:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8218:3:15"},"nodeType":"YulFunctionCall","src":"8218:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8211:6:15"},"nodeType":"YulFunctionCall","src":"8211:35:15"},"nodeType":"YulIf","src":"8208:122:15"},{"nodeType":"YulAssignment","src":"8339:30:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8362:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8349:12:15"},"nodeType":"YulFunctionCall","src":"8349:20:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8339:6:15"}]},{"body":{"nodeType":"YulBlock","src":"8412:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"8414:77:15"},"nodeType":"YulFunctionCall","src":"8414:79:15"},"nodeType":"YulExpressionStatement","src":"8414:79:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8384:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"8392:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8381:2:15"},"nodeType":"YulFunctionCall","src":"8381:30:15"},"nodeType":"YulIf","src":"8378:117:15"},{"nodeType":"YulAssignment","src":"8504:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8520:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"8528:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8516:3:15"},"nodeType":"YulFunctionCall","src":"8516:17:15"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8504:8:15"}]},{"body":{"nodeType":"YulBlock","src":"8587:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"8589:77:15"},"nodeType":"YulFunctionCall","src":"8589:79:15"},"nodeType":"YulExpressionStatement","src":"8589:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"8552:8:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8566:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"8574:4:15","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8562:3:15"},"nodeType":"YulFunctionCall","src":"8562:17:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8548:3:15"},"nodeType":"YulFunctionCall","src":"8548:32:15"},{"name":"end","nodeType":"YulIdentifier","src":"8582:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8545:2:15"},"nodeType":"YulFunctionCall","src":"8545:41:15"},"nodeType":"YulIf","src":"8542:128:15"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8165:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"8173:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"8181:8:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"8191:6:15","type":""}],"src":"8124:552:15"},{"body":{"nodeType":"YulBlock","src":"8767:442:15","statements":[{"body":{"nodeType":"YulBlock","src":"8813:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8815:77:15"},"nodeType":"YulFunctionCall","src":"8815:79:15"},"nodeType":"YulExpressionStatement","src":"8815:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8788:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"8797:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8784:3:15"},"nodeType":"YulFunctionCall","src":"8784:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"8809:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8780:3:15"},"nodeType":"YulFunctionCall","src":"8780:32:15"},"nodeType":"YulIf","src":"8777:119:15"},{"nodeType":"YulBlock","src":"8906:296:15","statements":[{"nodeType":"YulVariableDeclaration","src":"8921:45:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8952:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"8963:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8948:3:15"},"nodeType":"YulFunctionCall","src":"8948:17:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8935:12:15"},"nodeType":"YulFunctionCall","src":"8935:31:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8925:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"9013:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9015:77:15"},"nodeType":"YulFunctionCall","src":"9015:79:15"},"nodeType":"YulExpressionStatement","src":"9015:79:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8985:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"8993:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8982:2:15"},"nodeType":"YulFunctionCall","src":"8982:30:15"},"nodeType":"YulIf","src":"8979:117:15"},{"nodeType":"YulAssignment","src":"9110:82:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9164:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"9175:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9160:3:15"},"nodeType":"YulFunctionCall","src":"9160:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9184:7:15"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"9128:31:15"},"nodeType":"YulFunctionCall","src":"9128:64:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9110:6:15"},{"name":"value1","nodeType":"YulIdentifier","src":"9118:6:15"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8729:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8740:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8752:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8760:6:15","type":""}],"src":"8682:527:15"},{"body":{"nodeType":"YulBlock","src":"9281:263:15","statements":[{"body":{"nodeType":"YulBlock","src":"9327:83:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9329:77:15"},"nodeType":"YulFunctionCall","src":"9329:79:15"},"nodeType":"YulExpressionStatement","src":"9329:79:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9302:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"9311:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9298:3:15"},"nodeType":"YulFunctionCall","src":"9298:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"9323:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9294:3:15"},"nodeType":"YulFunctionCall","src":"9294:32:15"},"nodeType":"YulIf","src":"9291:119:15"},{"nodeType":"YulBlock","src":"9420:117:15","statements":[{"nodeType":"YulVariableDeclaration","src":"9435:15:15","value":{"kind":"number","nodeType":"YulLiteral","src":"9449:1:15","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9439:6:15","type":""}]},{"nodeType":"YulAssignment","src":"9464:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9499:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"9510:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9495:3:15"},"nodeType":"YulFunctionCall","src":"9495:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9519:7:15"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9474:20:15"},"nodeType":"YulFunctionCall","src":"9474:53:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9464:6:15"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9251:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9262:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9274:6:15","type":""}],"src":"9215:329:15"},{"body":{"nodeType":"YulBlock","src":"9578:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9595:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9598:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9588:6:15"},"nodeType":"YulFunctionCall","src":"9588:88:15"},"nodeType":"YulExpressionStatement","src":"9588:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9692:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9695:4:15","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9685:6:15"},"nodeType":"YulFunctionCall","src":"9685:15:15"},"nodeType":"YulExpressionStatement","src":"9685:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9716:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9719:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9709:6:15"},"nodeType":"YulFunctionCall","src":"9709:15:15"},"nodeType":"YulExpressionStatement","src":"9709:15:15"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"9550:180:15"},{"body":{"nodeType":"YulBlock","src":"9832:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9849:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"9854:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9842:6:15"},"nodeType":"YulFunctionCall","src":"9842:19:15"},"nodeType":"YulExpressionStatement","src":"9842:19:15"},{"nodeType":"YulAssignment","src":"9870:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9889:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9894:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9885:3:15"},"nodeType":"YulFunctionCall","src":"9885:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9870:11:15"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9804:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"9809:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9820:11:15","type":""}],"src":"9736:169:15"},{"body":{"nodeType":"YulBlock","src":"10017:66:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10039:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"10047:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10035:3:15"},"nodeType":"YulFunctionCall","src":"10035:14:15"},{"hexValue":"50617963726573743a207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"10051:24:15","type":"","value":"Paycrest: zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10028:6:15"},"nodeType":"YulFunctionCall","src":"10028:48:15"},"nodeType":"YulExpressionStatement","src":"10028:48:15"}]},"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10009:6:15","type":""}],"src":"9911:172:15"},{"body":{"nodeType":"YulBlock","src":"10235:220:15","statements":[{"nodeType":"YulAssignment","src":"10245:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10311:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10316:2:15","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10252:58:15"},"nodeType":"YulFunctionCall","src":"10252:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10245:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10417:3:15"}],"functionName":{"name":"store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4","nodeType":"YulIdentifier","src":"10328:88:15"},"nodeType":"YulFunctionCall","src":"10328:93:15"},"nodeType":"YulExpressionStatement","src":"10328:93:15"},{"nodeType":"YulAssignment","src":"10430:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10441:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10446:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10437:3:15"},"nodeType":"YulFunctionCall","src":"10437:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10430:3:15"}]}]},"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10223:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10231:3:15","type":""}],"src":"10089:366:15"},{"body":{"nodeType":"YulBlock","src":"10632:248:15","statements":[{"nodeType":"YulAssignment","src":"10642:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10654:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10665:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10650:3:15"},"nodeType":"YulFunctionCall","src":"10650:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10642:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10689:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"10700:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10685:3:15"},"nodeType":"YulFunctionCall","src":"10685:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10708:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"10714:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10704:3:15"},"nodeType":"YulFunctionCall","src":"10704:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10678:6:15"},"nodeType":"YulFunctionCall","src":"10678:47:15"},"nodeType":"YulExpressionStatement","src":"10678:47:15"},{"nodeType":"YulAssignment","src":"10734:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10868:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10742:124:15"},"nodeType":"YulFunctionCall","src":"10742:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10734:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10612:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10627:4:15","type":""}],"src":"10461:419:15"},{"body":{"nodeType":"YulBlock","src":"10949:52:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10966:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10988:5:15"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"10971:16:15"},"nodeType":"YulFunctionCall","src":"10971:23:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10959:6:15"},"nodeType":"YulFunctionCall","src":"10959:36:15"},"nodeType":"YulExpressionStatement","src":"10959:36:15"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10937:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10944:3:15","type":""}],"src":"10886:115:15"},{"body":{"nodeType":"YulBlock","src":"11103:122:15","statements":[{"nodeType":"YulAssignment","src":"11113:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11125:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11136:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11121:3:15"},"nodeType":"YulFunctionCall","src":"11121:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11113:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11191:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11204:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11215:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11200:3:15"},"nodeType":"YulFunctionCall","src":"11200:17:15"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"11149:41:15"},"nodeType":"YulFunctionCall","src":"11149:69:15"},"nodeType":"YulExpressionStatement","src":"11149:69:15"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11075:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11087:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11098:4:15","type":""}],"src":"11007:218:15"},{"body":{"nodeType":"YulBlock","src":"11296:53:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11313:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11336:5:15"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"11318:17:15"},"nodeType":"YulFunctionCall","src":"11318:24:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11306:6:15"},"nodeType":"YulFunctionCall","src":"11306:37:15"},"nodeType":"YulExpressionStatement","src":"11306:37:15"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11284:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11291:3:15","type":""}],"src":"11231:118:15"},{"body":{"nodeType":"YulBlock","src":"11414:50:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11431:3:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11451:5:15"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"11436:14:15"},"nodeType":"YulFunctionCall","src":"11436:21:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11424:6:15"},"nodeType":"YulFunctionCall","src":"11424:34:15"},"nodeType":"YulExpressionStatement","src":"11424:34:15"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11402:5:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11409:3:15","type":""}],"src":"11355:109:15"},{"body":{"nodeType":"YulBlock","src":"11618:282:15","statements":[{"nodeType":"YulAssignment","src":"11628:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11640:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11651:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11636:3:15"},"nodeType":"YulFunctionCall","src":"11636:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11628:4:15"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11708:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11721:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11732:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11717:3:15"},"nodeType":"YulFunctionCall","src":"11717:17:15"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11664:43:15"},"nodeType":"YulFunctionCall","src":"11664:71:15"},"nodeType":"YulExpressionStatement","src":"11664:71:15"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11789:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11802:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11813:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11798:3:15"},"nodeType":"YulFunctionCall","src":"11798:18:15"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11745:43:15"},"nodeType":"YulFunctionCall","src":"11745:72:15"},"nodeType":"YulExpressionStatement","src":"11745:72:15"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11865:6:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11878:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"11889:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11874:3:15"},"nodeType":"YulFunctionCall","src":"11874:18:15"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"11827:37:15"},"nodeType":"YulFunctionCall","src":"11827:66:15"},"nodeType":"YulExpressionStatement","src":"11827:66:15"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11574:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11586:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11594:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11602:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11613:4:15","type":""}],"src":"11470:430:15"},{"body":{"nodeType":"YulBlock","src":"11971:31:15","statements":[{"nodeType":"YulAssignment","src":"11982:13:15","value":{"name":"len","nodeType":"YulIdentifier","src":"11992:3:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11982:6:15"}]}]},"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11949:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"11956:3:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"11964:6:15","type":""}],"src":"11906:96:15"},{"body":{"nodeType":"YulBlock","src":"12036:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12053:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12056:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12046:6:15"},"nodeType":"YulFunctionCall","src":"12046:88:15"},"nodeType":"YulExpressionStatement","src":"12046:88:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12150:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12153:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12143:6:15"},"nodeType":"YulFunctionCall","src":"12143:15:15"},"nodeType":"YulExpressionStatement","src":"12143:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12174:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12177:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12167:6:15"},"nodeType":"YulFunctionCall","src":"12167:15:15"},"nodeType":"YulExpressionStatement","src":"12167:15:15"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"12008:180:15"},{"body":{"nodeType":"YulBlock","src":"12245:269:15","statements":[{"nodeType":"YulAssignment","src":"12255:22:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12269:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"12275:1:15","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12265:3:15"},"nodeType":"YulFunctionCall","src":"12265:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12255:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"12286:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12316:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"12322:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12312:3:15"},"nodeType":"YulFunctionCall","src":"12312:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"12290:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"12363:51:15","statements":[{"nodeType":"YulAssignment","src":"12377:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12391:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"12399:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12387:3:15"},"nodeType":"YulFunctionCall","src":"12387:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"12377:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12343:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12336:6:15"},"nodeType":"YulFunctionCall","src":"12336:26:15"},"nodeType":"YulIf","src":"12333:81:15"},{"body":{"nodeType":"YulBlock","src":"12466:42:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"12480:16:15"},"nodeType":"YulFunctionCall","src":"12480:18:15"},"nodeType":"YulExpressionStatement","src":"12480:18:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"12430:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12453:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"12461:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12450:2:15"},"nodeType":"YulFunctionCall","src":"12450:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12427:2:15"},"nodeType":"YulFunctionCall","src":"12427:38:15"},"nodeType":"YulIf","src":"12424:84:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"12229:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"12238:6:15","type":""}],"src":"12194:320:15"},{"body":{"nodeType":"YulBlock","src":"12573:87:15","statements":[{"nodeType":"YulAssignment","src":"12583:11:15","value":{"name":"ptr","nodeType":"YulIdentifier","src":"12591:3:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12583:4:15"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12611:1:15","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"12614:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12604:6:15"},"nodeType":"YulFunctionCall","src":"12604:14:15"},"nodeType":"YulExpressionStatement","src":"12604:14:15"},{"nodeType":"YulAssignment","src":"12627:26:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12645:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12648:4:15","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12635:9:15"},"nodeType":"YulFunctionCall","src":"12635:18:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12627:4:15"}]}]},"name":"array_dataslot_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"12560:3:15","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"12568:4:15","type":""}],"src":"12520:140:15"},{"body":{"nodeType":"YulBlock","src":"12710:49:15","statements":[{"nodeType":"YulAssignment","src":"12720:33:15","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12738:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"12745:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12734:3:15"},"nodeType":"YulFunctionCall","src":"12734:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"12750:2:15","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12730:3:15"},"nodeType":"YulFunctionCall","src":"12730:23:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12720:6:15"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12693:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12703:6:15","type":""}],"src":"12666:93:15"},{"body":{"nodeType":"YulBlock","src":"12818:54:15","statements":[{"nodeType":"YulAssignment","src":"12828:37:15","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"12853:4:15"},{"name":"value","nodeType":"YulIdentifier","src":"12859:5:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12849:3:15"},"nodeType":"YulFunctionCall","src":"12849:16:15"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"12828:8:15"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"12793:4:15","type":""},{"name":"value","nodeType":"YulTypedName","src":"12799:5:15","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"12809:8:15","type":""}],"src":"12765:107:15"},{"body":{"nodeType":"YulBlock","src":"12954:317:15","statements":[{"nodeType":"YulVariableDeclaration","src":"12964:35:15","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"12985:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"12997:1:15","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12981:3:15"},"nodeType":"YulFunctionCall","src":"12981:18:15"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"12968:9:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13008:109:15","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"13039:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13050:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"13020:18:15"},"nodeType":"YulFunctionCall","src":"13020:97:15"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"13012:4:15","type":""}]},{"nodeType":"YulAssignment","src":"13126:51:15","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"13157:9:15"},{"name":"toInsert","nodeType":"YulIdentifier","src":"13168:8:15"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"13138:18:15"},"nodeType":"YulFunctionCall","src":"13138:39:15"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"13126:8:15"}]},{"nodeType":"YulAssignment","src":"13186:30:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13199:5:15"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"13210:4:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13206:3:15"},"nodeType":"YulFunctionCall","src":"13206:9:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13195:3:15"},"nodeType":"YulFunctionCall","src":"13195:21:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13186:5:15"}]},{"nodeType":"YulAssignment","src":"13225:40:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13238:5:15"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"13249:8:15"},{"name":"mask","nodeType":"YulIdentifier","src":"13259:4:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13245:3:15"},"nodeType":"YulFunctionCall","src":"13245:19:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"13235:2:15"},"nodeType":"YulFunctionCall","src":"13235:30:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"13225:6:15"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12915:5:15","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"12922:10:15","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"12934:8:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"12947:6:15","type":""}],"src":"12878:393:15"},{"body":{"nodeType":"YulBlock","src":"13322:32:15","statements":[{"nodeType":"YulAssignment","src":"13332:16:15","value":{"name":"value","nodeType":"YulIdentifier","src":"13343:5:15"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13332:7:15"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13304:5:15","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13314:7:15","type":""}],"src":"13277:77:15"},{"body":{"nodeType":"YulBlock","src":"13392:28:15","statements":[{"nodeType":"YulAssignment","src":"13402:12:15","value":{"name":"value","nodeType":"YulIdentifier","src":"13409:5:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13402:3:15"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13378:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13388:3:15","type":""}],"src":"13360:60:15"},{"body":{"nodeType":"YulBlock","src":"13486:82:15","statements":[{"nodeType":"YulAssignment","src":"13496:66:15","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13554:5:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13536:17:15"},"nodeType":"YulFunctionCall","src":"13536:24:15"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"13527:8:15"},"nodeType":"YulFunctionCall","src":"13527:34:15"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13509:17:15"},"nodeType":"YulFunctionCall","src":"13509:53:15"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"13496:9:15"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13466:5:15","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"13476:9:15","type":""}],"src":"13426:142:15"},{"body":{"nodeType":"YulBlock","src":"13621:28:15","statements":[{"nodeType":"YulAssignment","src":"13631:12:15","value":{"name":"value","nodeType":"YulIdentifier","src":"13638:5:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13631:3:15"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13607:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13617:3:15","type":""}],"src":"13574:75:15"},{"body":{"nodeType":"YulBlock","src":"13731:193:15","statements":[{"nodeType":"YulVariableDeclaration","src":"13741:63:15","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"13796:7:15"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"13765:30:15"},"nodeType":"YulFunctionCall","src":"13765:39:15"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"13745:16:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13820:4:15"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13860:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13854:5:15"},"nodeType":"YulFunctionCall","src":"13854:11:15"},{"name":"offset","nodeType":"YulIdentifier","src":"13867:6:15"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"13899:16:15"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"13875:23:15"},"nodeType":"YulFunctionCall","src":"13875:41:15"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"13826:27:15"},"nodeType":"YulFunctionCall","src":"13826:91:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13813:6:15"},"nodeType":"YulFunctionCall","src":"13813:105:15"},"nodeType":"YulExpressionStatement","src":"13813:105:15"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"13708:4:15","type":""},{"name":"offset","nodeType":"YulTypedName","src":"13714:6:15","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"13722:7:15","type":""}],"src":"13655:269:15"},{"body":{"nodeType":"YulBlock","src":"13979:24:15","statements":[{"nodeType":"YulAssignment","src":"13989:8:15","value":{"kind":"number","nodeType":"YulLiteral","src":"13996:1:15","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13989:3:15"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"13975:3:15","type":""}],"src":"13930:73:15"},{"body":{"nodeType":"YulBlock","src":"14062:136:15","statements":[{"nodeType":"YulVariableDeclaration","src":"14072:46:15","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"14086:30:15"},"nodeType":"YulFunctionCall","src":"14086:32:15"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"14076:6:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14171:4:15"},{"name":"offset","nodeType":"YulIdentifier","src":"14177:6:15"},{"name":"zero_0","nodeType":"YulIdentifier","src":"14185:6:15"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"14127:43:15"},"nodeType":"YulFunctionCall","src":"14127:65:15"},"nodeType":"YulExpressionStatement","src":"14127:65:15"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"14048:4:15","type":""},{"name":"offset","nodeType":"YulTypedName","src":"14054:6:15","type":""}],"src":"14009:189:15"},{"body":{"nodeType":"YulBlock","src":"14254:136:15","statements":[{"body":{"nodeType":"YulBlock","src":"14321:63:15","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14365:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"14372:1:15","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"14335:29:15"},"nodeType":"YulFunctionCall","src":"14335:39:15"},"nodeType":"YulExpressionStatement","src":"14335:39:15"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14274:5:15"},{"name":"end","nodeType":"YulIdentifier","src":"14281:3:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14271:2:15"},"nodeType":"YulFunctionCall","src":"14271:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"14286:26:15","statements":[{"nodeType":"YulAssignment","src":"14288:22:15","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"14301:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"14308:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14297:3:15"},"nodeType":"YulFunctionCall","src":"14297:13:15"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"14288:5:15"}]}]},"pre":{"nodeType":"YulBlock","src":"14268:2:15","statements":[]},"src":"14264:120:15"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"14242:5:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"14249:3:15","type":""}],"src":"14204:186:15"},{"body":{"nodeType":"YulBlock","src":"14474:463:15","statements":[{"body":{"nodeType":"YulBlock","src":"14500:430:15","statements":[{"nodeType":"YulVariableDeclaration","src":"14514:53:15","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"14561:5:15"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"14530:30:15"},"nodeType":"YulFunctionCall","src":"14530:37:15"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"14518:8:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"14580:63:15","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"14603:8:15"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14631:10:15"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"14613:17:15"},"nodeType":"YulFunctionCall","src":"14613:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14599:3:15"},"nodeType":"YulFunctionCall","src":"14599:44:15"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"14584:11:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"14800:27:15","statements":[{"nodeType":"YulAssignment","src":"14802:23:15","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"14817:8:15"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14802:11:15"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"14784:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"14796:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14781:2:15"},"nodeType":"YulFunctionCall","src":"14781:18:15"},"nodeType":"YulIf","src":"14778:49:15"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"14869:11:15"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"14886:8:15"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14914:3:15"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"14896:17:15"},"nodeType":"YulFunctionCall","src":"14896:22:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14882:3:15"},"nodeType":"YulFunctionCall","src":"14882:37:15"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"14840:28:15"},"nodeType":"YulFunctionCall","src":"14840:80:15"},"nodeType":"YulExpressionStatement","src":"14840:80:15"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"14491:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"14496:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14488:2:15"},"nodeType":"YulFunctionCall","src":"14488:11:15"},"nodeType":"YulIf","src":"14485:445:15"}]},"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"14450:5:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"14457:3:15","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"14462:10:15","type":""}],"src":"14396:541:15"},{"body":{"nodeType":"YulBlock","src":"15006:54:15","statements":[{"nodeType":"YulAssignment","src":"15016:37:15","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"15041:4:15"},{"name":"value","nodeType":"YulIdentifier","src":"15047:5:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"15037:3:15"},"nodeType":"YulFunctionCall","src":"15037:16:15"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"15016:8:15"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"14981:4:15","type":""},{"name":"value","nodeType":"YulTypedName","src":"14987:5:15","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"14997:8:15","type":""}],"src":"14943:117:15"},{"body":{"nodeType":"YulBlock","src":"15117:118:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15127:68:15","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15176:1:15","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"15179:5:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15172:3:15"},"nodeType":"YulFunctionCall","src":"15172:13:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15191:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15187:3:15"},"nodeType":"YulFunctionCall","src":"15187:6:15"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"15143:28:15"},"nodeType":"YulFunctionCall","src":"15143:51:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15139:3:15"},"nodeType":"YulFunctionCall","src":"15139:56:15"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"15131:4:15","type":""}]},{"nodeType":"YulAssignment","src":"15204:25:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15218:4:15"},{"name":"mask","nodeType":"YulIdentifier","src":"15224:4:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15214:3:15"},"nodeType":"YulFunctionCall","src":"15214:15:15"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15204:6:15"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15094:4:15","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"15100:5:15","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"15110:6:15","type":""}],"src":"15066:169:15"},{"body":{"nodeType":"YulBlock","src":"15321:214:15","statements":[{"nodeType":"YulAssignment","src":"15454:37:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15481:4:15"},{"name":"len","nodeType":"YulIdentifier","src":"15487:3:15"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"15462:18:15"},"nodeType":"YulFunctionCall","src":"15462:29:15"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"15454:4:15"}]},{"nodeType":"YulAssignment","src":"15500:29:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15511:4:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15521:1:15","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"15524:3:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"15517:3:15"},"nodeType":"YulFunctionCall","src":"15517:11:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15508:2:15"},"nodeType":"YulFunctionCall","src":"15508:21:15"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"15500:4:15"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15302:4:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"15308:3:15","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"15316:4:15","type":""}],"src":"15240:295:15"},{"body":{"nodeType":"YulBlock","src":"15637:1301:15","statements":[{"nodeType":"YulVariableDeclaration","src":"15648:57:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15696:3:15"},{"name":"len","nodeType":"YulIdentifier","src":"15701:3:15"}],"functionName":{"name":"array_length_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"15662:33:15"},"nodeType":"YulFunctionCall","src":"15662:43:15"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"15652:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"15790:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"15792:16:15"},"nodeType":"YulFunctionCall","src":"15792:18:15"},"nodeType":"YulExpressionStatement","src":"15792:18:15"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15762:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"15770:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15759:2:15"},"nodeType":"YulFunctionCall","src":"15759:30:15"},"nodeType":"YulIf","src":"15756:56:15"},{"nodeType":"YulVariableDeclaration","src":"15822:52:15","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15868:4:15"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"15862:5:15"},"nodeType":"YulFunctionCall","src":"15862:11:15"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"15836:25:15"},"nodeType":"YulFunctionCall","src":"15836:38:15"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"15826:6:15","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15966:4:15"},{"name":"oldLen","nodeType":"YulIdentifier","src":"15972:6:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"15980:6:15"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_bytes_storage","nodeType":"YulIdentifier","src":"15921:44:15"},"nodeType":"YulFunctionCall","src":"15921:66:15"},"nodeType":"YulExpressionStatement","src":"15921:66:15"},{"nodeType":"YulVariableDeclaration","src":"15997:18:15","value":{"kind":"number","nodeType":"YulLiteral","src":"16014:1:15","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"16001:9:15","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"16062:624:15","statements":[{"nodeType":"YulVariableDeclaration","src":"16076:37:15","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16095:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16107:4:15","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16103:3:15"},"nodeType":"YulFunctionCall","src":"16103:9:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16091:3:15"},"nodeType":"YulFunctionCall","src":"16091:22:15"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"16080:7:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16127:50:15","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16172:4:15"}],"functionName":{"name":"array_dataslot_t_bytes_storage","nodeType":"YulIdentifier","src":"16141:30:15"},"nodeType":"YulFunctionCall","src":"16141:36:15"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"16131:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16190:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"16199:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"16194:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"16258:170:15","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16283:6:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16308:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16313:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16304:3:15"},"nodeType":"YulFunctionCall","src":"16304:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16291:12:15"},"nodeType":"YulFunctionCall","src":"16291:33:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16276:6:15"},"nodeType":"YulFunctionCall","src":"16276:49:15"},"nodeType":"YulExpressionStatement","src":"16276:49:15"},{"nodeType":"YulAssignment","src":"16342:24:15","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16356:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"16364:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16352:3:15"},"nodeType":"YulFunctionCall","src":"16352:14:15"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16342:6:15"}]},{"nodeType":"YulAssignment","src":"16383:31:15","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16400:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16411:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16396:3:15"},"nodeType":"YulFunctionCall","src":"16396:18:15"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16383:9:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16224:1:15"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"16227:7:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16221:2:15"},"nodeType":"YulFunctionCall","src":"16221:14:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"16236:21:15","statements":[{"nodeType":"YulAssignment","src":"16238:17:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"16247:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"16250:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16243:3:15"},"nodeType":"YulFunctionCall","src":"16243:12:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"16238:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"16217:3:15","statements":[]},"src":"16213:215:15"},{"body":{"nodeType":"YulBlock","src":"16464:163:15","statements":[{"nodeType":"YulVariableDeclaration","src":"16482:50:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16516:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16521:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16512:3:15"},"nodeType":"YulFunctionCall","src":"16512:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16499:12:15"},"nodeType":"YulFunctionCall","src":"16499:33:15"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"16486:9:15","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16556:6:15"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"16583:9:15"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16598:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"16606:4:15","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16594:3:15"},"nodeType":"YulFunctionCall","src":"16594:17:15"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"16564:18:15"},"nodeType":"YulFunctionCall","src":"16564:48:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16549:6:15"},"nodeType":"YulFunctionCall","src":"16549:64:15"},"nodeType":"YulExpressionStatement","src":"16549:64:15"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"16447:7:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"16456:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16444:2:15"},"nodeType":"YulFunctionCall","src":"16444:19:15"},"nodeType":"YulIf","src":"16441:186:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16647:4:15"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16661:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"16669:1:15","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"16657:3:15"},"nodeType":"YulFunctionCall","src":"16657:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"16673:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16653:3:15"},"nodeType":"YulFunctionCall","src":"16653:22:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16640:6:15"},"nodeType":"YulFunctionCall","src":"16640:36:15"},"nodeType":"YulExpressionStatement","src":"16640:36:15"}]},"nodeType":"YulCase","src":"16055:631:15","value":{"kind":"number","nodeType":"YulLiteral","src":"16060:1:15","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16703:229:15","statements":[{"nodeType":"YulVariableDeclaration","src":"16717:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"16730:1:15","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16721:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"16754:74:15","statements":[{"nodeType":"YulAssignment","src":"16772:42:15","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16798:3:15"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16803:9:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16794:3:15"},"nodeType":"YulFunctionCall","src":"16794:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16781:12:15"},"nodeType":"YulFunctionCall","src":"16781:33:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16772:5:15"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"16747:6:15"},"nodeType":"YulIf","src":"16744:84:15"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16848:4:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16907:5:15"},{"name":"newLen","nodeType":"YulIdentifier","src":"16914:6:15"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"16854:52:15"},"nodeType":"YulFunctionCall","src":"16854:67:15"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16841:6:15"},"nodeType":"YulFunctionCall","src":"16841:81:15"},"nodeType":"YulExpressionStatement","src":"16841:81:15"}]},"nodeType":"YulCase","src":"16695:237:15","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"16035:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"16043:2:15","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16032:2:15"},"nodeType":"YulFunctionCall","src":"16032:14:15"},"nodeType":"YulSwitch","src":"16025:907:15"}]},"name":"copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"15621:4:15","type":""},{"name":"src","nodeType":"YulTypedName","src":"15627:3:15","type":""},{"name":"len","nodeType":"YulTypedName","src":"15632:3:15","type":""}],"src":"15540:1398:15"},{"body":{"nodeType":"YulBlock","src":"17039:73:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17056:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"17061:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17049:6:15"},"nodeType":"YulFunctionCall","src":"17049:19:15"},"nodeType":"YulExpressionStatement","src":"17049:19:15"},{"nodeType":"YulAssignment","src":"17077:29:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17096:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"17101:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17092:3:15"},"nodeType":"YulFunctionCall","src":"17092:14:15"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17077:11:15"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17011:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"17016:6:15","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17027:11:15","type":""}],"src":"16944:168:15"},{"body":{"nodeType":"YulBlock","src":"17182:82:15","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17205:3:15"},{"name":"src","nodeType":"YulIdentifier","src":"17210:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"17215:6:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"17192:12:15"},"nodeType":"YulFunctionCall","src":"17192:30:15"},"nodeType":"YulExpressionStatement","src":"17192:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"17242:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"17247:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17238:3:15"},"nodeType":"YulFunctionCall","src":"17238:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"17256:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17231:6:15"},"nodeType":"YulFunctionCall","src":"17231:27:15"},"nodeType":"YulExpressionStatement","src":"17231:27:15"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"17164:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"17169:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"17174:6:15","type":""}],"src":"17118:146:15"},{"body":{"nodeType":"YulBlock","src":"17392:214:15","statements":[{"nodeType":"YulAssignment","src":"17402:77:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17467:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"17472:6:15"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17409:57:15"},"nodeType":"YulFunctionCall","src":"17409:70:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17402:3:15"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"17526:5:15"},{"name":"pos","nodeType":"YulIdentifier","src":"17533:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"17538:6:15"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17489:36:15"},"nodeType":"YulFunctionCall","src":"17489:56:15"},"nodeType":"YulExpressionStatement","src":"17489:56:15"},{"nodeType":"YulAssignment","src":"17554:46:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17565:3:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17592:6:15"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"17570:21:15"},"nodeType":"YulFunctionCall","src":"17570:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17561:3:15"},"nodeType":"YulFunctionCall","src":"17561:39:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17554:3:15"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"17365:5:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"17372:6:15","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17380:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17388:3:15","type":""}],"src":"17292:314:15"},{"body":{"nodeType":"YulBlock","src":"17738:203:15","statements":[{"nodeType":"YulAssignment","src":"17748:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17760:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17771:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17756:3:15"},"nodeType":"YulFunctionCall","src":"17756:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17748:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17795:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17806:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17791:3:15"},"nodeType":"YulFunctionCall","src":"17791:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17814:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"17820:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17810:3:15"},"nodeType":"YulFunctionCall","src":"17810:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17784:6:15"},"nodeType":"YulFunctionCall","src":"17784:47:15"},"nodeType":"YulExpressionStatement","src":"17784:47:15"},{"nodeType":"YulAssignment","src":"17840:94:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17912:6:15"},{"name":"value1","nodeType":"YulIdentifier","src":"17920:6:15"},{"name":"tail","nodeType":"YulIdentifier","src":"17929:4:15"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17848:63:15"},"nodeType":"YulFunctionCall","src":"17848:86:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17840:4:15"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17702:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17714:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17722:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17733:4:15","type":""}],"src":"17612:329:15"},{"body":{"nodeType":"YulBlock","src":"18053:119:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18075:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"18083:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18071:3:15"},"nodeType":"YulFunctionCall","src":"18071:14:15"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"18087:34:15","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18064:6:15"},"nodeType":"YulFunctionCall","src":"18064:58:15"},"nodeType":"YulExpressionStatement","src":"18064:58:15"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18143:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"18151:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18139:3:15"},"nodeType":"YulFunctionCall","src":"18139:15:15"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"18156:8:15","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18132:6:15"},"nodeType":"YulFunctionCall","src":"18132:33:15"},"nodeType":"YulExpressionStatement","src":"18132:33:15"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18045:6:15","type":""}],"src":"17947:225:15"},{"body":{"nodeType":"YulBlock","src":"18324:220:15","statements":[{"nodeType":"YulAssignment","src":"18334:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18400:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18405:2:15","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18341:58:15"},"nodeType":"YulFunctionCall","src":"18341:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18334:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18506:3:15"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"18417:88:15"},"nodeType":"YulFunctionCall","src":"18417:93:15"},"nodeType":"YulExpressionStatement","src":"18417:93:15"},{"nodeType":"YulAssignment","src":"18519:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18530:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"18535:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18526:3:15"},"nodeType":"YulFunctionCall","src":"18526:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18519:3:15"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18312:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18320:3:15","type":""}],"src":"18178:366:15"},{"body":{"nodeType":"YulBlock","src":"18721:248:15","statements":[{"nodeType":"YulAssignment","src":"18731:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18743:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18754:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18739:3:15"},"nodeType":"YulFunctionCall","src":"18739:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18731:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18778:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18789:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18774:3:15"},"nodeType":"YulFunctionCall","src":"18774:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18797:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"18803:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18793:3:15"},"nodeType":"YulFunctionCall","src":"18793:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18767:6:15"},"nodeType":"YulFunctionCall","src":"18767:47:15"},"nodeType":"YulExpressionStatement","src":"18767:47:15"},{"nodeType":"YulAssignment","src":"18823:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18957:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18831:124:15"},"nodeType":"YulFunctionCall","src":"18831:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18823:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18701:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18716:4:15","type":""}],"src":"18550:419:15"},{"body":{"nodeType":"YulBlock","src":"19081:76:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19103:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"19111:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19099:3:15"},"nodeType":"YulFunctionCall","src":"19099:14:15"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"19115:34:15","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19092:6:15"},"nodeType":"YulFunctionCall","src":"19092:58:15"},"nodeType":"YulExpressionStatement","src":"19092:58:15"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19073:6:15","type":""}],"src":"18975:182:15"},{"body":{"nodeType":"YulBlock","src":"19309:220:15","statements":[{"nodeType":"YulAssignment","src":"19319:74:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19385:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"19390:2:15","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19326:58:15"},"nodeType":"YulFunctionCall","src":"19326:67:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19319:3:15"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19491:3:15"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"19402:88:15"},"nodeType":"YulFunctionCall","src":"19402:93:15"},"nodeType":"YulExpressionStatement","src":"19402:93:15"},{"nodeType":"YulAssignment","src":"19504:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19515:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"19520:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19511:3:15"},"nodeType":"YulFunctionCall","src":"19511:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19504:3:15"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19297:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19305:3:15","type":""}],"src":"19163:366:15"},{"body":{"nodeType":"YulBlock","src":"19706:248:15","statements":[{"nodeType":"YulAssignment","src":"19716:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19728:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19739:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19724:3:15"},"nodeType":"YulFunctionCall","src":"19724:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19716:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19763:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19774:1:15","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19759:3:15"},"nodeType":"YulFunctionCall","src":"19759:17:15"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19782:4:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"19788:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19778:3:15"},"nodeType":"YulFunctionCall","src":"19778:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19752:6:15"},"nodeType":"YulFunctionCall","src":"19752:47:15"},"nodeType":"YulExpressionStatement","src":"19752:47:15"},{"nodeType":"YulAssignment","src":"19808:139:15","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19942:4:15"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19816:124:15"},"nodeType":"YulFunctionCall","src":"19816:131:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19808:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19686:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19701:4:15","type":""}],"src":"19535:419:15"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$3529_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$3529_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$3529_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(memPtr) {\n\n        mstore(add(memPtr, 0), \"Paycrest: zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_68acc8709af02b321316138701ad2c6648c264d7c602486f0d41b486400eedd4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_length_t_bytes_calldata_ptr(value, len) -> length {\n\n        length := len\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_bytes_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_bytes_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_bytes_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_calldata_ptr_to_t_bytes_storage(slot, src, len) {\n\n        let newLen := array_length_t_bytes_calldata_ptr(src, len)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_bytes_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := calldataload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value0, value1,  tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb57806399e3c0b414610109578063cb79455b14610125578063f2fde38b1461014157610088565b8063322008821461008d578063715018a6146100a957806379a0effb146100b357806384630736146100cf575b600080fd5b6100a760048036038101906100a29190610a3a565b61015d565b005b6100b1610271565b005b6100cd60048036038101906100c89190610af4565b610285565b005b6100e960048036038101906100e49190610b74565b6103d2565b005b6100f361043d565b6040516101009190610bb0565b60405180910390f35b610123600480360381019061011e9190610c03565b610467565b005b61013f600480360381019061013a9190610cb1565b61061c565b005b61015b60048036038101906101569190610cfe565b610673565b005b6101656106f6565b60008151905060005b8181101561026b57609d600085815260200190815260200160002083828151811061019c5761019b610d2b565b5b6020026020010151908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050604051806040016040528084838151811061020157610200610d2b565b5b602002602001015160200151815260200185815250609e600085848151811061022d5761022c610d2b565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061016e565b50505050565b6102796106f6565b6102836000610774565b565b61028d6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610db7565b60405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036103655780606660086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036103ce5780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6103da6106f6565b80606660006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc8ca786c100bc62a0dffbe768b5f0b770d84e8604c5de54b54197b9066bb42a9816040516104329190610de6565b60405180910390a150565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61046f6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d590610db7565b60405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361055d5780609b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036105dc5780609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace93083838360405161060f93929190610e1f565b60405180910390a1505050565b6106246106f6565b818160689182610635929190611077565b507f6a6600b7242975868d8321b5e64d0c9f2fcc92eb1af72254a6357be77ee7dcef8282604051610667929190611194565b60405180910390a15050565b61067b6106f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e19061122a565b60405180910390fd5b6106f381610774565b50565b6106fe61083a565b73ffffffffffffffffffffffffffffffffffffffff1661071c61043d565b73ffffffffffffffffffffffffffffffffffffffff1614610772576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076990611296565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61086981610856565b811461087457600080fd5b50565b60008135905061088681610860565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108da82610891565b810181811067ffffffffffffffff821117156108f9576108f86108a2565b5b80604052505050565b600061090c610842565b905061091882826108d1565b919050565b600067ffffffffffffffff821115610938576109376108a2565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156109695761096861094e565b5b6109736040610902565b9050600061098384828501610877565b600083015250602061099784828501610877565b60208301525092915050565b60006109b66109b18461091d565b610902565b905080838252602082019050604084028301858111156109d9576109d8610949565b5b835b81811015610a0257806109ee8882610953565b8452602084019350506040810190506109db565b5050509392505050565b600082601f830112610a2157610a2061088c565b5b8135610a318482602086016109a3565b91505092915050565b60008060408385031215610a5157610a5061084c565b5b6000610a5f85828601610877565b925050602083013567ffffffffffffffff811115610a8057610a7f610851565b5b610a8c85828601610a0c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ac182610a96565b9050919050565b610ad181610ab6565b8114610adc57600080fd5b50565b600081359050610aee81610ac8565b92915050565b60008060408385031215610b0b57610b0a61084c565b5b6000610b1985828601610877565b9250506020610b2a85828601610adf565b9150509250929050565b600067ffffffffffffffff82169050919050565b610b5181610b34565b8114610b5c57600080fd5b50565b600081359050610b6e81610b48565b92915050565b600060208284031215610b8a57610b8961084c565b5b6000610b9884828501610b5f565b91505092915050565b610baa81610ab6565b82525050565b6000602082019050610bc56000830184610ba1565b92915050565b60008115159050919050565b610be081610bcb565b8114610beb57600080fd5b50565b600081359050610bfd81610bd7565b92915050565b600080600060608486031215610c1c57610c1b61084c565b5b6000610c2a86828701610877565b9350506020610c3b86828701610adf565b9250506040610c4c86828701610bee565b9150509250925092565b600080fd5b60008083601f840112610c7157610c7061088c565b5b8235905067ffffffffffffffff811115610c8e57610c8d610c56565b5b602083019150836001820283011115610caa57610ca9610949565b5b9250929050565b60008060208385031215610cc857610cc761084c565b5b600083013567ffffffffffffffff811115610ce657610ce5610851565b5b610cf285828601610c5b565b92509250509250929050565b600060208284031215610d1457610d1361084c565b5b6000610d2284828501610adf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50617963726573743a207a65726f206164647265737300000000000000000000600082015250565b6000610da1601683610d5a565b9150610dac82610d6b565b602082019050919050565b60006020820190508181036000830152610dd081610d94565b9050919050565b610de081610b34565b82525050565b6000602082019050610dfb6000830184610dd7565b92915050565b610e0a81610856565b82525050565b610e1981610bcb565b82525050565b6000606082019050610e346000830186610e01565b610e416020830185610ba1565b610e4e6040830184610e10565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ea857607f821691505b602082108103610ebb57610eba610e61565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f237fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ee6565b610f2d8683610ee6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000610f74610f6f610f6a84610f45565b610f4f565b610f45565b9050919050565b6000819050919050565b610f8e83610f59565b610fa2610f9a82610f7b565b848454610ef3565b825550505050565b600090565b610fb7610faa565b610fc2818484610f85565b505050565b5b81811015610fe657610fdb600082610faf565b600181019050610fc8565b5050565b601f82111561102b57610ffc81610ec1565b61100584610ed6565b81016020851015611014578190505b61102861102085610ed6565b830182610fc7565b50505b505050565b600082821c905092915050565b600061104e60001984600802611030565b1980831691505092915050565b6000611067838361103d565b9150826002028217905092915050565b6110818383610e56565b67ffffffffffffffff81111561109a576110996108a2565b5b6110a48254610e90565b6110af828285610fea565b6000601f8311600181146110de57600084156110cc578287013590505b6110d6858261105b565b86555061113e565b601f1984166110ec86610ec1565b60005b82811015611114578489013582556001820191506020850194506020810190506110ef565b86831015611131578489013561112d601f89168261103d565b8355505b6001600288020188555050505b50505050505050565b600082825260208201905092915050565b82818337600083830152505050565b60006111738385611147565b9350611180838584611158565b61118983610891565b840190509392505050565b600060208201905081810360008301526111af818486611167565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611214602683610d5a565b915061121f826111b8565b604082019050919050565b6000602082019050818103600083015261124381611207565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611280602083610d5a565b915061128b8261124a565b602082019050919050565b600060208201905081810360008301526112af81611273565b905091905056fea264697066735822122050b41f080926bf4f9f186583798e139b279542447fd028eba1d461cde298594564736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xEB JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xCB79455B EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x141 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x84630736 EQ PUSH2 0xCF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xA3A JUMP JUMPDEST PUSH2 0x15D JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB1 PUSH2 0x271 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xAF4 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE4 SWAP2 SWAP1 PUSH2 0xB74 JUMP JUMPDEST PUSH2 0x3D2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF3 PUSH2 0x43D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x100 SWAP2 SWAP1 PUSH2 0xBB0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x123 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xC03 JUMP JUMPDEST PUSH2 0x467 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xCB1 JUMP JUMPDEST PUSH2 0x61C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x156 SWAP2 SWAP1 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x165 PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x9D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x19C JUMPI PUSH2 0x19B PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x200 PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x9E PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI PUSH2 0x22C PUSH2 0xD2B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x16E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x279 PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0x283 PUSH1 0x0 PUSH2 0x774 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x28D PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F3 SWAP1 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x365 JUMPI DUP1 PUSH1 0x66 PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x3CE JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x6F6 JUMP JUMPDEST DUP1 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xC8CA786C100BC62A0DFFBE768B5F0B770D84E8604C5DE54B54197B9066BB42A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x432 SWAP2 SWAP1 PUSH2 0xDE6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x46F PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D5 SWAP1 PUSH2 0xDB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x55D JUMPI DUP1 PUSH1 0x9B PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x5DC JUMPI DUP1 PUSH1 0x9C PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x60F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x624 PUSH2 0x6F6 JUMP JUMPDEST DUP2 DUP2 PUSH1 0x68 SWAP2 DUP3 PUSH2 0x635 SWAP3 SWAP2 SWAP1 PUSH2 0x1077 JUMP JUMPDEST POP PUSH32 0x6A6600B7242975868D8321B5E64D0C9F2FCC92EB1AF72254A6357BE77EE7DCEF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x667 SWAP3 SWAP2 SWAP1 PUSH2 0x1194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x67B PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6E1 SWAP1 PUSH2 0x122A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6F3 DUP2 PUSH2 0x774 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6FE PUSH2 0x83A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x71C PUSH2 0x43D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x772 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x769 SWAP1 PUSH2 0x1296 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x869 DUP2 PUSH2 0x856 JUMP JUMPDEST DUP2 EQ PUSH2 0x874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x886 DUP2 PUSH2 0x860 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8DA DUP3 PUSH2 0x891 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8F9 JUMPI PUSH2 0x8F8 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x90C PUSH2 0x842 JUMP JUMPDEST SWAP1 POP PUSH2 0x918 DUP3 DUP3 PUSH2 0x8D1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x938 JUMPI PUSH2 0x937 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x969 JUMPI PUSH2 0x968 PUSH2 0x94E JUMP JUMPDEST JUMPDEST PUSH2 0x973 PUSH1 0x40 PUSH2 0x902 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x983 DUP5 DUP3 DUP6 ADD PUSH2 0x877 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x997 DUP5 DUP3 DUP6 ADD PUSH2 0x877 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B6 PUSH2 0x9B1 DUP5 PUSH2 0x91D JUMP JUMPDEST PUSH2 0x902 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x9D9 JUMPI PUSH2 0x9D8 PUSH2 0x949 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA02 JUMPI DUP1 PUSH2 0x9EE DUP9 DUP3 PUSH2 0x953 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x9DB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA21 JUMPI PUSH2 0xA20 PUSH2 0x88C JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA31 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x9A3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA51 JUMPI PUSH2 0xA50 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA5F DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA80 JUMPI PUSH2 0xA7F PUSH2 0x851 JUMP JUMPDEST JUMPDEST PUSH2 0xA8C DUP6 DUP3 DUP7 ADD PUSH2 0xA0C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC1 DUP3 PUSH2 0xA96 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAD1 DUP2 PUSH2 0xAB6 JUMP JUMPDEST DUP2 EQ PUSH2 0xADC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAEE DUP2 PUSH2 0xAC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB0B JUMPI PUSH2 0xB0A PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB19 DUP6 DUP3 DUP7 ADD PUSH2 0x877 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB2A DUP6 DUP3 DUP7 ADD PUSH2 0xADF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB51 DUP2 PUSH2 0xB34 JUMP JUMPDEST DUP2 EQ PUSH2 0xB5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB6E DUP2 PUSH2 0xB48 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB8A JUMPI PUSH2 0xB89 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB98 DUP5 DUP3 DUP6 ADD PUSH2 0xB5F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBAA DUP2 PUSH2 0xAB6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xBC5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xBA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBE0 DUP2 PUSH2 0xBCB JUMP JUMPDEST DUP2 EQ PUSH2 0xBEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBFD DUP2 PUSH2 0xBD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC1C JUMPI PUSH2 0xC1B PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC2A DUP7 DUP3 DUP8 ADD PUSH2 0x877 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xC3B DUP7 DUP3 DUP8 ADD PUSH2 0xADF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xC4C DUP7 DUP3 DUP8 ADD PUSH2 0xBEE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC71 JUMPI PUSH2 0xC70 PUSH2 0x88C JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC8E JUMPI PUSH2 0xC8D PUSH2 0xC56 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xCAA JUMPI PUSH2 0xCA9 PUSH2 0x949 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC8 JUMPI PUSH2 0xCC7 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCE6 JUMPI PUSH2 0xCE5 PUSH2 0x851 JUMP JUMPDEST JUMPDEST PUSH2 0xCF2 DUP6 DUP3 DUP7 ADD PUSH2 0xC5B JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD14 JUMPI PUSH2 0xD13 PUSH2 0x84C JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD22 DUP5 DUP3 DUP6 ADD PUSH2 0xADF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x50617963726573743A207A65726F206164647265737300000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA1 PUSH1 0x16 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0xDAC DUP3 PUSH2 0xD6B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD0 DUP2 PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDE0 DUP2 PUSH2 0xB34 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDFB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDD7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE0A DUP2 PUSH2 0x856 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE19 DUP2 PUSH2 0xBCB JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xE34 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xE01 JUMP JUMPDEST PUSH2 0xE41 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0xE4E PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xE10 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xEA8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xEBB JUMPI PUSH2 0xEBA PUSH2 0xE61 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0xF23 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0xF2D DUP7 DUP4 PUSH2 0xEE6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF74 PUSH2 0xF6F PUSH2 0xF6A DUP5 PUSH2 0xF45 JUMP JUMPDEST PUSH2 0xF4F JUMP JUMPDEST PUSH2 0xF45 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF8E DUP4 PUSH2 0xF59 JUMP JUMPDEST PUSH2 0xFA2 PUSH2 0xF9A DUP3 PUSH2 0xF7B JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0xEF3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xFB7 PUSH2 0xFAA JUMP JUMPDEST PUSH2 0xFC2 DUP2 DUP5 DUP5 PUSH2 0xF85 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFE6 JUMPI PUSH2 0xFDB PUSH1 0x0 DUP3 PUSH2 0xFAF JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xFC8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x102B JUMPI PUSH2 0xFFC DUP2 PUSH2 0xEC1 JUMP JUMPDEST PUSH2 0x1005 DUP5 PUSH2 0xED6 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x1014 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x1028 PUSH2 0x1020 DUP6 PUSH2 0xED6 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0xFC7 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x104E PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x1030 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1067 DUP4 DUP4 PUSH2 0x103D JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1081 DUP4 DUP4 PUSH2 0xE56 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109A JUMPI PUSH2 0x1099 PUSH2 0x8A2 JUMP JUMPDEST JUMPDEST PUSH2 0x10A4 DUP3 SLOAD PUSH2 0xE90 JUMP JUMPDEST PUSH2 0x10AF DUP3 DUP3 DUP6 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x10DE JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x10CC JUMPI DUP3 DUP8 ADD CALLDATALOAD SWAP1 POP JUMPDEST PUSH2 0x10D6 DUP6 DUP3 PUSH2 0x105B JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x113E JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x10EC DUP7 PUSH2 0xEC1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1114 JUMPI DUP5 DUP10 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x10EF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x1131 JUMPI DUP5 DUP10 ADD CALLDATALOAD PUSH2 0x112D PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x103D JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1173 DUP4 DUP6 PUSH2 0x1147 JUMP JUMPDEST SWAP4 POP PUSH2 0x1180 DUP4 DUP6 DUP5 PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x1189 DUP4 PUSH2 0x891 JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11AF DUP2 DUP5 DUP7 PUSH2 0x1167 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1214 PUSH1 0x26 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0x121F DUP3 PUSH2 0x11B8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1243 DUP2 PUSH2 0x1207 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1280 PUSH1 0x20 DUP4 PUSH2 0xD5A JUMP JUMPDEST SWAP2 POP PUSH2 0x128B DUP3 PUSH2 0x124A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12AF DUP2 PUSH2 0x1273 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xB4 0x1F ADDMOD MULMOD 0x26 0xBF 0x4F SWAP16 XOR PUSH6 0x83798E139B27 SWAP6 TIMESTAMP PREVRANDAO PUSH32 0xD028EBA1D461CDE298594564736F6C6343000812003300000000000000000000 ","sourceMap":"139:2737:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1751:500;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2064:101:0;;;:::i;:::-;;2443:263:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2257:180;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1401:344:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2712:161;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1751:500:13;1334:13:0;:11;:13::i;:::-;1868:14:13::1;1885:12;:19;1868:36;;1919:6;1914:331;1935:6;1931:1;:10;1914:331;;;1959:21;:31;1981:8;1959:31;;;;;;;;;;;1996:12;2009:1;1996:15;;;;;;;;:::i;:::-;;;;;;;;1959:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2078:97;;;;;;;;2120:12;2133:1;2120:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2078:97;;;;2152:8;2078:97;;::::0;2026:27:::1;:49;2054:12;2067:1;2054:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2026:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2217:3;;;;;;;1914:331;;;;1857:394;1751:500:::0;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;2443:263:13:-;1334:13:0;:11;:13::i;:::-;2559:1:13::1;2542:19;;:5;:19;;::::0;2534:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2602:13;:4;:13:::0;2598:39:::1;;2632:5;2617:12;;:20;;;;;;;;;;;;;;;;;;2598:39;2651:20;:4;:20:::0;2647:52:::1;;2694:5;2673:18;;:26;;;;;;;;;;;;;;;;;;2647:52;2443:263:::0;;:::o;2257:180::-;1334:13:0;:11;:13::i;:::-;2363:19:13::1;2342:18;;:40;;;;;;;;;;;;;;;;;;2397:33;2410:19;2397:33;;;;;;:::i;:::-;;;;;;;;2257:180:::0;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1401:344:13:-;1334:13:0;:11;:13::i;:::-;1525:1:13::1;1508:19;;:5;:19;;::::0;1500:54:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;1568:15;:4;:15:::0;1564:54:::1;;1612:6;1585:17;:24;1603:5;1585:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1564:54;1632:19;:4;:19:::0;1628:55:::1;;1677:6;1653:14;:21;1668:5;1653:21;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;1628:55;1699:39;1718:4;1724:5;1731:6;1699:39;;;;;;;;:::i;:::-;;;;;;;;1401:344:::0;;;:::o;2712:161::-;1334:13:0;:11;:13::i;:::-;2816:10:13::1;;2802:11;:24;;;;;;;:::i;:::-;;2841:25;2855:10;;2841:25;;;;;;;:::i;:::-;;;;;;;;2712:161:::0;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1599:130::-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;850:96:6:-;903:7;929:10;922:17;;850:96;:::o;7:75:15:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:117::-;799:1;796;789:12;813:102;854:6;905:2;901:7;896:2;889:5;885:14;881:28;871:38;;813:102;;;:::o;921:180::-;969:77;966:1;959:88;1066:4;1063:1;1056:15;1090:4;1087:1;1080:15;1107:281;1190:27;1212:4;1190:27;:::i;:::-;1182:6;1178:40;1320:6;1308:10;1305:22;1284:18;1272:10;1269:34;1266:62;1263:88;;;1331:18;;:::i;:::-;1263:88;1371:10;1367:2;1360:22;1150:238;1107:281;;:::o;1394:129::-;1428:6;1455:20;;:::i;:::-;1445:30;;1484:33;1512:4;1504:6;1484:33;:::i;:::-;1394:129;;;:::o;1529:340::-;1635:4;1725:18;1717:6;1714:30;1711:56;;;1747:18;;:::i;:::-;1711:56;1797:4;1789:6;1785:17;1777:25;;1857:4;1851;1847:15;1839:23;;1529:340;;;:::o;1875:117::-;1984:1;1981;1974:12;1998:117;2107:1;2104;2097:12;2293:578;2371:5;2415:4;2403:9;2398:3;2394:19;2390:30;2387:117;;;2423:79;;:::i;:::-;2387:117;2522:21;2538:4;2522:21;:::i;:::-;2513:30;;2602:1;2642:49;2687:3;2678:6;2667:9;2663:22;2642:49;:::i;:::-;2635:4;2628:5;2624:16;2617:75;2553:150;2762:2;2803:49;2848:3;2839:6;2828:9;2824:22;2803:49;:::i;:::-;2796:4;2789:5;2785:16;2778:75;2713:151;2293:578;;;;:::o;2928:797::-;3053:5;3078:110;3094:93;3180:6;3094:93;:::i;:::-;3078:110;:::i;:::-;3069:119;;3208:5;3237:6;3230:5;3223:21;3271:4;3264:5;3260:16;3253:23;;3324:4;3316:6;3312:17;3304:6;3300:30;3353:3;3345:6;3342:15;3339:122;;;3372:79;;:::i;:::-;3339:122;3487:6;3470:249;3504:6;3499:3;3496:15;3470:249;;;3579:3;3608:66;3670:3;3658:10;3608:66;:::i;:::-;3603:3;3596:79;3704:4;3699:3;3695:14;3688:21;;3546:173;3530:4;3525:3;3521:14;3514:21;;3470:249;;;3474:21;3059:666;;2928:797;;;;;:::o;3782:428::-;3882:5;3931:3;3924:4;3916:6;3912:17;3908:27;3898:122;;3939:79;;:::i;:::-;3898:122;4056:6;4043:20;4081:123;4200:3;4192:6;4185:4;4177:6;4173:17;4081:123;:::i;:::-;4072:132;;3888:322;3782:428;;;;:::o;4216:742::-;4338:6;4346;4395:2;4383:9;4374:7;4370:23;4366:32;4363:119;;;4401:79;;:::i;:::-;4363:119;4521:1;4546:53;4591:7;4582:6;4571:9;4567:22;4546:53;:::i;:::-;4536:63;;4492:117;4676:2;4665:9;4661:18;4648:32;4707:18;4699:6;4696:30;4693:117;;;4729:79;;:::i;:::-;4693:117;4834:107;4933:7;4924:6;4913:9;4909:22;4834:107;:::i;:::-;4824:117;;4619:332;4216:742;;;;;:::o;4964:126::-;5001:7;5041:42;5034:5;5030:54;5019:65;;4964:126;;;:::o;5096:96::-;5133:7;5162:24;5180:5;5162:24;:::i;:::-;5151:35;;5096:96;;;:::o;5198:122::-;5271:24;5289:5;5271:24;:::i;:::-;5264:5;5261:35;5251:63;;5310:1;5307;5300:12;5251:63;5198:122;:::o;5326:139::-;5372:5;5410:6;5397:20;5388:29;;5426:33;5453:5;5426:33;:::i;:::-;5326:139;;;;:::o;5471:474::-;5539:6;5547;5596:2;5584:9;5575:7;5571:23;5567:32;5564:119;;;5602:79;;:::i;:::-;5564:119;5722:1;5747:53;5792:7;5783:6;5772:9;5768:22;5747:53;:::i;:::-;5737:63;;5693:117;5849:2;5875:53;5920:7;5911:6;5900:9;5896:22;5875:53;:::i;:::-;5865:63;;5820:118;5471:474;;;;;:::o;5951:101::-;5987:7;6027:18;6020:5;6016:30;6005:41;;5951:101;;;:::o;6058:120::-;6130:23;6147:5;6130:23;:::i;:::-;6123:5;6120:34;6110:62;;6168:1;6165;6158:12;6110:62;6058:120;:::o;6184:137::-;6229:5;6267:6;6254:20;6245:29;;6283:32;6309:5;6283:32;:::i;:::-;6184:137;;;;:::o;6327:327::-;6385:6;6434:2;6422:9;6413:7;6409:23;6405:32;6402:119;;;6440:79;;:::i;:::-;6402:119;6560:1;6585:52;6629:7;6620:6;6609:9;6605:22;6585:52;:::i;:::-;6575:62;;6531:116;6327:327;;;;:::o;6660:118::-;6747:24;6765:5;6747:24;:::i;:::-;6742:3;6735:37;6660:118;;:::o;6784:222::-;6877:4;6915:2;6904:9;6900:18;6892:26;;6928:71;6996:1;6985:9;6981:17;6972:6;6928:71;:::i;:::-;6784:222;;;;:::o;7012:90::-;7046:7;7089:5;7082:13;7075:21;7064:32;;7012:90;;;:::o;7108:116::-;7178:21;7193:5;7178:21;:::i;:::-;7171:5;7168:32;7158:60;;7214:1;7211;7204:12;7158:60;7108:116;:::o;7230:133::-;7273:5;7311:6;7298:20;7289:29;;7327:30;7351:5;7327:30;:::i;:::-;7230:133;;;;:::o;7369:613::-;7443:6;7451;7459;7508:2;7496:9;7487:7;7483:23;7479:32;7476:119;;;7514:79;;:::i;:::-;7476:119;7634:1;7659:53;7704:7;7695:6;7684:9;7680:22;7659:53;:::i;:::-;7649:63;;7605:117;7761:2;7787:53;7832:7;7823:6;7812:9;7808:22;7787:53;:::i;:::-;7777:63;;7732:118;7889:2;7915:50;7957:7;7948:6;7937:9;7933:22;7915:50;:::i;:::-;7905:60;;7860:115;7369:613;;;;;:::o;7988:117::-;8097:1;8094;8087:12;8124:552;8181:8;8191:6;8241:3;8234:4;8226:6;8222:17;8218:27;8208:122;;8249:79;;:::i;:::-;8208:122;8362:6;8349:20;8339:30;;8392:18;8384:6;8381:30;8378:117;;;8414:79;;:::i;:::-;8378:117;8528:4;8520:6;8516:17;8504:29;;8582:3;8574:4;8566:6;8562:17;8552:8;8548:32;8545:41;8542:128;;;8589:79;;:::i;:::-;8542:128;8124:552;;;;;:::o;8682:527::-;8752:6;8760;8809:2;8797:9;8788:7;8784:23;8780:32;8777:119;;;8815:79;;:::i;:::-;8777:119;8963:1;8952:9;8948:17;8935:31;8993:18;8985:6;8982:30;8979:117;;;9015:79;;:::i;:::-;8979:117;9128:64;9184:7;9175:6;9164:9;9160:22;9128:64;:::i;:::-;9110:82;;;;8906:296;8682:527;;;;;:::o;9215:329::-;9274:6;9323:2;9311:9;9302:7;9298:23;9294:32;9291:119;;;9329:79;;:::i;:::-;9291:119;9449:1;9474:53;9519:7;9510:6;9499:9;9495:22;9474:53;:::i;:::-;9464:63;;9420:117;9215:329;;;;:::o;9550:180::-;9598:77;9595:1;9588:88;9695:4;9692:1;9685:15;9719:4;9716:1;9709:15;9736:169;9820:11;9854:6;9849:3;9842:19;9894:4;9889:3;9885:14;9870:29;;9736:169;;;;:::o;9911:172::-;10051:24;10047:1;10039:6;10035:14;10028:48;9911:172;:::o;10089:366::-;10231:3;10252:67;10316:2;10311:3;10252:67;:::i;:::-;10245:74;;10328:93;10417:3;10328:93;:::i;:::-;10446:2;10441:3;10437:12;10430:19;;10089:366;;;:::o;10461:419::-;10627:4;10665:2;10654:9;10650:18;10642:26;;10714:9;10708:4;10704:20;10700:1;10689:9;10685:17;10678:47;10742:131;10868:4;10742:131;:::i;:::-;10734:139;;10461:419;;;:::o;10886:115::-;10971:23;10988:5;10971:23;:::i;:::-;10966:3;10959:36;10886:115;;:::o;11007:218::-;11098:4;11136:2;11125:9;11121:18;11113:26;;11149:69;11215:1;11204:9;11200:17;11191:6;11149:69;:::i;:::-;11007:218;;;;:::o;11231:118::-;11318:24;11336:5;11318:24;:::i;:::-;11313:3;11306:37;11231:118;;:::o;11355:109::-;11436:21;11451:5;11436:21;:::i;:::-;11431:3;11424:34;11355:109;;:::o;11470:430::-;11613:4;11651:2;11640:9;11636:18;11628:26;;11664:71;11732:1;11721:9;11717:17;11708:6;11664:71;:::i;:::-;11745:72;11813:2;11802:9;11798:18;11789:6;11745:72;:::i;:::-;11827:66;11889:2;11878:9;11874:18;11865:6;11827:66;:::i;:::-;11470:430;;;;;;:::o;11906:96::-;11964:6;11992:3;11982:13;;11906:96;;;;:::o;12008:180::-;12056:77;12053:1;12046:88;12153:4;12150:1;12143:15;12177:4;12174:1;12167:15;12194:320;12238:6;12275:1;12269:4;12265:12;12255:22;;12322:1;12316:4;12312:12;12343:18;12333:81;;12399:4;12391:6;12387:17;12377:27;;12333:81;12461:2;12453:6;12450:14;12430:18;12427:38;12424:84;;12480:18;;:::i;:::-;12424:84;12245:269;12194:320;;;:::o;12520:140::-;12568:4;12591:3;12583:11;;12614:3;12611:1;12604:14;12648:4;12645:1;12635:18;12627:26;;12520:140;;;:::o;12666:93::-;12703:6;12750:2;12745;12738:5;12734:14;12730:23;12720:33;;12666:93;;;:::o;12765:107::-;12809:8;12859:5;12853:4;12849:16;12828:37;;12765:107;;;;:::o;12878:393::-;12947:6;12997:1;12985:10;12981:18;13020:97;13050:66;13039:9;13020:97;:::i;:::-;13138:39;13168:8;13157:9;13138:39;:::i;:::-;13126:51;;13210:4;13206:9;13199:5;13195:21;13186:30;;13259:4;13249:8;13245:19;13238:5;13235:30;13225:40;;12954:317;;12878:393;;;;;:::o;13277:77::-;13314:7;13343:5;13332:16;;13277:77;;;:::o;13360:60::-;13388:3;13409:5;13402:12;;13360:60;;;:::o;13426:142::-;13476:9;13509:53;13527:34;13536:24;13554:5;13536:24;:::i;:::-;13527:34;:::i;:::-;13509:53;:::i;:::-;13496:66;;13426:142;;;:::o;13574:75::-;13617:3;13638:5;13631:12;;13574:75;;;:::o;13655:269::-;13765:39;13796:7;13765:39;:::i;:::-;13826:91;13875:41;13899:16;13875:41;:::i;:::-;13867:6;13860:4;13854:11;13826:91;:::i;:::-;13820:4;13813:105;13731:193;13655:269;;;:::o;13930:73::-;13975:3;13930:73;:::o;14009:189::-;14086:32;;:::i;:::-;14127:65;14185:6;14177;14171:4;14127:65;:::i;:::-;14062:136;14009:189;;:::o;14204:186::-;14264:120;14281:3;14274:5;14271:14;14264:120;;;14335:39;14372:1;14365:5;14335:39;:::i;:::-;14308:1;14301:5;14297:13;14288:22;;14264:120;;;14204:186;;:::o;14396:541::-;14496:2;14491:3;14488:11;14485:445;;;14530:37;14561:5;14530:37;:::i;:::-;14613:29;14631:10;14613:29;:::i;:::-;14603:8;14599:44;14796:2;14784:10;14781:18;14778:49;;;14817:8;14802:23;;14778:49;14840:80;14896:22;14914:3;14896:22;:::i;:::-;14886:8;14882:37;14869:11;14840:80;:::i;:::-;14500:430;;14485:445;14396:541;;;:::o;14943:117::-;14997:8;15047:5;15041:4;15037:16;15016:37;;14943:117;;;;:::o;15066:169::-;15110:6;15143:51;15191:1;15187:6;15179:5;15176:1;15172:13;15143:51;:::i;:::-;15139:56;15224:4;15218;15214:15;15204:25;;15117:118;15066:169;;;;:::o;15240:295::-;15316:4;15462:29;15487:3;15481:4;15462:29;:::i;:::-;15454:37;;15524:3;15521:1;15517:11;15511:4;15508:21;15500:29;;15240:295;;;;:::o;15540:1398::-;15662:43;15701:3;15696;15662:43;:::i;:::-;15770:18;15762:6;15759:30;15756:56;;;15792:18;;:::i;:::-;15756:56;15836:38;15868:4;15862:11;15836:38;:::i;:::-;15921:66;15980:6;15972;15966:4;15921:66;:::i;:::-;16014:1;16043:2;16035:6;16032:14;16060:1;16055:631;;;;16730:1;16747:6;16744:84;;;16803:9;16798:3;16794:19;16781:33;16772:42;;16744:84;16854:67;16914:6;16907:5;16854:67;:::i;:::-;16848:4;16841:81;16703:229;16025:907;;16055:631;16107:4;16103:9;16095:6;16091:22;16141:36;16172:4;16141:36;:::i;:::-;16199:1;16213:215;16227:7;16224:1;16221:14;16213:215;;;16313:9;16308:3;16304:19;16291:33;16283:6;16276:49;16364:1;16356:6;16352:14;16342:24;;16411:2;16400:9;16396:18;16383:31;;16250:4;16247:1;16243:12;16238:17;;16213:215;;;16456:6;16447:7;16444:19;16441:186;;;16521:9;16516:3;16512:19;16499:33;16564:48;16606:4;16598:6;16594:17;16583:9;16564:48;:::i;:::-;16556:6;16549:64;16464:163;16441:186;16673:1;16669;16661:6;16657:14;16653:22;16647:4;16640:36;16062:624;;;16025:907;;15637:1301;;;15540:1398;;;:::o;16944:168::-;17027:11;17061:6;17056:3;17049:19;17101:4;17096:3;17092:14;17077:29;;16944:168;;;;:::o;17118:146::-;17215:6;17210:3;17205;17192:30;17256:1;17247:6;17242:3;17238:16;17231:27;17118:146;;;:::o;17292:314::-;17388:3;17409:70;17472:6;17467:3;17409:70;:::i;:::-;17402:77;;17489:56;17538:6;17533:3;17526:5;17489:56;:::i;:::-;17570:29;17592:6;17570:29;:::i;:::-;17565:3;17561:39;17554:46;;17292:314;;;;;:::o;17612:329::-;17733:4;17771:2;17760:9;17756:18;17748:26;;17820:9;17814:4;17810:20;17806:1;17795:9;17791:17;17784:47;17848:86;17929:4;17920:6;17912;17848:86;:::i;:::-;17840:94;;17612:329;;;;;:::o;17947:225::-;18087:34;18083:1;18075:6;18071:14;18064:58;18156:8;18151:2;18143:6;18139:15;18132:33;17947:225;:::o;18178:366::-;18320:3;18341:67;18405:2;18400:3;18341:67;:::i;:::-;18334:74;;18417:93;18506:3;18417:93;:::i;:::-;18535:2;18530:3;18526:12;18519:19;;18178:366;;;:::o;18550:419::-;18716:4;18754:2;18743:9;18739:18;18731:26;;18803:9;18797:4;18793:20;18789:1;18778:9;18774:17;18767:47;18831:131;18957:4;18831:131;:::i;:::-;18823:139;;18550:419;;;:::o;18975:182::-;19115:34;19111:1;19103:6;19099:14;19092:58;18975:182;:::o;19163:366::-;19305:3;19326:67;19390:2;19385:3;19326:67;:::i;:::-;19319:74;;19402:93;19491:3;19402:93;:::i;:::-;19520:2;19515:3;19511:12;19504:19;;19163:366;;;:::o;19535:419::-;19701:4;19739:2;19728:9;19724:18;19716:26;;19788:9;19782:4;19778:20;19774:1;19763:9;19759:17;19752:47;19816:131;19942:4;19816:131;:::i;:::-;19808:139;;19535:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"968800","executionCost":"1008","totalCost":"969808"},"external":{"owner()":"2522","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","transferOwnership(address)":"30810","updateProtocolAddresses(bytes32,address)":"51602","updateProtocolAggregator(bytes)":"infinite","updateProtocolFees(uint64)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","transferOwnership(address)":"f2fde38b","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolAggregator(bytes)":"cb79455b","updateProtocolFees(uint64)":"84630736"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"protocolFee\",\"type\":\"uint64\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"SetAggregator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregator\",\"type\":\"bytes\"}],\"name\":\"updateProtocolAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_protocolFeePercent\",\"type\":\"uint64\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaycrestSettingManager.sol\":\"PaycrestSettingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS;\\n    uint64 internal protocolFeePercent; // 5%\\n    address internal feeRecipient;\\n    address internal _aggregatorAddress;\\n    bytes internal _aggregator;\\n    \\n    // this should decrease if more slots are needed on this contract to avoid collisions with base contract\\n    uint256[50] private __gap;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event PaycrestFees(uint64 protocolFee);\\n    event SetAggregator(bytes aggregator);\\n    event SetFeeRecipient(address feeRecipient);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint64 _protocolFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        emit PaycrestFees(_protocolFeePercent);\\n    }\\n\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        require(value != address(0), \\\"Paycrest: zero address\\\");\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _aggregatorAddress = value;\\n    }\\n\\n    function updateProtocolAggregator(bytes calldata aggregator) external onlyOwner {\\n        _aggregator = aggregator;\\n        emit SetAggregator(aggregator);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa7a73992f19899060ce30182c809c3bd02ce01e4675de7e0ddd1701deccb25f9\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1161,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3536,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":3538,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint64"},{"astId":3540,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"feeRecipient","offset":8,"slot":"102","type":"t_address"},{"astId":3542,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_aggregatorAddress","offset":0,"slot":"103","type":"t_address"},{"astId":3544,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_aggregator","offset":0,"slot":"104","type":"t_bytes_storage"},{"astId":3548,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"105","type":"t_array(t_uint256)50_storage"},{"astId":3552,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isTokenSupported","offset":0,"slot":"155","type":"t_mapping(t_address,t_bool)"},{"astId":3556,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isWhitelisted","offset":0,"slot":"156","type":"t_mapping(t_address,t_bool)"},{"astId":3562,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutions","offset":0,"slot":"157","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)3529_storage)dyn_storage)"},{"astId":3567,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutionsByCode","offset":0,"slot":"158","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)3534_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)3529_storage)dyn_storage":{"base":"t_struct(Institution)3529_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_array(t_struct(Institution)3529_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)3529_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)3534_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)3534_storage"},"t_struct(Institution)3529_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":3526,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3528,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)3534_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":3531,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3533,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interface/IPaycrest.sol":{"IPaycrest":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardValidator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"label","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAggregator","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAggregatorAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint64","name":"protocolReward","type":"uint64"},{"internalType":"uint256","name":"max_bps","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"getWhitelistedStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"bytes32","name":"_label","type":"bytes32"},{"internalType":"address[]","name":"_validators","type":"address[]"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint64","name":"_settlePercent","type":"uint64"},{"internalType":"bool","name":"_isPartner","type":"bool"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Chef Photons, Paycrest Team serving high quality drinks; drink responsibly. Factory and global config params","events":{"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)":{"details":"Emitted when deposit is made."},"Refunded(bytes32,bytes32)":{"details":"Emitted when aggregator refund transaction."},"RewardValidator(address,uint256)":{"details":"Emitted when primary validator get therir rewards."},"Settled(bytes32,bytes32,bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get therir rewards."}},"kind":"dev","methods":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"details":"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address","params":{"_amount":"amount in the decimal of `_token` above.","_institutionCode":"institution code of the sender.","_label":"reference of the sender.","_rate":"rate at which sender intended to sell `_amount` of `_token`.","_refundAddress":"address that is going to recieve `_amount` in `_token` when there is a need to refund.","_senderFee":"amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.","_senderFeeRecipient":"address that is going to recieve `_senderFee` in `_token` when there is a need to refund.","_token":"address of the token.","messageHash":"hash must be the result of a hash operation for the verification to be secure. message"},"returns":{"_orderId":"the bytes20 which is the orderId"}},"getAggregator()":{"returns":{"_0":"aggregator public key."}},"getAggregatorAddress()":{"returns":{"_0":"address of `Aggregator`."}},"getFeeDetails()":{"returns":{"max_bps":"maximum amount in bps \"100% == 100_000\".","protocolReward":"amount that will be taken in percentage on all trade."}},"getOrderInfo(bytes32)":{"params":{"_orderId":"transaction Id."}},"getWhitelistedStatus(address)":{"params":{"sender":"address of the sender."},"returns":{"_0":"address of `status`."}},"isTokenSupported(address)":{"params":{"_token":"address of the token to check."},"returns":{"_0":"return the status of `_token` {bool}"}},"refund(bytes32,bytes32)":{"params":{"_label":"reference of the sender.","_orderId":"transaction Id."},"returns":{"_0":"return the status of transaction {bool}"}},"settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)":{"params":{"_isPartner":"is the liquidity provider a partner.","_label":"reference of the sender.","_liquidityProvider":"address of the liquidity provider.","_orderId":"transaction Id.","_settlePercent":"rate at which the transaction is settled.","_validators":"arrays of secondary validators."},"returns":{"_0":"return the status of transaction {bool}"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":"2654ec7e","getAggregator()":"3ad59dbc","getAggregatorAddress()":"e8d6e0de","getFeeDetails()":"b810c636","getOrderInfo(bytes32)":"768c6ec0","getWhitelistedStatus(address)":"d8e8de34","isTokenSupported(address)":"75151b63","refund(bytes32,bytes32)":"e4683a79","settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)":"137764fb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregator\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAggregatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"protocolReward\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"max_bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_label\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_settlePercent\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_isPartner\",\"type\":\"bool\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chef Photons, Paycrest Team serving high quality drinks; drink responsibly. Factory and global config params\",\"events\":{\"Deposit(address,uint256,bytes32,uint256,bytes32,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Refunded(bytes32,bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"RewardValidator(address,uint256)\":{\"details\":\"Emitted when primary validator get therir rewards.\"},\"Settled(bytes32,bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\",\"params\":{\"_amount\":\"amount in the decimal of `_token` above.\",\"_institutionCode\":\"institution code of the sender.\",\"_label\":\"reference of the sender.\",\"_rate\":\"rate at which sender intended to sell `_amount` of `_token`.\",\"_refundAddress\":\"address that is going to recieve `_amount` in `_token` when there is a need to refund.\",\"_senderFee\":\"amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\",\"_senderFeeRecipient\":\"address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\",\"_token\":\"address of the token.\",\"messageHash\":\"hash must be the result of a hash operation for the verification to be secure. message\"},\"returns\":{\"_orderId\":\"the bytes20 which is the orderId\"}},\"getAggregator()\":{\"returns\":{\"_0\":\"aggregator public key.\"}},\"getAggregatorAddress()\":{\"returns\":{\"_0\":\"address of `Aggregator`.\"}},\"getFeeDetails()\":{\"returns\":{\"max_bps\":\"maximum amount in bps \\\"100% == 100_000\\\".\",\"protocolReward\":\"amount that will be taken in percentage on all trade.\"}},\"getOrderInfo(bytes32)\":{\"params\":{\"_orderId\":\"transaction Id.\"}},\"getWhitelistedStatus(address)\":{\"params\":{\"sender\":\"address of the sender.\"},\"returns\":{\"_0\":\"address of `status`.\"}},\"isTokenSupported(address)\":{\"params\":{\"_token\":\"address of the token to check.\"},\"returns\":{\"_0\":\"return the status of `_token` {bool}\"}},\"refund(bytes32,bytes32)\":{\"params\":{\"_label\":\"reference of the sender.\",\"_orderId\":\"transaction Id.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}},\"settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)\":{\"params\":{\"_isPartner\":\"is the liquidity provider a partner.\",\"_label\":\"reference of the sender.\",\"_liquidityProvider\":\"address of the liquidity provider.\",\"_orderId\":\"transaction Id.\",\"_settlePercent\":\"rate at which the transaction is settled.\",\"_validators\":\"arrays of secondary validators.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)\":{\"notice\":\"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\"},\"getAggregator()\":{\"notice\":\"get aggregator public key.\"},\"getAggregatorAddress()\":{\"notice\":\"get address of liquidity aggregator.\"},\"getFeeDetails()\":{\"notice\":\"get every rewards and address on Paycrest.\"},\"getOrderInfo(bytes32)\":{\"notice\":\"get order details.\"},\"getWhitelistedStatus(address)\":{\"notice\":\"get address of sender whitelisting status.\"},\"isTokenSupported(address)\":{\"notice\":\"get supported token from Paycrest.\"},\"refund(bytes32,bytes32)\":{\"notice\":\"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false.\"},\"settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)\":{\"notice\":\"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IPaycrest.sol\":\"IPaycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, bytes32 label, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, bytes32 label, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId, bytes32 label);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n    /// @dev Emitted when primary validator get therir rewards.\\n    event RewardValidator(address indexed validator, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _institutionCode institution code of the sender.\\n    /// @param _label reference of the sender.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param _senderFeeRecipient address that is going to recieve `_senderFee` in `_token` when there is a need to refund.\\n    /// @param _senderFee amount in the decimal of `_token` that is going to be paid to `_senderFeeRecipient` when there is a need to refund.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        bytes32 _label,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @param _validators arrays of secondary validators.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @param _isPartner is the liquidity provider a partner.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, bytes32 _label, address[] calldata _validators, address _liquidityProvider, uint64 _settlePercent, bool _isPartner)  external returns(bytes32, address);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @param _label reference of the sender.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId, bytes32 _label)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint64 protocolReward, \\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `Aggregator`.\\n    function getAggregatorAddress() external view returns(address);\\n\\n    /// @notice get aggregator public key.\\n    /// @return aggregator public key.\\n    function getAggregator() external view returns(bytes memory);\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x00812f530758d6736a16754a83c21f42c344651238f845ada8b6d996c7d2c051\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"createOrder(address,uint256,bytes32,bytes32,uint96,address,uint256,address,string)":{"notice":"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call."},"getAggregator()":{"notice":"get aggregator public key."},"getAggregatorAddress()":{"notice":"get address of liquidity aggregator."},"getFeeDetails()":{"notice":"get every rewards and address on Paycrest."},"getOrderInfo(bytes32)":{"notice":"get order details."},"getWhitelistedStatus(address)":{"notice":"get address of sender whitelisting status."},"isTokenSupported(address)":{"notice":"get supported token from Paycrest."},"refund(bytes32,bytes32)":{"notice":"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false."},"settle(bytes32,bytes32,bytes32,address[],address,uint64,bool)":{"notice":"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address"}},"version":1}}}}}}