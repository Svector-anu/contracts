{"id":"c80c241fbf04a044cf30b8af158dab04","_format":"hh-sol-build-info-1","solcVersion":"0.8.18","solcLongVersion":"0.8.18+commit.87f61d96","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"contracts/interface/IPaycrest.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n/**\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\n * Factory and global config params\n */\ninterface IPaycrest {\n    \n    /* ##################################################################\n                                EVENTS\n    ################################################################## */\n    /// @dev Emitted when deposit is made.\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, string messageHash);\n    /// @dev Emitted when aggregator settle transaction.\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent);\n    /// @dev Emitted when aggregator refund transaction.\n    event Refunded(bytes32 indexed orderId);\n    /// @dev Emitted when sender get therir rewards.\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\n    /// @dev Emitted when primary validator get therir rewards.\n    event RewardValidator(address indexed validator, uint256 indexed amount);\n\n    /* ##################################################################\n                                CUSTOM ERRORS\n    ################################################################## */\n    /// @notice Revert when caller is not an aggregator\n    error OnlyAggregator();\n    /// @notice Revert with invalid signer\n    error InvalidSigner();\n    /// @notice Revert when input amount is zero\n    error Unsuported();\n    /// @notice Revert when trx has been fulfilled\n    error OrderFulfilled();\n    /// @notice Revert when rewards are not been distributed.\n    error UnableToProcessRewards();\n    error InvalidInstitutionCode();\n    error NotWhitelisted();\n\n    /* ##################################################################\n                                STRUCTS\n    ################################################################## */\n    struct TransactionMetadata {\n        bytes8 identifier;                 //                                                                   slot 0\n        bytes8 institution;                //                                                                   slot 0\n        bytes8 name;                       //                                                                   slot 0\n        bytes8 currency;                   //                                                                   slot 0\n        uint256 liquidityProviderID;       //                                                                   slot 1\n    }\n\n    struct Order {\n        address seller;                     //                                                                   slot 0\n        address token;                      //                                                                   slot 1\n        address senderFeeRecipient;\n        uint256 senderFee;\n        uint96 rate;                        //                                                                   slot 1\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\n        uint96 currentBPS;                  //                                                                   slot 2 {}\n        uint256 amount;                     //                                                                   slot 3\n    }\n\n\n    /* ##################################################################\n                                EXTERNAL CALLS\n    ################################################################## */\n    /// @notice lock sender `_amount` of `token` into Paycrest.\n    /// Requirements:\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _token address of the token.\n    /// @param _amount amount in the decimal of `_token` above.\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n    /// @return _orderId the bytes20 which is the orderId\n    function createOrder(address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash)  external returns(bytes32 _orderId);\n\n    /// @notice settle transaction and distribute rewards accordingly.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\n    /// `amount` must be greater than minimum\n    /// `_refundable` refundable address must not be zero address\n    /// @param _orderId transaction Id.\n    /// @param _validators arrays of secondary validators.\n    /// @param _liquidityProvider address of the liquidity provider.\n    /// @param _settlePercent rate at which the transaction is settled.\n    /// @return return the status of transaction {bool}\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, address[] calldata _validators, address _liquidityProvider, uint96 _settlePercent)  external returns(bytes32, address);\n\n    /// @notice refund to the specified refundable address.\n    /// Requirements:\n    /// {only aggregators call}.\n    /// `_orderId` it must be less than total ids.\n    /// `_orderId` it must be an open Id.\n    /// `isFulfilled` must be false.\n    /// @param _orderId transaction Id.\n    /// @return return the status of transaction {bool}\n    function refund(bytes32 _orderId)  external returns(bool);\n\n    /// @notice get supported token from Paycrest.\n    /// @param _token address of the token to check.\n    /// @return return the status of `_token` {bool}\n    function isTokenSupported(address _token) external view returns(bool);\n\n    /// @notice get order details.\n    /// @param _orderId transaction Id.\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\n\n    /// @notice get every rewards and address on Paycrest.\n    /// @return protocolReward amount that will be taken in percentage on all trade.\n    /// @return validatorFeePercent amount that will be given to primary validator in percentage from `protocolReward`\n    /// @return max_bps maximum amount in bps \"100% == 100_000\".\n    function getFeeDetails() external view returns(\n        uint128 protocolReward, \n        uint128 validatorFeePercent, \n        uint256 max_bps\n    );\n\n    /// @notice get address of liquidity aggregator.\n    /// @return address of `liquidityAggregator`.\n    function getLiquidityAggregator() external view returns(address);\n\n    \n    /// @notice get address of sender whitelisting status.\n    /// @param sender address of the sender.\n    /// @return address of `status`.\n    function getWhitelistedStatus(address sender) external view returns(bool);\n\n}\n"},"contracts/Paycrest.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport {PaycrestSettingManager} from \"./PaycrestSettingManager.sol\";\nimport {IPaycrest, IERC20} from \"./interface/IPaycrest.sol\";\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \n    using SafeERC20Upgradeable for IERC20;\n    using ECDSAUpgradeable for bytes32;\n    struct fee {\n        uint256 protocolFee;\n        uint256 liquidityProviderAmount;\n        uint256 validatorsReward;\n    }\n    mapping(bytes32 => Order) private order;\n    mapping(address => uint256) private _nonce;\n    uint256[50] private __gap;\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _usdc) external initializer {    \n        _isTokenSupported[_usdc] = true;   \n        MAX_BPS = 100_000; \n        protocolFeePercent = 5000; // 5%\n        validatorFeePercent = 500; // 0.5%\n        __Ownable_init();\n    }\n\n    modifier onlyAggregator {\n        if(msg.sender != _liquidityAggregator) revert OnlyAggregator();\n        _;\n    }\n    \n    /* ##################################################################\n                                USER CALLS\n    ################################################################## */\n    /** @dev See {createOrder-IPaycrest}. */\n    function createOrder(\n        address _token, \n        uint256 _amount, \n        bytes32 _institutionCode,\n        uint96 _rate, \n        address _senderFeeRecipient,\n        uint256 _senderFee,\n        address _refundAddress, \n        string calldata messageHash\n    )  external returns(bytes32 orderId) {\n        // checks that are required\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\n        // first transfer token from msg.sender\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\n        // increase users nonce to avoid replay attacks\n        _nonce[msg.sender] ++;\n        // generate transaction id for the transaction\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\n        // update transaction\n        order[orderId] = Order({\n            seller: msg.sender,\n            token: _token,\n            senderFeeRecipient: _senderFeeRecipient,\n            senderFee: _senderFee,\n            rate: _rate,\n            isFulfilled: false,\n            refundAddress: _refundAddress,\n            currentBPS: uint96(MAX_BPS),\n            amount: _amount\n        });\n        // emit deposit event\n        emit Deposit(_token, _amount, orderId, _rate, _institutionCode, messageHash);\n    }\n\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\n        // use require for all the custom errors\n        require(_isTokenSupported[_token], \"TokenNotSupported\");\n        require(_amount > 0, \"AmountIsZero\");\n        require(_refundAddress != address(0), \"ThrowZeroAddress\");\n        require(_senderFeeRecipient != address(0), \"ThrowZeroAddress\");\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \"InvalidInstitutionCode\");\n    }\n\n    /* ##################################################################\n                                AGGREGATOR FUNCTIONS\n    ################################################################## */\n    /** @dev See {settle-IPaycrest}. */\n    function settle(\n        bytes32 _splitOrderId,\n        bytes32 _orderId, \n        address[] calldata _validators, \n        address _liquidityProvider, \n        uint96 _settlePercent\n        )  external onlyAggregator() returns(bytes32, address) {\n        // ensure the transaction has not been fulfilled\n        if(order[_orderId].isFulfilled) revert OrderFulfilled();\n        // load the token into memory\n        address token = order[_orderId].token;\n        // substract sum of amount based on the input _settlePercent\n        order[_orderId].currentBPS -= _settlePercent;\n        // if transaction amount is zero\n        if(order[_orderId].currentBPS == 0) {\n            // update the transaction to be fulfilled\n            order[_orderId].isFulfilled = true;\n        }\n\n        // load the fees and transfer associated protocol fees to protocol fee recipient\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent);\n        uint256 _fee = order[_orderId].senderFee;\n        if (_fee > 0) {\n            // transfer sender fee\n            transferSenderFee(_orderId);\n        }\n        // transfer protocol fee\n        IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\n        // // transfer to liquidity provider \n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\n        // // transfer to validators\n        uint256 length = _validators.length;\n        // divide the validators reward by the number of validators\n        uint256 _validatorReward = _feeParams.validatorsReward / length;\n        for(uint256 i = 0; i < length; ) {\n            IERC20(token).transfer(_validators[i], _validatorReward);\n            // emit event\n            emit RewardValidator(_validators[i], _validatorReward);\n            unchecked {\n                i++;\n            }\n        }\n\n        // emit event\n        emit Settled(_splitOrderId, _orderId, _liquidityProvider, _settlePercent);\n        return (_orderId, token);\n    }\n\n    function transferSenderFee(bytes32 _orderId) internal {\n        address recipient = order[_orderId].senderFeeRecipient;\n        uint256 _fee = order[_orderId].senderFee;\n        // transfer sender fee\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\n        // emmit event\n        emit TransferSenderFee(recipient, _fee);\n    }\n\n    /** @dev See {refund-IPaycrest}. */\n    function refund(bytes32 _orderId)  external onlyAggregator() returns(bool) {\n        // ensure the transaction has not been fulfilled\n        require(!order[_orderId].isFulfilled, \"OrderFulfilled\");\n        // reser state values\n        order[_orderId].isFulfilled = true;\n        order[_orderId].currentBPS = 0;\n        // transfer to seller \n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\n        // emit\n        emit Refunded(_orderId);\n        return true;\n    }\n\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent) private view returns(fee memory _feeParams ) {\n        // get the total amount associated with the orderId\n        uint256 amount = order[_orderId].amount;\n        // get sender fee from amount\n        amount = amount - order[_orderId].senderFee;\n        // get the settled percent that is scheduled for this amount\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\n        // deduct protocol fees from the new total amount\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \n        // substract total fees from the new amount after getting the scheduled amount\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\n        // get primary validators fees primaryValidatorsReward\n        _feeParams.validatorsReward = (_feeParams.protocolFee * validatorFeePercent) / MAX_BPS;\n        // get primary validators fees secondaryValidatorsReward\n        // update new protocol fee\n        _feeParams.protocolFee = _feeParams.protocolFee - (_feeParams.validatorsReward);\n    }\n    \n    /* ##################################################################\n                                VIEW CALLS\n    ################################################################## */\n    /** @dev See {getOrderInfo-IPaycrest}. */\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\n        return order[_orderId];\n    }\n\n    /** @dev See {isTokenSupported-IPaycrest}. */\n    function isTokenSupported(address _token) external view returns(bool) {\n        return _isTokenSupported[_token];\n    }\n\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\n        return supportedInstitutionsByCode[code];\n    }\n\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\n        Institution[] memory institutions = supportedInstitutions[currency];\n        uint256 length = institutions.length;\n        Institution[] memory result = new Institution[](length);\n        \n        for (uint256 i = 0; i < length; ) {\n            result[i] = institutions[i];\n            unchecked {\n                i++;\n            }\n        }\n        \n        return result;\n    }\n\n    /** @dev See {getFeeDetails-IPaycrest}. */\n    function getFeeDetails() external view returns(\n        uint128, \n        uint128, \n        uint256\n    ) {\n        return(protocolFeePercent, validatorFeePercent, MAX_BPS);\n    }\n\n    /** @dev See {getLiquidityAggregator-IPaycrest}. */\n    function getLiquidityAggregator() external view returns(address) {\n        return _liquidityAggregator;\n    }\n\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\n    function getWhitelistedStatus(address sender) external view returns(bool) {\n        return _isWhitelisted[sender];\n    }\n\n    // DECLARE A FUNCTION TO WITHDRAW ANY TOKEN FROM CONTRACT CAN ONLY NE CALLED BY OWNER\n    function withdraw(address _token, address _recipient, uint256 _amount) external onlyOwner {\n        IERC20(_token).transfer(_recipient, _amount);\n    }\n\n}\n"},"contracts/PaycrestSettingManager.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract PaycrestSettingManager is OwnableUpgradeable { \n    struct Institution {\n        bytes32 code; // usually not more than 8 letters\n        bytes32 name; // \n    }\n    struct InstitutionByCode {\n        bytes32 name;\n        bytes32 currency;\n    }\n    uint256 internal MAX_BPS;\n    uint128 internal protocolFeePercent; // 5%\n    uint128 internal validatorFeePercent; // 0.5%\n    address internal feeRecipient;\n    address internal _liquidityAggregator;\n\n    mapping(address => bool) internal _isTokenSupported;\n    mapping(address => bool) internal _isWhitelisted;\n\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\n\n    /// @notice Revert when zero address is passed in\n    error ThrowZeroAddress();\n    /// @notice Revert when zero address is passed in\n    error ThrowZeroValue();\n    /// @notice Revert when zero address is passed in\n    error InvalidParameter(bytes32 what);\n    /// @notice Revert when invalid token is provided\n    error TokenNotSupported();\n    /// @notice Revert when input amount is zero\n    error AmountIsZero();\n\n    event SettingManagerBool(bytes32 what, address value, bool status);\n    event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status);\n    event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent);\n    \n    /* ##################################################################\n                                OWNER FUNCTIONS\n    ################################################################## */\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\n        if (value == address(0)) revert ThrowZeroAddress();\n        if (what == \"token\") _isTokenSupported[value] = status;\n        if (what == \"whitelist\") _isWhitelisted[value] = status;\n        else revert InvalidParameter(what);\n        emit SettingManagerBool(what, value, status);\n    }\n\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \n        uint256 length = institutions.length;\n        for (uint i = 0; i < length; ) {\n            supportedInstitutions[currency].push(institutions[i]);\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\n                name: institutions[i].name, currency: currency\n            });\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) external onlyOwner {\n        protocolFeePercent = _protocolFeePercent;\n        validatorFeePercent = _validatorFeePercent;\n        emit PaycrestFees(_protocolFeePercent, _validatorFeePercent);\n    }\n\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\n        if (value == address(0)) revert ThrowZeroAddress();\n        if (what == \"fee\") feeRecipient = value;\n        if (what == \"aggregator\") _liquidityAggregator = value;\n    }\n\n}\n"},"contracts/PaycrestValidator.sol":{"content":"//SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.18;\nimport  \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\ncontract PaycrestValidator is OwnableUpgradeable, ReentrancyGuardUpgradeable { \n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    \n    address private Paycrest;    \n    bool private initialization;\n    mapping(address => uint256) private minimumAmount;\n    mapping(address => mapping (address => uint256)) private _balance;\n    uint256[50] private __gap;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _paycrest) external initializer {    \n        Paycrest = _paycrest;   \n        initialization = true;\n        __Ownable_init();\n        __ReentrancyGuard_init();\n    }\n\n    event NewTokenSupported(address indexed token, uint256 indexed minimumStakeAmount);\n    event Initialized(bool indexed status);\n    event Staked(address indexed user, uint256 indexed amount);\n    event Withdrawn(address indexed user, uint256 indexed amount);\n    event RewardValidators(\n        bytes32 orderId, \n        address token, \n        address indexed validator, \n        uint256 indexed validatorsReward\n    );\n\n    modifier OnlyPaycrest() {\n        require(msg.sender == Paycrest, \"Only Paycrest can call this function\");\n        _;\n    }\n\n    function setMinimumAmountForTokens(address _token, uint256 minimumStakeAmount) external onlyOwner {\n        minimumAmount[_token] = minimumStakeAmount;\n        emit NewTokenSupported(_token, minimumStakeAmount);\n    }\n\n    function initialized(bool status) external onlyOwner {\n        initialization = status;\n        emit Initialized(status);\n    }\n\n    function stake(address token, uint256 amount)  external {\n        require(initialization, \"Initialization is paused\");\n        require(_isTokenSupported(token), \"Token is not supported\");\n        require(amount >= minimumAmount[token], \"Amount is less than minimum required\");\n        IERC20Upgradeable(token).transferFrom(msg.sender, address(this), amount);\n        _balance[msg.sender][token] += amount;\n        emit Staked(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount, address token, address recipient) external nonReentrant() {\n        uint256 previouslyStakedAmount = _balance[msg.sender][token];\n        require(amount <= previouslyStakedAmount, \"Insufficient balance\");\n        _balance[msg.sender][token] -= amount;\n        IERC20Upgradeable(token).transfer(recipient, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    function _isTokenSupported(address token) private view returns(bool) {\n        (, bytes memory result) = Paycrest.staticcall(abi.encodeWithSignature(\"isTokenSupported(address)\", token));\n        return abi.decode(result, (bool));\n    }\n\n    function getPaycrest() external view returns(address) {\n        return Paycrest;\n    }\n\n    function getInitializationState() external view returns(bool) {\n        return initialization;\n    }\n\n    function getMinimumAmountRequiredFor(address token) external view returns(uint256) {\n        return minimumAmount[token];\n    }\n\n    function getValidatorInfo(address user, address token) external view returns(uint256) {\n        return _balance[user][token];\n    }\n\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ContextUpgradeable":[1246],"Initializable":[300],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":1247,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":301,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["748:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nameLocations":["763:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":1246,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,1246,300],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["1038:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1149:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2118:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2128:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2128:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nameLocations":["2108:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2108:9:0"},"nodeType":"ModifierInvocation","src":"2108:9:0"}],"name":"renounceOwnership","nameLocation":"2073:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2090:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2118:0:0"},"scope":131,"src":"2064:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2384:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2402:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2394:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2496:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2477:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2477:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2171:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2374:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2374:9:0"},"nodeType":"ModifierInvocation","src":"2374:9:0"}],"name":"transferOwnership","nameLocation":"2323:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2341:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2384:0:0"},"scope":131,"src":"2314:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2729:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2739:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2758:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2774:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2783:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2774:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2827:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2837:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2806:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2801:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2518:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2694:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2729:0:0"},"scope":131,"src":"2666:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2859:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3118:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2438:0","usedErrors":[]}],"src":"102:3045:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"Initializable":[300]},"id":301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":301,"sourceUnit":1205,"src":"138:44:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"184:2209:1","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":300,"linearizedBaseContracts":[300],"name":"Initializable","nameLocation":"2412:13:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"2432:109:1","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":138,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:1","nodeType":"VariableDeclaration","scope":300,"src":"2546:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":137,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":139,"nodeType":"StructuredDocumentation","src":"2579:91:1","text":" @dev Indicates that the contract is in the process of being initialized."},"id":141,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:1","nodeType":"VariableDeclaration","scope":300,"src":"2675:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":140,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":142,"nodeType":"StructuredDocumentation","src":"2708:90:1","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":146,"name":"Initialized","nameLocation":"2809:11:1","nodeType":"EventDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:1","nodeType":"VariableDeclaration","scope":146,"src":"2821:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":143,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:1"},"src":"2803:33:1"},{"body":{"id":201,"nodeType":"Block","src":"3269:483:1","statements":[{"assignments":[150],"declarations":[{"constant":false,"id":150,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:1","nodeType":"VariableDeclaration","scope":201,"src":"3279:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":153,"initialValue":{"id":152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:1","subExpression":{"id":151,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3302:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":155,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3347:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":156,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3365:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:1","subExpression":{"arguments":[{"arguments":[{"id":165,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$300","typeString":"contract Initializable"}],"id":164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:1","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":161,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"3388:18:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1204_$","typeString":"type(library AddressUpgradeable)"}},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:1","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":892,"src":"3388:29:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":169,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3436:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":173,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":177,"nodeType":"ExpressionStatement","src":"3325:201:1"},{"expression":{"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":178,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"3536:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":181,"nodeType":"ExpressionStatement","src":"3536:16:1"},{"condition":{"id":182,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3566:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":188,"nodeType":"IfStatement","src":"3562:65:1","trueBody":{"id":187,"nodeType":"Block","src":"3582:45:1","statements":[{"expression":{"id":185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":183,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3596:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"ExpressionStatement","src":"3596:20:1"}]}},{"id":189,"nodeType":"PlaceholderStatement","src":"3636:1:1"},{"condition":{"id":190,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"3651:14:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":200,"nodeType":"IfStatement","src":"3647:99:1","trueBody":{"id":199,"nodeType":"Block","src":"3667:79:1","statements":[{"expression":{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":191,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"3681:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":194,"nodeType":"ExpressionStatement","src":"3681:21:1"},{"eventCall":{"arguments":[{"hexValue":"31","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":195,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"3721:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"EmitStatement","src":"3716:19:1"}]}}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"2842:399:1","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":202,"name":"initializer","nameLocation":"3255:11:1","nodeType":"ModifierDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[],"src":"3266:2:1"},"src":"3246:506:1","virtual":false,"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"4863:255:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:1","subExpression":{"id":208,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"4882:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":210,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4899:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":211,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4914:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":207,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":216,"nodeType":"ExpressionStatement","src":"4873:99:1"},{"expression":{"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":217,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"4982:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":218,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"4997:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":220,"nodeType":"ExpressionStatement","src":"4982:22:1"},{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":221,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5014:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":224,"nodeType":"ExpressionStatement","src":"5014:20:1"},{"id":225,"nodeType":"PlaceholderStatement","src":"5044:1:1"},{"expression":{"id":228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":226,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5055:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":229,"nodeType":"ExpressionStatement","src":"5055:21:1"},{"eventCall":{"arguments":[{"id":231,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"5103:7:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":230,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5091:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":233,"nodeType":"EmitStatement","src":"5086:25:1"}]},"documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"3758:1062:1","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":235,"name":"reinitializer","nameLocation":"4834:13:1","nodeType":"ModifierDefinition","parameters":{"id":206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":205,"mutability":"mutable","name":"version","nameLocation":"4854:7:1","nodeType":"VariableDeclaration","scope":235,"src":"4848:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":204,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:1"},"src":"4825:293:1","virtual":false,"visibility":"internal"},{"body":{"id":244,"nodeType":"Block","src":"5356:97:1","statements":[{"expression":{"arguments":[{"id":239,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"5374:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":238,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"5366:69:1"},{"id":243,"nodeType":"PlaceholderStatement","src":"5445:1:1"}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"5124:199:1","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":245,"name":"onlyInitializing","nameLocation":"5337:16:1","nodeType":"ModifierDefinition","parameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"5353:2:1"},"src":"5328:125:1","virtual":false,"visibility":"internal"},{"body":{"id":280,"nodeType":"Block","src":"5988:231:1","statements":[{"expression":{"arguments":[{"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:1","subExpression":{"id":250,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6007:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":249,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"5998:66:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":255,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6078:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":257,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":256,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:1","memberName":"max","nodeType":"MemberAccess","src":"6094:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":279,"nodeType":"IfStatement","src":"6074:139:1","trueBody":{"id":278,"nodeType":"Block","src":"6111:102:1","statements":[{"expression":{"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":262,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6125:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":264,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":263,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:1","memberName":"max","nodeType":"MemberAccess","src":"6140:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":269,"nodeType":"ExpressionStatement","src":"6125:30:1"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":272,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":271,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:1","memberName":"max","nodeType":"MemberAccess","src":"6186:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":270,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"6174:11:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":277,"nodeType":"EmitStatement","src":"6169:33:1"}]}}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"5459:475:1","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":281,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:1","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[],"src":"5968:2:1"},"returnParameters":{"id":248,"nodeType":"ParameterList","parameters":[],"src":"5988:0:1"},"scope":300,"src":"5939:280:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":289,"nodeType":"Block","src":"6393:36:1","statements":[{"expression":{"id":287,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"6410:12:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":286,"id":288,"nodeType":"Return","src":"6403:19:1"}]},"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"6225:99:1","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":290,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:1","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[],"src":"6360:2:1"},"returnParameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":290,"src":"6386:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":284,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:1"},"scope":300,"src":"6329:100:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":298,"nodeType":"Block","src":"6601:37:1","statements":[{"expression":{"id":296,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":141,"src":"6618:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":295,"id":297,"nodeType":"Return","src":"6611:20:1"}]},"documentation":{"id":291,"nodeType":"StructuredDocumentation","src":"6435:105:1","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":299,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:1","nodeType":"FunctionDefinition","parameters":{"id":292,"nodeType":"ParameterList","parameters":[],"src":"6569:2:1"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"6595:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":293,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:1"},"scope":300,"src":"6545:93:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":301,"src":"2394:4246:1","usedErrors":[]}],"src":"113:6528:1"},"id":1},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"Initializable":[300],"ReentrancyGuardUpgradeable":[384]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":302,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":303,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":301,"src":"136:42:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":305,"name":"Initializable","nameLocations":["979:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"979:13:2"},"id":306,"nodeType":"InheritanceSpecifier","src":"979:13:2"}],"canonicalName":"ReentrancyGuardUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"180:750:2","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":384,"linearizedBaseContracts":[384,300],"name":"ReentrancyGuardUpgradeable","nameLocation":"949:26:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":309,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1772:12:2","nodeType":"VariableDeclaration","scope":384,"src":"1747:41:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1747:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1787:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":312,"mutability":"constant","name":"_ENTERED","nameLocation":"1819:8:2","nodeType":"VariableDeclaration","scope":384,"src":"1794:37:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"1794:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1830:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":314,"mutability":"mutable","name":"_status","nameLocation":"1854:7:2","nodeType":"VariableDeclaration","scope":384,"src":"1838:23:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":322,"nodeType":"Block","src":"1928:51:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":319,"name":"__ReentrancyGuard_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1938:32:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:34:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"ExpressionStatement","src":"1938:34:2"}]},"id":323,"implemented":true,"kind":"function","modifiers":[{"id":317,"kind":"modifierInvocation","modifierName":{"id":316,"name":"onlyInitializing","nameLocations":["1911:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"1911:16:2"},"nodeType":"ModifierInvocation","src":"1911:16:2"}],"name":"__ReentrancyGuard_init","nameLocation":"1877:22:2","nodeType":"FunctionDefinition","parameters":{"id":315,"nodeType":"ParameterList","parameters":[],"src":"1899:2:2"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[],"src":"1928:0:2"},"scope":384,"src":"1868:111:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":332,"nodeType":"Block","src":"2055:39:2","statements":[{"expression":{"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":328,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2065:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":329,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"2075:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2065:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":331,"nodeType":"ExpressionStatement","src":"2065:22:2"}]},"id":333,"implemented":true,"kind":"function","modifiers":[{"id":326,"kind":"modifierInvocation","modifierName":{"id":325,"name":"onlyInitializing","nameLocations":["2038:16:2"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"2038:16:2"},"nodeType":"ModifierInvocation","src":"2038:16:2"}],"name":"__ReentrancyGuard_init_unchained","nameLocation":"1994:32:2","nodeType":"FunctionDefinition","parameters":{"id":324,"nodeType":"ParameterList","parameters":[],"src":"2026:2:2"},"returnParameters":{"id":327,"nodeType":"ParameterList","parameters":[],"src":"2055:0:2"},"scope":384,"src":"1985:109:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":343,"nodeType":"Block","src":"2495:79:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":336,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"2505:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":338,"nodeType":"ExpressionStatement","src":"2505:21:2"},{"id":339,"nodeType":"PlaceholderStatement","src":"2536:1:2"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":340,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"2547:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2547:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":342,"nodeType":"ExpressionStatement","src":"2547:20:2"}]},"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"2100:366:2","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":344,"name":"nonReentrant","nameLocation":"2480:12:2","nodeType":"ModifierDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[],"src":"2492:2:2"},"src":"2471:103:2","virtual":false,"visibility":"internal"},{"body":{"id":358,"nodeType":"Block","src":"2619:248:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":348,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2712:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":349,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2723:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2712:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:33:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":347,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2704:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2704:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":353,"nodeType":"ExpressionStatement","src":"2704:63:2"},{"expression":{"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":354,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2842:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":355,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"2852:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2842:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":357,"nodeType":"ExpressionStatement","src":"2842:18:2"}]},"id":359,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2589:19:2","nodeType":"FunctionDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[],"src":"2608:2:2"},"returnParameters":{"id":346,"nodeType":"ParameterList","parameters":[],"src":"2619:0:2"},"scope":384,"src":"2580:287:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":366,"nodeType":"Block","src":"2911:171:2","statements":[{"expression":{"id":364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":362,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"3053:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":363,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"3063:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3053:22:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":365,"nodeType":"ExpressionStatement","src":"3053:22:2"}]},"id":367,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2882:18:2","nodeType":"FunctionDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"2900:2:2"},"returnParameters":{"id":361,"nodeType":"ParameterList","parameters":[],"src":"2911:0:2"},"scope":384,"src":"2873:209:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":377,"nodeType":"Block","src":"3325:43:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":373,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"3342:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":374,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"3353:8:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3342:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":372,"id":376,"nodeType":"Return","src":"3335:26:2"}]},"documentation":{"id":368,"nodeType":"StructuredDocumentation","src":"3088:168:2","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":378,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3270:23:2","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[],"src":"3293:2:2"},"returnParameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":378,"src":"3319:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":370,"name":"bool","nodeType":"ElementaryTypeName","src":"3319:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3318:6:2"},"scope":384,"src":"3261:107:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"constant":false,"documentation":{"id":379,"nodeType":"StructuredDocumentation","src":"3374:254:2","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":383,"mutability":"mutable","name":"__gap","nameLocation":"3653:5:2","nodeType":"VariableDeclaration","scope":384,"src":"3633:25:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":380,"name":"uint256","nodeType":"ElementaryTypeName","src":"3633:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":382,"length":{"hexValue":"3439","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3641:2:2","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3633:11:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":385,"src":"931:2730:2","usedErrors":[]}],"src":"112:3550:2"},"id":2},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","exportedSymbols":{"IERC20Upgradeable":[462]},"id":463,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Upgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":387,"nodeType":"StructuredDocumentation","src":"131:70:3","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":462,"linearizedBaseContracts":[462],"name":"IERC20Upgradeable","nameLocation":"212:17:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"236:158:3","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":396,"name":"Transfer","nameLocation":"405:8:3","nodeType":"EventDefinition","parameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"430:4:3","nodeType":"VariableDeclaration","scope":396,"src":"414:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"414:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":392,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"452:2:3","nodeType":"VariableDeclaration","scope":396,"src":"436:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":391,"name":"address","nodeType":"ElementaryTypeName","src":"436:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":394,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"464:5:3","nodeType":"VariableDeclaration","scope":396,"src":"456:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":393,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"413:57:3"},"src":"399:72:3"},{"anonymous":false,"documentation":{"id":397,"nodeType":"StructuredDocumentation","src":"477:148:3","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":405,"name":"Approval","nameLocation":"636:8:3","nodeType":"EventDefinition","parameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":399,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"661:5:3","nodeType":"VariableDeclaration","scope":405,"src":"645:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":398,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":401,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"684:7:3","nodeType":"VariableDeclaration","scope":405,"src":"668:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":403,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"701:5:3","nodeType":"VariableDeclaration","scope":405,"src":"693:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"693:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"644:63:3"},"src":"630:78:3"},{"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"714:66:3","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":411,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"794:11:3","nodeType":"FunctionDefinition","parameters":{"id":407,"nodeType":"ParameterList","parameters":[],"src":"805:2:3"},"returnParameters":{"id":410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":411,"src":"831:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":408,"name":"uint256","nodeType":"ElementaryTypeName","src":"831:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"830:9:3"},"scope":462,"src":"785:55:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"846:72:3","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":419,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"932:9:3","nodeType":"FunctionDefinition","parameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"account","nameLocation":"950:7:3","nodeType":"VariableDeclaration","scope":419,"src":"942:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":413,"name":"address","nodeType":"ElementaryTypeName","src":"942:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"941:17:3"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":419,"src":"982:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":416,"name":"uint256","nodeType":"ElementaryTypeName","src":"982:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"981:9:3"},"scope":462,"src":"923:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"997:202:3","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":429,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:3","nodeType":"FunctionDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"to","nameLocation":"1230:2:3","nodeType":"VariableDeclaration","scope":429,"src":"1222:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":424,"mutability":"mutable","name":"amount","nameLocation":"1242:6:3","nodeType":"VariableDeclaration","scope":429,"src":"1234:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":423,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:28:3"},"returnParameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":429,"src":"1268:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":426,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:3"},"scope":462,"src":"1204:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":430,"nodeType":"StructuredDocumentation","src":"1280:264:3","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":439,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:3","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":432,"mutability":"mutable","name":"owner","nameLocation":"1576:5:3","nodeType":"VariableDeclaration","scope":439,"src":"1568:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":431,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"spender","nameLocation":"1591:7:3","nodeType":"VariableDeclaration","scope":439,"src":"1583:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":433,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:3"},"returnParameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":439,"src":"1623:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:3"},"scope":462,"src":"1549:83:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":440,"nodeType":"StructuredDocumentation","src":"1638:642:3","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":449,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2294:7:3","nodeType":"FunctionDefinition","parameters":{"id":445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"mutability":"mutable","name":"spender","nameLocation":"2310:7:3","nodeType":"VariableDeclaration","scope":449,"src":"2302:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":441,"name":"address","nodeType":"ElementaryTypeName","src":"2302:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"amount","nameLocation":"2327:6:3","nodeType":"VariableDeclaration","scope":449,"src":"2319:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":443,"name":"uint256","nodeType":"ElementaryTypeName","src":"2319:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2301:33:3"},"returnParameters":{"id":448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":449,"src":"2353:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":446,"name":"bool","nodeType":"ElementaryTypeName","src":"2353:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2352:6:3"},"scope":462,"src":"2285:74:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":450,"nodeType":"StructuredDocumentation","src":"2365:287:3","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":461,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2666:12:3","nodeType":"FunctionDefinition","parameters":{"id":457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":452,"mutability":"mutable","name":"from","nameLocation":"2687:4:3","nodeType":"VariableDeclaration","scope":461,"src":"2679:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":454,"mutability":"mutable","name":"to","nameLocation":"2701:2:3","nodeType":"VariableDeclaration","scope":461,"src":"2693:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"2693:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"amount","nameLocation":"2713:6:3","nodeType":"VariableDeclaration","scope":461,"src":"2705:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":455,"name":"uint256","nodeType":"ElementaryTypeName","src":"2705:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2678:42:3"},"returnParameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":461,"src":"2739:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":458,"name":"bool","nodeType":"ElementaryTypeName","src":"2739:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2738:6:3"},"scope":462,"src":"2657:88:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":463,"src":"202:2545:3","usedErrors":[]}],"src":"106:2642:3"},"id":3},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","exportedSymbols":{"IERC20PermitUpgradeable":[498]},"id":499,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":464,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20PermitUpgradeable","contractDependencies":[],"contractKind":"interface","documentation":{"id":465,"nodeType":"StructuredDocumentation","src":"148:480:4","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":498,"linearizedBaseContracts":[498],"name":"IERC20PermitUpgradeable","nameLocation":"639:23:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":466,"nodeType":"StructuredDocumentation","src":"669:792:4","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":483,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1475:6:4","nodeType":"FunctionDefinition","parameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":468,"mutability":"mutable","name":"owner","nameLocation":"1499:5:4","nodeType":"VariableDeclaration","scope":483,"src":"1491:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":467,"name":"address","nodeType":"ElementaryTypeName","src":"1491:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":470,"mutability":"mutable","name":"spender","nameLocation":"1522:7:4","nodeType":"VariableDeclaration","scope":483,"src":"1514:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":469,"name":"address","nodeType":"ElementaryTypeName","src":"1514:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":472,"mutability":"mutable","name":"value","nameLocation":"1547:5:4","nodeType":"VariableDeclaration","scope":483,"src":"1539:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":471,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":474,"mutability":"mutable","name":"deadline","nameLocation":"1570:8:4","nodeType":"VariableDeclaration","scope":483,"src":"1562:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":473,"name":"uint256","nodeType":"ElementaryTypeName","src":"1562:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":476,"mutability":"mutable","name":"v","nameLocation":"1594:1:4","nodeType":"VariableDeclaration","scope":483,"src":"1588:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":475,"name":"uint8","nodeType":"ElementaryTypeName","src":"1588:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":478,"mutability":"mutable","name":"r","nameLocation":"1613:1:4","nodeType":"VariableDeclaration","scope":483,"src":"1605:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1605:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":480,"mutability":"mutable","name":"s","nameLocation":"1632:1:4","nodeType":"VariableDeclaration","scope":483,"src":"1624:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":479,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1624:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1481:158:4"},"returnParameters":{"id":482,"nodeType":"ParameterList","parameters":[],"src":"1648:0:4"},"scope":498,"src":"1466:183:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":484,"nodeType":"StructuredDocumentation","src":"1655:294:4","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":491,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1963:6:4","nodeType":"FunctionDefinition","parameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"owner","nameLocation":"1978:5:4","nodeType":"VariableDeclaration","scope":491,"src":"1970:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"1970:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1969:15:4"},"returnParameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":491,"src":"2008:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":488,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2007:9:4"},"scope":498,"src":"1954:63:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":492,"nodeType":"StructuredDocumentation","src":"2023:128:4","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":497,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2218:16:4","nodeType":"FunctionDefinition","parameters":{"id":493,"nodeType":"ParameterList","parameters":[],"src":"2234:2:4"},"returnParameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":497,"src":"2260:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":494,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2260:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2259:9:4"},"scope":498,"src":"2209:60:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":499,"src":"629:1642:4","usedErrors":[]}],"src":"123:2149:4"},"id":4},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"IERC20PermitUpgradeable":[498],"IERC20Upgradeable":[462],"SafeERC20Upgradeable":[874]},"id":875,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":500,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"../IERC20Upgradeable.sol","id":501,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":463,"src":"140:34:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol","file":"../extensions/IERC20PermitUpgradeable.sol","id":502,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":499,"src":"175:51:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../../utils/AddressUpgradeable.sol","id":503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":875,"sourceUnit":1205,"src":"227:47:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20Upgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"276:457:5","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":874,"linearizedBaseContracts":[874],"name":"SafeERC20Upgradeable","nameLocation":"742:20:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":507,"libraryName":{"id":505,"name":"AddressUpgradeable","nameLocations":["775:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"775:18:5"},"nodeType":"UsingForDirective","src":"769:37:5","typeName":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":530,"nodeType":"Block","src":"1079:103:5","statements":[{"expression":{"arguments":[{"id":519,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"1109:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":522,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":511,"src":"1139:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1145:8:5","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":429,"src":"1139:14:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1154:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1139:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":525,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":513,"src":"1164:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":526,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"1168:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":520,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1116:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1120:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1116:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1116:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":518,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"1089:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":529,"nodeType":"ExpressionStatement","src":"1089:86:5"}]},"documentation":{"id":508,"nodeType":"StructuredDocumentation","src":"812:179:5","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":531,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1005:12:5","nodeType":"FunctionDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"token","nameLocation":"1036:5:5","nodeType":"VariableDeclaration","scope":531,"src":"1018:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":510,"nodeType":"UserDefinedTypeName","pathNode":{"id":509,"name":"IERC20Upgradeable","nameLocations":["1018:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"1018:17:5"},"referencedDeclaration":462,"src":"1018:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"to","nameLocation":"1051:2:5","nodeType":"VariableDeclaration","scope":531,"src":"1043:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":512,"name":"address","nodeType":"ElementaryTypeName","src":"1043:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":515,"mutability":"mutable","name":"value","nameLocation":"1063:5:5","nodeType":"VariableDeclaration","scope":531,"src":"1055:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1055:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:52:5"},"returnParameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"1079:0:5"},"scope":874,"src":"996:186:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":557,"nodeType":"Block","src":"1522:113:5","statements":[{"expression":{"arguments":[{"id":545,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"1552:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":548,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":535,"src":"1582:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1588:12:5","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":461,"src":"1582:18:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1601:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1582:27:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":551,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"1611:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":552,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"1617:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"1621:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":546,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1559:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1563:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1559:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1559:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":544,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"1532:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:96:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":556,"nodeType":"ExpressionStatement","src":"1532:96:5"}]},"documentation":{"id":532,"nodeType":"StructuredDocumentation","src":"1188:228:5","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":558,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1430:16:5","nodeType":"FunctionDefinition","parameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"token","nameLocation":"1465:5:5","nodeType":"VariableDeclaration","scope":558,"src":"1447:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":534,"nodeType":"UserDefinedTypeName","pathNode":{"id":533,"name":"IERC20Upgradeable","nameLocations":["1447:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"1447:17:5"},"referencedDeclaration":462,"src":"1447:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":537,"mutability":"mutable","name":"from","nameLocation":"1480:4:5","nodeType":"VariableDeclaration","scope":558,"src":"1472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":539,"mutability":"mutable","name":"to","nameLocation":"1494:2:5","nodeType":"VariableDeclaration","scope":558,"src":"1486:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":538,"name":"address","nodeType":"ElementaryTypeName","src":"1486:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":541,"mutability":"mutable","name":"value","nameLocation":"1506:5:5","nodeType":"VariableDeclaration","scope":558,"src":"1498:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":540,"name":"uint256","nodeType":"ElementaryTypeName","src":"1498:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1446:66:5"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"1522:0:5"},"scope":874,"src":"1421:214:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":601,"nodeType":"Block","src":"1982:497:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":570,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"2231:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2240:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2231:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":573,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2230:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":578,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2271:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}],"id":577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2263:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":576,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:5","typeDescriptions":{}}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":580,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2278:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":574,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2247:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2253:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":439,"src":"2247:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2290:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2247:44:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":584,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2246:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2230:62:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2306:56:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2209:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2209:163:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":588,"nodeType":"ExpressionStatement","src":"2209:163:5"},{"expression":{"arguments":[{"id":590,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2402:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":593,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"2432:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2438:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"2432:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2432:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":596,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"2456:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"2465:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":591,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2409:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2413:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2409:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2409:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":589,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2382:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":600,"nodeType":"ExpressionStatement","src":"2382:90:5"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"1641:249:5","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":602,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1904:11:5","nodeType":"FunctionDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"mutability":"mutable","name":"token","nameLocation":"1934:5:5","nodeType":"VariableDeclaration","scope":602,"src":"1916:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":561,"nodeType":"UserDefinedTypeName","pathNode":{"id":560,"name":"IERC20Upgradeable","nameLocations":["1916:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"1916:17:5"},"referencedDeclaration":462,"src":"1916:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":564,"mutability":"mutable","name":"spender","nameLocation":"1949:7:5","nodeType":"VariableDeclaration","scope":602,"src":"1941:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"value","nameLocation":"1966:5:5","nodeType":"VariableDeclaration","scope":602,"src":"1958:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":565,"name":"uint256","nodeType":"ElementaryTypeName","src":"1958:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1915:57:5"},"returnParameters":{"id":568,"nodeType":"ParameterList","parameters":[],"src":"1982:0:5"},"scope":874,"src":"1895:584:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":638,"nodeType":"Block","src":"2767:194:5","statements":[{"assignments":[614],"declarations":[{"constant":false,"id":614,"mutability":"mutable","name":"oldAllowance","nameLocation":"2785:12:5","nodeType":"VariableDeclaration","scope":638,"src":"2777:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":613,"name":"uint256","nodeType":"ElementaryTypeName","src":"2777:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":623,"initialValue":{"arguments":[{"arguments":[{"id":619,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2824:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}],"id":618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2816:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":617,"name":"address","nodeType":"ElementaryTypeName","src":"2816:7:5","typeDescriptions":{}}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2816:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":621,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"2831:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":615,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"2800:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":439,"src":"2800:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2800:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2777:62:5"},{"expression":{"arguments":[{"id":625,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"2869:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":628,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"2899:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"2899:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2913:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2899:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":631,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"2923:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":632,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"2932:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"2947:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2932:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":626,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2876:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2880:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2876:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2876:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":624,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"2849:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2849:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":637,"nodeType":"ExpressionStatement","src":"2849:105:5"}]},"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"2485:180:5","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":639,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2679:21:5","nodeType":"FunctionDefinition","parameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"token","nameLocation":"2719:5:5","nodeType":"VariableDeclaration","scope":639,"src":"2701:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":605,"nodeType":"UserDefinedTypeName","pathNode":{"id":604,"name":"IERC20Upgradeable","nameLocations":["2701:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"2701:17:5"},"referencedDeclaration":462,"src":"2701:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":608,"mutability":"mutable","name":"spender","nameLocation":"2734:7:5","nodeType":"VariableDeclaration","scope":639,"src":"2726:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":607,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":610,"mutability":"mutable","name":"value","nameLocation":"2751:5:5","nodeType":"VariableDeclaration","scope":639,"src":"2743:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":609,"name":"uint256","nodeType":"ElementaryTypeName","src":"2743:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2700:57:5"},"returnParameters":{"id":612,"nodeType":"ParameterList","parameters":[],"src":"2767:0:5"},"scope":874,"src":"2670:291:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":683,"nodeType":"Block","src":"3249:321:5","statements":[{"id":682,"nodeType":"UncheckedBlock","src":"3259:305:5","statements":[{"assignments":[651],"declarations":[{"constant":false,"id":651,"mutability":"mutable","name":"oldAllowance","nameLocation":"3291:12:5","nodeType":"VariableDeclaration","scope":682,"src":"3283:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":650,"name":"uint256","nodeType":"ElementaryTypeName","src":"3283:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":660,"initialValue":{"arguments":[{"arguments":[{"id":656,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3330:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20Upgradeable_$874","typeString":"library SafeERC20Upgradeable"}],"id":655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3322:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"3322:7:5","typeDescriptions":{}}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3322:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":658,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3337:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":652,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"3306:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":439,"src":"3306:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3306:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3283:62:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":662,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"3367:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"3383:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3367:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3390:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":661,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3359:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3359:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":667,"nodeType":"ExpressionStatement","src":"3359:75:5"},{"expression":{"arguments":[{"id":669,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"3468:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":672,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"3498:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3504:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"3498:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3512:8:5","memberName":"selector","nodeType":"MemberAccess","src":"3498:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":675,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3522:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":676,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"3531:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":647,"src":"3546:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3531:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":670,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3475:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3479:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3475:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3475:77:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":668,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"3448:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3448:105:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":681,"nodeType":"ExpressionStatement","src":"3448:105:5"}]}]},"documentation":{"id":640,"nodeType":"StructuredDocumentation","src":"2967:180:5","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":684,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3161:21:5","nodeType":"FunctionDefinition","parameters":{"id":648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":643,"mutability":"mutable","name":"token","nameLocation":"3201:5:5","nodeType":"VariableDeclaration","scope":684,"src":"3183:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":642,"nodeType":"UserDefinedTypeName","pathNode":{"id":641,"name":"IERC20Upgradeable","nameLocations":["3183:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"3183:17:5"},"referencedDeclaration":462,"src":"3183:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":645,"mutability":"mutable","name":"spender","nameLocation":"3216:7:5","nodeType":"VariableDeclaration","scope":684,"src":"3208:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":644,"name":"address","nodeType":"ElementaryTypeName","src":"3208:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":647,"mutability":"mutable","name":"value","nameLocation":"3233:5:5","nodeType":"VariableDeclaration","scope":684,"src":"3225:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":646,"name":"uint256","nodeType":"ElementaryTypeName","src":"3225:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:57:5"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[],"src":"3249:0:5"},"scope":874,"src":"3152:418:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":730,"nodeType":"Block","src":"3977:333:5","statements":[{"assignments":[696],"declarations":[{"constant":false,"id":696,"mutability":"mutable","name":"approvalCall","nameLocation":"4000:12:5","nodeType":"VariableDeclaration","scope":730,"src":"3987:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":695,"name":"bytes","nodeType":"ElementaryTypeName","src":"3987:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":705,"initialValue":{"arguments":[{"expression":{"expression":{"id":699,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4038:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4044:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"4038:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4052:8:5","memberName":"selector","nodeType":"MemberAccess","src":"4038:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":702,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"4062:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":703,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"4071:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":697,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4015:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4019:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4015:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4015:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3987:90:5"},{"condition":{"id":710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4092:45:5","subExpression":{"arguments":[{"id":707,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4117:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"id":708,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"4124:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":706,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"4093:23:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20Upgradeable,bytes memory) returns (bool)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4093:44:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":729,"nodeType":"IfStatement","src":"4088:216:5","trueBody":{"id":728,"nodeType":"Block","src":"4139:165:5","statements":[{"expression":{"arguments":[{"id":712,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4173:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"arguments":[{"expression":{"expression":{"id":715,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4203:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4209:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":449,"src":"4203:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4217:8:5","memberName":"selector","nodeType":"MemberAccess","src":"4203:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":718,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"4227:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4236:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":713,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4180:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4184:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4180:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4180:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":711,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4153:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4153:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":722,"nodeType":"ExpressionStatement","src":"4153:86:5"},{"expression":{"arguments":[{"id":724,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4273:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},{"id":725,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"4280:12:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":723,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"4253:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$462_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20Upgradeable,bytes memory)"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4253:40:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":727,"nodeType":"ExpressionStatement","src":"4253:40:5"}]}}]},"documentation":{"id":685,"nodeType":"StructuredDocumentation","src":"3576:308:5","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":731,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3898:12:5","nodeType":"FunctionDefinition","parameters":{"id":693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"token","nameLocation":"3929:5:5","nodeType":"VariableDeclaration","scope":731,"src":"3911:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":687,"nodeType":"UserDefinedTypeName","pathNode":{"id":686,"name":"IERC20Upgradeable","nameLocations":["3911:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"3911:17:5"},"referencedDeclaration":462,"src":"3911:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"spender","nameLocation":"3944:7:5","nodeType":"VariableDeclaration","scope":731,"src":"3936:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"value","nameLocation":"3961:5:5","nodeType":"VariableDeclaration","scope":731,"src":"3953:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":691,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3910:57:5"},"returnParameters":{"id":694,"nodeType":"ParameterList","parameters":[],"src":"3977:0:5"},"scope":874,"src":"3889:421:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":787,"nodeType":"Block","src":"4688:257:5","statements":[{"assignments":[753],"declarations":[{"constant":false,"id":753,"mutability":"mutable","name":"nonceBefore","nameLocation":"4706:11:5","nodeType":"VariableDeclaration","scope":787,"src":"4698:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":752,"name":"uint256","nodeType":"ElementaryTypeName","src":"4698:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":758,"initialValue":{"arguments":[{"id":756,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4733:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":754,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4720:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"}},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4726:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":491,"src":"4720:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4720:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4698:41:5"},{"expression":{"arguments":[{"id":762,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4762:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":763,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":739,"src":"4769:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":764,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"4778:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":765,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"4785:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":766,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"4795:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":767,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"4798:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":768,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"4801:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":759,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4749:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4755:6:5","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":483,"src":"4749:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4749:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":770,"nodeType":"ExpressionStatement","src":"4749:54:5"},{"assignments":[772],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"nonceAfter","nameLocation":"4821:10:5","nodeType":"VariableDeclaration","scope":787,"src":"4813:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"4813:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":777,"initialValue":{"arguments":[{"id":775,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"4847:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":773,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"4834:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4840:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":491,"src":"4834:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4813:40:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":779,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"4871:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":780,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"4885:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":781,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4899:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4885:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4871:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4902:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":778,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4863:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4863:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":786,"nodeType":"ExpressionStatement","src":"4863:75:5"}]},"documentation":{"id":732,"nodeType":"StructuredDocumentation","src":"4316:141:5","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4471:10:5","nodeType":"FunctionDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":735,"mutability":"mutable","name":"token","nameLocation":"4515:5:5","nodeType":"VariableDeclaration","scope":788,"src":"4491:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"},"typeName":{"id":734,"nodeType":"UserDefinedTypeName","pathNode":{"id":733,"name":"IERC20PermitUpgradeable","nameLocations":["4491:23:5"],"nodeType":"IdentifierPath","referencedDeclaration":498,"src":"4491:23:5"},"referencedDeclaration":498,"src":"4491:23:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20PermitUpgradeable_$498","typeString":"contract IERC20PermitUpgradeable"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"owner","nameLocation":"4538:5:5","nodeType":"VariableDeclaration","scope":788,"src":"4530:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"spender","nameLocation":"4561:7:5","nodeType":"VariableDeclaration","scope":788,"src":"4553:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"4553:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"value","nameLocation":"4586:5:5","nodeType":"VariableDeclaration","scope":788,"src":"4578:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":740,"name":"uint256","nodeType":"ElementaryTypeName","src":"4578:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"deadline","nameLocation":"4609:8:5","nodeType":"VariableDeclaration","scope":788,"src":"4601:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"4601:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":745,"mutability":"mutable","name":"v","nameLocation":"4633:1:5","nodeType":"VariableDeclaration","scope":788,"src":"4627:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":744,"name":"uint8","nodeType":"ElementaryTypeName","src":"4627:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":747,"mutability":"mutable","name":"r","nameLocation":"4652:1:5","nodeType":"VariableDeclaration","scope":788,"src":"4644:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":746,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":749,"mutability":"mutable","name":"s","nameLocation":"4671:1:5","nodeType":"VariableDeclaration","scope":788,"src":"4663:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4663:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4481:197:5"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[],"src":"4688:0:5"},"scope":874,"src":"4462:483:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":824,"nodeType":"Block","src":"5409:572:5","statements":[{"assignments":[798],"declarations":[{"constant":false,"id":798,"mutability":"mutable","name":"returndata","nameLocation":"5771:10:5","nodeType":"VariableDeclaration","scope":824,"src":"5758:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":797,"name":"bytes","nodeType":"ElementaryTypeName","src":"5758:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":807,"initialValue":{"arguments":[{"id":804,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":794,"src":"5812:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5818:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":801,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"5792:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}],"id":800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5784:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":799,"name":"address","nodeType":"ElementaryTypeName","src":"5784:7:5","typeDescriptions":{}}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5799:12:5","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":964,"src":"5784:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5784:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5758:95:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":809,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"5871:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5882:6:5","memberName":"length","nodeType":"MemberAccess","src":"5871:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5892:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5871:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":815,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"5908:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5921:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":816,"name":"bool","nodeType":"ElementaryTypeName","src":"5921:4:5","typeDescriptions":{}}}],"id":818,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5920:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":813,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5897:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5901:6:5","memberName":"decode","nodeType":"MemberAccess","src":"5897:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5897:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5871:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":821,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5929:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":808,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5863:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5863:111:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":823,"nodeType":"ExpressionStatement","src":"5863:111:5"}]},"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"4951:372:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":825,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5337:19:5","nodeType":"FunctionDefinition","parameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"token","nameLocation":"5375:5:5","nodeType":"VariableDeclaration","scope":825,"src":"5357:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":791,"nodeType":"UserDefinedTypeName","pathNode":{"id":790,"name":"IERC20Upgradeable","nameLocations":["5357:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"5357:17:5"},"referencedDeclaration":462,"src":"5357:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"data","nameLocation":"5395:4:5","nodeType":"VariableDeclaration","scope":825,"src":"5382:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":793,"name":"bytes","nodeType":"ElementaryTypeName","src":"5382:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5356:44:5"},"returnParameters":{"id":796,"nodeType":"ParameterList","parameters":[],"src":"5409:0:5"},"scope":874,"src":"5328:653:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":872,"nodeType":"Block","src":"6582:516:5","statements":[{"assignments":[837,839],"declarations":[{"constant":false,"id":837,"mutability":"mutable","name":"success","nameLocation":"6883:7:5","nodeType":"VariableDeclaration","scope":872,"src":"6878:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":836,"name":"bool","nodeType":"ElementaryTypeName","src":"6878:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"returndata","nameLocation":"6905:10:5","nodeType":"VariableDeclaration","scope":872,"src":"6892:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":838,"name":"bytes","nodeType":"ElementaryTypeName","src":"6892:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":847,"initialValue":{"arguments":[{"id":845,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"6939:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":842,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"6927:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}],"id":841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6919:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":840,"name":"address","nodeType":"ElementaryTypeName","src":"6919:7:5","typeDescriptions":{}}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6934:4:5","memberName":"call","nodeType":"MemberAccess","src":"6919:19:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6919:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6877:67:5"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":848,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"6973:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":849,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"6985:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6996:6:5","memberName":"length","nodeType":"MemberAccess","src":"6985:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7006:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:22:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":855,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"7022:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7035:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":856,"name":"bool","nodeType":"ElementaryTypeName","src":"7035:4:5","typeDescriptions":{}}}],"id":858,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7034:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":853,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7011:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7015:6:5","memberName":"decode","nodeType":"MemberAccess","src":"7011:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7011:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6985:56:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":861,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6984:58:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:69:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":867,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"7084:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}],"id":866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7076:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":865,"name":"address","nodeType":"ElementaryTypeName","src":"7076:7:5","typeDescriptions":{}}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7076:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":863,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"7046:18:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$1204_$","typeString":"type(library AddressUpgradeable)"}},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7065:10:5","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":892,"src":"7046:29:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7046:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6973:118:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":835,"id":871,"nodeType":"Return","src":"6954:137:5"}]},"documentation":{"id":826,"nodeType":"StructuredDocumentation","src":"5987:490:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":873,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6491:23:5","nodeType":"FunctionDefinition","parameters":{"id":832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"token","nameLocation":"6533:5:5","nodeType":"VariableDeclaration","scope":873,"src":"6515:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"},"typeName":{"id":828,"nodeType":"UserDefinedTypeName","pathNode":{"id":827,"name":"IERC20Upgradeable","nameLocations":["6515:17:5"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"6515:17:5"},"referencedDeclaration":462,"src":"6515:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"visibility":"internal"},{"constant":false,"id":831,"mutability":"mutable","name":"data","nameLocation":"6553:4:5","nodeType":"VariableDeclaration","scope":873,"src":"6540:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":830,"name":"bytes","nodeType":"ElementaryTypeName","src":"6540:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6514:44:5"},"returnParameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":873,"src":"6576:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":833,"name":"bool","nodeType":"ElementaryTypeName","src":"6576:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6575:6:5"},"scope":874,"src":"6482:616:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":875,"src":"734:6366:5","usedErrors":[]}],"src":"115:6986:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204]},"id":1205,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":876,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":877,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1204,"linearizedBaseContracts":[1204],"name":"AddressUpgradeable","nameLocation":"202:18:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":891,"nodeType":"Block","src":"1489:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":885,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"1713:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:6","memberName":"code","nodeType":"MemberAccess","src":"1713:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:6","memberName":"length","nodeType":"MemberAccess","src":"1713:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":884,"id":890,"nodeType":"Return","src":"1706:30:6"}]},"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"227:1191:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":892,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:6","nodeType":"FunctionDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":880,"mutability":"mutable","name":"account","nameLocation":"1451:7:6","nodeType":"VariableDeclaration","scope":892,"src":"1443:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":879,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:6"},"returnParameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":892,"src":"1483:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":882,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:6"},"scope":1204,"src":"1423:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":925,"nodeType":"Block","src":"2729:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":903,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1204","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1204","typeString":"library AddressUpgradeable"}],"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":901,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:6","typeDescriptions":{}}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:6","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":906,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2772:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":900,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":910,"nodeType":"ExpressionStatement","src":"2739:73:6"},{"assignments":[912,null],"declarations":[{"constant":false,"id":912,"mutability":"mutable","name":"success","nameLocation":"2829:7:6","nodeType":"VariableDeclaration","scope":925,"src":"2824:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":911,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":919,"initialValue":{"arguments":[{"hexValue":"","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":913,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"2842:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:6","memberName":"call","nodeType":"MemberAccess","src":"2842:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":915,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2864:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:6"},{"expression":{"arguments":[{"id":921,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"2893:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":920,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"ExpressionStatement","src":"2885:78:6"}]},"documentation":{"id":893,"nodeType":"StructuredDocumentation","src":"1749:904:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":926,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:6","nodeType":"FunctionDefinition","parameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":895,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:6","nodeType":"VariableDeclaration","scope":926,"src":"2677:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":894,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"amount","nameLocation":"2712:6:6","nodeType":"VariableDeclaration","scope":926,"src":"2704:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:6"},"returnParameters":{"id":899,"nodeType":"ParameterList","parameters":[],"src":"2729:0:6"},"scope":1204,"src":"2658:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":943,"nodeType":"Block","src":"3801:96:6","statements":[{"expression":{"arguments":[{"id":937,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"3840:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":938,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"3848:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":936,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[984,1028],"referencedDeclaration":1028,"src":"3818:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":935,"id":942,"nodeType":"Return","src":"3811:79:6"}]},"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"2976:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":944,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:6","nodeType":"FunctionDefinition","parameters":{"id":932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"target","nameLocation":"3742:6:6","nodeType":"VariableDeclaration","scope":944,"src":"3734:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":928,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"data","nameLocation":"3763:4:6","nodeType":"VariableDeclaration","scope":944,"src":"3750:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":930,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:6"},"returnParameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":934,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":944,"src":"3787:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":933,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:6"},"scope":1204,"src":"3712:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":963,"nodeType":"Block","src":"4266:76:6","statements":[{"expression":{"arguments":[{"id":957,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"4305:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"4313:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":960,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"4322:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":956,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[984,1028],"referencedDeclaration":1028,"src":"4283:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":955,"id":962,"nodeType":"Return","src":"4276:59:6"}]},"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"3903:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":964,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:6","nodeType":"FunctionDefinition","parameters":{"id":952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"target","nameLocation":"4158:6:6","nodeType":"VariableDeclaration","scope":964,"src":"4150:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":949,"mutability":"mutable","name":"data","nameLocation":"4187:4:6","nodeType":"VariableDeclaration","scope":964,"src":"4174:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":948,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":951,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:6","nodeType":"VariableDeclaration","scope":964,"src":"4201:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":950,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:6"},"returnParameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":964,"src":"4252:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":953,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:6"},"scope":1204,"src":"4119:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":983,"nodeType":"Block","src":"4817:111:6","statements":[{"expression":{"arguments":[{"id":977,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"4856:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":978,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":969,"src":"4864:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":979,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"4870:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":976,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[984,1028],"referencedDeclaration":1028,"src":"4834:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":975,"id":982,"nodeType":"Return","src":"4827:94:6"}]},"documentation":{"id":965,"nodeType":"StructuredDocumentation","src":"4348:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":984,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:6","nodeType":"FunctionDefinition","parameters":{"id":972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"target","nameLocation":"4743:6:6","nodeType":"VariableDeclaration","scope":984,"src":"4735:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":966,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":969,"mutability":"mutable","name":"data","nameLocation":"4764:4:6","nodeType":"VariableDeclaration","scope":984,"src":"4751:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":968,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":971,"mutability":"mutable","name":"value","nameLocation":"4778:5:6","nodeType":"VariableDeclaration","scope":984,"src":"4770:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":970,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:6"},"returnParameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":984,"src":"4803:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":973,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:6"},"scope":1204,"src":"4704:224:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1027,"nodeType":"Block","src":"5355:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1001,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$1204","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$1204","typeString":"library AddressUpgradeable"}],"id":1000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":999,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:6","typeDescriptions":{}}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"5398:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":998,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1008,"nodeType":"ExpressionStatement","src":"5365:81:6"},{"assignments":[1010,1012],"declarations":[{"constant":false,"id":1010,"mutability":"mutable","name":"success","nameLocation":"5462:7:6","nodeType":"VariableDeclaration","scope":1027,"src":"5457:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1009,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:6","nodeType":"VariableDeclaration","scope":1027,"src":"5471:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1011,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1019,"initialValue":{"arguments":[{"id":1017,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"5524:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1013,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"5498:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:6","memberName":"call","nodeType":"MemberAccess","src":"5498:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1015,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"5517:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:6"},{"expression":{"arguments":[{"id":1021,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"5573:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1022,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"5581:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1023,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"5590:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1024,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"5602:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1020,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"5546:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":997,"id":1026,"nodeType":"Return","src":"5539:76:6"}]},"documentation":{"id":985,"nodeType":"StructuredDocumentation","src":"4934:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1028,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:6","nodeType":"FunctionDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":987,"mutability":"mutable","name":"target","nameLocation":"5224:6:6","nodeType":"VariableDeclaration","scope":1028,"src":"5216:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":986,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":989,"mutability":"mutable","name":"data","nameLocation":"5253:4:6","nodeType":"VariableDeclaration","scope":1028,"src":"5240:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":988,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":991,"mutability":"mutable","name":"value","nameLocation":"5275:5:6","nodeType":"VariableDeclaration","scope":1028,"src":"5267:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":993,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:6","nodeType":"VariableDeclaration","scope":1028,"src":"5290:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":992,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:6"},"returnParameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1028,"src":"5341:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":995,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:6"},"scope":1204,"src":"5176:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1044,"nodeType":"Block","src":"5899:97:6","statements":[{"expression":{"arguments":[{"id":1039,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"5935:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1040,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"5943:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1041,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1038,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1045,1074],"referencedDeclaration":1074,"src":"5916:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1037,"id":1043,"nodeType":"Return","src":"5909:80:6"}]},"documentation":{"id":1029,"nodeType":"StructuredDocumentation","src":"5628:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1045,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:6","nodeType":"FunctionDefinition","parameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1031,"mutability":"mutable","name":"target","nameLocation":"5835:6:6","nodeType":"VariableDeclaration","scope":1045,"src":"5827:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1030,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1033,"mutability":"mutable","name":"data","nameLocation":"5856:4:6","nodeType":"VariableDeclaration","scope":1045,"src":"5843:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1032,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:6"},"returnParameters":{"id":1037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1036,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1045,"src":"5885:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1035,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:6"},"scope":1204,"src":"5799:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1073,"nodeType":"Block","src":"6338:168:6","statements":[{"assignments":[1058,1060],"declarations":[{"constant":false,"id":1058,"mutability":"mutable","name":"success","nameLocation":"6354:7:6","nodeType":"VariableDeclaration","scope":1073,"src":"6349:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1057,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1060,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:6","nodeType":"VariableDeclaration","scope":1073,"src":"6363:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1059,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1065,"initialValue":{"arguments":[{"id":1063,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"6408:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1061,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"6390:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:6"},{"expression":{"arguments":[{"id":1067,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"6457:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1068,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"6465:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1069,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"6474:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1070,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"6486:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1066,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"6430:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1056,"id":1072,"nodeType":"Return","src":"6423:76:6"}]},"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"6002:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1074,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:6","nodeType":"FunctionDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"target","nameLocation":"6225:6:6","nodeType":"VariableDeclaration","scope":1074,"src":"6217:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1047,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1050,"mutability":"mutable","name":"data","nameLocation":"6254:4:6","nodeType":"VariableDeclaration","scope":1074,"src":"6241:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1049,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:6","nodeType":"VariableDeclaration","scope":1074,"src":"6268:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1051,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:6"},"returnParameters":{"id":1056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1074,"src":"6324:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1054,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:6"},"scope":1204,"src":"6180:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1090,"nodeType":"Block","src":"6782:101:6","statements":[{"expression":{"arguments":[{"id":1085,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"6820:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1086,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"6828:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1084,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1091,1120],"referencedDeclaration":1120,"src":"6799:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1083,"id":1089,"nodeType":"Return","src":"6792:84:6"}]},"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"6512:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1091,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:6","nodeType":"FunctionDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1077,"mutability":"mutable","name":"target","nameLocation":"6723:6:6","nodeType":"VariableDeclaration","scope":1091,"src":"6715:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1079,"mutability":"mutable","name":"data","nameLocation":"6744:4:6","nodeType":"VariableDeclaration","scope":1091,"src":"6731:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1078,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:6"},"returnParameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1091,"src":"6768:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1081,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:6"},"scope":1204,"src":"6685:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1119,"nodeType":"Block","src":"7224:170:6","statements":[{"assignments":[1104,1106],"declarations":[{"constant":false,"id":1104,"mutability":"mutable","name":"success","nameLocation":"7240:7:6","nodeType":"VariableDeclaration","scope":1119,"src":"7235:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1103,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:6","nodeType":"VariableDeclaration","scope":1119,"src":"7249:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1105,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1111,"initialValue":{"arguments":[{"id":1109,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1096,"src":"7296:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1107,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"7276:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:6"},{"expression":{"arguments":[{"id":1113,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"7345:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1114,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"7353:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1115,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"7362:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1116,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"7374:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1112,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1159,"src":"7318:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1102,"id":1118,"nodeType":"Return","src":"7311:76:6"}]},"documentation":{"id":1092,"nodeType":"StructuredDocumentation","src":"6889:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1120,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:6","nodeType":"FunctionDefinition","parameters":{"id":1099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"mutability":"mutable","name":"target","nameLocation":"7116:6:6","nodeType":"VariableDeclaration","scope":1120,"src":"7108:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1093,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1096,"mutability":"mutable","name":"data","nameLocation":"7145:4:6","nodeType":"VariableDeclaration","scope":1120,"src":"7132:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1095,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1098,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:6","nodeType":"VariableDeclaration","scope":1120,"src":"7159:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1097,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:6"},"returnParameters":{"id":1102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1101,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1120,"src":"7210:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1100,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:6"},"scope":1204,"src":"7069:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1158,"nodeType":"Block","src":"7876:434:6","statements":[{"condition":{"id":1134,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"7890:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1156,"nodeType":"Block","src":"8246:58:6","statements":[{"expression":{"arguments":[{"id":1152,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"8268:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1153,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"8280:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1151,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"8260:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1155,"nodeType":"ExpressionStatement","src":"8260:33:6"}]},"id":1157,"nodeType":"IfStatement","src":"7886:418:6","trueBody":{"id":1150,"nodeType":"Block","src":"7899:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1135,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"7917:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:6","memberName":"length","nodeType":"MemberAccess","src":"7917:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1147,"nodeType":"IfStatement","src":"7913:286:6","trueBody":{"id":1146,"nodeType":"Block","src":"7941:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1141,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1123,"src":"8143:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1140,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"8132:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1139,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1145,"nodeType":"ExpressionStatement","src":"8124:60:6"}]}},{"expression":{"id":1148,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"8219:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1133,"id":1149,"nodeType":"Return","src":"8212:17:6"}]}}]},"documentation":{"id":1121,"nodeType":"StructuredDocumentation","src":"7400:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1159,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:6","nodeType":"FunctionDefinition","parameters":{"id":1130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"mutability":"mutable","name":"target","nameLocation":"7735:6:6","nodeType":"VariableDeclaration","scope":1159,"src":"7727:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1125,"mutability":"mutable","name":"success","nameLocation":"7756:7:6","nodeType":"VariableDeclaration","scope":1159,"src":"7751:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1124,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1127,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:6","nodeType":"VariableDeclaration","scope":1159,"src":"7773:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1126,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1129,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:6","nodeType":"VariableDeclaration","scope":1159,"src":"7806:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1128,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:6"},"returnParameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1132,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1159,"src":"7862:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1131,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:6"},"scope":1204,"src":"7682:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1182,"nodeType":"Block","src":"8691:135:6","statements":[{"condition":{"id":1171,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"8705:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1180,"nodeType":"Block","src":"8762:58:6","statements":[{"expression":{"arguments":[{"id":1176,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8784:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1177,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1166,"src":"8796:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1175,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1203,"src":"8776:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1179,"nodeType":"ExpressionStatement","src":"8776:33:6"}]},"id":1181,"nodeType":"IfStatement","src":"8701:119:6","trueBody":{"id":1174,"nodeType":"Block","src":"8714:42:6","statements":[{"expression":{"id":1172,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"8735:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1170,"id":1173,"nodeType":"Return","src":"8728:17:6"}]}}]},"documentation":{"id":1160,"nodeType":"StructuredDocumentation","src":"8316:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1183,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:6","nodeType":"FunctionDefinition","parameters":{"id":1167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"success","nameLocation":"8571:7:6","nodeType":"VariableDeclaration","scope":1183,"src":"8566:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1161,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1164,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:6","nodeType":"VariableDeclaration","scope":1183,"src":"8588:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1163,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1166,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:6","nodeType":"VariableDeclaration","scope":1183,"src":"8621:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1165,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:6"},"returnParameters":{"id":1170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1169,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1183,"src":"8677:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1168,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:6"},"scope":1204,"src":"8531:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1202,"nodeType":"Block","src":"8915:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1190,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"8991:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:6","memberName":"length","nodeType":"MemberAccess","src":"8991:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1200,"nodeType":"Block","src":"9321:45:6","statements":[{"expression":{"arguments":[{"id":1197,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"9342:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1196,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1199,"nodeType":"ExpressionStatement","src":"9335:20:6"}]},"id":1201,"nodeType":"IfStatement","src":"8987:379:6","trueBody":{"id":1195,"nodeType":"Block","src":"9014:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:6"},"nodeType":"YulFunctionCall","src":"9213:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:6"},"nodeType":"YulFunctionCall","src":"9254:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:6"},"nodeType":"YulFunctionCall","src":"9247:44:6"},"nodeType":"YulExpressionStatement","src":"9247:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1185,"isOffset":false,"isSlot":false,"src":"9219:10:6","valueSize":1},{"declaration":1185,"isOffset":false,"isSlot":false,"src":"9262:10:6","valueSize":1}],"id":1194,"nodeType":"InlineAssembly","src":"9163:142:6"}]}}]},"id":1203,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:6","nodeType":"FunctionDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:6","nodeType":"VariableDeclaration","scope":1203,"src":"8849:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1184,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1187,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:6","nodeType":"VariableDeclaration","scope":1203,"src":"8874:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1186,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:6"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[],"src":"8915:0:6"},"scope":1204,"src":"8832:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1205,"src":"194:9180:6","usedErrors":[]}],"src":"101:9274:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ContextUpgradeable":[1246],"Initializable":[300]},"id":1247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1206,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":1207,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1247,"sourceUnit":301,"src":"110:42:7","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1209,"name":"Initializable","nameLocations":["691:13:7"],"nodeType":"IdentifierPath","referencedDeclaration":300,"src":"691:13:7"},"id":1210,"nodeType":"InheritanceSpecifier","src":"691:13:7"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"154:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1246,"linearizedBaseContracts":[1246,300],"name":"ContextUpgradeable","nameLocation":"669:18:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1215,"nodeType":"Block","src":"763:7:7","statements":[]},"id":1216,"implemented":true,"kind":"function","modifiers":[{"id":1213,"kind":"modifierInvocation","modifierName":{"id":1212,"name":"onlyInitializing","nameLocations":["746:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"746:16:7"},"nodeType":"ModifierInvocation","src":"746:16:7"}],"name":"__Context_init","nameLocation":"720:14:7","nodeType":"FunctionDefinition","parameters":{"id":1211,"nodeType":"ParameterList","parameters":[],"src":"734:2:7"},"returnParameters":{"id":1214,"nodeType":"ParameterList","parameters":[],"src":"763:0:7"},"scope":1246,"src":"711:59:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1221,"nodeType":"Block","src":"838:7:7","statements":[]},"id":1222,"implemented":true,"kind":"function","modifiers":[{"id":1219,"kind":"modifierInvocation","modifierName":{"id":1218,"name":"onlyInitializing","nameLocations":["821:16:7"],"nodeType":"IdentifierPath","referencedDeclaration":245,"src":"821:16:7"},"nodeType":"ModifierInvocation","src":"821:16:7"}],"name":"__Context_init_unchained","nameLocation":"785:24:7","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[],"src":"809:2:7"},"returnParameters":{"id":1220,"nodeType":"ParameterList","parameters":[],"src":"838:0:7"},"scope":1246,"src":"776:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1230,"nodeType":"Block","src":"912:34:7","statements":[{"expression":{"expression":{"id":1227,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:7","memberName":"sender","nodeType":"MemberAccess","src":"929:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1226,"id":1229,"nodeType":"Return","src":"922:17:7"}]},"id":1231,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:7","nodeType":"FunctionDefinition","parameters":{"id":1223,"nodeType":"ParameterList","parameters":[],"src":"869:2:7"},"returnParameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1231,"src":"903:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1224,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:7"},"scope":1246,"src":"850:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1239,"nodeType":"Block","src":"1019:32:7","statements":[{"expression":{"expression":{"id":1236,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:7","memberName":"data","nodeType":"MemberAccess","src":"1036:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1235,"id":1238,"nodeType":"Return","src":"1029:15:7"}]},"id":1240,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:7","nodeType":"FunctionDefinition","parameters":{"id":1232,"nodeType":"ParameterList","parameters":[],"src":"969:2:7"},"returnParameters":{"id":1235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1240,"src":"1003:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1233,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:7"},"scope":1246,"src":"952:99:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":1241,"nodeType":"StructuredDocumentation","src":"1057:254:7","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":1245,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:7","nodeType":"VariableDeclaration","scope":1246,"src":"1316:25:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1244,"length":{"hexValue":"3530","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:7","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:7","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":1247,"src":"651:693:7","usedErrors":[]}],"src":"86:1259:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2707],"SignedMathUpgradeable":[2812],"StringsUpgradeable":[1475]},"id":1476,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1248,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:8"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":1249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1476,"sourceUnit":2708,"src":"126:36:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":1250,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1476,"sourceUnit":2813,"src":"163:42:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1251,"nodeType":"StructuredDocumentation","src":"207:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":1475,"linearizedBaseContracts":[1475],"name":"StringsUpgradeable","nameLocation":"250:18:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1254,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:8","nodeType":"VariableDeclaration","scope":1475,"src":"275:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1252,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1257,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:8","nodeType":"VariableDeclaration","scope":1475,"src":"335:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1255,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1304,"nodeType":"Block","src":"551:636:8","statements":[{"id":1303,"nodeType":"UncheckedBlock","src":"561:620:8","statements":[{"assignments":[1266],"declarations":[{"constant":false,"id":1266,"mutability":"mutable","name":"length","nameLocation":"593:6:8","nodeType":"VariableDeclaration","scope":1303,"src":"585:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1265,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1273,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"624:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1267,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"602:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2707_$","typeString":"type(library MathUpgradeable)"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:8","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2544,"src":"602:21:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:8"},{"assignments":[1275],"declarations":[{"constant":false,"id":1275,"mutability":"mutable","name":"buffer","nameLocation":"662:6:8","nodeType":"VariableDeclaration","scope":1303,"src":"648:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1274,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1280,"initialValue":{"arguments":[{"id":1278,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1266,"src":"682:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1276,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:8"},{"assignments":[1282],"declarations":[{"constant":false,"id":1282,"mutability":"mutable","name":"ptr","nameLocation":"711:3:8","nodeType":"VariableDeclaration","scope":1303,"src":"703:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1281,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1283,"nodeType":"VariableDeclarationStatement","src":"703:11:8"},{"AST":{"nodeType":"YulBlock","src":"784:67:8","statements":[{"nodeType":"YulAssignment","src":"802:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:8"},"nodeType":"YulFunctionCall","src":"821:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:8"},"nodeType":"YulFunctionCall","src":"809:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1275,"isOffset":false,"isSlot":false,"src":"813:6:8","valueSize":1},{"declaration":1266,"isOffset":false,"isSlot":false,"src":"829:6:8","valueSize":1},{"declaration":1282,"isOffset":false,"isSlot":false,"src":"802:3:8","valueSize":1}],"id":1284,"nodeType":"InlineAssembly","src":"775:76:8"},{"body":{"id":1299,"nodeType":"Block","src":"877:267:8","statements":[{"expression":{"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:8","subExpression":{"id":1286,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"895:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1288,"nodeType":"ExpressionStatement","src":"895:5:8"},{"AST":{"nodeType":"YulBlock","src":"978:84:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:8"},"nodeType":"YulFunctionCall","src":"1018:14:8"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:8"},"nodeType":"YulFunctionCall","src":"1013:30:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:8"},"nodeType":"YulFunctionCall","src":"1000:44:8"},"nodeType":"YulExpressionStatement","src":"1000:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1254,"isOffset":false,"isSlot":false,"src":"1034:8:8","valueSize":1},{"declaration":1282,"isOffset":false,"isSlot":false,"src":"1008:3:8","valueSize":1},{"declaration":1260,"isOffset":false,"isSlot":false,"src":"1022:5:8","valueSize":1}],"id":1289,"nodeType":"InlineAssembly","src":"969:93:8"},{"expression":{"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1290,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"1079:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1293,"nodeType":"ExpressionStatement","src":"1079:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"1112:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1298,"nodeType":"IfStatement","src":"1108:21:8","trueBody":{"id":1297,"nodeType":"Break","src":"1124:5:8"}}]},"condition":{"hexValue":"74727565","id":1285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1300,"nodeType":"WhileStatement","src":"864:280:8"},{"expression":{"id":1301,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1275,"src":"1164:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1264,"id":1302,"nodeType":"Return","src":"1157:13:8"}]}]},"documentation":{"id":1258,"nodeType":"StructuredDocumentation","src":"385:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1305,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:8","nodeType":"FunctionDefinition","parameters":{"id":1261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1260,"mutability":"mutable","name":"value","nameLocation":"506:5:8","nodeType":"VariableDeclaration","scope":1305,"src":"498:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1259,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:8"},"returnParameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"536:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1262,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:8"},"scope":1475,"src":"480:707:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1332,"nodeType":"Block","src":"1357:114:8","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"1398:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:8","trueExpression":{"hexValue":"2d","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1326,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"1455:5:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1324,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"1429:21:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$2812_$","typeString":"type(library SignedMathUpgradeable)"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:8","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2811,"src":"1429:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1323,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1305,1333],"referencedDeclaration":1305,"src":"1420:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1315,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:8","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1313,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:8","typeDescriptions":{}}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1312,"id":1331,"nodeType":"Return","src":"1367:97:8"}]},"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"1193:89:8","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1333,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:8","nodeType":"FunctionDefinition","parameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"value","nameLocation":"1312:5:8","nodeType":"VariableDeclaration","scope":1333,"src":"1305:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1307,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:8","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:8"},"returnParameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1333,"src":"1342:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1310,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:8"},"scope":1475,"src":"1287:184:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1352,"nodeType":"Block","src":"1650:111:8","statements":[{"id":1351,"nodeType":"UncheckedBlock","src":"1660:95:8","statements":[{"expression":{"arguments":[{"id":1342,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"1703:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1345,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"1733:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1343,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"1710:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$2707_$","typeString":"type(library MathUpgradeable)"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:8","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2667,"src":"1710:22:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1341,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1353,1429,1449],"referencedDeclaration":1429,"src":"1691:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1340,"id":1350,"nodeType":"Return","src":"1684:60:8"}]}]},"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"1477:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1353,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:8","nodeType":"FunctionDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"value","nameLocation":"1605:5:8","nodeType":"VariableDeclaration","scope":1353,"src":"1597:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:8"},"returnParameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1353,"src":"1635:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1338,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:8"},"scope":1475,"src":"1576:185:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1428,"nodeType":"Block","src":"1974:347:8","statements":[{"assignments":[1364],"declarations":[{"constant":false,"id":1364,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:8","nodeType":"VariableDeclaration","scope":1428,"src":"1984:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1363,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1373,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1368,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"2020:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1365,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:8"},{"expression":{"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1374,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2041:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1376,"indexExpression":{"hexValue":"30","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1379,"nodeType":"ExpressionStatement","src":"2041:15:8"},{"expression":{"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1380,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2066:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1382,"indexExpression":{"hexValue":"31","id":1381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1385,"nodeType":"ExpressionStatement","src":"2066:15:8"},{"body":{"id":1414,"nodeType":"Block","src":"2136:83:8","statements":[{"expression":{"id":1408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1400,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2150:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1402,"indexExpression":{"id":1401,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2157:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1403,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"2162:8:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1407,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"2171:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1409,"nodeType":"ExpressionStatement","src":"2150:33:8"},{"expression":{"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1410,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"2197:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1413,"nodeType":"ExpressionStatement","src":"2197:11:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1394,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2124:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1415,"initializationExpression":{"assignments":[1387],"declarations":[{"constant":false,"id":1387,"mutability":"mutable","name":"i","nameLocation":"2104:1:8","nodeType":"VariableDeclaration","scope":1415,"src":"2096:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1386,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1393,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1389,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1358,"src":"2112:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:8"},"loopExpression":{"expression":{"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:8","subExpression":{"id":1397,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2133:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1399,"nodeType":"ExpressionStatement","src":"2131:3:8"},"nodeType":"ForStatement","src":"2091:128:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1417,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"2236:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1416,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1422,"nodeType":"ExpressionStatement","src":"2228:55:8"},{"expression":{"arguments":[{"id":1425,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"2307:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1423,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:8","typeDescriptions":{}}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1362,"id":1427,"nodeType":"Return","src":"2293:21:8"}]},"documentation":{"id":1354,"nodeType":"StructuredDocumentation","src":"1767:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1429,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:8","nodeType":"FunctionDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"value","nameLocation":"1913:5:8","nodeType":"VariableDeclaration","scope":1429,"src":"1905:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1358,"mutability":"mutable","name":"length","nameLocation":"1928:6:8","nodeType":"VariableDeclaration","scope":1429,"src":"1920:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:8"},"returnParameters":{"id":1362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1429,"src":"1959:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1360,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:8"},"scope":1475,"src":"1884:437:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1448,"nodeType":"Block","src":"2546:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1442,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"2591:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1440,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:8","typeDescriptions":{}}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1439,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1438,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:8","typeDescriptions":{}}},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1445,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"2599:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1437,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1353,1429,1449],"referencedDeclaration":1429,"src":"2563:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1436,"id":1447,"nodeType":"Return","src":"2556:59:8"}]},"documentation":{"id":1430,"nodeType":"StructuredDocumentation","src":"2327:141:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1449,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:8","nodeType":"FunctionDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"addr","nameLocation":"2502:4:8","nodeType":"VariableDeclaration","scope":1449,"src":"2494:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1431,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:8"},"returnParameters":{"id":1436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1449,"src":"2531:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1434,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:8"},"scope":1475,"src":"2473:149:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1473,"nodeType":"Block","src":"2777:66:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1462,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"2810:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1460,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:8","typeDescriptions":{}}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1459,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1468,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"2833:1:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1466,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:8","typeDescriptions":{}}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1465,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:8","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1458,"id":1472,"nodeType":"Return","src":"2787:49:8"}]},"documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"2628:66:8","text":" @dev Returns true if the two strings are equal."},"id":1474,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:8","nodeType":"FunctionDefinition","parameters":{"id":1455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"a","nameLocation":"2728:1:8","nodeType":"VariableDeclaration","scope":1474,"src":"2714:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1451,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1454,"mutability":"mutable","name":"b","nameLocation":"2745:1:8","nodeType":"VariableDeclaration","scope":1474,"src":"2731:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1453,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:8"},"returnParameters":{"id":1458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1457,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1474,"src":"2771:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1456,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:8"},"scope":1475,"src":"2699:144:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1476,"src":"242:2603:8","usedErrors":[]}],"src":"101:2745:8"},"id":8},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","exportedSymbols":{"ECDSAUpgradeable":[1841],"MathUpgradeable":[2707],"SignedMathUpgradeable":[2812],"StringsUpgradeable":[1475]},"id":1842,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1477,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"../StringsUpgradeable.sol","id":1478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1842,"sourceUnit":1476,"src":"137:35:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSAUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1479,"nodeType":"StructuredDocumentation","src":"174:205:9","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1841,"linearizedBaseContracts":[1841],"name":"ECDSAUpgradeable","nameLocation":"388:16:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSAUpgradeable.RecoverError","id":1485,"members":[{"id":1480,"name":"NoError","nameLocation":"439:7:9","nodeType":"EnumValue","src":"439:7:9"},{"id":1481,"name":"InvalidSignature","nameLocation":"456:16:9","nodeType":"EnumValue","src":"456:16:9"},{"id":1482,"name":"InvalidSignatureLength","nameLocation":"482:22:9","nodeType":"EnumValue","src":"482:22:9"},{"id":1483,"name":"InvalidSignatureS","nameLocation":"514:17:9","nodeType":"EnumValue","src":"514:17:9"},{"id":1484,"name":"InvalidSignatureV","nameLocation":"541:17:9","nodeType":"EnumValue","src":"541:17:9"}],"name":"RecoverError","nameLocation":"416:12:9","nodeType":"EnumDefinition","src":"411:175:9"},{"body":{"id":1528,"nodeType":"Block","src":"646:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1491,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"660:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1492,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"669:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"682:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1480,"src":"669:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"660:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1497,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"756:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1498,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"765:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"778:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1481,"src":"765:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"756:38:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1506,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"865:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1507,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"874:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"887:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"874:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"865:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"id":1518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1515,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"987:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1516,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"996:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1009:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1483,"src":"996:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"src":"987:39:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1524,"nodeType":"IfStatement","src":"983:114:9","trueBody":{"id":1523,"nodeType":"Block","src":"1028:69:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1519,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1042:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1042:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1522,"nodeType":"ExpressionStatement","src":"1042:44:9"}]}},"id":1525,"nodeType":"IfStatement","src":"861:236:9","trueBody":{"id":1514,"nodeType":"Block","src":"911:66:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"932:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1510,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"925:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1513,"nodeType":"ExpressionStatement","src":"925:41:9"}]}},"id":1526,"nodeType":"IfStatement","src":"752:345:9","trueBody":{"id":1505,"nodeType":"Block","src":"796:59:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"817:26:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1501,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"810:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"810:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1504,"nodeType":"ExpressionStatement","src":"810:34:9"}]}},"id":1527,"nodeType":"IfStatement","src":"656:441:9","trueBody":{"id":1496,"nodeType":"Block","src":"691:55:9","statements":[{"functionReturnParameters":1490,"id":1495,"nodeType":"Return","src":"705:7:9"}]}}]},"id":1529,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"601:11:9","nodeType":"FunctionDefinition","parameters":{"id":1489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1488,"mutability":"mutable","name":"error","nameLocation":"626:5:9","nodeType":"VariableDeclaration","scope":1529,"src":"613:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1487,"nodeType":"UserDefinedTypeName","pathNode":{"id":1486,"name":"RecoverError","nameLocations":["613:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"613:12:9"},"referencedDeclaration":1485,"src":"613:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"612:20:9"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[],"src":"646:0:9"},"scope":1841,"src":"592:511:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1574,"nodeType":"Block","src":"2271:626:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1542,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"2285:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2295:6:9","memberName":"length","nodeType":"MemberAccess","src":"2285:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2305:2:9","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2285:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1572,"nodeType":"Block","src":"2810:81:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2840:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2832:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1564,"name":"address","nodeType":"ElementaryTypeName","src":"2832:7:9","typeDescriptions":{}}},"id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2832:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1568,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"2844:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2857:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1482,"src":"2844:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1570,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2831:49:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1541,"id":1571,"nodeType":"Return","src":"2824:56:9"}]},"id":1573,"nodeType":"IfStatement","src":"2281:610:9","trueBody":{"id":1563,"nodeType":"Block","src":"2309:495:9","statements":[{"assignments":[1547],"declarations":[{"constant":false,"id":1547,"mutability":"mutable","name":"r","nameLocation":"2331:1:9","nodeType":"VariableDeclaration","scope":1563,"src":"2323:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2323:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1548,"nodeType":"VariableDeclarationStatement","src":"2323:9:9"},{"assignments":[1550],"declarations":[{"constant":false,"id":1550,"mutability":"mutable","name":"s","nameLocation":"2354:1:9","nodeType":"VariableDeclaration","scope":1563,"src":"2346:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2346:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1551,"nodeType":"VariableDeclarationStatement","src":"2346:9:9"},{"assignments":[1553],"declarations":[{"constant":false,"id":1553,"mutability":"mutable","name":"v","nameLocation":"2375:1:9","nodeType":"VariableDeclaration","scope":1563,"src":"2369:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1552,"name":"uint8","nodeType":"ElementaryTypeName","src":"2369:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1554,"nodeType":"VariableDeclarationStatement","src":"2369:7:9"},{"AST":{"nodeType":"YulBlock","src":"2577:171:9","statements":[{"nodeType":"YulAssignment","src":"2595:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2610:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2621:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2606:3:9"},"nodeType":"YulFunctionCall","src":"2606:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2600:5:9"},"nodeType":"YulFunctionCall","src":"2600:27:9"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2595:1:9"}]},{"nodeType":"YulAssignment","src":"2644:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2659:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2670:4:9","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2655:3:9"},"nodeType":"YulFunctionCall","src":"2655:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2649:5:9"},"nodeType":"YulFunctionCall","src":"2649:27:9"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2644:1:9"}]},{"nodeType":"YulAssignment","src":"2693:41:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2703:1:9","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2716:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2727:4:9","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:9"},"nodeType":"YulFunctionCall","src":"2712:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2706:5:9"},"nodeType":"YulFunctionCall","src":"2706:27:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2698:4:9"},"nodeType":"YulFunctionCall","src":"2698:36:9"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2693:1:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1547,"isOffset":false,"isSlot":false,"src":"2595:1:9","valueSize":1},{"declaration":1550,"isOffset":false,"isSlot":false,"src":"2644:1:9","valueSize":1},{"declaration":1534,"isOffset":false,"isSlot":false,"src":"2610:9:9","valueSize":1},{"declaration":1534,"isOffset":false,"isSlot":false,"src":"2659:9:9","valueSize":1},{"declaration":1534,"isOffset":false,"isSlot":false,"src":"2716:9:9","valueSize":1},{"declaration":1553,"isOffset":false,"isSlot":false,"src":"2693:1:9","valueSize":1}],"id":1555,"nodeType":"InlineAssembly","src":"2568:180:9"},{"expression":{"arguments":[{"id":1557,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2779:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1558,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"2785:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1559,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"2788:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1560,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"2791:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1556,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1743,"src":"2768:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2768:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1541,"id":1562,"nodeType":"Return","src":"2761:32:9"}]}}]},"documentation":{"id":1530,"nodeType":"StructuredDocumentation","src":"1109:1053:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1575,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2176:10:9","nodeType":"FunctionDefinition","parameters":{"id":1535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1532,"mutability":"mutable","name":"hash","nameLocation":"2195:4:9","nodeType":"VariableDeclaration","scope":1575,"src":"2187:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1531,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2187:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1534,"mutability":"mutable","name":"signature","nameLocation":"2214:9:9","nodeType":"VariableDeclaration","scope":1575,"src":"2201:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1533,"name":"bytes","nodeType":"ElementaryTypeName","src":"2201:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2186:38:9"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1575,"src":"2248:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1536,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1575,"src":"2257:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1539,"nodeType":"UserDefinedTypeName","pathNode":{"id":1538,"name":"RecoverError","nameLocations":["2257:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"2257:12:9"},"referencedDeclaration":1485,"src":"2257:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"2247:23:9"},"scope":1841,"src":"2167:730:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1601,"nodeType":"Block","src":"3770:140:9","statements":[{"assignments":[1586,1589],"declarations":[{"constant":false,"id":1586,"mutability":"mutable","name":"recovered","nameLocation":"3789:9:9","nodeType":"VariableDeclaration","scope":1601,"src":"3781:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1585,"name":"address","nodeType":"ElementaryTypeName","src":"3781:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1589,"mutability":"mutable","name":"error","nameLocation":"3813:5:9","nodeType":"VariableDeclaration","scope":1601,"src":"3800:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1588,"nodeType":"UserDefinedTypeName","pathNode":{"id":1587,"name":"RecoverError","nameLocations":["3800:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"3800:12:9"},"referencedDeclaration":1485,"src":"3800:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1594,"initialValue":{"arguments":[{"id":1591,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"3833:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1592,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"3839:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1590,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1575,"src":"3822:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3780:69:9"},{"expression":{"arguments":[{"id":1596,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"3871:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1595,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"3859:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1485_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3859:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1598,"nodeType":"ExpressionStatement","src":"3859:18:9"},{"expression":{"id":1599,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"3894:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1584,"id":1600,"nodeType":"Return","src":"3887:16:9"}]},"documentation":{"id":1576,"nodeType":"StructuredDocumentation","src":"2903:775:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1602,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3692:7:9","nodeType":"FunctionDefinition","parameters":{"id":1581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1578,"mutability":"mutable","name":"hash","nameLocation":"3708:4:9","nodeType":"VariableDeclaration","scope":1602,"src":"3700:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3700:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1580,"mutability":"mutable","name":"signature","nameLocation":"3727:9:9","nodeType":"VariableDeclaration","scope":1602,"src":"3714:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1579,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3699:38:9"},"returnParameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1602,"src":"3761:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1582,"name":"address","nodeType":"ElementaryTypeName","src":"3761:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3760:9:9"},"scope":1841,"src":"3683:227:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1648,"nodeType":"Block","src":"4267:203:9","statements":[{"assignments":[1618],"declarations":[{"constant":false,"id":1618,"mutability":"mutable","name":"s","nameLocation":"4285:1:9","nodeType":"VariableDeclaration","scope":1648,"src":"4277:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4277:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1625,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1619,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"4289:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4302:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4294:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1620,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4294:7:9","typeDescriptions":{}}},"id":1623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4294:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4289:80:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4277:92:9"},{"assignments":[1627],"declarations":[{"constant":false,"id":1627,"mutability":"mutable","name":"v","nameLocation":"4385:1:9","nodeType":"VariableDeclaration","scope":1648,"src":"4379:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1626,"name":"uint8","nodeType":"ElementaryTypeName","src":"4379:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1640,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1632,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"4404:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1631,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4396:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1630,"name":"uint256","nodeType":"ElementaryTypeName","src":"4396:7:9","typeDescriptions":{}}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4396:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4411:3:9","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4396:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1636,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4395:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4418:2:9","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4395:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4389:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1628,"name":"uint8","nodeType":"ElementaryTypeName","src":"4389:5:9","typeDescriptions":{}}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4389:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4379:42:9"},{"expression":{"arguments":[{"id":1642,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"4449:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1643,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"4455:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1644,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1607,"src":"4458:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1645,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"4461:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1641,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1743,"src":"4438:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4438:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1616,"id":1647,"nodeType":"Return","src":"4431:32:9"}]},"documentation":{"id":1603,"nodeType":"StructuredDocumentation","src":"3916:243:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1649,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4173:10:9","nodeType":"FunctionDefinition","parameters":{"id":1610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"hash","nameLocation":"4192:4:9","nodeType":"VariableDeclaration","scope":1649,"src":"4184:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1604,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1607,"mutability":"mutable","name":"r","nameLocation":"4206:1:9","nodeType":"VariableDeclaration","scope":1649,"src":"4198:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4198:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1609,"mutability":"mutable","name":"vs","nameLocation":"4217:2:9","nodeType":"VariableDeclaration","scope":1649,"src":"4209:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4209:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4183:37:9"},"returnParameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1612,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1649,"src":"4244:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1611,"name":"address","nodeType":"ElementaryTypeName","src":"4244:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1649,"src":"4253:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1614,"nodeType":"UserDefinedTypeName","pathNode":{"id":1613,"name":"RecoverError","nameLocations":["4253:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"4253:12:9"},"referencedDeclaration":1485,"src":"4253:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"4243:23:9"},"scope":1841,"src":"4164:306:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1678,"nodeType":"Block","src":"4721:136:9","statements":[{"assignments":[1662,1665],"declarations":[{"constant":false,"id":1662,"mutability":"mutable","name":"recovered","nameLocation":"4740:9:9","nodeType":"VariableDeclaration","scope":1678,"src":"4732:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1661,"name":"address","nodeType":"ElementaryTypeName","src":"4732:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1665,"mutability":"mutable","name":"error","nameLocation":"4764:5:9","nodeType":"VariableDeclaration","scope":1678,"src":"4751:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1664,"nodeType":"UserDefinedTypeName","pathNode":{"id":1663,"name":"RecoverError","nameLocations":["4751:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"4751:12:9"},"referencedDeclaration":1485,"src":"4751:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1671,"initialValue":{"arguments":[{"id":1667,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"4784:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1668,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"4790:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1669,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4793:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1666,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1649,"src":"4773:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4773:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4731:65:9"},{"expression":{"arguments":[{"id":1673,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"4818:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1672,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"4806:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1485_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4806:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"4806:18:9"},{"expression":{"id":1676,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"4841:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1660,"id":1677,"nodeType":"Return","src":"4834:16:9"}]},"documentation":{"id":1650,"nodeType":"StructuredDocumentation","src":"4476:154:9","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1679,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4644:7:9","nodeType":"FunctionDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1652,"mutability":"mutable","name":"hash","nameLocation":"4660:4:9","nodeType":"VariableDeclaration","scope":1679,"src":"4652:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1651,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4652:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1654,"mutability":"mutable","name":"r","nameLocation":"4674:1:9","nodeType":"VariableDeclaration","scope":1679,"src":"4666:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1653,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4666:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"vs","nameLocation":"4685:2:9","nodeType":"VariableDeclaration","scope":1679,"src":"4677:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1655,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4677:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4651:37:9"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1679,"src":"4712:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1658,"name":"address","nodeType":"ElementaryTypeName","src":"4712:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4711:9:9"},"scope":1841,"src":"4635:222:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1742,"nodeType":"Block","src":"5142:1345:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1698,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"6038:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6030:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1696,"name":"uint256","nodeType":"ElementaryTypeName","src":"6030:7:9","typeDescriptions":{}}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6030:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6043:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6030:79:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1711,"nodeType":"IfStatement","src":"6026:161:9","trueBody":{"id":1710,"nodeType":"Block","src":"6111:76:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6141:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"6133:7:9","typeDescriptions":{}}},"id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6133:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1706,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6145:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6158:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1483,"src":"6145:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1708,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6132:44:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1695,"id":1709,"nodeType":"Return","src":"6125:51:9"}]}},{"assignments":[1713],"declarations":[{"constant":false,"id":1713,"mutability":"mutable","name":"signer","nameLocation":"6289:6:9","nodeType":"VariableDeclaration","scope":1742,"src":"6281:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1712,"name":"address","nodeType":"ElementaryTypeName","src":"6281:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1720,"initialValue":{"arguments":[{"id":1715,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"6308:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1716,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"6314:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1717,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"6317:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1718,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"6320:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1714,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6298:9:9","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6298:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6281:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1721,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"6336:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6354:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6346:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1722,"name":"address","nodeType":"ElementaryTypeName","src":"6346:7:9","typeDescriptions":{}}},"id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6336:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1736,"nodeType":"IfStatement","src":"6332:101:9","trueBody":{"id":1735,"nodeType":"Block","src":"6358:75:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6388:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1728,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6380:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1727,"name":"address","nodeType":"ElementaryTypeName","src":"6380:7:9","typeDescriptions":{}}},"id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6380:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1731,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6392:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6405:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1481,"src":"6392:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1733,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6379:43:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1695,"id":1734,"nodeType":"Return","src":"6372:50:9"}]}},{"expression":{"components":[{"id":1737,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1713,"src":"6451:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1738,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6459:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1485_$","typeString":"type(enum ECDSAUpgradeable.RecoverError)"}},"id":1739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6472:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1480,"src":"6459:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"id":1740,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6450:30:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"functionReturnParameters":1695,"id":1741,"nodeType":"Return","src":"6443:37:9"}]},"documentation":{"id":1680,"nodeType":"StructuredDocumentation","src":"4863:163:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1743,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5040:10:9","nodeType":"FunctionDefinition","parameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"hash","nameLocation":"5059:4:9","nodeType":"VariableDeclaration","scope":1743,"src":"5051:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1681,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5051:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1684,"mutability":"mutable","name":"v","nameLocation":"5071:1:9","nodeType":"VariableDeclaration","scope":1743,"src":"5065:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1683,"name":"uint8","nodeType":"ElementaryTypeName","src":"5065:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"r","nameLocation":"5082:1:9","nodeType":"VariableDeclaration","scope":1743,"src":"5074:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1685,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5074:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"s","nameLocation":"5093:1:9","nodeType":"VariableDeclaration","scope":1743,"src":"5085:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1687,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5050:45:9"},"returnParameters":{"id":1695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1743,"src":"5119:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1690,"name":"address","nodeType":"ElementaryTypeName","src":"5119:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1743,"src":"5128:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1693,"nodeType":"UserDefinedTypeName","pathNode":{"id":1692,"name":"RecoverError","nameLocations":["5128:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"5128:12:9"},"referencedDeclaration":1485,"src":"5128:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"src":"5118:23:9"},"scope":1841,"src":"5031:1456:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1775,"nodeType":"Block","src":"6714:138:9","statements":[{"assignments":[1758,1761],"declarations":[{"constant":false,"id":1758,"mutability":"mutable","name":"recovered","nameLocation":"6733:9:9","nodeType":"VariableDeclaration","scope":1775,"src":"6725:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1757,"name":"address","nodeType":"ElementaryTypeName","src":"6725:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1761,"mutability":"mutable","name":"error","nameLocation":"6757:5:9","nodeType":"VariableDeclaration","scope":1775,"src":"6744:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"},"typeName":{"id":1760,"nodeType":"UserDefinedTypeName","pathNode":{"id":1759,"name":"RecoverError","nameLocations":["6744:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1485,"src":"6744:12:9"},"referencedDeclaration":1485,"src":"6744:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}},"visibility":"internal"}],"id":1768,"initialValue":{"arguments":[{"id":1763,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6777:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1764,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"6783:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1765,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"6786:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1766,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"6789:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1762,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1575,1649,1743],"referencedDeclaration":1743,"src":"6766:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1485_$","typeString":"tuple(address,enum ECDSAUpgradeable.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6724:67:9"},{"expression":{"arguments":[{"id":1770,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"6813:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1485","typeString":"enum ECDSAUpgradeable.RecoverError"}],"id":1769,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1529,"src":"6801:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1485_$returns$__$","typeString":"function (enum ECDSAUpgradeable.RecoverError) pure"}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1772,"nodeType":"ExpressionStatement","src":"6801:18:9"},{"expression":{"id":1773,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"6836:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1756,"id":1774,"nodeType":"Return","src":"6829:16:9"}]},"documentation":{"id":1744,"nodeType":"StructuredDocumentation","src":"6493:122:9","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1776,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6629:7:9","nodeType":"FunctionDefinition","parameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"hash","nameLocation":"6645:4:9","nodeType":"VariableDeclaration","scope":1776,"src":"6637:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6637:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"v","nameLocation":"6657:1:9","nodeType":"VariableDeclaration","scope":1776,"src":"6651:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1747,"name":"uint8","nodeType":"ElementaryTypeName","src":"6651:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"r","nameLocation":"6668:1:9","nodeType":"VariableDeclaration","scope":1776,"src":"6660:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1749,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6660:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1752,"mutability":"mutable","name":"s","nameLocation":"6679:1:9","nodeType":"VariableDeclaration","scope":1776,"src":"6671:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1751,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6671:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6636:45:9"},"returnParameters":{"id":1756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1776,"src":"6705:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1754,"name":"address","nodeType":"ElementaryTypeName","src":"6705:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6704:9:9"},"scope":1841,"src":"6620:232:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1785,"nodeType":"Block","src":"7228:310:9","statements":[{"AST":{"nodeType":"YulBlock","src":"7384:148:9","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7405:4:9","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7411:34:9","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7398:6:9"},"nodeType":"YulFunctionCall","src":"7398:48:9"},"nodeType":"YulExpressionStatement","src":"7398:48:9"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7466:4:9","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7472:4:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7459:6:9"},"nodeType":"YulFunctionCall","src":"7459:18:9"},"nodeType":"YulExpressionStatement","src":"7459:18:9"},{"nodeType":"YulAssignment","src":"7490:32:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7511:4:9","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7517:4:9","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7501:9:9"},"nodeType":"YulFunctionCall","src":"7501:21:9"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7490:7:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1779,"isOffset":false,"isSlot":false,"src":"7472:4:9","valueSize":1},{"declaration":1782,"isOffset":false,"isSlot":false,"src":"7490:7:9","valueSize":1}],"id":1784,"nodeType":"InlineAssembly","src":"7375:157:9"}]},"documentation":{"id":1777,"nodeType":"StructuredDocumentation","src":"6858:279:9","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1786,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7151:22:9","nodeType":"FunctionDefinition","parameters":{"id":1780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1779,"mutability":"mutable","name":"hash","nameLocation":"7182:4:9","nodeType":"VariableDeclaration","scope":1786,"src":"7174:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1778,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7174:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7173:14:9"},"returnParameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"message","nameLocation":"7219:7:9","nodeType":"VariableDeclaration","scope":1786,"src":"7211:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7211:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7210:17:9"},"scope":1841,"src":"7142:396:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1807,"nodeType":"Block","src":"7903:127:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7947:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1800,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"8009:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8011:6:9","memberName":"length","nodeType":"MemberAccess","src":"8009:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1798,"name":"StringsUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1475,"src":"7981:18:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StringsUpgradeable_$1475_$","typeString":"type(library StringsUpgradeable)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8000:8:9","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1305,"src":"7981:27:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7981:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1803,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"8020:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1795,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7930:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7934:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"7930:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7930:92:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1794,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7920:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7920:103:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1793,"id":1806,"nodeType":"Return","src":"7913:110:9"}]},"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"7544:274:9","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1808,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7832:22:9","nodeType":"FunctionDefinition","parameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"s","nameLocation":"7868:1:9","nodeType":"VariableDeclaration","scope":1808,"src":"7855:14:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1788,"name":"bytes","nodeType":"ElementaryTypeName","src":"7855:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7854:16:9"},"returnParameters":{"id":1793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1808,"src":"7894:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1791,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7894:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7893:9:9"},"scope":1841,"src":"7823:207:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1819,"nodeType":"Block","src":"8476:290:9","statements":[{"AST":{"nodeType":"YulBlock","src":"8538:222:9","statements":[{"nodeType":"YulVariableDeclaration","src":"8552:22:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8569:4:9","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8563:5:9"},"nodeType":"YulFunctionCall","src":"8563:11:9"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8556:3:9","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8594:3:9"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8599:10:9","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8587:6:9"},"nodeType":"YulFunctionCall","src":"8587:23:9"},"nodeType":"YulExpressionStatement","src":"8587:23:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8634:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8639:4:9","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8630:3:9"},"nodeType":"YulFunctionCall","src":"8630:14:9"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8646:15:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8623:6:9"},"nodeType":"YulFunctionCall","src":"8623:39:9"},"nodeType":"YulExpressionStatement","src":"8623:39:9"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8686:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8691:4:9","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8682:3:9"},"nodeType":"YulFunctionCall","src":"8682:14:9"},{"name":"structHash","nodeType":"YulIdentifier","src":"8698:10:9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8675:6:9"},"nodeType":"YulFunctionCall","src":"8675:34:9"},"nodeType":"YulExpressionStatement","src":"8675:34:9"},{"nodeType":"YulAssignment","src":"8722:28:9","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8740:3:9"},{"kind":"number","nodeType":"YulLiteral","src":"8745:4:9","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8730:9:9"},"nodeType":"YulFunctionCall","src":"8730:20:9"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8722:4:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1816,"isOffset":false,"isSlot":false,"src":"8722:4:9","valueSize":1},{"declaration":1811,"isOffset":false,"isSlot":false,"src":"8646:15:9","valueSize":1},{"declaration":1813,"isOffset":false,"isSlot":false,"src":"8698:10:9","valueSize":1}],"id":1818,"nodeType":"InlineAssembly","src":"8529:231:9"}]},"documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"8036:328:9","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8378:15:9","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1811,"mutability":"mutable","name":"domainSeparator","nameLocation":"8402:15:9","nodeType":"VariableDeclaration","scope":1820,"src":"8394:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1810,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8394:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"structHash","nameLocation":"8427:10:9","nodeType":"VariableDeclaration","scope":1820,"src":"8419:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8419:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8393:45:9"},"returnParameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"data","nameLocation":"8470:4:9","nodeType":"VariableDeclaration","scope":1820,"src":"8462:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8462:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8461:14:9"},"scope":1841,"src":"8369:397:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1839,"nodeType":"Block","src":"9081:80:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9125:10:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1834,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"9137:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1835,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"9148:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1831,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9108:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9112:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"9108:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9108:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1830,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9098:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1829,"id":1838,"nodeType":"Return","src":"9091:63:9"}]},"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"8772:193:9","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":1840,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8979:31:9","nodeType":"FunctionDefinition","parameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"validator","nameLocation":"9019:9:9","nodeType":"VariableDeclaration","scope":1840,"src":"9011:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"9011:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"data","nameLocation":"9043:4:9","nodeType":"VariableDeclaration","scope":1840,"src":"9030:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1824,"name":"bytes","nodeType":"ElementaryTypeName","src":"9030:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9010:38:9"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1840,"src":"9072:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9072:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9071:9:9"},"scope":1841,"src":"8970:191:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1842,"src":"380:8783:9","usedErrors":[]}],"src":"112:9052:9"},"id":9},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[2707]},"id":2708,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1843,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1844,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2707,"linearizedBaseContracts":[2707],"name":"MathUpgradeable","nameLocation":"210:15:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":1848,"members":[{"id":1845,"name":"Down","nameLocation":"256:4:10","nodeType":"EnumValue","src":"256:4:10"},{"id":1846,"name":"Up","nameLocation":"298:2:10","nodeType":"EnumValue","src":"298:2:10"},{"id":1847,"name":"Zero","nameLocation":"329:4:10","nodeType":"EnumValue","src":"329:4:10"}],"name":"Rounding","nameLocation":"237:8:10","nodeType":"EnumDefinition","src":"232:122:10"},{"body":{"id":1865,"nodeType":"Block","src":"491:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1858,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"508:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1859,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"512:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1862,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"520:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:10","trueExpression":{"id":1861,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"516:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1857,"id":1864,"nodeType":"Return","src":"501:20:10"}]},"documentation":{"id":1849,"nodeType":"StructuredDocumentation","src":"360:59:10","text":" @dev Returns the largest of two numbers."},"id":1866,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:10","nodeType":"FunctionDefinition","parameters":{"id":1854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1851,"mutability":"mutable","name":"a","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":1866,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1850,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"b","nameLocation":"456:1:10","nodeType":"VariableDeclaration","scope":1866,"src":"448:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1852,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:10"},"returnParameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1866,"src":"482:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1855,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:10"},"scope":2707,"src":"424:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1883,"nodeType":"Block","src":"666:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1876,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"683:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1877,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"687:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1880,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"695:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:10","trueExpression":{"id":1879,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"691:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1875,"id":1882,"nodeType":"Return","src":"676:20:10"}]},"documentation":{"id":1867,"nodeType":"StructuredDocumentation","src":"534:60:10","text":" @dev Returns the smallest of two numbers."},"id":1884,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:10","nodeType":"FunctionDefinition","parameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"a","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":1884,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1868,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1871,"mutability":"mutable","name":"b","nameLocation":"631:1:10","nodeType":"VariableDeclaration","scope":1884,"src":"623:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:10"},"returnParameters":{"id":1875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1884,"src":"657:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1873,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:10"},"scope":2707,"src":"599:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1906,"nodeType":"Block","src":"887:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1894,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"942:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1895,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"946:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1897,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"952:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1899,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"956:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1901,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1893,"id":1905,"nodeType":"Return","src":"934:28:10"}]},"documentation":{"id":1885,"nodeType":"StructuredDocumentation","src":"709:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1907,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:10","nodeType":"FunctionDefinition","parameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1887,"mutability":"mutable","name":"a","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":1907,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1886,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1889,"mutability":"mutable","name":"b","nameLocation":"852:1:10","nodeType":"VariableDeclaration","scope":1907,"src":"844:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:10"},"returnParameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1907,"src":"878:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1891,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:10"},"scope":2707,"src":"816:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1931,"nodeType":"Block","src":"1239:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1917,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1327:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1341:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1924,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1925,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"1350:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:10","trueExpression":{"hexValue":"30","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1916,"id":1930,"nodeType":"Return","src":"1320:35:10"}]},"documentation":{"id":1908,"nodeType":"StructuredDocumentation","src":"975:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1932,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:10","nodeType":"FunctionDefinition","parameters":{"id":1913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"a","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":1932,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1909,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1912,"mutability":"mutable","name":"b","nameLocation":"1204:1:10","nodeType":"VariableDeclaration","scope":1932,"src":"1196:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1911,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:10"},"returnParameters":{"id":1916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1915,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1932,"src":"1230:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:10"},"scope":2707,"src":"1168:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2054,"nodeType":"Block","src":"1776:4115:10","statements":[{"id":2053,"nodeType":"UncheckedBlock","src":"1786:4099:10","statements":[{"assignments":[1945],"declarations":[{"constant":false,"id":1945,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:10","nodeType":"VariableDeclaration","scope":2053,"src":"2107:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1944,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1946,"nodeType":"VariableDeclarationStatement","src":"2107:13:10"},{"assignments":[1948],"declarations":[{"constant":false,"id":1948,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:10","nodeType":"VariableDeclaration","scope":2053,"src":"2179:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1949,"nodeType":"VariableDeclarationStatement","src":"2179:13:10"},{"AST":{"nodeType":"YulBlock","src":"2259:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:10"},"nodeType":"YulFunctionCall","src":"2300:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:10"},"nodeType":"YulFunctionCall","src":"2287:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:10","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:10"},"nodeType":"YulFunctionCall","src":"2333:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:10"}]},{"nodeType":"YulAssignment","src":"2359:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:10"},"nodeType":"YulFunctionCall","src":"2372:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:10"},"nodeType":"YulFunctionCall","src":"2388:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:10"},"nodeType":"YulFunctionCall","src":"2368:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1945,"isOffset":false,"isSlot":false,"src":"2324:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"2380:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"2395:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"2359:5:10","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"2294:1:10","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"2337:1:10","valueSize":1},{"declaration":1937,"isOffset":false,"isSlot":false,"src":"2297:1:10","valueSize":1},{"declaration":1937,"isOffset":false,"isSlot":false,"src":"2340:1:10","valueSize":1}],"id":1950,"nodeType":"InlineAssembly","src":"2250:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1951,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2497:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1959,"nodeType":"IfStatement","src":"2493:368:10","trueBody":{"id":1958,"nodeType":"Block","src":"2509:352:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1954,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"2827:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1955,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"2835:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1943,"id":1957,"nodeType":"Return","src":"2820:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1961,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"2971:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1962,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"2985:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1960,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1966,"nodeType":"ExpressionStatement","src":"2963:53:10"},{"assignments":[1968],"declarations":[{"constant":false,"id":1968,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:10","nodeType":"VariableDeclaration","scope":2053,"src":"3272:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1967,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1969,"nodeType":"VariableDeclarationStatement","src":"3272:17:10"},{"AST":{"nodeType":"YulBlock","src":"3312:291:10","statements":[{"nodeType":"YulAssignment","src":"3381:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:10"},"nodeType":"YulFunctionCall","src":"3394:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:10"}]},{"nodeType":"YulAssignment","src":"3501:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:10"},"nodeType":"YulFunctionCall","src":"3521:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:10"},"nodeType":"YulFunctionCall","src":"3510:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:10"}]},{"nodeType":"YulAssignment","src":"3559:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:10"},"nodeType":"YulFunctionCall","src":"3568:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1939,"isOffset":false,"isSlot":false,"src":"3407:11:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"3535:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"3559:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"3572:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"3501:5:10","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"3514:5:10","valueSize":1},{"declaration":1968,"isOffset":false,"isSlot":false,"src":"3381:9:10","valueSize":1},{"declaration":1968,"isOffset":false,"isSlot":false,"src":"3524:9:10","valueSize":1},{"declaration":1968,"isOffset":false,"isSlot":false,"src":"3579:9:10","valueSize":1},{"declaration":1935,"isOffset":false,"isSlot":false,"src":"3401:1:10","valueSize":1},{"declaration":1937,"isOffset":false,"isSlot":false,"src":"3404:1:10","valueSize":1}],"id":1970,"nodeType":"InlineAssembly","src":"3303:300:10"},{"assignments":[1972],"declarations":[{"constant":false,"id":1972,"mutability":"mutable","name":"twos","nameLocation":"3918:4:10","nodeType":"VariableDeclaration","scope":2053,"src":"3910:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1971,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1980,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1973,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3925:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:10","subExpression":{"id":1974,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"3941:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1978,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:10"},{"AST":{"nodeType":"YulBlock","src":"3980:362:10","statements":[{"nodeType":"YulAssignment","src":"4045:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:10"},"nodeType":"YulFunctionCall","src":"4060:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:10"}]},{"nodeType":"YulAssignment","src":"4149:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:10"},"nodeType":"YulFunctionCall","src":"4158:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:10"}]},{"nodeType":"YulAssignment","src":"4289:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:10"},"nodeType":"YulFunctionCall","src":"4305:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:10"},"nodeType":"YulFunctionCall","src":"4301:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:10"},"nodeType":"YulFunctionCall","src":"4297:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4045:11:10","valueSize":1},{"declaration":1939,"isOffset":false,"isSlot":false,"src":"4064:11:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"4149:5:10","valueSize":1},{"declaration":1945,"isOffset":false,"isSlot":false,"src":"4162:5:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4077:4:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4169:4:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4289:4:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4312:4:10","valueSize":1},{"declaration":1972,"isOffset":false,"isSlot":false,"src":"4319:4:10","valueSize":1}],"id":1981,"nodeType":"InlineAssembly","src":"3971:371:10"},{"expression":{"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1982,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"4408:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1983,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"4417:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1984,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"4425:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1987,"nodeType":"ExpressionStatement","src":"4408:21:10"},{"assignments":[1989],"declarations":[{"constant":false,"id":1989,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:10","nodeType":"VariableDeclaration","scope":2053,"src":"4747:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1988,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1996,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1991,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"4770:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1993,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:10"},{"expression":{"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1997,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5003:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1999,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5018:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2000,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5032:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2004,"nodeType":"ExpressionStatement","src":"5003:36:10"},{"expression":{"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2005,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5072:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2007,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5087:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2008,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5101:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2012,"nodeType":"ExpressionStatement","src":"5072:36:10"},{"expression":{"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2013,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5142:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2015,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5157:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2016,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5171:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2020,"nodeType":"ExpressionStatement","src":"5142:36:10"},{"expression":{"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2021,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5212:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5227:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2024,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5241:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2028,"nodeType":"ExpressionStatement","src":"5212:36:10"},{"expression":{"id":2035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2029,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5282:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2031,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5297:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2032,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5311:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2036,"nodeType":"ExpressionStatement","src":"5282:36:10"},{"expression":{"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2037,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5353:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2039,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"5368:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2040,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5382:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2044,"nodeType":"ExpressionStatement","src":"5353:36:10"},{"expression":{"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2045,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"5823:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2046,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"5832:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2047,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"5840:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2050,"nodeType":"ExpressionStatement","src":"5823:24:10"},{"expression":{"id":2051,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"5868:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1943,"id":2052,"nodeType":"Return","src":"5861:13:10"}]}]},"documentation":{"id":1933,"nodeType":"StructuredDocumentation","src":"1368:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2055,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:10","nodeType":"FunctionDefinition","parameters":{"id":1940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1935,"mutability":"mutable","name":"x","nameLocation":"1702:1:10","nodeType":"VariableDeclaration","scope":2055,"src":"1694:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1937,"mutability":"mutable","name":"y","nameLocation":"1713:1:10","nodeType":"VariableDeclaration","scope":2055,"src":"1705:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1936,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1939,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:10","nodeType":"VariableDeclaration","scope":2055,"src":"1716:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:10"},"returnParameters":{"id":1943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1942,"mutability":"mutable","name":"result","nameLocation":"1768:6:10","nodeType":"VariableDeclaration","scope":2055,"src":"1760:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1941,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:10"},"scope":2707,"src":"1678:4213:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2098,"nodeType":"Block","src":"6133:189:10","statements":[{"assignments":[2071],"declarations":[{"constant":false,"id":2071,"mutability":"mutable","name":"result","nameLocation":"6151:6:10","nodeType":"VariableDeclaration","scope":2098,"src":"6143:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2070,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2077,"initialValue":{"arguments":[{"id":2073,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6167:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2074,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"6170:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2075,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"6173:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2072,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2055,2099],"referencedDeclaration":2055,"src":"6160:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2078,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2065,"src":"6199:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2079,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"6211:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2080,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"6211:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2083,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6233:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2084,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"6236:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2085,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"6239:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2082,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2095,"nodeType":"IfStatement","src":"6195:98:10","trueBody":{"id":2094,"nodeType":"Block","src":"6257:36:10","statements":[{"expression":{"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2090,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"6271:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2093,"nodeType":"ExpressionStatement","src":"6271:11:10"}]}},{"expression":{"id":2096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"6309:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2069,"id":2097,"nodeType":"Return","src":"6302:13:10"}]},"documentation":{"id":2056,"nodeType":"StructuredDocumentation","src":"5897:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2099,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:10","nodeType":"FunctionDefinition","parameters":{"id":2066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"x","nameLocation":"6047:1:10","nodeType":"VariableDeclaration","scope":2099,"src":"6039:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2060,"mutability":"mutable","name":"y","nameLocation":"6058:1:10","nodeType":"VariableDeclaration","scope":2099,"src":"6050:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2059,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2062,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:10","nodeType":"VariableDeclaration","scope":2099,"src":"6061:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:10","nodeType":"VariableDeclaration","scope":2099,"src":"6082:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2064,"nodeType":"UserDefinedTypeName","pathNode":{"id":2063,"name":"Rounding","nameLocations":["6082:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"6082:8:10"},"referencedDeclaration":1848,"src":"6082:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:10"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2099,"src":"6124:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2067,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:10"},"scope":2707,"src":"6023:299:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2210,"nodeType":"Block","src":"6598:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2107,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"6612:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2113,"nodeType":"IfStatement","src":"6608:45:10","trueBody":{"id":2112,"nodeType":"Block","src":"6620:33:10","statements":[{"expression":{"hexValue":"30","id":2110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2106,"id":2111,"nodeType":"Return","src":"6634:8:10"}]}},{"assignments":[2115],"declarations":[{"constant":false,"id":2115,"mutability":"mutable","name":"result","nameLocation":"7340:6:10","nodeType":"VariableDeclaration","scope":2210,"src":"7332:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2124,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2118,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7360:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2117,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2379,2415],"referencedDeclaration":2379,"src":"7355:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2122,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:10"},{"id":2209,"nodeType":"UncheckedBlock","src":"7769:408:10","statements":[{"expression":{"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2125,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7793:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2126,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7803:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7812:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2128,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7816:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2131,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2135,"nodeType":"ExpressionStatement","src":"7793:35:10"},{"expression":{"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2136,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7842:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2137,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7852:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2138,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7861:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7865:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2142,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2146,"nodeType":"ExpressionStatement","src":"7842:35:10"},{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2147,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7891:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2148,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7901:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7910:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7914:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2153,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"7891:35:10"},{"expression":{"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7940:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2159,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7950:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2160,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"7959:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2161,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7963:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2164,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2168,"nodeType":"ExpressionStatement","src":"7940:35:10"},{"expression":{"id":2178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2169,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7989:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2170,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"7999:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2171,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8008:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8012:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2175,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2179,"nodeType":"ExpressionStatement","src":"7989:35:10"},{"expression":{"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8038:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8048:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2182,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8057:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8061:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2186,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2190,"nodeType":"ExpressionStatement","src":"8038:35:10"},{"expression":{"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8087:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2192,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8097:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2193,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8106:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2194,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8110:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2201,"nodeType":"ExpressionStatement","src":"8087:35:10"},{"expression":{"arguments":[{"id":2203,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8147:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2204,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"8155:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2205,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"8159:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2202,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"8143:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2106,"id":2208,"nodeType":"Return","src":"8136:30:10"}]}]},"documentation":{"id":2100,"nodeType":"StructuredDocumentation","src":"6328:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2211,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:10","nodeType":"FunctionDefinition","parameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"mutability":"mutable","name":"a","nameLocation":"6563:1:10","nodeType":"VariableDeclaration","scope":2211,"src":"6555:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2101,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:10"},"returnParameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2211,"src":"6589:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:10"},"scope":2707,"src":"6541:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2246,"nodeType":"Block","src":"8359:161:10","statements":[{"id":2245,"nodeType":"UncheckedBlock","src":"8369:145:10","statements":[{"assignments":[2223],"declarations":[{"constant":false,"id":2223,"mutability":"mutable","name":"result","nameLocation":"8401:6:10","nodeType":"VariableDeclaration","scope":2245,"src":"8393:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2222,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2227,"initialValue":{"arguments":[{"id":2225,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"8415:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2224,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2211,2247],"referencedDeclaration":2211,"src":"8410:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2228,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8438:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2217,"src":"8448:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2230,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"8460:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"8460:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2233,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8475:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2234,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"8484:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2236,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"8493:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:10","trueExpression":{"hexValue":"31","id":2239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2242,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2221,"id":2244,"nodeType":"Return","src":"8431:72:10"}]}]},"documentation":{"id":2212,"nodeType":"StructuredDocumentation","src":"8189:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2247,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:10","nodeType":"FunctionDefinition","parameters":{"id":2218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2214,"mutability":"mutable","name":"a","nameLocation":"8305:1:10","nodeType":"VariableDeclaration","scope":2247,"src":"8297:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2213,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2217,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:10","nodeType":"VariableDeclaration","scope":2247,"src":"8308:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2216,"nodeType":"UserDefinedTypeName","pathNode":{"id":2215,"name":"Rounding","nameLocations":["8308:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"8308:8:10"},"referencedDeclaration":1848,"src":"8308:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:10"},"returnParameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2247,"src":"8350:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2219,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:10"},"scope":2707,"src":"8283:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2378,"nodeType":"Block","src":"8705:922:10","statements":[{"assignments":[2256],"declarations":[{"constant":false,"id":2256,"mutability":"mutable","name":"result","nameLocation":"8723:6:10","nodeType":"VariableDeclaration","scope":2378,"src":"8715:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2255,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2258,"initialValue":{"hexValue":"30","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:10"},{"id":2375,"nodeType":"UncheckedBlock","src":"8743:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8771:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2273,"nodeType":"IfStatement","src":"8767:99:10","trueBody":{"id":2272,"nodeType":"Block","src":"8789:77:10","statements":[{"expression":{"id":2266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2264,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8807:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2267,"nodeType":"ExpressionStatement","src":"8807:13:10"},{"expression":{"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"8838:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2271,"nodeType":"ExpressionStatement","src":"8838:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8883:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2288,"nodeType":"IfStatement","src":"8879:96:10","trueBody":{"id":2287,"nodeType":"Block","src":"8900:75:10","statements":[{"expression":{"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8918:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2282,"nodeType":"ExpressionStatement","src":"8918:12:10"},{"expression":{"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2283,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"8948:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2286,"nodeType":"ExpressionStatement","src":"8948:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2289,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"8992:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2303,"nodeType":"IfStatement","src":"8988:96:10","trueBody":{"id":2302,"nodeType":"Block","src":"9009:75:10","statements":[{"expression":{"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2294,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9027:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2297,"nodeType":"ExpressionStatement","src":"9027:12:10"},{"expression":{"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2298,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9057:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2301,"nodeType":"ExpressionStatement","src":"9057:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2304,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9101:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2318,"nodeType":"IfStatement","src":"9097:96:10","trueBody":{"id":2317,"nodeType":"Block","src":"9118:75:10","statements":[{"expression":{"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9136:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2312,"nodeType":"ExpressionStatement","src":"9136:12:10"},{"expression":{"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9166:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2316,"nodeType":"ExpressionStatement","src":"9166:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9210:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2333,"nodeType":"IfStatement","src":"9206:93:10","trueBody":{"id":2332,"nodeType":"Block","src":"9226:73:10","statements":[{"expression":{"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2324,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9244:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2327,"nodeType":"ExpressionStatement","src":"9244:11:10"},{"expression":{"id":2330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2328,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9273:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2331,"nodeType":"ExpressionStatement","src":"9273:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9316:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2348,"nodeType":"IfStatement","src":"9312:93:10","trueBody":{"id":2347,"nodeType":"Block","src":"9332:73:10","statements":[{"expression":{"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2339,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9350:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2342,"nodeType":"ExpressionStatement","src":"9350:11:10"},{"expression":{"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9379:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2346,"nodeType":"ExpressionStatement","src":"9379:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9422:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2363,"nodeType":"IfStatement","src":"9418:93:10","trueBody":{"id":2362,"nodeType":"Block","src":"9438:73:10","statements":[{"expression":{"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2354,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9456:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2357,"nodeType":"ExpressionStatement","src":"9456:11:10"},{"expression":{"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2358,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9485:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2361,"nodeType":"ExpressionStatement","src":"9485:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"9528:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2374,"nodeType":"IfStatement","src":"9524:64:10","trueBody":{"id":2373,"nodeType":"Block","src":"9544:44:10","statements":[{"expression":{"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2369,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9562:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2372,"nodeType":"ExpressionStatement","src":"9562:11:10"}]}}]},{"expression":{"id":2376,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2256,"src":"9614:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2254,"id":2377,"nodeType":"Return","src":"9607:13:10"}]},"documentation":{"id":2248,"nodeType":"StructuredDocumentation","src":"8526:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2379,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:10","nodeType":"FunctionDefinition","parameters":{"id":2251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2250,"mutability":"mutable","name":"value","nameLocation":"8666:5:10","nodeType":"VariableDeclaration","scope":2379,"src":"8658:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2249,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:10"},"returnParameters":{"id":2254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2253,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2379,"src":"8696:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:10"},"scope":2707,"src":"8644:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2414,"nodeType":"Block","src":"9860:165:10","statements":[{"id":2413,"nodeType":"UncheckedBlock","src":"9870:149:10","statements":[{"assignments":[2391],"declarations":[{"constant":false,"id":2391,"mutability":"mutable","name":"result","nameLocation":"9902:6:10","nodeType":"VariableDeclaration","scope":2413,"src":"9894:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2390,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2395,"initialValue":{"arguments":[{"id":2393,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"9916:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2392,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2379,2415],"referencedDeclaration":2379,"src":"9911:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2396,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"9943:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2397,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"9953:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2398,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"9965:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"9965:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2402,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"9985:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"9994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:10","trueExpression":{"hexValue":"31","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2410,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2389,"id":2412,"nodeType":"Return","src":"9936:72:10"}]}]},"documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"9633:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2415,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:10","nodeType":"FunctionDefinition","parameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"value","nameLocation":"9802:5:10","nodeType":"VariableDeclaration","scope":2415,"src":"9794:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2381,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2385,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:10","nodeType":"VariableDeclaration","scope":2415,"src":"9809:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2384,"nodeType":"UserDefinedTypeName","pathNode":{"id":2383,"name":"Rounding","nameLocations":["9809:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"9809:8:10"},"referencedDeclaration":1848,"src":"9809:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:10"},"returnParameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2415,"src":"9851:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:10"},"scope":2707,"src":"9780:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2543,"nodeType":"Block","src":"10212:854:10","statements":[{"assignments":[2424],"declarations":[{"constant":false,"id":2424,"mutability":"mutable","name":"result","nameLocation":"10230:6:10","nodeType":"VariableDeclaration","scope":2543,"src":"10222:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2423,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2426,"initialValue":{"hexValue":"30","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:10"},{"id":2540,"nodeType":"UncheckedBlock","src":"10250:787:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2427,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10278:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2443,"nodeType":"IfStatement","src":"10274:103:10","trueBody":{"id":2442,"nodeType":"Block","src":"10297:80:10","statements":[{"expression":{"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2432,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10315:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2435,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2437,"nodeType":"ExpressionStatement","src":"10315:17:10"},{"expression":{"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2438,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10350:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2441,"nodeType":"ExpressionStatement","src":"10350:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10394:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2460,"nodeType":"IfStatement","src":"10390:103:10","trueBody":{"id":2459,"nodeType":"Block","src":"10413:80:10","statements":[{"expression":{"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10431:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2454,"nodeType":"ExpressionStatement","src":"10431:17:10"},{"expression":{"id":2457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2455,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10466:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2458,"nodeType":"ExpressionStatement","src":"10466:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2461,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10510:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2477,"nodeType":"IfStatement","src":"10506:103:10","trueBody":{"id":2476,"nodeType":"Block","src":"10529:80:10","statements":[{"expression":{"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10547:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2471,"nodeType":"ExpressionStatement","src":"10547:17:10"},{"expression":{"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2472,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10582:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2475,"nodeType":"ExpressionStatement","src":"10582:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10626:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2494,"nodeType":"IfStatement","src":"10622:100:10","trueBody":{"id":2493,"nodeType":"Block","src":"10644:78:10","statements":[{"expression":{"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2483,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10662:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2486,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2488,"nodeType":"ExpressionStatement","src":"10662:16:10"},{"expression":{"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2489,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10696:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2492,"nodeType":"ExpressionStatement","src":"10696:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2495,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10739:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2498,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2511,"nodeType":"IfStatement","src":"10735:100:10","trueBody":{"id":2510,"nodeType":"Block","src":"10757:78:10","statements":[{"expression":{"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10775:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2505,"nodeType":"ExpressionStatement","src":"10775:16:10"},{"expression":{"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2506,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10809:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2509,"nodeType":"ExpressionStatement","src":"10809:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2512,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10852:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2528,"nodeType":"IfStatement","src":"10848:100:10","trueBody":{"id":2527,"nodeType":"Block","src":"10870:78:10","statements":[{"expression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2517,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10888:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2522,"nodeType":"ExpressionStatement","src":"10888:16:10"},{"expression":{"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2523,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"10922:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2526,"nodeType":"ExpressionStatement","src":"10922:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2529,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2418,"src":"10965:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2539,"nodeType":"IfStatement","src":"10961:66:10","trueBody":{"id":2538,"nodeType":"Block","src":"10983:44:10","statements":[{"expression":{"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"11001:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2537,"nodeType":"ExpressionStatement","src":"11001:11:10"}]}}]},{"expression":{"id":2541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"11053:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2422,"id":2542,"nodeType":"Return","src":"11046:13:10"}]},"documentation":{"id":2416,"nodeType":"StructuredDocumentation","src":"10031:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2544,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:10","nodeType":"FunctionDefinition","parameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"value","nameLocation":"10173:5:10","nodeType":"VariableDeclaration","scope":2544,"src":"10165:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2417,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:10"},"returnParameters":{"id":2422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2544,"src":"10203:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2420,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:10"},"scope":2707,"src":"10150:916:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2579,"nodeType":"Block","src":"11301:167:10","statements":[{"id":2578,"nodeType":"UncheckedBlock","src":"11311:151:10","statements":[{"assignments":[2556],"declarations":[{"constant":false,"id":2556,"mutability":"mutable","name":"result","nameLocation":"11343:6:10","nodeType":"VariableDeclaration","scope":2578,"src":"11335:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2555,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2560,"initialValue":{"arguments":[{"id":2558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"11358:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2557,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2544,2580],"referencedDeclaration":2544,"src":"11352:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"11385:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2562,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"11395:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2563,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"11407:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"11407:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"11428:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"11437:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:10","trueExpression":{"hexValue":"31","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2575,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2554,"id":2577,"nodeType":"Return","src":"11378:73:10"}]}]},"documentation":{"id":2545,"nodeType":"StructuredDocumentation","src":"11072:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2580,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:10","nodeType":"FunctionDefinition","parameters":{"id":2551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"value","nameLocation":"11243:5:10","nodeType":"VariableDeclaration","scope":2580,"src":"11235:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2546,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2550,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:10","nodeType":"VariableDeclaration","scope":2580,"src":"11250:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2549,"nodeType":"UserDefinedTypeName","pathNode":{"id":2548,"name":"Rounding","nameLocations":["11250:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"11250:8:10"},"referencedDeclaration":1848,"src":"11250:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:10"},"returnParameters":{"id":2554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2580,"src":"11292:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2552,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:10"},"scope":2707,"src":"11220:248:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2666,"nodeType":"Block","src":"11782:600:10","statements":[{"assignments":[2589],"declarations":[{"constant":false,"id":2589,"mutability":"mutable","name":"result","nameLocation":"11800:6:10","nodeType":"VariableDeclaration","scope":2666,"src":"11792:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2588,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2591,"initialValue":{"hexValue":"30","id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:10"},{"id":2663,"nodeType":"UncheckedBlock","src":"11820:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"11848:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2606,"nodeType":"IfStatement","src":"11844:98:10","trueBody":{"id":2605,"nodeType":"Block","src":"11866:76:10","statements":[{"expression":{"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"11884:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2600,"nodeType":"ExpressionStatement","src":"11884:13:10"},{"expression":{"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"11915:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2604,"nodeType":"ExpressionStatement","src":"11915:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"11959:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2621,"nodeType":"IfStatement","src":"11955:95:10","trueBody":{"id":2620,"nodeType":"Block","src":"11976:74:10","statements":[{"expression":{"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2612,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"11994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2615,"nodeType":"ExpressionStatement","src":"11994:12:10"},{"expression":{"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2616,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12024:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2619,"nodeType":"ExpressionStatement","src":"12024:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12067:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2636,"nodeType":"IfStatement","src":"12063:95:10","trueBody":{"id":2635,"nodeType":"Block","src":"12084:74:10","statements":[{"expression":{"id":2629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12102:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2630,"nodeType":"ExpressionStatement","src":"12102:12:10"},{"expression":{"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2631,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12132:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2634,"nodeType":"ExpressionStatement","src":"12132:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2637,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12175:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2651,"nodeType":"IfStatement","src":"12171:95:10","trueBody":{"id":2650,"nodeType":"Block","src":"12192:74:10","statements":[{"expression":{"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2642,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12210:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2645,"nodeType":"ExpressionStatement","src":"12210:12:10"},{"expression":{"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12240:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2649,"nodeType":"ExpressionStatement","src":"12240:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2652,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"12283:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2662,"nodeType":"IfStatement","src":"12279:64:10","trueBody":{"id":2661,"nodeType":"Block","src":"12299:44:10","statements":[{"expression":{"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12317:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2660,"nodeType":"ExpressionStatement","src":"12317:11:10"}]}}]},{"expression":{"id":2664,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"12369:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2587,"id":2665,"nodeType":"Return","src":"12362:13:10"}]},"documentation":{"id":2581,"nodeType":"StructuredDocumentation","src":"11474:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2667,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:10","nodeType":"FunctionDefinition","parameters":{"id":2584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2583,"mutability":"mutable","name":"value","nameLocation":"11743:5:10","nodeType":"VariableDeclaration","scope":2667,"src":"11735:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2582,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:10"},"returnParameters":{"id":2587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2667,"src":"11773:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:10"},"scope":2707,"src":"11719:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2705,"nodeType":"Block","src":"12619:174:10","statements":[{"id":2704,"nodeType":"UncheckedBlock","src":"12629:158:10","statements":[{"assignments":[2679],"declarations":[{"constant":false,"id":2679,"mutability":"mutable","name":"result","nameLocation":"12661:6:10","nodeType":"VariableDeclaration","scope":2704,"src":"12653:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2678,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2683,"initialValue":{"arguments":[{"id":2681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"12677:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2680,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2667,2706],"referencedDeclaration":2667,"src":"12670:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2684,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"12704:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2685,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"12714:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2686,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"12726:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1848_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":2687,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1846,"src":"12726:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2690,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2679,"src":"12747:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2693,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2695,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"12762:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:10","trueExpression":{"hexValue":"31","id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2701,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2677,"id":2703,"nodeType":"Return","src":"12697:79:10"}]}]},"documentation":{"id":2668,"nodeType":"StructuredDocumentation","src":"12388:144:10","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2706,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:10","nodeType":"FunctionDefinition","parameters":{"id":2674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2670,"mutability":"mutable","name":"value","nameLocation":"12561:5:10","nodeType":"VariableDeclaration","scope":2706,"src":"12553:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2669,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2673,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:10","nodeType":"VariableDeclaration","scope":2706,"src":"12568:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":2672,"nodeType":"UserDefinedTypeName","pathNode":{"id":2671,"name":"Rounding","nameLocations":["12568:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":1848,"src":"12568:8:10"},"referencedDeclaration":1848,"src":"12568:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1848","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:10"},"returnParameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2706,"src":"12610:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2675,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:10"},"scope":2707,"src":"12537:256:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2708,"src":"202:12593:10","usedErrors":[]}],"src":"103:12693:10"},"id":10},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[2812]},"id":2813,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2709,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":2710,"nodeType":"StructuredDocumentation","src":"134:80:11","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2812,"linearizedBaseContracts":[2812],"name":"SignedMathUpgradeable","nameLocation":"223:21:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":2727,"nodeType":"Block","src":"386:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2720,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"403:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2721,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"407:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2724,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"415:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:11","trueExpression":{"id":2723,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2713,"src":"411:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2719,"id":2726,"nodeType":"Return","src":"396:20:11"}]},"documentation":{"id":2711,"nodeType":"StructuredDocumentation","src":"251:66:11","text":" @dev Returns the largest of two signed numbers."},"id":2728,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:11","nodeType":"FunctionDefinition","parameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2713,"mutability":"mutable","name":"a","nameLocation":"342:1:11","nodeType":"VariableDeclaration","scope":2728,"src":"335:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2712,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"b","nameLocation":"352:1:11","nodeType":"VariableDeclaration","scope":2728,"src":"345:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2714,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:11"},"returnParameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2728,"src":"378:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2717,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:11"},"scope":2812,"src":"322:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2745,"nodeType":"Block","src":"565:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"582:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2739,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"586:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2742,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"594:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:11","trueExpression":{"id":2741,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2731,"src":"590:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2737,"id":2744,"nodeType":"Return","src":"575:20:11"}]},"documentation":{"id":2729,"nodeType":"StructuredDocumentation","src":"429:67:11","text":" @dev Returns the smallest of two signed numbers."},"id":2746,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:11","nodeType":"FunctionDefinition","parameters":{"id":2734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2731,"mutability":"mutable","name":"a","nameLocation":"521:1:11","nodeType":"VariableDeclaration","scope":2746,"src":"514:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2730,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2733,"mutability":"mutable","name":"b","nameLocation":"531:1:11","nodeType":"VariableDeclaration","scope":2746,"src":"524:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2732,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:11"},"returnParameters":{"id":2737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2736,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2746,"src":"557:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2735,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:11"},"scope":2812,"src":"501:101:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2789,"nodeType":"Block","src":"807:162:11","statements":[{"assignments":[2757],"declarations":[{"constant":false,"id":2757,"mutability":"mutable","name":"x","nameLocation":"876:1:11","nodeType":"VariableDeclaration","scope":2789,"src":"869:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2756,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2770,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2758,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"881:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2759,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"885:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2761,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2762,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"892:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2763,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"896:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2765,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2768,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:11"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2771,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"921:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2776,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2757,"src":"941:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2774,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:11","typeDescriptions":{}}},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:11","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2773,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2772,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:11","typeDescriptions":{}}},"id":2780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2781,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"955:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2782,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"959:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2784,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2786,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2755,"id":2788,"nodeType":"Return","src":"914:48:11"}]},"documentation":{"id":2747,"nodeType":"StructuredDocumentation","src":"608:126:11","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2790,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:11","nodeType":"FunctionDefinition","parameters":{"id":2752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2749,"mutability":"mutable","name":"a","nameLocation":"763:1:11","nodeType":"VariableDeclaration","scope":2790,"src":"756:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2748,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2751,"mutability":"mutable","name":"b","nameLocation":"773:1:11","nodeType":"VariableDeclaration","scope":2790,"src":"766:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2750,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:11"},"returnParameters":{"id":2755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2790,"src":"799:6:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2753,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:11"},"scope":2812,"src":"739:230:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2810,"nodeType":"Block","src":"1113:158:11","statements":[{"id":2809,"nodeType":"UncheckedBlock","src":"1123:142:11","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2800,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"1238:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:11","subExpression":{"id":2804,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"1252:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:11","trueExpression":{"id":2803,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2793,"src":"1247:1:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2799,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2798,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:11","typeDescriptions":{}}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2797,"id":2808,"nodeType":"Return","src":"1223:31:11"}]}]},"documentation":{"id":2791,"nodeType":"StructuredDocumentation","src":"975:78:11","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2811,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:11","nodeType":"FunctionDefinition","parameters":{"id":2794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2793,"mutability":"mutable","name":"n","nameLocation":"1078:1:11","nodeType":"VariableDeclaration","scope":2811,"src":"1071:8:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2792,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:11"},"returnParameters":{"id":2797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2811,"src":"1104:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:11"},"scope":2812,"src":"1058:213:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2813,"src":"215:1058:11","usedErrors":[]}],"src":"109:1165:11"},"id":11},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2890]},"id":2891,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2814,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2815,"nodeType":"StructuredDocumentation","src":"131:70:12","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":2890,"linearizedBaseContracts":[2890],"name":"IERC20","nameLocation":"212:6:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2816,"nodeType":"StructuredDocumentation","src":"225:158:12","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2824,"name":"Transfer","nameLocation":"394:8:12","nodeType":"EventDefinition","parameters":{"id":2823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2818,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:12","nodeType":"VariableDeclaration","scope":2824,"src":"403:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2817,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2820,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:12","nodeType":"VariableDeclaration","scope":2824,"src":"425:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2819,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2822,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:12","nodeType":"VariableDeclaration","scope":2824,"src":"445:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2821,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:12"},"src":"388:72:12"},{"anonymous":false,"documentation":{"id":2825,"nodeType":"StructuredDocumentation","src":"466:148:12","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2833,"name":"Approval","nameLocation":"625:8:12","nodeType":"EventDefinition","parameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:12","nodeType":"VariableDeclaration","scope":2833,"src":"634:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2826,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2829,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:12","nodeType":"VariableDeclaration","scope":2833,"src":"657:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2828,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2831,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:12","nodeType":"VariableDeclaration","scope":2833,"src":"682:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2830,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:12"},"src":"619:78:12"},{"documentation":{"id":2834,"nodeType":"StructuredDocumentation","src":"703:66:12","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":2839,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:12","nodeType":"FunctionDefinition","parameters":{"id":2835,"nodeType":"ParameterList","parameters":[],"src":"794:2:12"},"returnParameters":{"id":2838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2839,"src":"820:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2836,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:12"},"scope":2890,"src":"774:55:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2840,"nodeType":"StructuredDocumentation","src":"835:72:12","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":2847,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:12","nodeType":"FunctionDefinition","parameters":{"id":2843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2842,"mutability":"mutable","name":"account","nameLocation":"939:7:12","nodeType":"VariableDeclaration","scope":2847,"src":"931:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2841,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:12"},"returnParameters":{"id":2846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2847,"src":"971:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2844,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:12"},"scope":2890,"src":"912:68:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2848,"nodeType":"StructuredDocumentation","src":"986:202:12","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2857,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:12","nodeType":"FunctionDefinition","parameters":{"id":2853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2850,"mutability":"mutable","name":"to","nameLocation":"1219:2:12","nodeType":"VariableDeclaration","scope":2857,"src":"1211:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2849,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2852,"mutability":"mutable","name":"amount","nameLocation":"1231:6:12","nodeType":"VariableDeclaration","scope":2857,"src":"1223:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2851,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:12"},"returnParameters":{"id":2856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2857,"src":"1257:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2854,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:12"},"scope":2890,"src":"1193:70:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2858,"nodeType":"StructuredDocumentation","src":"1269:264:12","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2867,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:12","nodeType":"FunctionDefinition","parameters":{"id":2863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2860,"mutability":"mutable","name":"owner","nameLocation":"1565:5:12","nodeType":"VariableDeclaration","scope":2867,"src":"1557:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2859,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2862,"mutability":"mutable","name":"spender","nameLocation":"1580:7:12","nodeType":"VariableDeclaration","scope":2867,"src":"1572:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2861,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:12"},"returnParameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2867,"src":"1612:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2864,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:12"},"scope":2890,"src":"1538:83:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2868,"nodeType":"StructuredDocumentation","src":"1627:642:12","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2877,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:12","nodeType":"FunctionDefinition","parameters":{"id":2873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2870,"mutability":"mutable","name":"spender","nameLocation":"2299:7:12","nodeType":"VariableDeclaration","scope":2877,"src":"2291:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2869,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2872,"mutability":"mutable","name":"amount","nameLocation":"2316:6:12","nodeType":"VariableDeclaration","scope":2877,"src":"2308:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2871,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:12"},"returnParameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2875,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2877,"src":"2342:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2874,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:12"},"scope":2890,"src":"2274:74:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2878,"nodeType":"StructuredDocumentation","src":"2354:287:12","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2889,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:12","nodeType":"FunctionDefinition","parameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2880,"mutability":"mutable","name":"from","nameLocation":"2685:4:12","nodeType":"VariableDeclaration","scope":2889,"src":"2677:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2879,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2882,"mutability":"mutable","name":"to","nameLocation":"2707:2:12","nodeType":"VariableDeclaration","scope":2889,"src":"2699:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2881,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2884,"mutability":"mutable","name":"amount","nameLocation":"2727:6:12","nodeType":"VariableDeclaration","scope":2889,"src":"2719:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:12"},"returnParameters":{"id":2888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2889,"src":"2758:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2886,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:12"},"scope":2890,"src":"2646:118:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2891,"src":"202:2564:12","usedErrors":[]}],"src":"106:2661:12"},"id":12},"contracts/Paycrest.sol":{"ast":{"absolutePath":"contracts/Paycrest.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ECDSAUpgradeable":[1841],"IERC20":[2890],"IERC20PermitUpgradeable":[498],"IERC20Upgradeable":[462],"IPaycrest":[4385],"MathUpgradeable":[2707],"Paycrest":[3623],"PaycrestSettingManager":[3872],"SafeERC20Upgradeable":[874],"SignedMathUpgradeable":[2812],"StringsUpgradeable":[1475]},"id":3624,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":2892,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:13"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol","id":2893,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3624,"sourceUnit":1842,"src":"62:85:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":2894,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3624,"sourceUnit":875,"src":"148:88:13","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/PaycrestSettingManager.sol","file":"./PaycrestSettingManager.sol","id":2896,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3624,"sourceUnit":3873,"src":"237:68:13","symbolAliases":[{"foreign":{"id":2895,"name":"PaycrestSettingManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3872,"src":"245:22:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/interface/IPaycrest.sol","file":"./interface/IPaycrest.sol","id":2899,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3624,"sourceUnit":4386,"src":"306:60:13","symbolAliases":[{"foreign":{"id":2897,"name":"IPaycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4385,"src":"314:9:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2898,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"325:6:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2900,"name":"IPaycrest","nameLocations":["388:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":4385,"src":"388:9:13"},"id":2901,"nodeType":"InheritanceSpecifier","src":"388:9:13"},{"baseName":{"id":2902,"name":"PaycrestSettingManager","nameLocations":["399:22:13"],"nodeType":"IdentifierPath","referencedDeclaration":3872,"src":"399:22:13"},"id":2903,"nodeType":"InheritanceSpecifier","src":"399:22:13"}],"canonicalName":"Paycrest","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3623,"linearizedBaseContracts":[3623,3872,131,1246,300,4385],"name":"Paycrest","nameLocation":"376:8:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2907,"libraryName":{"id":2904,"name":"SafeERC20Upgradeable","nameLocations":["435:20:13"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"435:20:13"},"nodeType":"UsingForDirective","src":"429:38:13","typeName":{"id":2906,"nodeType":"UserDefinedTypeName","pathNode":{"id":2905,"name":"IERC20","nameLocations":["460:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":2890,"src":"460:6:13"},"referencedDeclaration":2890,"src":"460:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2890","typeString":"contract IERC20"}}},{"global":false,"id":2910,"libraryName":{"id":2908,"name":"ECDSAUpgradeable","nameLocations":["478:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"478:16:13"},"nodeType":"UsingForDirective","src":"472:35:13","typeName":{"id":2909,"name":"bytes32","nodeType":"ElementaryTypeName","src":"499:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"Paycrest.fee","id":2917,"members":[{"constant":false,"id":2912,"mutability":"mutable","name":"protocolFee","nameLocation":"541:11:13","nodeType":"VariableDeclaration","scope":2917,"src":"533:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2911,"name":"uint256","nodeType":"ElementaryTypeName","src":"533:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2914,"mutability":"mutable","name":"liquidityProviderAmount","nameLocation":"570:23:13","nodeType":"VariableDeclaration","scope":2917,"src":"562:31:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2913,"name":"uint256","nodeType":"ElementaryTypeName","src":"562:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"validatorsReward","nameLocation":"611:16:13","nodeType":"VariableDeclaration","scope":2917,"src":"603:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2915,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"fee","nameLocation":"519:3:13","nodeType":"StructDefinition","scope":3623,"src":"512:122:13","visibility":"public"},{"constant":false,"id":2922,"mutability":"mutable","name":"order","nameLocation":"673:5:13","nodeType":"VariableDeclaration","scope":3623,"src":"639:39:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"typeName":{"id":2921,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2918,"name":"bytes32","nodeType":"ElementaryTypeName","src":"647:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"639:25:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2920,"nodeType":"UserDefinedTypeName","pathNode":{"id":2919,"name":"Order","nameLocations":["658:5:13"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"658:5:13"},"referencedDeclaration":4294,"src":"658:5:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage_ptr","typeString":"struct IPaycrest.Order"}}},"visibility":"private"},{"constant":false,"id":2926,"mutability":"mutable","name":"_nonce","nameLocation":"720:6:13","nodeType":"VariableDeclaration","scope":3623,"src":"684:42:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2925,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2923,"name":"address","nodeType":"ElementaryTypeName","src":"692:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"684:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2924,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2930,"mutability":"mutable","name":"__gap","nameLocation":"752:5:13","nodeType":"VariableDeclaration","scope":3623,"src":"732:25:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":2927,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2929,"length":{"hexValue":"3530","id":2928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"740:2:13","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"732:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"body":{"id":2937,"nodeType":"Block","src":"830:39:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2934,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"840:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"840:22:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2936,"nodeType":"ExpressionStatement","src":"840:22:13"}]},"documentation":{"id":2931,"nodeType":"StructuredDocumentation","src":"763:48:13","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":2938,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2932,"nodeType":"ParameterList","parameters":[],"src":"827:2:13"},"returnParameters":{"id":2933,"nodeType":"ParameterList","parameters":[],"src":"830:0:13"},"scope":3623,"src":"816:53:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2966,"nodeType":"Block","src":"931:193:13","statements":[{"expression":{"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2945,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"945:17:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2947,"indexExpression":{"id":2946,"name":"_usdc","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"963:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"945:24:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"972:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"945:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2950,"nodeType":"ExpressionStatement","src":"945:31:13"},{"expression":{"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2951,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"989:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3130305f303030","id":2952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"999:7:13","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100_000"},"src":"989:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2954,"nodeType":"ExpressionStatement","src":"989:17:13"},{"expression":{"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2955,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"1017:18:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"35303030","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1038:4:13","typeDescriptions":{"typeIdentifier":"t_rational_5000_by_1","typeString":"int_const 5000"},"value":"5000"},"src":"1017:25:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2958,"nodeType":"ExpressionStatement","src":"1017:25:13"},{"expression":{"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2959,"name":"validatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"1058:19:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"353030","id":2960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1080:3:13","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"src":"1058:25:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":2962,"nodeType":"ExpressionStatement","src":"1058:25:13"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2963,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1101:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1101:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2965,"nodeType":"ExpressionStatement","src":"1101:16:13"}]},"functionSelector":"c4d66de8","id":2967,"implemented":true,"kind":"function","modifiers":[{"id":2943,"kind":"modifierInvocation","modifierName":{"id":2942,"name":"initializer","nameLocations":["919:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":202,"src":"919:11:13"},"nodeType":"ModifierInvocation","src":"919:11:13"}],"name":"initialize","nameLocation":"884:10:13","nodeType":"FunctionDefinition","parameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2940,"mutability":"mutable","name":"_usdc","nameLocation":"903:5:13","nodeType":"VariableDeclaration","scope":2967,"src":"895:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2939,"name":"address","nodeType":"ElementaryTypeName","src":"895:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"894:15:13"},"returnParameters":{"id":2944,"nodeType":"ParameterList","parameters":[],"src":"931:0:13"},"scope":3623,"src":"875:249:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2978,"nodeType":"Block","src":"1154:90:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2969,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1167:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1171:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1167:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2971,"name":"_liquidityAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"1181:20:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1167:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2976,"nodeType":"IfStatement","src":"1164:62:13","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2973,"name":"OnlyAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"1210:14:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1210:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2975,"nodeType":"RevertStatement","src":"1203:23:13"}},{"id":2977,"nodeType":"PlaceholderStatement","src":"1236:1:13"}]},"id":2979,"name":"onlyAggregator","nameLocation":"1139:14:13","nodeType":"ModifierDefinition","parameters":{"id":2968,"nodeType":"ParameterList","parameters":[],"src":"1154:0:13"},"src":"1130:114:13","virtual":false,"visibility":"internal"},{"baseFunctions":[4316],"body":{"id":3071,"nodeType":"Block","src":"1795:976:13","statements":[{"expression":{"arguments":[{"id":3002,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"1850:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3003,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"1858:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3004,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"1867:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3005,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"1883:19:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3006,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"1904:16:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3001,"name":"_handler","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"1841:8:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$_t_address_$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,address,address,bytes32) view"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1841:80:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3008,"nodeType":"ExpressionStatement","src":"1841:80:13"},{"expression":{"arguments":[{"expression":{"id":3013,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2007:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2011:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2007:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3017,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2027:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_Paycrest_$3623","typeString":"contract Paycrest"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Paycrest_$3623","typeString":"contract Paycrest"}],"id":3016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2019:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3015,"name":"address","nodeType":"ElementaryTypeName","src":"2019:7:13","typeDescriptions":{}}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2019:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3019,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2034:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3010,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"1986:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3009,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"1979:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2890_$","typeString":"type(contract IERC20)"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1979:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2890","typeString":"contract IERC20"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1994:12:13","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2889,"src":"1979:27:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1979:63:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3021,"nodeType":"ExpressionStatement","src":"1979:63:13"},{"expression":{"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2108:21:13","subExpression":{"baseExpression":{"id":3022,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"2108:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3025,"indexExpression":{"expression":{"id":3023,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2115:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2119:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2115:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2108:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3027,"nodeType":"ExpressionStatement","src":"2108:21:13"},{"expression":{"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3028,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"2194:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":3032,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2225:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2229:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2225:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3034,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"2237:6:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3037,"indexExpression":{"expression":{"id":3035,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2244:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2248:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2244:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2237:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3030,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2214:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2218:6:13","memberName":"encode","nodeType":"MemberAccess","src":"2214:10:13","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2214:42:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3029,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2204:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2194:63:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3041,"nodeType":"ExpressionStatement","src":"2194:63:13"},{"expression":{"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3042,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"2297:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3044,"indexExpression":{"id":3043,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"2303:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2297:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":3046,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2342:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2346:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2342:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3048,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"2373:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3049,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"2413:19:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3050,"name":"_senderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"2457:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3051,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"2487:5:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"66616c7365","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2519:5:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":3053,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2994,"src":"2553:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3056,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"2600:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2593:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":3054,"name":"uint96","nodeType":"ElementaryTypeName","src":"2593:6:13","typeDescriptions":{}}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2593:15:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3058,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2630:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3045,"name":"Order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294,"src":"2314:5:13","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Order_$4294_storage_ptr_$","typeString":"type(struct IPaycrest.Order storage pointer)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2334:6:13","2366:5:13","2393:18:13","2446:9:13","2481:4:13","2506:11:13","2538:13:13","2581:10:13","2622:6:13"],"names":["seller","token","senderFeeRecipient","senderFee","rate","isFulfilled","refundAddress","currentBPS","amount"],"nodeType":"FunctionCall","src":"2314:334:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_memory_ptr","typeString":"struct IPaycrest.Order memory"}},"src":"2297:351:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3061,"nodeType":"ExpressionStatement","src":"2297:351:13"},{"eventCall":{"arguments":[{"id":3063,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"2701:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3064,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"2709:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3065,"name":"orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"2718:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3066,"name":"_rate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"2727:5:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":3067,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2986,"src":"2734:16:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3068,"name":"messageHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2996,"src":"2752:11:13","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":3062,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"2693:7:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$_t_uint256_$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes32,uint256,bytes32,string memory)"}},"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2693:71:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3070,"nodeType":"EmitStatement","src":"2688:76:13"}]},"documentation":{"id":2980,"nodeType":"StructuredDocumentation","src":"1445:40:13","text":"@dev See {createOrder-IPaycrest}. "},"functionSelector":"d12ff20a","id":3072,"implemented":true,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"1499:11:13","nodeType":"FunctionDefinition","parameters":{"id":2997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2982,"mutability":"mutable","name":"_token","nameLocation":"1528:6:13","nodeType":"VariableDeclaration","scope":3072,"src":"1520:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2981,"name":"address","nodeType":"ElementaryTypeName","src":"1520:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2984,"mutability":"mutable","name":"_amount","nameLocation":"1553:7:13","nodeType":"VariableDeclaration","scope":3072,"src":"1545:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2986,"mutability":"mutable","name":"_institutionCode","nameLocation":"1579:16:13","nodeType":"VariableDeclaration","scope":3072,"src":"1571:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1571:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2988,"mutability":"mutable","name":"_rate","nameLocation":"1612:5:13","nodeType":"VariableDeclaration","scope":3072,"src":"1605:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2987,"name":"uint96","nodeType":"ElementaryTypeName","src":"1605:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":2990,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"1636:19:13","nodeType":"VariableDeclaration","scope":3072,"src":"1628:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2989,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2992,"mutability":"mutable","name":"_senderFee","nameLocation":"1673:10:13","nodeType":"VariableDeclaration","scope":3072,"src":"1665:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2991,"name":"uint256","nodeType":"ElementaryTypeName","src":"1665:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2994,"mutability":"mutable","name":"_refundAddress","nameLocation":"1701:14:13","nodeType":"VariableDeclaration","scope":3072,"src":"1693:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2993,"name":"address","nodeType":"ElementaryTypeName","src":"1693:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2996,"mutability":"mutable","name":"messageHash","nameLocation":"1742:11:13","nodeType":"VariableDeclaration","scope":3072,"src":"1726:27:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2995,"name":"string","nodeType":"ElementaryTypeName","src":"1726:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1510:249:13"},"returnParameters":{"id":3000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2999,"mutability":"mutable","name":"orderId","nameLocation":"1786:7:13","nodeType":"VariableDeclaration","scope":3072,"src":"1778:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2998,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1778:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1777:17:13"},"scope":3623,"src":"1490:1281:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3132,"nodeType":"Block","src":"2921:415:13","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3086,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"2988:17:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3088,"indexExpression":{"id":3087,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"3006:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2988:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e4e6f74537570706f72746564","id":3089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3015:19:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""},"value":"TokenNotSupported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","typeString":"literal_string \"TokenNotSupported\""}],"id":3085,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2980:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2980:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3091,"nodeType":"ExpressionStatement","src":"2980:55:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3093,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"3053:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3063:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3053:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e7449735a65726f","id":3096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3066:14:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""},"value":"AmountIsZero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","typeString":"literal_string \"AmountIsZero\""}],"id":3092,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3045:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3098,"nodeType":"ExpressionStatement","src":"3045:36:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3100,"name":"_refundAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"3099:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3125:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3117:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3101,"name":"address","nodeType":"ElementaryTypeName","src":"3117:7:13","typeDescriptions":{}}},"id":3104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3117:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3099:28:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":3106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3129:18:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":3099,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3091:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3091:57:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3108,"nodeType":"ExpressionStatement","src":"3091:57:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3110,"name":"_senderFeeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3080,"src":"3166:19:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3197:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3189:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3111,"name":"address","nodeType":"ElementaryTypeName","src":"3189:7:13","typeDescriptions":{}}},"id":3114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3189:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3166:33:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5468726f775a65726f41646472657373","id":3116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3201:18:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""},"value":"ThrowZeroAddress"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","typeString":"literal_string \"ThrowZeroAddress\""}],"id":3109,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3158:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3158:62:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3118,"nodeType":"ExpressionStatement","src":"3158:62:13"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3120,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"3238:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3638_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3122,"indexExpression":{"id":3121,"name":"_institutionCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"3266:16:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3238:45:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3638_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":3123,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3284:4:13","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3635,"src":"3238:50:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3300:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3125,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3292:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3292:7:13","typeDescriptions":{}}},"id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3292:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3238:64:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3304:24:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""},"value":"InvalidInstitutionCode"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","typeString":"literal_string \"InvalidInstitutionCode\""}],"id":3119,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3230:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3230:99:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3131,"nodeType":"ExpressionStatement","src":"3230:99:13"}]},"id":3133,"implemented":true,"kind":"function","modifiers":[],"name":"_handler","nameLocation":"2786:8:13","nodeType":"FunctionDefinition","parameters":{"id":3083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3074,"mutability":"mutable","name":"_token","nameLocation":"2803:6:13","nodeType":"VariableDeclaration","scope":3133,"src":"2795:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3073,"name":"address","nodeType":"ElementaryTypeName","src":"2795:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3076,"mutability":"mutable","name":"_amount","nameLocation":"2819:7:13","nodeType":"VariableDeclaration","scope":3133,"src":"2811:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3075,"name":"uint256","nodeType":"ElementaryTypeName","src":"2811:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3078,"mutability":"mutable","name":"_refundAddress","nameLocation":"2836:14:13","nodeType":"VariableDeclaration","scope":3133,"src":"2828:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3077,"name":"address","nodeType":"ElementaryTypeName","src":"2828:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3080,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"2860:19:13","nodeType":"VariableDeclaration","scope":3133,"src":"2852:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3079,"name":"address","nodeType":"ElementaryTypeName","src":"2852:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3082,"mutability":"mutable","name":"_institutionCode","nameLocation":"2889:16:13","nodeType":"VariableDeclaration","scope":3133,"src":"2881:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2881:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2794:112:13"},"returnParameters":{"id":3084,"nodeType":"ParameterList","parameters":[],"src":"2921:0:13"},"scope":3623,"src":"2777:559:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[4335],"body":{"id":3286,"nodeType":"Block","src":"3829:1741:13","statements":[{"condition":{"expression":{"baseExpression":{"id":3154,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"3899:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3156,"indexExpression":{"id":3155,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"3905:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3899:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3157,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3915:11:13","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4287,"src":"3899:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3161,"nodeType":"IfStatement","src":"3896:55:13","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3158,"name":"OrderFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"3935:14:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3935:16:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3160,"nodeType":"RevertStatement","src":"3928:23:13"}},{"assignments":[3163],"declarations":[{"constant":false,"id":3163,"mutability":"mutable","name":"token","nameLocation":"4007:5:13","nodeType":"VariableDeclaration","scope":3286,"src":"3999:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3162,"name":"address","nodeType":"ElementaryTypeName","src":"3999:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3168,"initialValue":{"expression":{"baseExpression":{"id":3164,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"4015:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3166,"indexExpression":{"id":3165,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"4021:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4015:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3167,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4031:5:13","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4279,"src":"4015:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3999:37:13"},{"expression":{"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3169,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"4115:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3171,"indexExpression":{"id":3170,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"4121:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4115:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4131:10:13","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4291,"src":"4115:26:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3173,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"4145:14:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"4115:44:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3175,"nodeType":"ExpressionStatement","src":"4115:44:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3176,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"4213:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3178,"indexExpression":{"id":3177,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"4219:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4213:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4229:10:13","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4291,"src":"4213:26:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4243:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4213:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3190,"nodeType":"IfStatement","src":"4210:149:13","trueBody":{"id":3189,"nodeType":"Block","src":"4246:113:13","statements":[{"expression":{"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3182,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"4314:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3184,"indexExpression":{"id":3183,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"4320:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4314:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3185,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4330:11:13","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4287,"src":"4314:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4344:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4314:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3188,"nodeType":"ExpressionStatement","src":"4314:34:13"}]}},{"assignments":[3193],"declarations":[{"constant":false,"id":3193,"mutability":"mutable","name":"_feeParams","nameLocation":"4471:10:13","nodeType":"VariableDeclaration","scope":3286,"src":"4460:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3192,"nodeType":"UserDefinedTypeName","pathNode":{"id":3191,"name":"fee","nameLocations":["4460:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":2917,"src":"4460:3:13"},"referencedDeclaration":2917,"src":"4460:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"id":3198,"initialValue":{"arguments":[{"id":3195,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"4502:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3196,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"4512:14:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":3194,"name":"_calculateFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3464,"src":"4487:14:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_uint96_$returns$_t_struct$_fee_$2917_memory_ptr_$","typeString":"function (bytes32,uint96) view returns (struct Paycrest.fee memory)"}},"id":3197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4487:40:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"nodeType":"VariableDeclarationStatement","src":"4458:69:13"},{"assignments":[3200],"declarations":[{"constant":false,"id":3200,"mutability":"mutable","name":"_fee","nameLocation":"4545:4:13","nodeType":"VariableDeclaration","scope":3286,"src":"4537:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3199,"name":"uint256","nodeType":"ElementaryTypeName","src":"4537:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3205,"initialValue":{"expression":{"baseExpression":{"id":3201,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"4552:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3203,"indexExpression":{"id":3202,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"4558:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4552:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4568:9:13","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4283,"src":"4552:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4537:40:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3206,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3200,"src":"4591:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4598:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4591:8:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3214,"nodeType":"IfStatement","src":"4587:101:13","trueBody":{"id":3213,"nodeType":"Block","src":"4601:87:13","statements":[{"expression":{"arguments":[{"id":3210,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"4668:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3209,"name":"transferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3323,"src":"4650:17:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4650:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3212,"nodeType":"ExpressionStatement","src":"4650:27:13"}]}},{"expression":{"arguments":[{"id":3219,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"4753:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3220,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"4767:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4778:11:13","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2912,"src":"4767:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3216,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"4737:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3215,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"4730:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2890_$","typeString":"type(contract IERC20)"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4730:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2890","typeString":"contract IERC20"}},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4744:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2857,"src":"4730:22:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4730:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3223,"nodeType":"ExpressionStatement","src":"4730:60:13"},{"expression":{"arguments":[{"id":3228,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"4869:18:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3229,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"4889:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4900:23:13","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2914,"src":"4889:34:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3225,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"4853:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3224,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"4846:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2890_$","typeString":"type(contract IERC20)"}},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4846:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2890","typeString":"contract IERC20"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4860:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2857,"src":"4846:22:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4846:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3232,"nodeType":"ExpressionStatement","src":"4846:78:13"},{"assignments":[3234],"declarations":[{"constant":false,"id":3234,"mutability":"mutable","name":"length","nameLocation":"4979:6:13","nodeType":"VariableDeclaration","scope":3286,"src":"4971:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3233,"name":"uint256","nodeType":"ElementaryTypeName","src":"4971:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3237,"initialValue":{"expression":{"id":3235,"name":"_validators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"4988:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5000:6:13","memberName":"length","nodeType":"MemberAccess","src":"4988:18:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4971:35:13"},{"assignments":[3239],"declarations":[{"constant":false,"id":3239,"mutability":"mutable","name":"_validatorReward","nameLocation":"5092:16:13","nodeType":"VariableDeclaration","scope":3286,"src":"5084:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3238,"name":"uint256","nodeType":"ElementaryTypeName","src":"5084:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3244,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3240,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5111:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3241,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5122:16:13","memberName":"validatorsReward","nodeType":"MemberAccess","referencedDeclaration":2916,"src":"5111:27:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3242,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"5141:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5111:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5084:63:13"},{"body":{"id":3273,"nodeType":"Block","src":"5190:234:13","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3256,"name":"_validators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"5227:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3258,"indexExpression":{"id":3257,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5239:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5227:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3259,"name":"_validatorReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3239,"src":"5243:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3253,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"5211:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3252,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"5204:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2890_$","typeString":"type(contract IERC20)"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5204:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2890","typeString":"contract IERC20"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5218:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2857,"src":"5204:22:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5204:56:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3261,"nodeType":"ExpressionStatement","src":"5204:56:13"},{"eventCall":{"arguments":[{"baseExpression":{"id":3263,"name":"_validators","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"5321:11:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3265,"indexExpression":{"id":3264,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5333:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5321:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3266,"name":"_validatorReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3239,"src":"5337:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3262,"name":"RewardValidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"5305:15:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5305:49:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3268,"nodeType":"EmitStatement","src":"5300:54:13"},{"id":3272,"nodeType":"UncheckedBlock","src":"5368:46:13","statements":[{"expression":{"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5396:3:13","subExpression":{"id":3269,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5396:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3271,"nodeType":"ExpressionStatement","src":"5396:3:13"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3249,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5176:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3250,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"5180:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5176:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3274,"initializationExpression":{"assignments":[3246],"declarations":[{"constant":false,"id":3246,"mutability":"mutable","name":"i","nameLocation":"5169:1:13","nodeType":"VariableDeclaration","scope":3274,"src":"5161:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3245,"name":"uint256","nodeType":"ElementaryTypeName","src":"5161:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3248,"initialValue":{"hexValue":"30","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5173:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5161:13:13"},"nodeType":"ForStatement","src":"5157:267:13"},{"eventCall":{"arguments":[{"id":3276,"name":"_splitOrderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"5469:13:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3277,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"5484:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3278,"name":"_liquidityProvider","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3143,"src":"5494:18:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3279,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3145,"src":"5514:14:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":3275,"name":"Settled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"5461:7:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint96_$returns$__$","typeString":"function (bytes32,bytes32,address,uint96)"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5461:68:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3281,"nodeType":"EmitStatement","src":"5456:73:13"},{"expression":{"components":[{"id":3282,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"5547:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3283,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3163,"src":"5557:5:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":3284,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5546:17:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_address_$","typeString":"tuple(bytes32,address)"}},"functionReturnParameters":3153,"id":3285,"nodeType":"Return","src":"5539:24:13"}]},"documentation":{"id":3134,"nodeType":"StructuredDocumentation","src":"3543:35:13","text":"@dev See {settle-IPaycrest}. "},"functionSelector":"384efd27","id":3287,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3148,"kind":"modifierInvocation","modifierName":{"id":3147,"name":"onlyAggregator","nameLocations":["3786:14:13"],"nodeType":"IdentifierPath","referencedDeclaration":2979,"src":"3786:14:13"},"nodeType":"ModifierInvocation","src":"3786:16:13"}],"name":"settle","nameLocation":"3592:6:13","nodeType":"FunctionDefinition","parameters":{"id":3146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"_splitOrderId","nameLocation":"3616:13:13","nodeType":"VariableDeclaration","scope":3287,"src":"3608:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3608:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3138,"mutability":"mutable","name":"_orderId","nameLocation":"3647:8:13","nodeType":"VariableDeclaration","scope":3287,"src":"3639:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3639:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3141,"mutability":"mutable","name":"_validators","nameLocation":"3685:11:13","nodeType":"VariableDeclaration","scope":3287,"src":"3666:30:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3139,"name":"address","nodeType":"ElementaryTypeName","src":"3666:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3140,"nodeType":"ArrayTypeName","src":"3666:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3143,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"3715:18:13","nodeType":"VariableDeclaration","scope":3287,"src":"3707:26:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3142,"name":"address","nodeType":"ElementaryTypeName","src":"3707:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3145,"mutability":"mutable","name":"_settlePercent","nameLocation":"3751:14:13","nodeType":"VariableDeclaration","scope":3287,"src":"3744:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3144,"name":"uint96","nodeType":"ElementaryTypeName","src":"3744:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3598:177:13"},"returnParameters":{"id":3153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3287,"src":"3811:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3811:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3152,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3287,"src":"3820:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3151,"name":"address","nodeType":"ElementaryTypeName","src":"3820:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3810:18:13"},"scope":3623,"src":"3583:1987:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3322,"nodeType":"Block","src":"5630:289:13","statements":[{"assignments":[3293],"declarations":[{"constant":false,"id":3293,"mutability":"mutable","name":"recipient","nameLocation":"5648:9:13","nodeType":"VariableDeclaration","scope":3322,"src":"5640:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3292,"name":"address","nodeType":"ElementaryTypeName","src":"5640:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3298,"initialValue":{"expression":{"baseExpression":{"id":3294,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"5660:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3296,"indexExpression":{"id":3295,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5666:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5660:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3297,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5676:18:13","memberName":"senderFeeRecipient","nodeType":"MemberAccess","referencedDeclaration":4281,"src":"5660:34:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5640:54:13"},{"assignments":[3300],"declarations":[{"constant":false,"id":3300,"mutability":"mutable","name":"_fee","nameLocation":"5712:4:13","nodeType":"VariableDeclaration","scope":3322,"src":"5704:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3299,"name":"uint256","nodeType":"ElementaryTypeName","src":"5704:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3305,"initialValue":{"expression":{"baseExpression":{"id":3301,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"5719:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3303,"indexExpression":{"id":3302,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5725:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5719:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3304,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5735:9:13","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4283,"src":"5719:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5704:40:13"},{"expression":{"arguments":[{"id":3313,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"5824:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3314,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"5835:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3307,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"5792:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3309,"indexExpression":{"id":3308,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"5798:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5792:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3310,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5808:5:13","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4279,"src":"5792:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3306,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"5785:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2890_$","typeString":"type(contract IERC20)"}},"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5785:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2890","typeString":"contract IERC20"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5815:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2857,"src":"5785:38:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5785:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3316,"nodeType":"ExpressionStatement","src":"5785:55:13"},{"eventCall":{"arguments":[{"id":3318,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"5896:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3319,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"5907:4:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3317,"name":"TransferSenderFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4238,"src":"5878:17:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5878:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3321,"nodeType":"EmitStatement","src":"5873:39:13"}]},"id":3323,"implemented":true,"kind":"function","modifiers":[],"name":"transferSenderFee","nameLocation":"5585:17:13","nodeType":"FunctionDefinition","parameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"_orderId","nameLocation":"5611:8:13","nodeType":"VariableDeclaration","scope":3323,"src":"5603:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5603:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5602:18:13"},"returnParameters":{"id":3291,"nodeType":"ParameterList","parameters":[],"src":"5630:0:13"},"scope":3623,"src":"5576:343:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4343],"body":{"id":3379,"nodeType":"Block","src":"6040:447:13","statements":[{"expression":{"arguments":[{"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6115:28:13","subExpression":{"expression":{"baseExpression":{"id":3334,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6116:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3336,"indexExpression":{"id":3335,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"6122:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6116:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3337,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6132:11:13","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4287,"src":"6116:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7264657246756c66696c6c6564","id":3339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6145:16:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""},"value":"OrderFulfilled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","typeString":"literal_string \"OrderFulfilled\""}],"id":3333,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6107:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6107:55:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3341,"nodeType":"ExpressionStatement","src":"6107:55:13"},{"expression":{"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3342,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6202:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3344,"indexExpression":{"id":3343,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"6208:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6202:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6218:11:13","memberName":"isFulfilled","nodeType":"MemberAccess","referencedDeclaration":4287,"src":"6202:27:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6232:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6202:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3348,"nodeType":"ExpressionStatement","src":"6202:34:13"},{"expression":{"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":3349,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6246:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3351,"indexExpression":{"id":3350,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"6252:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6246:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3352,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6262:10:13","memberName":"currentBPS","nodeType":"MemberAccess","referencedDeclaration":4291,"src":"6246:26:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6275:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6246:30:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":3355,"nodeType":"ExpressionStatement","src":"6246:30:13"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3363,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6356:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3365,"indexExpression":{"id":3364,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"6362:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6356:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3366,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6372:13:13","memberName":"refundAddress","nodeType":"MemberAccess","referencedDeclaration":4289,"src":"6356:29:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":3367,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6387:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3369,"indexExpression":{"id":3368,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"6393:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6387:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6403:6:13","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4293,"src":"6387:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"baseExpression":{"id":3357,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6324:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3359,"indexExpression":{"id":3358,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"6330:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6324:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3360,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6340:5:13","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4279,"src":"6324:21:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3356,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"6317:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2890_$","typeString":"type(contract IERC20)"}},"id":3361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2890","typeString":"contract IERC20"}},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6347:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2857,"src":"6317:38:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:93:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3372,"nodeType":"ExpressionStatement","src":"6317:93:13"},{"eventCall":{"arguments":[{"id":3374,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"6450:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3373,"name":"Refunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"6441:8:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6441:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3376,"nodeType":"EmitStatement","src":"6436:23:13"},{"expression":{"hexValue":"74727565","id":3377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6476:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3332,"id":3378,"nodeType":"Return","src":"6469:11:13"}]},"documentation":{"id":3324,"nodeType":"StructuredDocumentation","src":"5925:35:13","text":"@dev See {refund-IPaycrest}. "},"functionSelector":"7249fbb6","id":3380,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":3329,"kind":"modifierInvocation","modifierName":{"id":3328,"name":"onlyAggregator","nameLocations":["6009:14:13"],"nodeType":"IdentifierPath","referencedDeclaration":2979,"src":"6009:14:13"},"nodeType":"ModifierInvocation","src":"6009:16:13"}],"name":"refund","nameLocation":"5974:6:13","nodeType":"FunctionDefinition","parameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"_orderId","nameLocation":"5989:8:13","nodeType":"VariableDeclaration","scope":3380,"src":"5981:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3325,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5981:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5980:18:13"},"returnParameters":{"id":3332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3380,"src":"6034:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3330,"name":"bool","nodeType":"ElementaryTypeName","src":"6034:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6033:6:13"},"scope":3623,"src":"5965:522:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3463,"nodeType":"Block","src":"6603:1062:13","statements":[{"assignments":[3391],"declarations":[{"constant":false,"id":3391,"mutability":"mutable","name":"amount","nameLocation":"6681:6:13","nodeType":"VariableDeclaration","scope":3463,"src":"6673:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3390,"name":"uint256","nodeType":"ElementaryTypeName","src":"6673:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3396,"initialValue":{"expression":{"baseExpression":{"id":3392,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6690:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3394,"indexExpression":{"id":3393,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3382,"src":"6696:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6690:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6706:6:13","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4293,"src":"6690:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6673:39:13"},{"expression":{"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3397,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"6760:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3398,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"6769:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"baseExpression":{"id":3399,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"6778:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3401,"indexExpression":{"id":3400,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3382,"src":"6784:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6778:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"id":3402,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6794:9:13","memberName":"senderFee","nodeType":"MemberAccess","referencedDeclaration":4283,"src":"6778:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6769:34:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6760:43:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3405,"nodeType":"ExpressionStatement","src":"6760:43:13"},{"expression":{"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3406,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"6882:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6893:23:13","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2914,"src":"6882:34:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3409,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"6920:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3410,"name":"_settlePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3384,"src":"6929:14:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"6920:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3412,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6919:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3413,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"6947:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6919:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6882:72:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3416,"nodeType":"ExpressionStatement","src":"6882:72:13"},{"expression":{"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3417,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7022:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7033:11:13","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2912,"src":"7022:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3420,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7048:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3421,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7059:23:13","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2914,"src":"7048:34:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3422,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"7085:18:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"7048:55:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3424,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7047:57:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3425,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"7107:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7047:67:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7022:92:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3428,"nodeType":"ExpressionStatement","src":"7022:92:13"},{"expression":{"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3429,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7212:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7223:23:13","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2914,"src":"7212:34:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3432,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7250:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3433,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7261:23:13","memberName":"liquidityProviderAmount","nodeType":"MemberAccess","referencedDeclaration":2914,"src":"7250:34:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":3434,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7287:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7298:11:13","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2912,"src":"7287:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7250:59:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3437,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7249:61:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7212:98:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3439,"nodeType":"ExpressionStatement","src":"7212:98:13"},{"expression":{"id":3450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3440,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7383:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7394:16:13","memberName":"validatorsReward","nodeType":"MemberAccess","referencedDeclaration":2916,"src":"7383:27:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3443,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7414:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3444,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7425:11:13","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2912,"src":"7414:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3445,"name":"validatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"7439:19:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"7414:44:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3447,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7413:46:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3448,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"7462:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7413:56:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7383:86:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3451,"nodeType":"ExpressionStatement","src":"7383:86:13"},{"expression":{"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3452,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7579:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3454,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7590:11:13","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2912,"src":"7579:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3455,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7604:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3456,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7615:11:13","memberName":"protocolFee","nodeType":"MemberAccess","referencedDeclaration":2912,"src":"7604:22:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"expression":{"id":3457,"name":"_feeParams","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"7630:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee memory"}},"id":3458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7641:16:13","memberName":"validatorsReward","nodeType":"MemberAccess","referencedDeclaration":2916,"src":"7630:27:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3459,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7629:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7604:54:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7579:79:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3462,"nodeType":"ExpressionStatement","src":"7579:79:13"}]},"id":3464,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateFees","nameLocation":"6502:14:13","nodeType":"FunctionDefinition","parameters":{"id":3385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3382,"mutability":"mutable","name":"_orderId","nameLocation":"6525:8:13","nodeType":"VariableDeclaration","scope":3464,"src":"6517:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6517:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3384,"mutability":"mutable","name":"_settlePercent","nameLocation":"6542:14:13","nodeType":"VariableDeclaration","scope":3464,"src":"6535:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":3383,"name":"uint96","nodeType":"ElementaryTypeName","src":"6535:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"6516:41:13"},"returnParameters":{"id":3389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3388,"mutability":"mutable","name":"_feeParams","nameLocation":"6590:10:13","nodeType":"VariableDeclaration","scope":3464,"src":"6579:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_memory_ptr","typeString":"struct Paycrest.fee"},"typeName":{"id":3387,"nodeType":"UserDefinedTypeName","pathNode":{"id":3386,"name":"fee","nameLocations":["6579:3:13"],"nodeType":"IdentifierPath","referencedDeclaration":2917,"src":"6579:3:13"},"referencedDeclaration":2917,"src":"6579:3:13","typeDescriptions":{"typeIdentifier":"t_struct$_fee_$2917_storage_ptr","typeString":"struct Paycrest.fee"}},"visibility":"internal"}],"src":"6578:24:13"},"scope":3623,"src":"6493:1172:13","stateMutability":"view","virtual":false,"visibility":"private"},{"baseFunctions":[4360],"body":{"id":3477,"nodeType":"Block","src":"7988:39:13","statements":[{"expression":{"baseExpression":{"id":3473,"name":"order","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"8005:5:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Order_$4294_storage_$","typeString":"mapping(bytes32 => struct IPaycrest.Order storage ref)"}},"id":3475,"indexExpression":{"id":3474,"name":"_orderId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3467,"src":"8011:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8005:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage","typeString":"struct IPaycrest.Order storage ref"}},"functionReturnParameters":3472,"id":3476,"nodeType":"Return","src":"7998:22:13"}]},"documentation":{"id":3465,"nodeType":"StructuredDocumentation","src":"7866:41:13","text":"@dev See {getOrderInfo-IPaycrest}. "},"functionSelector":"768c6ec0","id":3478,"implemented":true,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"7921:12:13","nodeType":"FunctionDefinition","parameters":{"id":3468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3467,"mutability":"mutable","name":"_orderId","nameLocation":"7942:8:13","nodeType":"VariableDeclaration","scope":3478,"src":"7934:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3466,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7934:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7933:18:13"},"returnParameters":{"id":3472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3478,"src":"7974:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":3470,"nodeType":"UserDefinedTypeName","pathNode":{"id":3469,"name":"Order","nameLocations":["7974:5:13"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"7974:5:13"},"referencedDeclaration":4294,"src":"7974:5:13","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"7973:14:13"},"scope":3623,"src":"7912:115:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4351],"body":{"id":3490,"nodeType":"Block","src":"8153:49:13","statements":[{"expression":{"baseExpression":{"id":3486,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"8170:17:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3488,"indexExpression":{"id":3487,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3481,"src":"8188:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8170:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3485,"id":3489,"nodeType":"Return","src":"8163:32:13"}]},"documentation":{"id":3479,"nodeType":"StructuredDocumentation","src":"8033:45:13","text":"@dev See {isTokenSupported-IPaycrest}. "},"functionSelector":"75151b63","id":3491,"implemented":true,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"8092:16:13","nodeType":"FunctionDefinition","parameters":{"id":3482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3481,"mutability":"mutable","name":"_token","nameLocation":"8117:6:13","nodeType":"VariableDeclaration","scope":3491,"src":"8109:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3480,"name":"address","nodeType":"ElementaryTypeName","src":"8109:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8108:16:13"},"returnParameters":{"id":3485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3491,"src":"8147:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3483,"name":"bool","nodeType":"ElementaryTypeName","src":"8147:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8146:6:13"},"scope":3623,"src":"8083:119:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3504,"nodeType":"Block","src":"8369:57:13","statements":[{"expression":{"baseExpression":{"id":3500,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"8386:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3638_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3502,"indexExpression":{"id":3501,"name":"code","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3494,"src":"8414:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8386:33:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3638_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"functionReturnParameters":3499,"id":3503,"nodeType":"Return","src":"8379:40:13"}]},"documentation":{"id":3492,"nodeType":"StructuredDocumentation","src":"8208:56:13","text":"@dev See {getSupportedInstitutionName-IPaycrest}. "},"functionSelector":"87490d86","id":3505,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutionName","nameLocation":"8278:27:13","nodeType":"FunctionDefinition","parameters":{"id":3495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3494,"mutability":"mutable","name":"code","nameLocation":"8314:4:13","nodeType":"VariableDeclaration","scope":3505,"src":"8306:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3493,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8306:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8305:14:13"},"returnParameters":{"id":3499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3505,"src":"8343:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3638_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"},"typeName":{"id":3497,"nodeType":"UserDefinedTypeName","pathNode":{"id":3496,"name":"InstitutionByCode","nameLocations":["8343:17:13"],"nodeType":"IdentifierPath","referencedDeclaration":3638,"src":"8343:17:13"},"referencedDeclaration":3638,"src":"8343:17:13","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3638_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}},"visibility":"internal"}],"src":"8342:26:13"},"scope":3623,"src":"8269:157:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3563,"nodeType":"Block","src":"8529:390:13","statements":[{"assignments":[3518],"declarations":[{"constant":false,"id":3518,"mutability":"mutable","name":"institutions","nameLocation":"8560:12:13","nodeType":"VariableDeclaration","scope":3563,"src":"8539:33:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3516,"nodeType":"UserDefinedTypeName","pathNode":{"id":3515,"name":"Institution","nameLocations":["8539:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3633,"src":"8539:11:13"},"referencedDeclaration":3633,"src":"8539:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3517,"nodeType":"ArrayTypeName","src":"8539:13:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":3522,"initialValue":{"baseExpression":{"id":3519,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"8575:21:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":3521,"indexExpression":{"id":3520,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"8597:8:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8575:31:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8539:67:13"},{"assignments":[3524],"declarations":[{"constant":false,"id":3524,"mutability":"mutable","name":"length","nameLocation":"8624:6:13","nodeType":"VariableDeclaration","scope":3563,"src":"8616:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3523,"name":"uint256","nodeType":"ElementaryTypeName","src":"8616:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3527,"initialValue":{"expression":{"id":3525,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"8633:12:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8646:6:13","memberName":"length","nodeType":"MemberAccess","src":"8633:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8616:36:13"},{"assignments":[3532],"declarations":[{"constant":false,"id":3532,"mutability":"mutable","name":"result","nameLocation":"8683:6:13","nodeType":"VariableDeclaration","scope":3563,"src":"8662:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3530,"nodeType":"UserDefinedTypeName","pathNode":{"id":3529,"name":"Institution","nameLocations":["8662:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3633,"src":"8662:11:13"},"referencedDeclaration":3633,"src":"8662:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3531,"nodeType":"ArrayTypeName","src":"8662:13:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"id":3539,"initialValue":{"arguments":[{"id":3537,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"8710:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8692:17:13","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct PaycrestSettingManager.Institution memory[] memory)"},"typeName":{"baseType":{"id":3534,"nodeType":"UserDefinedTypeName","pathNode":{"id":3533,"name":"Institution","nameLocations":["8696:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3633,"src":"8696:11:13"},"referencedDeclaration":3633,"src":"8696:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3535,"nodeType":"ArrayTypeName","src":"8696:13:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8692:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"8662:55:13"},{"body":{"id":3559,"nodeType":"Block","src":"8770:111:13","statements":[{"expression":{"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"8784:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3549,"indexExpression":{"id":3548,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"8791:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8784:9:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3550,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3518,"src":"8796:12:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3552,"indexExpression":{"id":3551,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"8809:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8796:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"src":"8784:27:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3554,"nodeType":"ExpressionStatement","src":"8784:27:13"},{"id":3558,"nodeType":"UncheckedBlock","src":"8825:46:13","statements":[{"expression":{"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8853:3:13","subExpression":{"id":3555,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"8853:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3557,"nodeType":"ExpressionStatement","src":"8853:3:13"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3544,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"8756:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3545,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"8760:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8756:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3560,"initializationExpression":{"assignments":[3541],"declarations":[{"constant":false,"id":3541,"mutability":"mutable","name":"i","nameLocation":"8749:1:13","nodeType":"VariableDeclaration","scope":3560,"src":"8741:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3540,"name":"uint256","nodeType":"ElementaryTypeName","src":"8741:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3543,"initialValue":{"hexValue":"30","id":3542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8753:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8741:13:13"},"nodeType":"ForStatement","src":"8736:145:13"},{"expression":{"id":3561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"8906:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"functionReturnParameters":3513,"id":3562,"nodeType":"Return","src":"8899:13:13"}]},"functionSelector":"02621338","id":3564,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInstitutions","nameLocation":"8441:24:13","nodeType":"FunctionDefinition","parameters":{"id":3508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3507,"mutability":"mutable","name":"currency","nameLocation":"8474:8:13","nodeType":"VariableDeclaration","scope":3564,"src":"8466:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8466:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8465:18:13"},"returnParameters":{"id":3513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3512,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3564,"src":"8507:20:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3510,"nodeType":"UserDefinedTypeName","pathNode":{"id":3509,"name":"Institution","nameLocations":["8507:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":3633,"src":"8507:11:13"},"referencedDeclaration":3633,"src":"8507:11:13","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3511,"nodeType":"ArrayTypeName","src":"8507:13:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"8506:22:13"},"scope":3623,"src":"8432:487:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4370],"body":{"id":3579,"nodeType":"Block","src":"9078:73:13","statements":[{"expression":{"components":[{"id":3574,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"9095:18:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":3575,"name":"validatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"9115:19:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":3576,"name":"MAX_BPS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"9136:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3577,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9094:50:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint128_$_t_uint128_$_t_uint256_$","typeString":"tuple(uint128,uint128,uint256)"}},"functionReturnParameters":3573,"id":3578,"nodeType":"Return","src":"9088:56:13"}]},"documentation":{"id":3565,"nodeType":"StructuredDocumentation","src":"8925:42:13","text":"@dev See {getFeeDetails-IPaycrest}. "},"functionSelector":"b810c636","id":3580,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"8981:13:13","nodeType":"FunctionDefinition","parameters":{"id":3566,"nodeType":"ParameterList","parameters":[],"src":"8994:2:13"},"returnParameters":{"id":3573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3580,"src":"9028:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3567,"name":"uint128","nodeType":"ElementaryTypeName","src":"9028:7:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3580,"src":"9046:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3569,"name":"uint128","nodeType":"ElementaryTypeName","src":"9046:7:13","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3580,"src":"9064:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3571,"name":"uint256","nodeType":"ElementaryTypeName","src":"9064:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9018:59:13"},"scope":3623,"src":"8972:179:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4376],"body":{"id":3588,"nodeType":"Block","src":"9278:44:13","statements":[{"expression":{"id":3586,"name":"_liquidityAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"9295:20:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3585,"id":3587,"nodeType":"Return","src":"9288:27:13"}]},"documentation":{"id":3581,"nodeType":"StructuredDocumentation","src":"9157:51:13","text":"@dev See {getLiquidityAggregator-IPaycrest}. "},"functionSelector":"2ebc5356","id":3589,"implemented":true,"kind":"function","modifiers":[],"name":"getLiquidityAggregator","nameLocation":"9222:22:13","nodeType":"FunctionDefinition","parameters":{"id":3582,"nodeType":"ParameterList","parameters":[],"src":"9244:2:13"},"returnParameters":{"id":3585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3584,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3589,"src":"9269:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3583,"name":"address","nodeType":"ElementaryTypeName","src":"9269:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9268:9:13"},"scope":3623,"src":"9213:109:13","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[4384],"body":{"id":3601,"nodeType":"Block","src":"9456:46:13","statements":[{"expression":{"baseExpression":{"id":3597,"name":"_isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"9473:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3599,"indexExpression":{"id":3598,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"9488:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9473:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3596,"id":3600,"nodeType":"Return","src":"9466:29:13"}]},"documentation":{"id":3590,"nodeType":"StructuredDocumentation","src":"9328:49:13","text":"@dev See {getWhitelistedStatus-IPaycrest}. "},"functionSelector":"d8e8de34","id":3602,"implemented":true,"kind":"function","modifiers":[],"name":"getWhitelistedStatus","nameLocation":"9391:20:13","nodeType":"FunctionDefinition","parameters":{"id":3593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3592,"mutability":"mutable","name":"sender","nameLocation":"9420:6:13","nodeType":"VariableDeclaration","scope":3602,"src":"9412:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3591,"name":"address","nodeType":"ElementaryTypeName","src":"9412:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9411:16:13"},"returnParameters":{"id":3596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3602,"src":"9450:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3594,"name":"bool","nodeType":"ElementaryTypeName","src":"9450:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9449:6:13"},"scope":3623,"src":"9382:120:13","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3621,"nodeType":"Block","src":"9688:61:13","statements":[{"expression":{"arguments":[{"id":3617,"name":"_recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"9722:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3618,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3608,"src":"9734:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3614,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3604,"src":"9705:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3613,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"9698:6:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$2890_$","typeString":"type(contract IERC20)"}},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2890","typeString":"contract IERC20"}},"id":3616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9713:8:13","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2857,"src":"9698:23:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:44:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3620,"nodeType":"ExpressionStatement","src":"9698:44:13"}]},"functionSelector":"d9caed12","id":3622,"implemented":true,"kind":"function","modifiers":[{"id":3611,"kind":"modifierInvocation","modifierName":{"id":3610,"name":"onlyOwner","nameLocations":["9678:9:13"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"9678:9:13"},"nodeType":"ModifierInvocation","src":"9678:9:13"}],"name":"withdraw","nameLocation":"9607:8:13","nodeType":"FunctionDefinition","parameters":{"id":3609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"mutability":"mutable","name":"_token","nameLocation":"9624:6:13","nodeType":"VariableDeclaration","scope":3622,"src":"9616:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3603,"name":"address","nodeType":"ElementaryTypeName","src":"9616:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3606,"mutability":"mutable","name":"_recipient","nameLocation":"9640:10:13","nodeType":"VariableDeclaration","scope":3622,"src":"9632:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3605,"name":"address","nodeType":"ElementaryTypeName","src":"9632:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3608,"mutability":"mutable","name":"_amount","nameLocation":"9660:7:13","nodeType":"VariableDeclaration","scope":3622,"src":"9652:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3607,"name":"uint256","nodeType":"ElementaryTypeName","src":"9652:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9615:53:13"},"returnParameters":{"id":3612,"nodeType":"ParameterList","parameters":[],"src":"9688:0:13"},"scope":3623,"src":"9598:151:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3624,"src":"367:9385:13","usedErrors":[3670,3673,3678,3681,3684,4248,4251,4254,4257,4260,4262,4264]}],"src":"38:9715:13"},"id":13},"contracts/PaycrestSettingManager.sol":{"ast":{"absolutePath":"contracts/PaycrestSettingManager.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ContextUpgradeable":[1246],"Initializable":[300],"OwnableUpgradeable":[131],"PaycrestSettingManager":[3872]},"id":3873,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3625,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:14"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":3626,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3873,"sourceUnit":132,"src":"62:75:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3627,"name":"OwnableUpgradeable","nameLocations":["174:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"174:18:14"},"id":3628,"nodeType":"InheritanceSpecifier","src":"174:18:14"}],"canonicalName":"PaycrestSettingManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3872,"linearizedBaseContracts":[3872,131,1246,300],"name":"PaycrestSettingManager","nameLocation":"148:22:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"PaycrestSettingManager.Institution","id":3633,"members":[{"constant":false,"id":3630,"mutability":"mutable","name":"code","nameLocation":"237:4:14","nodeType":"VariableDeclaration","scope":3633,"src":"229:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3629,"name":"bytes32","nodeType":"ElementaryTypeName","src":"229:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3632,"mutability":"mutable","name":"name","nameLocation":"294:4:14","nodeType":"VariableDeclaration","scope":3633,"src":"286:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"286:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Institution","nameLocation":"207:11:14","nodeType":"StructDefinition","scope":3872,"src":"200:109:14","visibility":"public"},{"canonicalName":"PaycrestSettingManager.InstitutionByCode","id":3638,"members":[{"constant":false,"id":3635,"mutability":"mutable","name":"name","nameLocation":"357:4:14","nodeType":"VariableDeclaration","scope":3638,"src":"349:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"349:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3637,"mutability":"mutable","name":"currency","nameLocation":"379:8:14","nodeType":"VariableDeclaration","scope":3638,"src":"371:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"371:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"InstitutionByCode","nameLocation":"321:17:14","nodeType":"StructDefinition","scope":3872,"src":"314:80:14","visibility":"public"},{"constant":false,"id":3640,"mutability":"mutable","name":"MAX_BPS","nameLocation":"416:7:14","nodeType":"VariableDeclaration","scope":3872,"src":"399:24:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3639,"name":"uint256","nodeType":"ElementaryTypeName","src":"399:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3642,"mutability":"mutable","name":"protocolFeePercent","nameLocation":"446:18:14","nodeType":"VariableDeclaration","scope":3872,"src":"429:35:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3641,"name":"uint128","nodeType":"ElementaryTypeName","src":"429:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3644,"mutability":"mutable","name":"validatorFeePercent","nameLocation":"493:19:14","nodeType":"VariableDeclaration","scope":3872,"src":"476:36:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3643,"name":"uint128","nodeType":"ElementaryTypeName","src":"476:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3646,"mutability":"mutable","name":"feeRecipient","nameLocation":"543:12:14","nodeType":"VariableDeclaration","scope":3872,"src":"526:29:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3645,"name":"address","nodeType":"ElementaryTypeName","src":"526:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3648,"mutability":"mutable","name":"_liquidityAggregator","nameLocation":"578:20:14","nodeType":"VariableDeclaration","scope":3872,"src":"561:37:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3647,"name":"address","nodeType":"ElementaryTypeName","src":"561:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3652,"mutability":"mutable","name":"_isTokenSupported","nameLocation":"639:17:14","nodeType":"VariableDeclaration","scope":3872,"src":"605:51:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3651,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3649,"name":"address","nodeType":"ElementaryTypeName","src":"613:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"605:24:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3650,"name":"bool","nodeType":"ElementaryTypeName","src":"624:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3656,"mutability":"mutable","name":"_isWhitelisted","nameLocation":"696:14:14","nodeType":"VariableDeclaration","scope":3872,"src":"662:48:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3655,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3653,"name":"address","nodeType":"ElementaryTypeName","src":"670:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"662:24:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3654,"name":"bool","nodeType":"ElementaryTypeName","src":"681:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":3662,"mutability":"mutable","name":"supportedInstitutions","nameLocation":"760:21:14","nodeType":"VariableDeclaration","scope":3872,"src":"717:64:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"typeName":{"id":3661,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3657,"name":"bytes32","nodeType":"ElementaryTypeName","src":"725:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"717:33:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":3659,"nodeType":"UserDefinedTypeName","pathNode":{"id":3658,"name":"Institution","nameLocations":["736:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":3633,"src":"736:11:14"},"referencedDeclaration":3633,"src":"736:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3660,"nodeType":"ArrayTypeName","src":"736:13:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}}},"visibility":"internal"},{"constant":false,"id":3667,"mutability":"mutable","name":"supportedInstitutionsByCode","nameLocation":"834:27:14","nodeType":"VariableDeclaration","scope":3872,"src":"787:74:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3638_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"typeName":{"id":3666,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3663,"name":"bytes32","nodeType":"ElementaryTypeName","src":"795:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"787:37:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3638_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3665,"nodeType":"UserDefinedTypeName","pathNode":{"id":3664,"name":"InstitutionByCode","nameLocations":["806:17:14"],"nodeType":"IdentifierPath","referencedDeclaration":3638,"src":"806:17:14"},"referencedDeclaration":3638,"src":"806:17:14","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3638_storage_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode"}}},"visibility":"internal"},{"documentation":{"id":3668,"nodeType":"StructuredDocumentation","src":"868:49:14","text":"@notice Revert when zero address is passed in"},"errorSelector":"9c8e2b5d","id":3670,"name":"ThrowZeroAddress","nameLocation":"928:16:14","nodeType":"ErrorDefinition","parameters":{"id":3669,"nodeType":"ParameterList","parameters":[],"src":"944:2:14"},"src":"922:25:14"},{"documentation":{"id":3671,"nodeType":"StructuredDocumentation","src":"952:49:14","text":"@notice Revert when zero address is passed in"},"errorSelector":"b23c23d2","id":3673,"name":"ThrowZeroValue","nameLocation":"1012:14:14","nodeType":"ErrorDefinition","parameters":{"id":3672,"nodeType":"ParameterList","parameters":[],"src":"1026:2:14"},"src":"1006:23:14"},{"documentation":{"id":3674,"nodeType":"StructuredDocumentation","src":"1034:49:14","text":"@notice Revert when zero address is passed in"},"errorSelector":"48bae5b8","id":3678,"name":"InvalidParameter","nameLocation":"1094:16:14","nodeType":"ErrorDefinition","parameters":{"id":3677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3676,"mutability":"mutable","name":"what","nameLocation":"1119:4:14","nodeType":"VariableDeclaration","scope":3678,"src":"1111:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1111:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1110:14:14"},"src":"1088:37:14"},{"documentation":{"id":3679,"nodeType":"StructuredDocumentation","src":"1130:49:14","text":"@notice Revert when invalid token is provided"},"errorSelector":"3dd1b305","id":3681,"name":"TokenNotSupported","nameLocation":"1190:17:14","nodeType":"ErrorDefinition","parameters":{"id":3680,"nodeType":"ParameterList","parameters":[],"src":"1207:2:14"},"src":"1184:26:14"},{"documentation":{"id":3682,"nodeType":"StructuredDocumentation","src":"1215:44:14","text":"@notice Revert when input amount is zero"},"errorSelector":"43ad20fc","id":3684,"name":"AmountIsZero","nameLocation":"1270:12:14","nodeType":"ErrorDefinition","parameters":{"id":3683,"nodeType":"ParameterList","parameters":[],"src":"1282:2:14"},"src":"1264:21:14"},{"anonymous":false,"eventSelector":"e22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930","id":3692,"name":"SettingManagerBool","nameLocation":"1297:18:14","nodeType":"EventDefinition","parameters":{"id":3691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3686,"indexed":false,"mutability":"mutable","name":"what","nameLocation":"1324:4:14","nodeType":"VariableDeclaration","scope":3692,"src":"1316:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3685,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1316:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3688,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1338:5:14","nodeType":"VariableDeclaration","scope":3692,"src":"1330:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3687,"name":"address","nodeType":"ElementaryTypeName","src":"1330:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3690,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"1350:6:14","nodeType":"VariableDeclaration","scope":3692,"src":"1345:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3689,"name":"bool","nodeType":"ElementaryTypeName","src":"1345:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1315:42:14"},"src":"1291:67:14"},{"anonymous":false,"eventSelector":"3e9524e487d4645f1d81c48b15a7087c94c51a11aaae3ce91172409c66708e79","id":3700,"name":"SettingManagerForInstitution","nameLocation":"1369:28:14","nodeType":"EventDefinition","parameters":{"id":3699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"indexed":false,"mutability":"mutable","name":"what","nameLocation":"1406:4:14","nodeType":"VariableDeclaration","scope":3700,"src":"1398:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3693,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1398:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3696,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1419:5:14","nodeType":"VariableDeclaration","scope":3700,"src":"1412:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3695,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1412:6:14","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":3698,"indexed":false,"mutability":"mutable","name":"status","nameLocation":"1433:6:14","nodeType":"VariableDeclaration","scope":3700,"src":"1426:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":3697,"name":"bytes8","nodeType":"ElementaryTypeName","src":"1426:6:14","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"}],"src":"1397:43:14"},"src":"1363:78:14"},{"anonymous":false,"eventSelector":"e38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df","id":3706,"name":"PaycrestFees","nameLocation":"1452:12:14","nodeType":"EventDefinition","parameters":{"id":3705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3702,"indexed":false,"mutability":"mutable","name":"protocolFee","nameLocation":"1473:11:14","nodeType":"VariableDeclaration","scope":3706,"src":"1465:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3701,"name":"uint128","nodeType":"ElementaryTypeName","src":"1465:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3704,"indexed":false,"mutability":"mutable","name":"validatorFeePercent","nameLocation":"1494:19:14","nodeType":"VariableDeclaration","scope":3706,"src":"1486:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3703,"name":"uint128","nodeType":"ElementaryTypeName","src":"1486:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"1464:50:14"},"src":"1446:69:14"},{"body":{"id":3757,"nodeType":"Block","src":"1810:294:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3717,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"1824:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1841:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1833:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3718,"name":"address","nodeType":"ElementaryTypeName","src":"1833:7:14","typeDescriptions":{}}},"id":3721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1833:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1824:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3726,"nodeType":"IfStatement","src":"1820:50:14","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3723,"name":"ThrowZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"1852:16:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1852:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3725,"nodeType":"RevertStatement","src":"1845:25:14"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3727,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"1884:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"746f6b656e","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1892:7:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b9b0454cadcb5884dd3faa6ba975da4d2459aa3f11d31291a25a8358f84946d","typeString":"literal_string \"token\""},"value":"token"},"src":"1884:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3736,"nodeType":"IfStatement","src":"1880:54:14","trueBody":{"expression":{"id":3734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3730,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3652,"src":"1901:17:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3732,"indexExpression":{"id":3731,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"1919:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1901:24:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3733,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"1928:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1901:33:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3735,"nodeType":"ExpressionStatement","src":"1901:33:14"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3737,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"1948:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"77686974656c697374","id":3738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1956:11:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_54c80de7e611b57d6d38523e3c0c59a6a3e72cddf62c95cf51a204e52c1a86ad","typeString":"literal_string \"whitelist\""},"value":"whitelist"},"src":"1948:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"errorCall":{"arguments":[{"id":3747,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"2038:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3746,"name":"InvalidParameter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"2021:16:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2021:22:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3749,"nodeType":"RevertStatement","src":"2014:29:14"},"id":3750,"nodeType":"IfStatement","src":"1944:99:14","trueBody":{"expression":{"id":3744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3740,"name":"_isWhitelisted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"1969:14:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3742,"indexExpression":{"id":3741,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"1984:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1969:21:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3743,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"1993:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1969:30:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3745,"nodeType":"ExpressionStatement","src":"1969:30:14"}},{"eventCall":{"arguments":[{"id":3752,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"2077:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"2083:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3754,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3712,"src":"2090:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3751,"name":"SettingManagerBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3692,"src":"2058:18:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bool_$returns$__$","typeString":"function (bytes32,address,bool)"}},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2058:39:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3756,"nodeType":"EmitStatement","src":"2053:44:14"}]},"functionSelector":"99e3c0b4","id":3758,"implemented":true,"kind":"function","modifiers":[{"id":3715,"kind":"modifierInvocation","modifierName":{"id":3714,"name":"onlyOwner","nameLocations":["1800:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1800:9:14"},"nodeType":"ModifierInvocation","src":"1800:9:14"}],"name":"settingManagerBool","nameLocation":"1730:18:14","nodeType":"FunctionDefinition","parameters":{"id":3713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3708,"mutability":"mutable","name":"what","nameLocation":"1757:4:14","nodeType":"VariableDeclaration","scope":3758,"src":"1749:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3707,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1749:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3710,"mutability":"mutable","name":"value","nameLocation":"1771:5:14","nodeType":"VariableDeclaration","scope":3758,"src":"1763:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3709,"name":"address","nodeType":"ElementaryTypeName","src":"1763:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3712,"mutability":"mutable","name":"status","nameLocation":"1783:6:14","nodeType":"VariableDeclaration","scope":3758,"src":"1778:11:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3711,"name":"bool","nodeType":"ElementaryTypeName","src":"1778:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1748:42:14"},"returnParameters":{"id":3716,"nodeType":"ParameterList","parameters":[],"src":"1810:0:14"},"scope":3872,"src":"1721:383:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3811,"nodeType":"Block","src":"2216:394:14","statements":[{"assignments":[3770],"declarations":[{"constant":false,"id":3770,"mutability":"mutable","name":"length","nameLocation":"2235:6:14","nodeType":"VariableDeclaration","scope":3811,"src":"2227:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3769,"name":"uint256","nodeType":"ElementaryTypeName","src":"2227:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3773,"initialValue":{"expression":{"id":3771,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"2244:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2257:6:14","memberName":"length","nodeType":"MemberAccess","src":"2244:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2227:36:14"},{"body":{"id":3809,"nodeType":"Block","src":"2304:300:14","statements":[{"expression":{"arguments":[{"baseExpression":{"id":3785,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"2355:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3787,"indexExpression":{"id":3786,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"2368:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2355:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Institution_$3633_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}],"expression":{"baseExpression":{"id":3781,"name":"supportedInstitutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"2318:21:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.Institution storage ref[] storage ref)"}},"id":3783,"indexExpression":{"id":3782,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"2340:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2318:31:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_storage_$dyn_storage","typeString":"struct PaycrestSettingManager.Institution storage ref[] storage ref"}},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:4:14","memberName":"push","nodeType":"MemberAccess","src":"2318:36:14","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_ptr_$_t_struct$_Institution_$3633_storage_$returns$__$attached_to$_t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_ptr_$","typeString":"function (struct PaycrestSettingManager.Institution storage ref[] storage pointer,struct PaycrestSettingManager.Institution storage ref)"}},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2318:53:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3789,"nodeType":"ExpressionStatement","src":"2318:53:14"},{"expression":{"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3790,"name":"supportedInstitutionsByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"2385:27:14","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_InstitutionByCode_$3638_storage_$","typeString":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode storage ref)"}},"id":3795,"indexExpression":{"expression":{"baseExpression":{"id":3791,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"2413:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3793,"indexExpression":{"id":3792,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"2426:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2413:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2429:4:14","memberName":"code","nodeType":"MemberAccess","referencedDeclaration":3630,"src":"2413:20:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2385:49:14","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3638_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"baseExpression":{"id":3797,"name":"institutions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"2479:12:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory[] memory"}},"id":3799,"indexExpression":{"id":3798,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"2492:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2479:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_memory_ptr","typeString":"struct PaycrestSettingManager.Institution memory"}},"id":3800,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2495:4:14","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3632,"src":"2479:20:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3801,"name":"currency","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3760,"src":"2511:8:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3796,"name":"InstitutionByCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"2437:17:14","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_InstitutionByCode_$3638_storage_ptr_$","typeString":"type(struct PaycrestSettingManager.InstitutionByCode storage pointer)"}},"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2473:4:14","2501:8:14"],"names":["name","currency"],"nodeType":"FunctionCall","src":"2437:97:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3638_memory_ptr","typeString":"struct PaycrestSettingManager.InstitutionByCode memory"}},"src":"2385:149:14","typeDescriptions":{"typeIdentifier":"t_struct$_InstitutionByCode_$3638_storage","typeString":"struct PaycrestSettingManager.InstitutionByCode storage ref"}},"id":3804,"nodeType":"ExpressionStatement","src":"2385:149:14"},{"id":3808,"nodeType":"UncheckedBlock","src":"2548:46:14","statements":[{"expression":{"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2576:3:14","subExpression":{"id":3805,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"2576:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3807,"nodeType":"ExpressionStatement","src":"2576:3:14"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3778,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"2290:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3779,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3770,"src":"2294:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2290:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3810,"initializationExpression":{"assignments":[3775],"declarations":[{"constant":false,"id":3775,"mutability":"mutable","name":"i","nameLocation":"2283:1:14","nodeType":"VariableDeclaration","scope":3810,"src":"2278:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3774,"name":"uint","nodeType":"ElementaryTypeName","src":"2278:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3777,"initialValue":{"hexValue":"30","id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2287:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2278:10:14"},"nodeType":"ForStatement","src":"2273:331:14"}]},"functionSelector":"32200882","id":3812,"implemented":true,"kind":"function","modifiers":[{"id":3767,"kind":"modifierInvocation","modifierName":{"id":3766,"name":"onlyOwner","nameLocations":["2206:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2206:9:14"},"nodeType":"ModifierInvocation","src":"2206:9:14"}],"name":"setSupportedInstitutions","nameLocation":"2119:24:14","nodeType":"FunctionDefinition","parameters":{"id":3765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3760,"mutability":"mutable","name":"currency","nameLocation":"2152:8:14","nodeType":"VariableDeclaration","scope":3812,"src":"2144:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3759,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2144:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3764,"mutability":"mutable","name":"institutions","nameLocation":"2183:12:14","nodeType":"VariableDeclaration","scope":3812,"src":"2162:33:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","typeString":"struct PaycrestSettingManager.Institution[]"},"typeName":{"baseType":{"id":3762,"nodeType":"UserDefinedTypeName","pathNode":{"id":3761,"name":"Institution","nameLocations":["2162:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":3633,"src":"2162:11:14"},"referencedDeclaration":3633,"src":"2162:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_Institution_$3633_storage_ptr","typeString":"struct PaycrestSettingManager.Institution"}},"id":3763,"nodeType":"ArrayTypeName","src":"2162:13:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Institution_$3633_storage_$dyn_storage_ptr","typeString":"struct PaycrestSettingManager.Institution[]"}},"visibility":"internal"}],"src":"2143:53:14"},"returnParameters":{"id":3768,"nodeType":"ParameterList","parameters":[],"src":"2216:0:14"},"scope":3872,"src":"2110:500:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3834,"nodeType":"Block","src":"2722:179:14","statements":[{"expression":{"id":3823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3821,"name":"protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"2732:18:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3822,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2753:19:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2732:40:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":3824,"nodeType":"ExpressionStatement","src":"2732:40:14"},{"expression":{"id":3827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3825,"name":"validatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"2782:19:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3826,"name":"_validatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"2804:20:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"2782:42:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":3828,"nodeType":"ExpressionStatement","src":"2782:42:14"},{"eventCall":{"arguments":[{"id":3830,"name":"_protocolFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2852:19:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},{"id":3831,"name":"_validatorFeePercent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3816,"src":"2873:20:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint128","typeString":"uint128"},{"typeIdentifier":"t_uint128","typeString":"uint128"}],"id":3829,"name":"PaycrestFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3706,"src":"2839:12:14","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint128_$_t_uint128_$returns$__$","typeString":"function (uint128,uint128)"}},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2839:55:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3833,"nodeType":"EmitStatement","src":"2834:60:14"}]},"functionSelector":"f5326b19","id":3835,"implemented":true,"kind":"function","modifiers":[{"id":3819,"kind":"modifierInvocation","modifierName":{"id":3818,"name":"onlyOwner","nameLocations":["2712:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2712:9:14"},"nodeType":"ModifierInvocation","src":"2712:9:14"}],"name":"updateProtocolFees","nameLocation":"2625:18:14","nodeType":"FunctionDefinition","parameters":{"id":3817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3814,"mutability":"mutable","name":"_protocolFeePercent","nameLocation":"2652:19:14","nodeType":"VariableDeclaration","scope":3835,"src":"2644:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3813,"name":"uint128","nodeType":"ElementaryTypeName","src":"2644:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":3816,"mutability":"mutable","name":"_validatorFeePercent","nameLocation":"2681:20:14","nodeType":"VariableDeclaration","scope":3835,"src":"2673:28:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3815,"name":"uint128","nodeType":"ElementaryTypeName","src":"2673:7:14","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"2643:59:14"},"returnParameters":{"id":3820,"nodeType":"ParameterList","parameters":[],"src":"2722:0:14"},"scope":3872,"src":"2616:285:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3870,"nodeType":"Block","src":"2988:180:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"3002:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3019:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3011:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3845,"name":"address","nodeType":"ElementaryTypeName","src":"3011:7:14","typeDescriptions":{}}},"id":3848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3011:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3002:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3853,"nodeType":"IfStatement","src":"2998:50:14","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3850,"name":"ThrowZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3670,"src":"3030:16:14","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3030:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3852,"nodeType":"RevertStatement","src":"3023:25:14"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3854,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"3062:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"666565","id":3855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3070:5:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02","typeString":"literal_string \"fee\""},"value":"fee"},"src":"3062:13:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3861,"nodeType":"IfStatement","src":"3058:39:14","trueBody":{"expression":{"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3857,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"3077:12:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"3092:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3077:20:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3860,"nodeType":"ExpressionStatement","src":"3077:20:14"}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3862,"name":"what","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3837,"src":"3111:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"61676772656761746f72","id":3863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3119:12:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_e124d7cc79a19705865fa21b784ba187cd393559e960c0c071132cb60354d1a3","typeString":"literal_string \"aggregator\""},"value":"aggregator"},"src":"3111:20:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3869,"nodeType":"IfStatement","src":"3107:54:14","trueBody":{"expression":{"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3865,"name":"_liquidityAggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"3133:20:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3866,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3839,"src":"3156:5:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3133:28:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3868,"nodeType":"ExpressionStatement","src":"3133:28:14"}}]},"functionSelector":"79a0effb","id":3871,"implemented":true,"kind":"function","modifiers":[{"id":3842,"kind":"modifierInvocation","modifierName":{"id":3841,"name":"onlyOwner","nameLocations":["2978:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2978:9:14"},"nodeType":"ModifierInvocation","src":"2978:9:14"}],"name":"updateProtocolAddresses","nameLocation":"2916:23:14","nodeType":"FunctionDefinition","parameters":{"id":3840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3837,"mutability":"mutable","name":"what","nameLocation":"2948:4:14","nodeType":"VariableDeclaration","scope":3871,"src":"2940:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3836,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2940:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3839,"mutability":"mutable","name":"value","nameLocation":"2962:5:14","nodeType":"VariableDeclaration","scope":3871,"src":"2954:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3838,"name":"address","nodeType":"ElementaryTypeName","src":"2954:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:29:14"},"returnParameters":{"id":3843,"nodeType":"ParameterList","parameters":[],"src":"2988:0:14"},"scope":3872,"src":"2907:261:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3873,"src":"139:3032:14","usedErrors":[3670,3673,3678,3681,3684]}],"src":"38:3134:14"},"id":14},"contracts/PaycrestValidator.sol":{"ast":{"absolutePath":"contracts/PaycrestValidator.sol","exportedSymbols":{"AddressUpgradeable":[1204],"ContextUpgradeable":[1246],"IERC20PermitUpgradeable":[498],"IERC20Upgradeable":[462],"Initializable":[300],"OwnableUpgradeable":[131],"PaycrestValidator":[4195],"ReentrancyGuardUpgradeable":[384],"SafeERC20Upgradeable":[874]},"id":4196,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":3874,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:15"},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol","id":3875,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4196,"sourceUnit":463,"src":"62:80:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":3876,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4196,"sourceUnit":132,"src":"143:75:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol","id":3877,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4196,"sourceUnit":875,"src":"219:88:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol","id":3878,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4196,"sourceUnit":385,"src":"308:85:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3879,"name":"OwnableUpgradeable","nameLocations":["425:18:15"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"425:18:15"},"id":3880,"nodeType":"InheritanceSpecifier","src":"425:18:15"},{"baseName":{"id":3881,"name":"ReentrancyGuardUpgradeable","nameLocations":["445:26:15"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"445:26:15"},"id":3882,"nodeType":"InheritanceSpecifier","src":"445:26:15"}],"canonicalName":"PaycrestValidator","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4195,"linearizedBaseContracts":[4195,384,131,1246,300],"name":"PaycrestValidator","nameLocation":"404:17:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3886,"libraryName":{"id":3883,"name":"SafeERC20Upgradeable","nameLocations":["485:20:15"],"nodeType":"IdentifierPath","referencedDeclaration":874,"src":"485:20:15"},"nodeType":"UsingForDirective","src":"479:49:15","typeName":{"id":3885,"nodeType":"UserDefinedTypeName","pathNode":{"id":3884,"name":"IERC20Upgradeable","nameLocations":["510:17:15"],"nodeType":"IdentifierPath","referencedDeclaration":462,"src":"510:17:15"},"referencedDeclaration":462,"src":"510:17:15","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}}},{"constant":false,"id":3888,"mutability":"mutable","name":"Paycrest","nameLocation":"554:8:15","nodeType":"VariableDeclaration","scope":4195,"src":"538:24:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3887,"name":"address","nodeType":"ElementaryTypeName","src":"538:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":3890,"mutability":"mutable","name":"initialization","nameLocation":"585:14:15","nodeType":"VariableDeclaration","scope":4195,"src":"572:27:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3889,"name":"bool","nodeType":"ElementaryTypeName","src":"572:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"constant":false,"id":3894,"mutability":"mutable","name":"minimumAmount","nameLocation":"641:13:15","nodeType":"VariableDeclaration","scope":4195,"src":"605:49:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3893,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3891,"name":"address","nodeType":"ElementaryTypeName","src":"613:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"605:27:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3892,"name":"uint256","nodeType":"ElementaryTypeName","src":"624:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":3900,"mutability":"mutable","name":"_balance","nameLocation":"717:8:15","nodeType":"VariableDeclaration","scope":4195,"src":"660:65:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":3899,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3895,"name":"address","nodeType":"ElementaryTypeName","src":"668:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"660:48:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3898,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3896,"name":"address","nodeType":"ElementaryTypeName","src":"688:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"679:28:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3897,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":3904,"mutability":"mutable","name":"__gap","nameLocation":"751:5:15","nodeType":"VariableDeclaration","scope":4195,"src":"731:25:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":3901,"name":"uint256","nodeType":"ElementaryTypeName","src":"731:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3903,"length":{"hexValue":"3530","id":3902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"739:2:15","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"731:11:15","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"},{"body":{"id":3911,"nodeType":"Block","src":"830:39:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3908,"name":"_disableInitializers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"840:20:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"840:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3910,"nodeType":"ExpressionStatement","src":"840:22:15"}]},"documentation":{"id":3905,"nodeType":"StructuredDocumentation","src":"763:48:15","text":"@custom:oz-upgrades-unsafe-allow constructor"},"id":3912,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3906,"nodeType":"ParameterList","parameters":[],"src":"827:2:15"},"returnParameters":{"id":3907,"nodeType":"ParameterList","parameters":[],"src":"830:0:15"},"scope":4195,"src":"816:53:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3933,"nodeType":"Block","src":"935:135:15","statements":[{"expression":{"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3919,"name":"Paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"949:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3920,"name":"_paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"960:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"949:20:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3922,"nodeType":"ExpressionStatement","src":"949:20:15"},{"expression":{"id":3925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3923,"name":"initialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3890,"src":"982:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"999:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"982:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3926,"nodeType":"ExpressionStatement","src":"982:21:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3927,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"1013:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1013:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3929,"nodeType":"ExpressionStatement","src":"1013:16:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3930,"name":"__ReentrancyGuard_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"1039:22:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1039:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3932,"nodeType":"ExpressionStatement","src":"1039:24:15"}]},"functionSelector":"c4d66de8","id":3934,"implemented":true,"kind":"function","modifiers":[{"id":3917,"kind":"modifierInvocation","modifierName":{"id":3916,"name":"initializer","nameLocations":["923:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":202,"src":"923:11:15"},"nodeType":"ModifierInvocation","src":"923:11:15"}],"name":"initialize","nameLocation":"884:10:15","nodeType":"FunctionDefinition","parameters":{"id":3915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3914,"mutability":"mutable","name":"_paycrest","nameLocation":"903:9:15","nodeType":"VariableDeclaration","scope":3934,"src":"895:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3913,"name":"address","nodeType":"ElementaryTypeName","src":"895:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"894:19:15"},"returnParameters":{"id":3918,"nodeType":"ParameterList","parameters":[],"src":"935:0:15"},"scope":4195,"src":"875:195:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"eventSelector":"d0380f7d3d322fabf37539b9c6b985c069348a14121a426f3cceb8b5a93cd9ab","id":3940,"name":"NewTokenSupported","nameLocation":"1082:17:15","nodeType":"EventDefinition","parameters":{"id":3939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"1116:5:15","nodeType":"VariableDeclaration","scope":3940,"src":"1100:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3935,"name":"address","nodeType":"ElementaryTypeName","src":"1100:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3938,"indexed":true,"mutability":"mutable","name":"minimumStakeAmount","nameLocation":"1139:18:15","nodeType":"VariableDeclaration","scope":3940,"src":"1123:34:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3937,"name":"uint256","nodeType":"ElementaryTypeName","src":"1123:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1099:59:15"},"src":"1076:83:15"},{"anonymous":false,"eventSelector":"debf9dd297d3980055770d6c047a67eed8f6b1e91397831703b5f2a73bec1320","id":3944,"name":"Initialized","nameLocation":"1170:11:15","nodeType":"EventDefinition","parameters":{"id":3943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3942,"indexed":true,"mutability":"mutable","name":"status","nameLocation":"1195:6:15","nodeType":"VariableDeclaration","scope":3944,"src":"1182:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3941,"name":"bool","nodeType":"ElementaryTypeName","src":"1182:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1181:21:15"},"src":"1164:39:15"},{"anonymous":false,"eventSelector":"9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d","id":3950,"name":"Staked","nameLocation":"1214:6:15","nodeType":"EventDefinition","parameters":{"id":3949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3946,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1237:4:15","nodeType":"VariableDeclaration","scope":3950,"src":"1221:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3945,"name":"address","nodeType":"ElementaryTypeName","src":"1221:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3948,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1259:6:15","nodeType":"VariableDeclaration","scope":3950,"src":"1243:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3947,"name":"uint256","nodeType":"ElementaryTypeName","src":"1243:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1220:46:15"},"src":"1208:59:15"},{"anonymous":false,"eventSelector":"7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5","id":3956,"name":"Withdrawn","nameLocation":"1278:9:15","nodeType":"EventDefinition","parameters":{"id":3955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3952,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1304:4:15","nodeType":"VariableDeclaration","scope":3956,"src":"1288:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3951,"name":"address","nodeType":"ElementaryTypeName","src":"1288:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3954,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1326:6:15","nodeType":"VariableDeclaration","scope":3956,"src":"1310:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3953,"name":"uint256","nodeType":"ElementaryTypeName","src":"1310:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1287:46:15"},"src":"1272:62:15"},{"anonymous":false,"eventSelector":"11ff273d7118e74553c17c252f7ca4a9c4bc57aa9939391776a348e5b388f6f7","id":3966,"name":"RewardValidators","nameLocation":"1345:16:15","nodeType":"EventDefinition","parameters":{"id":3965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3958,"indexed":false,"mutability":"mutable","name":"orderId","nameLocation":"1379:7:15","nodeType":"VariableDeclaration","scope":3966,"src":"1371:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1371:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3960,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"1405:5:15","nodeType":"VariableDeclaration","scope":3966,"src":"1397:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3959,"name":"address","nodeType":"ElementaryTypeName","src":"1397:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3962,"indexed":true,"mutability":"mutable","name":"validator","nameLocation":"1437:9:15","nodeType":"VariableDeclaration","scope":3966,"src":"1421:25:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3961,"name":"address","nodeType":"ElementaryTypeName","src":"1421:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3964,"indexed":true,"mutability":"mutable","name":"validatorsReward","nameLocation":"1473:16:15","nodeType":"VariableDeclaration","scope":3966,"src":"1457:32:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3963,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1361:134:15"},"src":"1339:157:15"},{"body":{"id":3977,"nodeType":"Block","src":"1526:99:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3969,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1544:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1548:6:15","memberName":"sender","nodeType":"MemberAccess","src":"1544:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3971,"name":"Paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"1558:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1544:22:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792050617963726573742063616e2063616c6c20746869732066756e6374696f6e","id":3973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1568:38:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e5ecea4660f91d7b219c48532ec86a374c9bb86134e9982698bb2b40f70bdbf","typeString":"literal_string \"Only Paycrest can call this function\""},"value":"Only Paycrest can call this function"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8e5ecea4660f91d7b219c48532ec86a374c9bb86134e9982698bb2b40f70bdbf","typeString":"literal_string \"Only Paycrest can call this function\""}],"id":3968,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1536:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:71:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3975,"nodeType":"ExpressionStatement","src":"1536:71:15"},{"id":3976,"nodeType":"PlaceholderStatement","src":"1617:1:15"}]},"id":3978,"name":"OnlyPaycrest","nameLocation":"1511:12:15","nodeType":"ModifierDefinition","parameters":{"id":3967,"nodeType":"ParameterList","parameters":[],"src":"1523:2:15"},"src":"1502:123:15","virtual":false,"visibility":"internal"},{"body":{"id":3998,"nodeType":"Block","src":"1729:119:15","statements":[{"expression":{"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3987,"name":"minimumAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3894,"src":"1739:13:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3989,"indexExpression":{"id":3988,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"1753:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1739:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3990,"name":"minimumStakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"1763:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1739:42:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3992,"nodeType":"ExpressionStatement","src":"1739:42:15"},{"eventCall":{"arguments":[{"id":3994,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3980,"src":"1814:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3995,"name":"minimumStakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"1822:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3993,"name":"NewTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"1796:17:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1796:45:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3997,"nodeType":"EmitStatement","src":"1791:50:15"}]},"functionSelector":"f239c626","id":3999,"implemented":true,"kind":"function","modifiers":[{"id":3985,"kind":"modifierInvocation","modifierName":{"id":3984,"name":"onlyOwner","nameLocations":["1719:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1719:9:15"},"nodeType":"ModifierInvocation","src":"1719:9:15"}],"name":"setMinimumAmountForTokens","nameLocation":"1640:25:15","nodeType":"FunctionDefinition","parameters":{"id":3983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3980,"mutability":"mutable","name":"_token","nameLocation":"1674:6:15","nodeType":"VariableDeclaration","scope":3999,"src":"1666:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3979,"name":"address","nodeType":"ElementaryTypeName","src":"1666:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3982,"mutability":"mutable","name":"minimumStakeAmount","nameLocation":"1690:18:15","nodeType":"VariableDeclaration","scope":3999,"src":"1682:26:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3981,"name":"uint256","nodeType":"ElementaryTypeName","src":"1682:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1665:44:15"},"returnParameters":{"id":3986,"nodeType":"ParameterList","parameters":[],"src":"1729:0:15"},"scope":4195,"src":"1631:217:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4014,"nodeType":"Block","src":"1907:74:15","statements":[{"expression":{"id":4008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4006,"name":"initialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3890,"src":"1917:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4007,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"1934:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1917:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4009,"nodeType":"ExpressionStatement","src":"1917:23:15"},{"eventCall":{"arguments":[{"id":4011,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"1967:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4010,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[3944,146],"referencedDeclaration":3944,"src":"1955:11:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bool_$returns$__$","typeString":"function (bool)"}},"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1955:19:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4013,"nodeType":"EmitStatement","src":"1950:24:15"}]},"functionSelector":"c4a0bb07","id":4015,"implemented":true,"kind":"function","modifiers":[{"id":4004,"kind":"modifierInvocation","modifierName":{"id":4003,"name":"onlyOwner","nameLocations":["1897:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"1897:9:15"},"nodeType":"ModifierInvocation","src":"1897:9:15"}],"name":"initialized","nameLocation":"1863:11:15","nodeType":"FunctionDefinition","parameters":{"id":4002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4001,"mutability":"mutable","name":"status","nameLocation":"1880:6:15","nodeType":"VariableDeclaration","scope":4015,"src":"1875:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4000,"name":"bool","nodeType":"ElementaryTypeName","src":"1875:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1874:13:15"},"returnParameters":{"id":4005,"nodeType":"ParameterList","parameters":[],"src":"1907:0:15"},"scope":4195,"src":"1854:127:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4071,"nodeType":"Block","src":"2043:396:15","statements":[{"expression":{"arguments":[{"id":4023,"name":"initialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3890,"src":"2061:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a6174696f6e20697320706175736564","id":4024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2077:26:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d","typeString":"literal_string \"Initialization is paused\""},"value":"Initialization is paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d","typeString":"literal_string \"Initialization is paused\""}],"id":4022,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2053:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2053:51:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4026,"nodeType":"ExpressionStatement","src":"2053:51:15"},{"expression":{"arguments":[{"arguments":[{"id":4029,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"2140:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4028,"name":"_isTokenSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4150,"src":"2122:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2122:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"546f6b656e206973206e6f7420737570706f72746564","id":4031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2148:24:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54","typeString":"literal_string \"Token is not supported\""},"value":"Token is not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54","typeString":"literal_string \"Token is not supported\""}],"id":4027,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2114:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2114:59:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4033,"nodeType":"ExpressionStatement","src":"2114:59:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4035,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"2191:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"baseExpression":{"id":4036,"name":"minimumAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3894,"src":"2201:13:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4038,"indexExpression":{"id":4037,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"2215:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2201:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2191:30:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416d6f756e74206973206c657373207468616e206d696e696d756d207265717569726564","id":4040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2223:38:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae","typeString":"literal_string \"Amount is less than minimum required\""},"value":"Amount is less than minimum required"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae","typeString":"literal_string \"Amount is less than minimum required\""}],"id":4034,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2183:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2183:79:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4042,"nodeType":"ExpressionStatement","src":"2183:79:15"},{"expression":{"arguments":[{"expression":{"id":4047,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2310:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2314:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2310:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4051,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2330:4:15","typeDescriptions":{"typeIdentifier":"t_contract$_PaycrestValidator_$4195","typeString":"contract PaycrestValidator"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_PaycrestValidator_$4195","typeString":"contract PaycrestValidator"}],"id":4050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2322:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4049,"name":"address","nodeType":"ElementaryTypeName","src":"2322:7:15","typeDescriptions":{}}},"id":4052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2322:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4053,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"2337:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4044,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"2290:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4043,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"2272:17:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$462_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2272:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2297:12:15","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":461,"src":"2272:37:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2272:72:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4055,"nodeType":"ExpressionStatement","src":"2272:72:15"},{"expression":{"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4056,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"2354:8:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4060,"indexExpression":{"expression":{"id":4057,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2363:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2354:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4061,"indexExpression":{"id":4059,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4017,"src":"2375:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2354:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":4062,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"2385:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2354:37:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4064,"nodeType":"ExpressionStatement","src":"2354:37:15"},{"eventCall":{"arguments":[{"expression":{"id":4066,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2413:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2417:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2413:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4068,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4019,"src":"2425:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4065,"name":"Staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"2406:6:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2406:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4070,"nodeType":"EmitStatement","src":"2401:31:15"}]},"functionSelector":"adc9772e","id":4072,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nameLocation":"1996:5:15","nodeType":"FunctionDefinition","parameters":{"id":4020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4017,"mutability":"mutable","name":"token","nameLocation":"2010:5:15","nodeType":"VariableDeclaration","scope":4072,"src":"2002:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4016,"name":"address","nodeType":"ElementaryTypeName","src":"2002:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4019,"mutability":"mutable","name":"amount","nameLocation":"2025:6:15","nodeType":"VariableDeclaration","scope":4072,"src":"2017:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4018,"name":"uint256","nodeType":"ElementaryTypeName","src":"2017:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2001:31:15"},"returnParameters":{"id":4021,"nodeType":"ParameterList","parameters":[],"src":"2043:0:15"},"scope":4195,"src":"1987:452:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4122,"nodeType":"Block","src":"2537:305:15","statements":[{"assignments":[4084],"declarations":[{"constant":false,"id":4084,"mutability":"mutable","name":"previouslyStakedAmount","nameLocation":"2555:22:15","nodeType":"VariableDeclaration","scope":4122,"src":"2547:30:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4083,"name":"uint256","nodeType":"ElementaryTypeName","src":"2547:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4091,"initialValue":{"baseExpression":{"baseExpression":{"id":4085,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"2580:8:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4088,"indexExpression":{"expression":{"id":4086,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2589:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2593:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2589:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2580:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4090,"indexExpression":{"id":4089,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4076,"src":"2601:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2580:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2547:60:15"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4093,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"2625:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4094,"name":"previouslyStakedAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4084,"src":"2635:22:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2625:32:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742062616c616e6365","id":4096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2659:22:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""},"value":"Insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","typeString":"literal_string \"Insufficient balance\""}],"id":4092,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2617:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2617:65:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4098,"nodeType":"ExpressionStatement","src":"2617:65:15"},{"expression":{"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4099,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"2692:8:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4103,"indexExpression":{"expression":{"id":4100,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2701:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2705:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2701:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2692:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4104,"indexExpression":{"id":4102,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4076,"src":"2713:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2692:27:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":4105,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"2723:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2692:37:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4107,"nodeType":"ExpressionStatement","src":"2692:37:15"},{"expression":{"arguments":[{"id":4112,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4078,"src":"2773:9:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4113,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"2784:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4109,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4076,"src":"2757:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4108,"name":"IERC20Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"2739:17:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Upgradeable_$462_$","typeString":"type(contract IERC20Upgradeable)"}},"id":4110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:24:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Upgradeable_$462","typeString":"contract IERC20Upgradeable"}},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2764:8:15","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":429,"src":"2739:33:15","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:52:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4115,"nodeType":"ExpressionStatement","src":"2739:52:15"},{"eventCall":{"arguments":[{"expression":{"id":4117,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2816:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2820:6:15","memberName":"sender","nodeType":"MemberAccess","src":"2816:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4119,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"2828:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4116,"name":"Withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3956,"src":"2806:9:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:29:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4121,"nodeType":"EmitStatement","src":"2801:34:15"}]},"functionSelector":"b460af94","id":4123,"implemented":true,"kind":"function","modifiers":[{"arguments":[],"id":4081,"kind":"modifierInvocation","modifierName":{"id":4080,"name":"nonReentrant","nameLocations":["2522:12:15"],"nodeType":"IdentifierPath","referencedDeclaration":344,"src":"2522:12:15"},"nodeType":"ModifierInvocation","src":"2522:14:15"}],"name":"withdraw","nameLocation":"2454:8:15","nodeType":"FunctionDefinition","parameters":{"id":4079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4074,"mutability":"mutable","name":"amount","nameLocation":"2471:6:15","nodeType":"VariableDeclaration","scope":4123,"src":"2463:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4073,"name":"uint256","nodeType":"ElementaryTypeName","src":"2463:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4076,"mutability":"mutable","name":"token","nameLocation":"2487:5:15","nodeType":"VariableDeclaration","scope":4123,"src":"2479:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4075,"name":"address","nodeType":"ElementaryTypeName","src":"2479:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4078,"mutability":"mutable","name":"recipient","nameLocation":"2502:9:15","nodeType":"VariableDeclaration","scope":4123,"src":"2494:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4077,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2462:50:15"},"returnParameters":{"id":4082,"nodeType":"ParameterList","parameters":[],"src":"2537:0:15"},"scope":4195,"src":"2445:397:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4149,"nodeType":"Block","src":"2917:166:15","statements":[{"assignments":[null,4131],"declarations":[null,{"constant":false,"id":4131,"mutability":"mutable","name":"result","nameLocation":"2943:6:15","nodeType":"VariableDeclaration","scope":4149,"src":"2930:19:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4130,"name":"bytes","nodeType":"ElementaryTypeName","src":"2930:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4140,"initialValue":{"arguments":[{"arguments":[{"hexValue":"6973546f6b656e537570706f72746564286164647265737329","id":4136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2997:27:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_75151b637ccccb94db67ae177f374b59bb2a98f44c1e715a24ea211cbd5394f0","typeString":"literal_string \"isTokenSupported(address)\""},"value":"isTokenSupported(address)"},{"id":4137,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"3026:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_75151b637ccccb94db67ae177f374b59bb2a98f44c1e715a24ea211cbd5394f0","typeString":"literal_string \"isTokenSupported(address)\""},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4134,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2973:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2977:19:15","memberName":"encodeWithSignature","nodeType":"MemberAccess","src":"2973:23:15","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithsignature_pure$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (string memory) pure returns (bytes memory)"}},"id":4138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2973:59:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4132,"name":"Paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"2953:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2962:10:15","memberName":"staticcall","nodeType":"MemberAccess","src":"2953:19:15","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":4139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2953:80:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2927:106:15"},{"expression":{"arguments":[{"id":4143,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4131,"src":"3061:6:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3070:4:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":4144,"name":"bool","nodeType":"ElementaryTypeName","src":"3070:4:15","typeDescriptions":{}}}],"id":4146,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3069:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":4141,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3050:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3054:6:15","memberName":"decode","nodeType":"MemberAccess","src":"3050:10:15","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3050:26:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4129,"id":4148,"nodeType":"Return","src":"3043:33:15"}]},"id":4150,"implemented":true,"kind":"function","modifiers":[],"name":"_isTokenSupported","nameLocation":"2857:17:15","nodeType":"FunctionDefinition","parameters":{"id":4126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4125,"mutability":"mutable","name":"token","nameLocation":"2883:5:15","nodeType":"VariableDeclaration","scope":4150,"src":"2875:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4124,"name":"address","nodeType":"ElementaryTypeName","src":"2875:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2874:15:15"},"returnParameters":{"id":4129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4150,"src":"2911:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4127,"name":"bool","nodeType":"ElementaryTypeName","src":"2911:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2910:6:15"},"scope":4195,"src":"2848:235:15","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":4157,"nodeType":"Block","src":"3143:32:15","statements":[{"expression":{"id":4155,"name":"Paycrest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3888,"src":"3160:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4154,"id":4156,"nodeType":"Return","src":"3153:15:15"}]},"functionSelector":"c56f80c1","id":4158,"implemented":true,"kind":"function","modifiers":[],"name":"getPaycrest","nameLocation":"3098:11:15","nodeType":"FunctionDefinition","parameters":{"id":4151,"nodeType":"ParameterList","parameters":[],"src":"3109:2:15"},"returnParameters":{"id":4154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4158,"src":"3134:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4152,"name":"address","nodeType":"ElementaryTypeName","src":"3134:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3133:9:15"},"scope":4195,"src":"3089:86:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4165,"nodeType":"Block","src":"3243:38:15","statements":[{"expression":{"id":4163,"name":"initialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3890,"src":"3260:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4162,"id":4164,"nodeType":"Return","src":"3253:21:15"}]},"functionSelector":"c2b4610b","id":4166,"implemented":true,"kind":"function","modifiers":[],"name":"getInitializationState","nameLocation":"3190:22:15","nodeType":"FunctionDefinition","parameters":{"id":4159,"nodeType":"ParameterList","parameters":[],"src":"3212:2:15"},"returnParameters":{"id":4162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4166,"src":"3237:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4160,"name":"bool","nodeType":"ElementaryTypeName","src":"3237:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3236:6:15"},"scope":4195,"src":"3181:100:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4177,"nodeType":"Block","src":"3370:44:15","statements":[{"expression":{"baseExpression":{"id":4173,"name":"minimumAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3894,"src":"3387:13:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4175,"indexExpression":{"id":4174,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"3401:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3387:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4172,"id":4176,"nodeType":"Return","src":"3380:27:15"}]},"functionSelector":"e74599f3","id":4178,"implemented":true,"kind":"function","modifiers":[],"name":"getMinimumAmountRequiredFor","nameLocation":"3296:27:15","nodeType":"FunctionDefinition","parameters":{"id":4169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4168,"mutability":"mutable","name":"token","nameLocation":"3332:5:15","nodeType":"VariableDeclaration","scope":4178,"src":"3324:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4167,"name":"address","nodeType":"ElementaryTypeName","src":"3324:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3323:15:15"},"returnParameters":{"id":4172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4178,"src":"3361:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4170,"name":"uint256","nodeType":"ElementaryTypeName","src":"3361:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3360:9:15"},"scope":4195,"src":"3287:127:15","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4193,"nodeType":"Block","src":"3506:45:15","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4187,"name":"_balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"3523:8:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":4189,"indexExpression":{"id":4188,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"3532:4:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3523:14:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4191,"indexExpression":{"id":4190,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"3538:5:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3523:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4186,"id":4192,"nodeType":"Return","src":"3516:28:15"}]},"functionSelector":"c5923aaf","id":4194,"implemented":true,"kind":"function","modifiers":[],"name":"getValidatorInfo","nameLocation":"3429:16:15","nodeType":"FunctionDefinition","parameters":{"id":4183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4180,"mutability":"mutable","name":"user","nameLocation":"3454:4:15","nodeType":"VariableDeclaration","scope":4194,"src":"3446:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4179,"name":"address","nodeType":"ElementaryTypeName","src":"3446:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4182,"mutability":"mutable","name":"token","nameLocation":"3468:5:15","nodeType":"VariableDeclaration","scope":4194,"src":"3460:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4181,"name":"address","nodeType":"ElementaryTypeName","src":"3460:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3445:29:15"},"returnParameters":{"id":4186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4194,"src":"3497:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4184,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3496:9:15"},"scope":4195,"src":"3420:131:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4196,"src":"395:3159:15","usedErrors":[]}],"src":"38:3517:15"},"id":15},"contracts/interface/IPaycrest.sol":{"ast":{"absolutePath":"contracts/interface/IPaycrest.sol","exportedSymbols":{"IERC20":[2890],"IPaycrest":[4385]},"id":4386,"license":"UNLICENSED","nodeType":"SourceUnit","nodes":[{"id":4197,"literals":["solidity","0.8",".18"],"nodeType":"PragmaDirective","src":"38:23:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4199,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4386,"sourceUnit":2891,"src":"63:70:16","symbolAliases":[{"foreign":{"id":4198,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"71:6:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPaycrest","contractDependencies":[],"contractKind":"interface","documentation":{"id":4200,"nodeType":"StructuredDocumentation","src":"134:130:16","text":" @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\n Factory and global config params"},"fullyImplemented":false,"id":4385,"linearizedBaseContracts":[4385],"name":"IPaycrest","nameLocation":"275:9:16","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":4201,"nodeType":"StructuredDocumentation","src":"483:38:16","text":"@dev Emitted when deposit is made."},"eventSelector":"34e33f86eb59d668184e1f86aeb03ed25f4ce72216218ed02db752f21c6a4042","id":4215,"name":"Deposit","nameLocation":"532:7:16","nodeType":"EventDefinition","parameters":{"id":4214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4203,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"556:5:16","nodeType":"VariableDeclaration","scope":4215,"src":"540:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4202,"name":"address","nodeType":"ElementaryTypeName","src":"540:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4205,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"579:6:16","nodeType":"VariableDeclaration","scope":4215,"src":"563:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4204,"name":"uint256","nodeType":"ElementaryTypeName","src":"563:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4207,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"603:7:16","nodeType":"VariableDeclaration","scope":4215,"src":"587:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4206,"name":"bytes32","nodeType":"ElementaryTypeName","src":"587:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4209,"indexed":false,"mutability":"mutable","name":"rate","nameLocation":"620:4:16","nodeType":"VariableDeclaration","scope":4215,"src":"612:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4208,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4211,"indexed":false,"mutability":"mutable","name":"institutionCode","nameLocation":"634:15:16","nodeType":"VariableDeclaration","scope":4215,"src":"626:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4210,"name":"bytes32","nodeType":"ElementaryTypeName","src":"626:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4213,"indexed":false,"mutability":"mutable","name":"messageHash","nameLocation":"658:11:16","nodeType":"VariableDeclaration","scope":4215,"src":"651:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4212,"name":"string","nodeType":"ElementaryTypeName","src":"651:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"539:131:16"},"src":"526:145:16"},{"anonymous":false,"documentation":{"id":4216,"nodeType":"StructuredDocumentation","src":"676:52:16","text":"@dev Emitted when aggregator settle transaction."},"eventSelector":"7b5664d3710676924bf38f3d89d38a62db3aa5fca4213adf6fa36e51c3cfc854","id":4226,"name":"Settled","nameLocation":"739:7:16","nodeType":"EventDefinition","parameters":{"id":4225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4218,"indexed":false,"mutability":"mutable","name":"_splitOrderId","nameLocation":"755:13:16","nodeType":"VariableDeclaration","scope":4226,"src":"747:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"747:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4220,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"786:7:16","nodeType":"VariableDeclaration","scope":4226,"src":"770:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"770:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4222,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nameLocation":"811:17:16","nodeType":"VariableDeclaration","scope":4226,"src":"795:33:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4221,"name":"address","nodeType":"ElementaryTypeName","src":"795:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4224,"indexed":false,"mutability":"mutable","name":"settlePercent","nameLocation":"837:13:16","nodeType":"VariableDeclaration","scope":4226,"src":"830:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4223,"name":"uint96","nodeType":"ElementaryTypeName","src":"830:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"746:105:16"},"src":"733:119:16"},{"anonymous":false,"documentation":{"id":4227,"nodeType":"StructuredDocumentation","src":"857:52:16","text":"@dev Emitted when aggregator refund transaction."},"eventSelector":"fe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf0","id":4231,"name":"Refunded","nameLocation":"920:8:16","nodeType":"EventDefinition","parameters":{"id":4230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4229,"indexed":true,"mutability":"mutable","name":"orderId","nameLocation":"945:7:16","nodeType":"VariableDeclaration","scope":4231,"src":"929:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"929:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"928:25:16"},"src":"914:40:16"},{"anonymous":false,"documentation":{"id":4232,"nodeType":"StructuredDocumentation","src":"959:48:16","text":"@dev Emitted when sender get therir rewards."},"eventSelector":"96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c2","id":4238,"name":"TransferSenderFee","nameLocation":"1018:17:16","nodeType":"EventDefinition","parameters":{"id":4237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4234,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1052:6:16","nodeType":"VariableDeclaration","scope":4238,"src":"1036:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4233,"name":"address","nodeType":"ElementaryTypeName","src":"1036:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4236,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1076:6:16","nodeType":"VariableDeclaration","scope":4238,"src":"1060:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4235,"name":"uint256","nodeType":"ElementaryTypeName","src":"1060:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1035:48:16"},"src":"1012:72:16"},{"anonymous":false,"documentation":{"id":4239,"nodeType":"StructuredDocumentation","src":"1089:59:16","text":"@dev Emitted when primary validator get therir rewards."},"eventSelector":"61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c2","id":4245,"name":"RewardValidator","nameLocation":"1159:15:16","nodeType":"EventDefinition","parameters":{"id":4244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4241,"indexed":true,"mutability":"mutable","name":"validator","nameLocation":"1191:9:16","nodeType":"VariableDeclaration","scope":4245,"src":"1175:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4240,"name":"address","nodeType":"ElementaryTypeName","src":"1175:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4243,"indexed":true,"mutability":"mutable","name":"amount","nameLocation":"1218:6:16","nodeType":"VariableDeclaration","scope":4245,"src":"1202:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1202:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1174:51:16"},"src":"1153:73:16"},{"documentation":{"id":4246,"nodeType":"StructuredDocumentation","src":"1426:51:16","text":"@notice Revert when caller is not an aggregator"},"errorSelector":"e9d82992","id":4248,"name":"OnlyAggregator","nameLocation":"1488:14:16","nodeType":"ErrorDefinition","parameters":{"id":4247,"nodeType":"ParameterList","parameters":[],"src":"1502:2:16"},"src":"1482:23:16"},{"documentation":{"id":4249,"nodeType":"StructuredDocumentation","src":"1510:38:16","text":"@notice Revert with invalid signer"},"errorSelector":"815e1d64","id":4251,"name":"InvalidSigner","nameLocation":"1559:13:16","nodeType":"ErrorDefinition","parameters":{"id":4250,"nodeType":"ParameterList","parameters":[],"src":"1572:2:16"},"src":"1553:22:16"},{"documentation":{"id":4252,"nodeType":"StructuredDocumentation","src":"1580:44:16","text":"@notice Revert when input amount is zero"},"errorSelector":"4d5083a4","id":4254,"name":"Unsuported","nameLocation":"1635:10:16","nodeType":"ErrorDefinition","parameters":{"id":4253,"nodeType":"ParameterList","parameters":[],"src":"1645:2:16"},"src":"1629:19:16"},{"documentation":{"id":4255,"nodeType":"StructuredDocumentation","src":"1653:46:16","text":"@notice Revert when trx has been fulfilled"},"errorSelector":"56f1733f","id":4257,"name":"OrderFulfilled","nameLocation":"1710:14:16","nodeType":"ErrorDefinition","parameters":{"id":4256,"nodeType":"ParameterList","parameters":[],"src":"1724:2:16"},"src":"1704:23:16"},{"documentation":{"id":4258,"nodeType":"StructuredDocumentation","src":"1732:57:16","text":"@notice Revert when rewards are not been distributed."},"errorSelector":"bcb00c16","id":4260,"name":"UnableToProcessRewards","nameLocation":"1800:22:16","nodeType":"ErrorDefinition","parameters":{"id":4259,"nodeType":"ParameterList","parameters":[],"src":"1822:2:16"},"src":"1794:31:16"},{"errorSelector":"38f5fc35","id":4262,"name":"InvalidInstitutionCode","nameLocation":"1836:22:16","nodeType":"ErrorDefinition","parameters":{"id":4261,"nodeType":"ParameterList","parameters":[],"src":"1858:2:16"},"src":"1830:31:16"},{"errorSelector":"584a7938","id":4264,"name":"NotWhitelisted","nameLocation":"1872:14:16","nodeType":"ErrorDefinition","parameters":{"id":4263,"nodeType":"ParameterList","parameters":[],"src":"1886:2:16"},"src":"1866:23:16"},{"canonicalName":"IPaycrest.TransactionMetadata","id":4275,"members":[{"constant":false,"id":4266,"mutability":"mutable","name":"identifier","nameLocation":"2127:10:16","nodeType":"VariableDeclaration","scope":4275,"src":"2120:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4265,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2120:6:16","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4268,"mutability":"mutable","name":"institution","nameLocation":"2246:11:16","nodeType":"VariableDeclaration","scope":4275,"src":"2239:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4267,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2239:6:16","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4270,"mutability":"mutable","name":"name","nameLocation":"2365:4:16","nodeType":"VariableDeclaration","scope":4275,"src":"2358:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4269,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2358:6:16","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4272,"mutability":"mutable","name":"currency","nameLocation":"2484:8:16","nodeType":"VariableDeclaration","scope":4275,"src":"2477:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"},"typeName":{"id":4271,"name":"bytes8","nodeType":"ElementaryTypeName","src":"2477:6:16","typeDescriptions":{"typeIdentifier":"t_bytes8","typeString":"bytes8"}},"visibility":"internal"},{"constant":false,"id":4274,"mutability":"mutable","name":"liquidityProviderID","nameLocation":"2604:19:16","nodeType":"VariableDeclaration","scope":4275,"src":"2596:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4273,"name":"uint256","nodeType":"ElementaryTypeName","src":"2596:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"TransactionMetadata","nameLocation":"2090:19:16","nodeType":"StructDefinition","scope":4385,"src":"2083:629:16","visibility":"public"},{"canonicalName":"IPaycrest.Order","id":4294,"members":[{"constant":false,"id":4277,"mutability":"mutable","name":"seller","nameLocation":"2749:6:16","nodeType":"VariableDeclaration","scope":4294,"src":"2741:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4276,"name":"address","nodeType":"ElementaryTypeName","src":"2741:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4279,"mutability":"mutable","name":"token","nameLocation":"2869:5:16","nodeType":"VariableDeclaration","scope":4294,"src":"2861:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4278,"name":"address","nodeType":"ElementaryTypeName","src":"2861:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4281,"mutability":"mutable","name":"senderFeeRecipient","nameLocation":"2989:18:16","nodeType":"VariableDeclaration","scope":4294,"src":"2981:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4280,"name":"address","nodeType":"ElementaryTypeName","src":"2981:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4283,"mutability":"mutable","name":"senderFee","nameLocation":"3025:9:16","nodeType":"VariableDeclaration","scope":4294,"src":"3017:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4282,"name":"uint256","nodeType":"ElementaryTypeName","src":"3017:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4285,"mutability":"mutable","name":"rate","nameLocation":"3051:4:16","nodeType":"VariableDeclaration","scope":4294,"src":"3044:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4284,"name":"uint96","nodeType":"ElementaryTypeName","src":"3044:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4287,"mutability":"mutable","name":"isFulfilled","nameLocation":"3169:11:16","nodeType":"VariableDeclaration","scope":4294,"src":"3164:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4286,"name":"bool","nodeType":"ElementaryTypeName","src":"3164:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4289,"mutability":"mutable","name":"refundAddress","nameLocation":"3313:13:16","nodeType":"VariableDeclaration","scope":4294,"src":"3305:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4288,"name":"address","nodeType":"ElementaryTypeName","src":"3305:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4291,"mutability":"mutable","name":"currentBPS","nameLocation":"3453:10:16","nodeType":"VariableDeclaration","scope":4294,"src":"3446:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4290,"name":"uint96","nodeType":"ElementaryTypeName","src":"3446:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4293,"mutability":"mutable","name":"amount","nameLocation":"3577:6:16","nodeType":"VariableDeclaration","scope":4294,"src":"3569:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4292,"name":"uint256","nodeType":"ElementaryTypeName","src":"3569:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Order","nameLocation":"2725:5:16","nodeType":"StructDefinition","scope":4385,"src":"2718:968:16","visibility":"public"},{"documentation":{"id":4295,"nodeType":"StructuredDocumentation","src":"3888:854:16","text":"@notice lock sender `_amount` of `token` into Paycrest.\n Requirements:\n `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\n `_token` must be an acceptable token. @dev See {isTokenSupported}.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _token address of the token.\n @param _amount amount in the decimal of `_token` above.\n @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\n @param _rate rate at which sender intended to sell `_amount` of `_token`.\n @param messageHash hash must be the result of a hash operation for the verification to be secure. message\n @return _orderId the bytes20 which is the orderId"},"functionSelector":"d12ff20a","id":4316,"implemented":false,"kind":"function","modifiers":[],"name":"createOrder","nameLocation":"4756:11:16","nodeType":"FunctionDefinition","parameters":{"id":4312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4297,"mutability":"mutable","name":"_token","nameLocation":"4776:6:16","nodeType":"VariableDeclaration","scope":4316,"src":"4768:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4296,"name":"address","nodeType":"ElementaryTypeName","src":"4768:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4299,"mutability":"mutable","name":"_amount","nameLocation":"4801:7:16","nodeType":"VariableDeclaration","scope":4316,"src":"4793:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4298,"name":"uint256","nodeType":"ElementaryTypeName","src":"4793:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4301,"mutability":"mutable","name":"_institutionCode","nameLocation":"4827:16:16","nodeType":"VariableDeclaration","scope":4316,"src":"4819:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4819:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4303,"mutability":"mutable","name":"_rate","nameLocation":"4860:5:16","nodeType":"VariableDeclaration","scope":4316,"src":"4853:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4302,"name":"uint96","nodeType":"ElementaryTypeName","src":"4853:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":4305,"mutability":"mutable","name":"_senderFeeRecipient","nameLocation":"4884:19:16","nodeType":"VariableDeclaration","scope":4316,"src":"4876:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4304,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4307,"mutability":"mutable","name":"_senderFee","nameLocation":"4921:10:16","nodeType":"VariableDeclaration","scope":4316,"src":"4913:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4306,"name":"uint256","nodeType":"ElementaryTypeName","src":"4913:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4309,"mutability":"mutable","name":"_refundAddress","nameLocation":"4949:14:16","nodeType":"VariableDeclaration","scope":4316,"src":"4941:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4308,"name":"address","nodeType":"ElementaryTypeName","src":"4941:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4311,"mutability":"mutable","name":"messageHash","nameLocation":"4990:11:16","nodeType":"VariableDeclaration","scope":4316,"src":"4974:27:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4310,"name":"string","nodeType":"ElementaryTypeName","src":"4974:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4767:235:16"},"returnParameters":{"id":4315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4314,"mutability":"mutable","name":"_orderId","nameLocation":"5029:8:16","nodeType":"VariableDeclaration","scope":4316,"src":"5021:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4313,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5021:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5020:18:16"},"scope":4385,"src":"4747:292:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4317,"nodeType":"StructuredDocumentation","src":"5045:781:16","text":"@notice settle transaction and distribute rewards accordingly.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `_primaryValidator` must have stake on the Paycrest staking platform.\n `_secondaryValidators` must have stake on the Paycrest staking platform.\n `amount` must be greater than minimum\n `_refundable` refundable address must not be zero address\n @param _orderId transaction Id.\n @param _validators arrays of secondary validators.\n @param _liquidityProvider address of the liquidity provider.\n @param _settlePercent rate at which the transaction is settled.\n @return return the status of transaction {bool}"},"functionSelector":"384efd27","id":4335,"implemented":false,"kind":"function","modifiers":[],"name":"settle","nameLocation":"5840:6:16","nodeType":"FunctionDefinition","parameters":{"id":4329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4319,"mutability":"mutable","name":"_splitOrderId","nameLocation":"5855:13:16","nodeType":"VariableDeclaration","scope":4335,"src":"5847:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5847:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4321,"mutability":"mutable","name":"_orderId","nameLocation":"5878:8:16","nodeType":"VariableDeclaration","scope":4335,"src":"5870:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5870:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4324,"mutability":"mutable","name":"_validators","nameLocation":"5907:11:16","nodeType":"VariableDeclaration","scope":4335,"src":"5888:30:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4322,"name":"address","nodeType":"ElementaryTypeName","src":"5888:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4323,"nodeType":"ArrayTypeName","src":"5888:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4326,"mutability":"mutable","name":"_liquidityProvider","nameLocation":"5928:18:16","nodeType":"VariableDeclaration","scope":4335,"src":"5920:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4325,"name":"address","nodeType":"ElementaryTypeName","src":"5920:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4328,"mutability":"mutable","name":"_settlePercent","nameLocation":"5955:14:16","nodeType":"VariableDeclaration","scope":4335,"src":"5948:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":4327,"name":"uint96","nodeType":"ElementaryTypeName","src":"5948:6:16","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"5846:124:16"},"returnParameters":{"id":4334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4335,"src":"5989:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5989:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4335,"src":"5998:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4332,"name":"address","nodeType":"ElementaryTypeName","src":"5998:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5988:18:16"},"scope":4385,"src":"5831:176:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4336,"nodeType":"StructuredDocumentation","src":"6013:336:16","text":"@notice refund to the specified refundable address.\n Requirements:\n {only aggregators call}.\n `_orderId` it must be less than total ids.\n `_orderId` it must be an open Id.\n `isFulfilled` must be false.\n @param _orderId transaction Id.\n @return return the status of transaction {bool}"},"functionSelector":"7249fbb6","id":4343,"implemented":false,"kind":"function","modifiers":[],"name":"refund","nameLocation":"6363:6:16","nodeType":"FunctionDefinition","parameters":{"id":4339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4338,"mutability":"mutable","name":"_orderId","nameLocation":"6378:8:16","nodeType":"VariableDeclaration","scope":4343,"src":"6370:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6370:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6369:18:16"},"returnParameters":{"id":4342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4343,"src":"6406:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4340,"name":"bool","nodeType":"ElementaryTypeName","src":"6406:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6405:6:16"},"scope":4385,"src":"6354:58:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":4344,"nodeType":"StructuredDocumentation","src":"6418:152:16","text":"@notice get supported token from Paycrest.\n @param _token address of the token to check.\n @return return the status of `_token` {bool}"},"functionSelector":"75151b63","id":4351,"implemented":false,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"6584:16:16","nodeType":"FunctionDefinition","parameters":{"id":4347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4346,"mutability":"mutable","name":"_token","nameLocation":"6609:6:16","nodeType":"VariableDeclaration","scope":4351,"src":"6601:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4345,"name":"address","nodeType":"ElementaryTypeName","src":"6601:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6600:16:16"},"returnParameters":{"id":4350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4351,"src":"6639:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4348,"name":"bool","nodeType":"ElementaryTypeName","src":"6639:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6638:6:16"},"scope":4385,"src":"6575:70:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4352,"nodeType":"StructuredDocumentation","src":"6651:70:16","text":"@notice get order details.\n @param _orderId transaction Id."},"functionSelector":"768c6ec0","id":4360,"implemented":false,"kind":"function","modifiers":[],"name":"getOrderInfo","nameLocation":"6735:12:16","nodeType":"FunctionDefinition","parameters":{"id":4355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4354,"mutability":"mutable","name":"_orderId","nameLocation":"6756:8:16","nodeType":"VariableDeclaration","scope":4360,"src":"6748:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6748:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6747:18:16"},"returnParameters":{"id":4359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4360,"src":"6788:12:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_memory_ptr","typeString":"struct IPaycrest.Order"},"typeName":{"id":4357,"nodeType":"UserDefinedTypeName","pathNode":{"id":4356,"name":"Order","nameLocations":["6788:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":4294,"src":"6788:5:16"},"referencedDeclaration":4294,"src":"6788:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Order_$4294_storage_ptr","typeString":"struct IPaycrest.Order"}},"visibility":"internal"}],"src":"6787:14:16"},"scope":4385,"src":"6726:76:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4361,"nodeType":"StructuredDocumentation","src":"6808:323:16","text":"@notice get every rewards and address on Paycrest.\n @return protocolReward amount that will be taken in percentage on all trade.\n @return validatorFeePercent amount that will be given to primary validator in percentage from `protocolReward`\n @return max_bps maximum amount in bps \"100% == 100_000\"."},"functionSelector":"b810c636","id":4370,"implemented":false,"kind":"function","modifiers":[],"name":"getFeeDetails","nameLocation":"7145:13:16","nodeType":"FunctionDefinition","parameters":{"id":4362,"nodeType":"ParameterList","parameters":[],"src":"7158:2:16"},"returnParameters":{"id":4369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4364,"mutability":"mutable","name":"protocolReward","nameLocation":"7200:14:16","nodeType":"VariableDeclaration","scope":4370,"src":"7192:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4363,"name":"uint128","nodeType":"ElementaryTypeName","src":"7192:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":4366,"mutability":"mutable","name":"validatorFeePercent","nameLocation":"7233:19:16","nodeType":"VariableDeclaration","scope":4370,"src":"7225:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":4365,"name":"uint128","nodeType":"ElementaryTypeName","src":"7225:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":4368,"mutability":"mutable","name":"max_bps","nameLocation":"7271:7:16","nodeType":"VariableDeclaration","scope":4370,"src":"7263:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4367,"name":"uint256","nodeType":"ElementaryTypeName","src":"7263:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7182:102:16"},"scope":4385,"src":"7136:149:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4371,"nodeType":"StructuredDocumentation","src":"7291:98:16","text":"@notice get address of liquidity aggregator.\n @return address of `liquidityAggregator`."},"functionSelector":"2ebc5356","id":4376,"implemented":false,"kind":"function","modifiers":[],"name":"getLiquidityAggregator","nameLocation":"7403:22:16","nodeType":"FunctionDefinition","parameters":{"id":4372,"nodeType":"ParameterList","parameters":[],"src":"7425:2:16"},"returnParameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4376,"src":"7450:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4373,"name":"address","nodeType":"ElementaryTypeName","src":"7450:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7449:9:16"},"scope":4385,"src":"7394:65:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":4377,"nodeType":"StructuredDocumentation","src":"7470:136:16","text":"@notice get address of sender whitelisting status.\n @param sender address of the sender.\n @return address of `status`."},"functionSelector":"d8e8de34","id":4384,"implemented":false,"kind":"function","modifiers":[],"name":"getWhitelistedStatus","nameLocation":"7620:20:16","nodeType":"FunctionDefinition","parameters":{"id":4380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4379,"mutability":"mutable","name":"sender","nameLocation":"7649:6:16","nodeType":"VariableDeclaration","scope":4384,"src":"7641:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4378,"name":"address","nodeType":"ElementaryTypeName","src":"7641:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7640:16:16"},"returnParameters":{"id":4383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4384,"src":"7679:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4381,"name":"bool","nodeType":"ElementaryTypeName","src":"7679:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7678:6:16"},"scope":4385,"src":"7611:74:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4386,"src":"265:7423:16","usedErrors":[4248,4251,4254,4257,4260,4262,4264]}],"src":"38:7651:16"},"id":16}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol":{"ReentrancyGuardUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":314,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":383,"contract":"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable","label":"__gap","offset":0,"slot":"2","type":"t_array(t_uint256)49_storage"}],"types":{"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"IERC20Upgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol":{"IERC20PermitUpgradeable":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":\"IERC20PermitUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"SafeERC20Upgradeable":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220127eb4d243173cf9ac6ea39f737ccd926bf8210c3a138b2e7d70f40b43f8204564736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT PUSH31 0xB4D243173CF9AC6EA39F737CCD926BF8210C3A138B2E7D70F40B43F8204564 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"734:6366:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20Upgradeable,bytes memory)":"infinite","forceApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeApprove(contract IERC20Upgradeable,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)":"infinite","safePermit(contract IERC20PermitUpgradeable,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20Upgradeable,address,uint256)":"infinite","safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220df70283ff728a1a88debad8b56cd6b31b858a143aff601e8f42a16699317e70d64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDF PUSH17 0x283FF728A1A88DEBAD8B56CD6B31B858A1 NUMBER 0xAF 0xF6 ADD 0xE8 DELEGATECALL 0x2A AND PUSH10 0x9317E70D64736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"194:9180:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3fb710f8a96e0067535a9f765fa3f89f59b6e06ba7186e35593d35f029926fa64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xFB PUSH18 0xF8A96E0067535A9F765FA3F89F59B6E06BA PUSH18 0x86E35593D35F029926FA64736F6C63430008 SLT STOP CALLER ","sourceMap":"242:2603:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol":{"ECDSAUpgradeable":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220717bce4509ab3c6d09fb52c5b26660a25a99945b32e0484c654da9bebac1986064736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x7BCE4509AB3C6D09FB52C5B26660A25A9994 JUMPDEST ORIGIN 0xE0 BASEFEE 0x4C PUSH6 0x4DA9BEBAC198 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ","sourceMap":"380:8783:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSAUpgradeable.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206b19238f22d888be15246afd45704547bf692f3a8d19f34db13095fb48eddd5264736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x19238F22D888BE15246AFD45 PUSH17 0x4547BF692F3A8D19F34DB13095FB48EDDD MSTORE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"202:12593:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e70ce3cff074bb9f2b399f4851e008094b94d7fe429bd3afbf9c6f170d3375ce64736f6c63430008120033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC 0xE3 0xCF CREATE PUSH21 0xBB9F2B399F4851E008094B94D7FE429BD3AFBF9C6F OR 0xD CALLER PUSH22 0xCE64736F6C6343000812003300000000000000000000 ","sourceMap":"215:1058:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Paycrest.sol":{"Paycrest":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AmountIsZero","type":"error"},{"inputs":[],"name":"InvalidInstitutionCode","type":"error"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"}],"name":"InvalidParameter","type":"error"},{"inputs":[],"name":"InvalidSigner","type":"error"},{"inputs":[],"name":"NotWhitelisted","type":"error"},{"inputs":[],"name":"OnlyAggregator","type":"error"},{"inputs":[],"name":"OrderFulfilled","type":"error"},{"inputs":[],"name":"ThrowZeroAddress","type":"error"},{"inputs":[],"name":"ThrowZeroValue","type":"error"},{"inputs":[],"name":"TokenNotSupported","type":"error"},{"inputs":[],"name":"UnableToProcessRewards","type":"error"},{"inputs":[],"name":"Unsuported","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint128","name":"protocolFee","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"validatorFeePercent","type":"uint128"}],"name":"PaycrestFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardValidator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"bytes8","name":"value","type":"bytes8"},{"indexed":false,"internalType":"bytes8","name":"status","type":"bytes8"}],"name":"SettingManagerForInstitution","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint128","name":"","type":"uint128"},{"internalType":"uint128","name":"","type":"uint128"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLiquidityAggregator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"code","type":"bytes32"}],"name":"getSupportedInstitutionName","outputs":[{"components":[{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"bytes32","name":"currency","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.InstitutionByCode","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"}],"name":"getSupportedInstitutions","outputs":[{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"getWhitelistedStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_usdc","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"address[]","name":"_validators","type":"address[]"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint96","name":"_settlePercent","type":"uint96"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint128","name":"_protocolFeePercent","type":"uint128"},{"internalType":"uint128","name":"_validatorFeePercent","type":"uint128"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Deposit(address,uint256,bytes32,uint256,bytes32,string)":{"details":"Emitted when deposit is made."},"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."},"Refunded(bytes32)":{"details":"Emitted when aggregator refund transaction."},"RewardValidator(address,uint256)":{"details":"Emitted when primary validator get therir rewards."},"Settled(bytes32,bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get therir rewards."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":{"details":"See {createOrder-IPaycrest}. "},"getFeeDetails()":{"details":"See {getFeeDetails-IPaycrest}. "},"getLiquidityAggregator()":{"details":"See {getLiquidityAggregator-IPaycrest}. "},"getOrderInfo(bytes32)":{"details":"See {getOrderInfo-IPaycrest}. "},"getSupportedInstitutionName(bytes32)":{"details":"See {getSupportedInstitutionName-IPaycrest}. "},"getWhitelistedStatus(address)":{"details":"See {getWhitelistedStatus-IPaycrest}. "},"isTokenSupported(address)":{"details":"See {isTokenSupported-IPaycrest}. "},"owner()":{"details":"Returns the address of the current owner."},"refund(bytes32)":{"details":"See {refund-IPaycrest}. "},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"settle(bytes32,bytes32,address[],address,uint96)":{"details":"See {settle-IPaycrest}. "},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2938":{"entryPoint":null,"id":2938,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_281":{"entryPoint":40,"id":281,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:17","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:17"},"nodeType":"YulFunctionCall","src":"113:19:17"},"nodeType":"YulExpressionStatement","src":"113:19:17"},{"nodeType":"YulAssignment","src":"141:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:17"},"nodeType":"YulFunctionCall","src":"156:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:17","type":""}],"src":"7:169:17"},{"body":{"nodeType":"YulBlock","src":"288:120:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:17"},"nodeType":"YulFunctionCall","src":"306:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:17","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:17"},"nodeType":"YulFunctionCall","src":"299:58:17"},"nodeType":"YulExpressionStatement","src":"299:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:17"},"nodeType":"YulFunctionCall","src":"374:15:17"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:17","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:17"},"nodeType":"YulFunctionCall","src":"367:34:17"},"nodeType":"YulExpressionStatement","src":"367:34:17"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:17","type":""}],"src":"182:226:17"},{"body":{"nodeType":"YulBlock","src":"560:220:17","statements":[{"nodeType":"YulAssignment","src":"570:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:17","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:17"},"nodeType":"YulFunctionCall","src":"577:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:17"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:17"},"nodeType":"YulFunctionCall","src":"653:93:17"},"nodeType":"YulExpressionStatement","src":"653:93:17"},{"nodeType":"YulAssignment","src":"755:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:17"},"nodeType":"YulFunctionCall","src":"762:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:17"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:17","type":""}],"src":"414:366:17"},{"body":{"nodeType":"YulBlock","src":"957:248:17","statements":[{"nodeType":"YulAssignment","src":"967:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:17"},"nodeType":"YulFunctionCall","src":"975:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:17"},"nodeType":"YulFunctionCall","src":"1010:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:17"},"nodeType":"YulFunctionCall","src":"1029:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:17"},"nodeType":"YulFunctionCall","src":"1003:47:17"},"nodeType":"YulExpressionStatement","src":"1003:47:17"},{"nodeType":"YulAssignment","src":"1059:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:17"},"nodeType":"YulFunctionCall","src":"1067:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:17","type":""}],"src":"786:419:17"},{"body":{"nodeType":"YulBlock","src":"1254:43:17","statements":[{"nodeType":"YulAssignment","src":"1264:27:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:17"},"nodeType":"YulFunctionCall","src":"1275:16:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:17"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:17","type":""}],"src":"1211:86:17"},{"body":{"nodeType":"YulBlock","src":"1364:51:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:17"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:17"},"nodeType":"YulFunctionCall","src":"1386:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:17"},"nodeType":"YulFunctionCall","src":"1374:35:17"},"nodeType":"YulExpressionStatement","src":"1374:35:17"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:17","type":""}],"src":"1303:112:17"},{"body":{"nodeType":"YulBlock","src":"1515:120:17","statements":[{"nodeType":"YulAssignment","src":"1525:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:17"},"nodeType":"YulFunctionCall","src":"1533:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:17"},"nodeType":"YulFunctionCall","src":"1610:17:17"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:17"},"nodeType":"YulFunctionCall","src":"1561:67:17"},"nodeType":"YulExpressionStatement","src":"1561:67:17"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:17","type":""}],"src":"1421:214:17"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b61384a80620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806387490d86116100ad578063d12ff20a11610071578063d12ff20a1461031d578063d8e8de341461034d578063d9caed121461037d578063f2fde38b14610399578063f5326b19146103b557610121565b806387490d86146102775780638da5cb5b146102a757806399e3c0b4146102c5578063b810c636146102e1578063c4d66de81461030157610121565b8063715018a6116100f4578063715018a6146101c15780637249fbb6146101cb57806375151b63146101fb578063768c6ec01461022b57806379a0effb1461025b57610121565b806302621338146101265780632ebc5356146101565780633220088214610174578063384efd2714610190575b600080fd5b610140600480360381019061013b919061254e565b6103d1565b60405161014d9190612668565b60405180910390f35b61015e61050f565b60405161016b91906126cb565b60405180910390f35b61018e60048036038101906101899190612894565b610539565b005b6101aa60048036038101906101a591906129bb565b61064d565b6040516101b8929190612a64565b60405180910390f35b6101c9610b5d565b005b6101e560048036038101906101e0919061254e565b610b71565b6040516101f29190612aa8565b60405180910390f35b61021560048036038101906102109190612ac3565b610e0a565b6040516102229190612aa8565b60405180910390f35b6102456004803603810190610240919061254e565b610e60565b6040516102529190612bed565b60405180910390f35b61027560048036038101906102709190612c09565b611091565b005b610291600480360381019061028c919061254e565b6111d5565b60405161029e9190612c78565b60405180910390f35b6102af611216565b6040516102bc91906126cb565b60405180910390f35b6102df60048036038101906102da9190612cbf565b611240565b005b6102e961142d565b6040516102f893929190612d4c565b60405180910390f35b61031b60048036038101906103169190612ac3565b61147e565b005b61033760048036038101906103329190612e05565b611695565b6040516103449190612edb565b60405180910390f35b61036760048036038101906103629190612ac3565b611ad5565b6040516103749190612aa8565b60405180910390f35b61039760048036038101906103929190612ef6565b611b2b565b005b6103b360048036038101906103ae9190612ac3565b611bb7565b005b6103cf60048036038101906103ca9190612f75565b611c3a565b005b60606000606b6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561044e57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610408565b50505050905060008151905060008167ffffffffffffffff811115610476576104756126fc565b5b6040519080825280602002602001820160405280156104af57816020015b61049c6123e1565b8152602001906001900390816104945790505b50905060005b82811015610503578381815181106104d0576104cf612fb5565b5b60200260200101518282815181106104eb576104ea612fb5565b5b602002602001018190525080806001019150506104b5565b50809350505050919050565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610541611cf1565b60008151905060005b8181101561064757606b600085815260200190815260200160002083828151811061057857610577612fb5565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106105dd576105dc612fb5565b5b602002602001015160200151815260200185815250606c600085848151811061060957610608612fb5565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061054a565b50505050565b600080606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d7576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606d6000888152602001908152602001600020600401600c9054906101000a900460ff1615610732576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606d600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083606d60008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff166107aa9190613013565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000606d60008a815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361084c576001606d60008a8152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055505b60006108588986611d6f565b90506000606d60008b81526020019081526020016000206003015490506000811115610888576108878a611ed3565b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600001516040518363ffffffff1660e01b81526004016108e9929190613053565b6020604051808303816000875af1158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c9190613091565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8884602001516040518363ffffffff1660e01b815260040161096c929190613053565b6020604051808303816000875af115801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af9190613091565b50600089899050905060008184604001516109ca91906130ed565b905060005b82811015610af5578573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d8d84818110610a0657610a05612fb5565b5b9050602002016020810190610a1b9190612ac3565b846040518363ffffffff1660e01b8152600401610a39929190613053565b6020604051808303816000875af1158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c9190613091565b50818c8c83818110610a9157610a90612fb5565b5b9050602002016020810190610aa69190612ac3565b73ffffffffffffffffffffffffffffffffffffffff167f61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c260405160405180910390a380806001019150506109cf565b508873ffffffffffffffffffffffffffffffffffffffff168c7f7b5664d3710676924bf38f3d89d38a62db3aa5fca4213adf6fa36e51c3cfc8548f8b604051610b3f92919061312d565b60405180910390a38b85965096505050505050965096945050505050565b610b65611cf1565b610b6f6000612027565b565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bfa576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606d6000838152602001908152602001600020600401600c9054906101000a900460ff1615610c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c55906131b3565b60405180910390fd5b6001606d6000848152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000606d600084815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606d600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606d600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606d6000868152602001908152602001600020600601546040518363ffffffff1660e01b8152600401610d90929190613053565b6020604051808303816000875af1158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190613091565b50817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a260019050919050565b6000606960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610e68612401565b606d6000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b611099611cf1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110ff576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036111685780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036111d15780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6111dd6124c3565b606c6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611248611cf1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ae576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361132d5780606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036113b05780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506113ed565b826040517f48bae5b80000000000000000000000000000000000000000000000000000000081526004016113e49190612edb565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930838383604051611420939291906131d3565b60405180910390a1505050565b6000806000606660009054906101000a90046fffffffffffffffffffffffffffffffff16606660109054906101000a90046fffffffffffffffffffffffffffffffff16606554925092509250909192565b60008060019054906101000a900460ff161590508080156114af5750600160008054906101000a900460ff1660ff16105b806114dc57506114be306120ed565b1580156114db5750600160008054906101000a900460ff1660ff16145b5b61151b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115129061327c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611558576001600060016101000a81548160ff0219169083151502179055505b6001606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620186a0606581905550611388606660006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506101f4606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611638612110565b80156116915760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161168891906132ee565b60405180910390a15b5050565b60006116a48a8a86898c612169565b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b81526004016116e193929190613309565b6020604051808303816000875af1158015611700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117249190613091565b50606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061177590613340565b919050555033606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516020016117cc929190613053565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016065546bffffffffffffffffffffffff1681526020018a815250606d600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550610100820151816006015590505080898b73ffffffffffffffffffffffffffffffffffffffff167f34e33f86eb59d668184e1f86aeb03ed25f4ce72216218ed02db752f21c6a40428a8c8888604051611ac094939291906133f5565b60405180910390a49998505050505050505050565b6000606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b611b33611cf1565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611b6e929190613053565b6020604051808303816000875af1158015611b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb19190613091565b50505050565b611bbf611cf1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c25906134a7565b60405180910390fd5b611c3781612027565b50565b611c42611cf1565b81606660006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df8282604051611ce59291906134c7565b60405180910390a15050565b611cf9612378565b73ffffffffffffffffffffffffffffffffffffffff16611d17611216565b73ffffffffffffffffffffffffffffffffffffffff1614611d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d649061353c565b60405180910390fd5b565b611d776124e3565b6000606d6000858152602001908152602001600020600601549050606d60008581526020019081526020016000206003015481611db4919061355c565b9050606554836bffffffffffffffffffffffff1682611dd39190613590565b611ddd91906130ed565b826020018181525050606554606660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168360200151611e299190613590565b611e3391906130ed565b82600001818152505081600001518260200151611e50919061355c565b826020018181525050606554606660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168360000151611e9c9190613590565b611ea691906130ed565b82604001818152505081604001518260000151611ec3919061355c565b8260000181815250505092915050565b6000606d600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606d6000848152602001908152602001600020600301549050606d600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611f9a929190613053565b6020604051808303816000875af1158015611fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdd9190613091565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661215f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215690613644565b60405180910390fd5b612167612380565b565b606960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166121f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ec906136b0565b60405180910390fd5b60008411612238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222f9061371c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036122a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229e90613788565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230d90613788565b60405180910390fd5b6000801b606c60008381526020019081526020016000206000015403612371576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612368906137f4565b60405180910390fd5b5050505050565b600033905090565b600060019054906101000a900460ff166123cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c690613644565b60405180910390fd5b6123df6123da612378565b612027565b565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61252b81612518565b811461253657600080fd5b50565b60008135905061254881612522565b92915050565b6000602082840312156125645761256361250e565b5b600061257284828501612539565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125b081612518565b82525050565b6040820160008201516125cc60008501826125a7565b5060208201516125df60208501826125a7565b50505050565b60006125f183836125b6565b60408301905092915050565b6000602082019050919050565b60006126158261257b565b61261f8185612586565b935061262a83612597565b8060005b8381101561265b57815161264288826125e5565b975061264d836125fd565b92505060018101905061262e565b5085935050505092915050565b60006020820190508181036000830152612682818461260a565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126b58261268a565b9050919050565b6126c5816126aa565b82525050565b60006020820190506126e060008301846126bc565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612734826126eb565b810181811067ffffffffffffffff82111715612753576127526126fc565b5b80604052505050565b6000612766612504565b9050612772828261272b565b919050565b600067ffffffffffffffff821115612792576127916126fc565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156127c3576127c26127a8565b5b6127cd604061275c565b905060006127dd84828501612539565b60008301525060206127f184828501612539565b60208301525092915050565b600061281061280b84612777565b61275c565b90508083825260208201905060408402830185811115612833576128326127a3565b5b835b8181101561285c578061284888826127ad565b845260208401935050604081019050612835565b5050509392505050565b600082601f83011261287b5761287a6126e6565b5b813561288b8482602086016127fd565b91505092915050565b600080604083850312156128ab576128aa61250e565b5b60006128b985828601612539565b925050602083013567ffffffffffffffff8111156128da576128d9612513565b5b6128e685828601612866565b9150509250929050565b600080fd5b60008083601f84011261290b5761290a6126e6565b5b8235905067ffffffffffffffff811115612928576129276128f0565b5b602083019150836020820283011115612944576129436127a3565b5b9250929050565b612954816126aa565b811461295f57600080fd5b50565b6000813590506129718161294b565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61299881612977565b81146129a357600080fd5b50565b6000813590506129b58161298f565b92915050565b60008060008060008060a087890312156129d8576129d761250e565b5b60006129e689828a01612539565b96505060206129f789828a01612539565b955050604087013567ffffffffffffffff811115612a1857612a17612513565b5b612a2489828a016128f5565b94509450506060612a3789828a01612962565b9250506080612a4889828a016129a6565b9150509295509295509295565b612a5e81612518565b82525050565b6000604082019050612a796000830185612a55565b612a8660208301846126bc565b9392505050565b60008115159050919050565b612aa281612a8d565b82525050565b6000602082019050612abd6000830184612a99565b92915050565b600060208284031215612ad957612ad861250e565b5b6000612ae784828501612962565b91505092915050565b612af9816126aa565b82525050565b6000819050919050565b612b1281612aff565b82525050565b612b2181612977565b82525050565b612b3081612a8d565b82525050565b61012082016000820151612b4d6000850182612af0565b506020820151612b606020850182612af0565b506040820151612b736040850182612af0565b506060820151612b866060850182612b09565b506080820151612b996080850182612b18565b5060a0820151612bac60a0850182612b27565b5060c0820151612bbf60c0850182612af0565b5060e0820151612bd260e0850182612b18565b50610100820151612be7610100850182612b09565b50505050565b600061012082019050612c036000830184612b36565b92915050565b60008060408385031215612c2057612c1f61250e565b5b6000612c2e85828601612539565b9250506020612c3f85828601612962565b9150509250929050565b604082016000820151612c5f60008501826125a7565b506020820151612c7260208501826125a7565b50505050565b6000604082019050612c8d6000830184612c49565b92915050565b612c9c81612a8d565b8114612ca757600080fd5b50565b600081359050612cb981612c93565b92915050565b600080600060608486031215612cd857612cd761250e565b5b6000612ce686828701612539565b9350506020612cf786828701612962565b9250506040612d0886828701612caa565b9150509250925092565b60006fffffffffffffffffffffffffffffffff82169050919050565b612d3781612d12565b82525050565b612d4681612aff565b82525050565b6000606082019050612d616000830186612d2e565b612d6e6020830185612d2e565b612d7b6040830184612d3d565b949350505050565b612d8c81612aff565b8114612d9757600080fd5b50565b600081359050612da981612d83565b92915050565b60008083601f840112612dc557612dc46126e6565b5b8235905067ffffffffffffffff811115612de257612de16128f0565b5b602083019150836001820283011115612dfe57612dfd6127a3565b5b9250929050565b60008060008060008060008060006101008a8c031215612e2857612e2761250e565b5b6000612e368c828d01612962565b9950506020612e478c828d01612d9a565b9850506040612e588c828d01612539565b9750506060612e698c828d016129a6565b9650506080612e7a8c828d01612962565b95505060a0612e8b8c828d01612d9a565b94505060c0612e9c8c828d01612962565b93505060e08a013567ffffffffffffffff811115612ebd57612ebc612513565b5b612ec98c828d01612daf565b92509250509295985092959850929598565b6000602082019050612ef06000830184612a55565b92915050565b600080600060608486031215612f0f57612f0e61250e565b5b6000612f1d86828701612962565b9350506020612f2e86828701612962565b9250506040612f3f86828701612d9a565b9150509250925092565b612f5281612d12565b8114612f5d57600080fd5b50565b600081359050612f6f81612f49565b92915050565b60008060408385031215612f8c57612f8b61250e565b5b6000612f9a85828601612f60565b9250506020612fab85828601612f60565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061301e82612977565b915061302983612977565b925082820390506bffffffffffffffffffffffff81111561304d5761304c612fe4565b5b92915050565b600060408201905061306860008301856126bc565b6130756020830184612d3d565b9392505050565b60008151905061308b81612c93565b92915050565b6000602082840312156130a7576130a661250e565b5b60006130b58482850161307c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130f882612aff565b915061310383612aff565b925082613113576131126130be565b5b828204905092915050565b61312781612977565b82525050565b60006040820190506131426000830185612a55565b61314f602083018461311e565b9392505050565b600082825260208201905092915050565b7f4f7264657246756c66696c6c6564000000000000000000000000000000000000600082015250565b600061319d600e83613156565b91506131a882613167565b602082019050919050565b600060208201905081810360008301526131cc81613190565b9050919050565b60006060820190506131e86000830186612a55565b6131f560208301856126bc565b6132026040830184612a99565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613266602e83613156565b91506132718261320a565b604082019050919050565b6000602082019050818103600083015261329581613259565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006132d86132d36132ce8461329c565b6132b3565b6132a6565b9050919050565b6132e8816132bd565b82525050565b600060208201905061330360008301846132df565b92915050565b600060608201905061331e60008301866126bc565b61332b60208301856126bc565b6133386040830184612d3d565b949350505050565b600061334b82612aff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361337d5761337c612fe4565b5b600182019050919050565b60006133a361339e61339984612977565b6132b3565b612aff565b9050919050565b6133b381613388565b82525050565b82818337600083830152505050565b60006133d48385613156565b93506133e18385846133b9565b6133ea836126eb565b840190509392505050565b600060608201905061340a60008301876133aa565b6134176020830186612a55565b818103604083015261342a8184866133c8565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613491602683613156565b915061349c82613435565b604082019050919050565b600060208201905081810360008301526134c081613484565b9050919050565b60006040820190506134dc6000830185612d2e565b6134e96020830184612d2e565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613526602083613156565b9150613531826134f0565b602082019050919050565b6000602082019050818103600083015261355581613519565b9050919050565b600061356782612aff565b915061357283612aff565b925082820390508181111561358a57613589612fe4565b5b92915050565b600061359b82612aff565b91506135a683612aff565b92508282026135b481612aff565b915082820484148315176135cb576135ca612fe4565b5b5092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061362e602b83613156565b9150613639826135d2565b604082019050919050565b6000602082019050818103600083015261365d81613621565b9050919050565b7f546f6b656e4e6f74537570706f72746564000000000000000000000000000000600082015250565b600061369a601183613156565b91506136a582613664565b602082019050919050565b600060208201905081810360008301526136c98161368d565b9050919050565b7f416d6f756e7449735a65726f0000000000000000000000000000000000000000600082015250565b6000613706600c83613156565b9150613711826136d0565b602082019050919050565b60006020820190508181036000830152613735816136f9565b9050919050565b7f5468726f775a65726f4164647265737300000000000000000000000000000000600082015250565b6000613772601083613156565b915061377d8261373c565b602082019050919050565b600060208201905081810360008301526137a181613765565b9050919050565b7f496e76616c6964496e737469747574696f6e436f646500000000000000000000600082015250565b60006137de601683613156565b91506137e9826137a8565b602082019050919050565b6000602082019050818103600083015261380d816137d1565b905091905056fea2646970667358221220f8823cfaf049624cc7c165baccd9ac4d6cc830669345b349ce319cd5c49631f064736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x384A DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87490D86 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xD12FF20A GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD12FF20A EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xD8E8DE34 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0xD9CAED12 EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0xF5326B19 EQ PUSH2 0x3B5 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x87490D86 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x301 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x7249FBB6 EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x25B JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x2EBC5356 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x384EFD27 EQ PUSH2 0x190 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x140 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x254E JUMP JUMPDEST PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP2 SWAP1 PUSH2 0x2668 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15E PUSH2 0x50F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0x26CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0x539 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A5 SWAP2 SWAP1 PUSH2 0x29BB JUMP JUMPDEST PUSH2 0x64D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B8 SWAP3 SWAP2 SWAP1 PUSH2 0x2A64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C9 PUSH2 0xB5D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E0 SWAP2 SWAP1 PUSH2 0x254E JUMP JUMPDEST PUSH2 0xB71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x2AA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x215 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x210 SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH2 0xE0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x2AA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x245 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x254E JUMP JUMPDEST PUSH2 0xE60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x252 SWAP2 SWAP1 PUSH2 0x2BED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x275 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x270 SWAP2 SWAP1 PUSH2 0x2C09 JUMP JUMPDEST PUSH2 0x1091 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x291 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x254E JUMP JUMPDEST PUSH2 0x11D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x2C78 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AF PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x26CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x2CBF JUMP JUMPDEST PUSH2 0x1240 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E9 PUSH2 0x142D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH2 0x147E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x337 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x2E05 JUMP JUMPDEST PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x2EDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x367 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH2 0x1AD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x374 SWAP2 SWAP1 PUSH2 0x2AA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x397 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x392 SWAP2 SWAP1 PUSH2 0x2EF6 JUMP JUMPDEST PUSH2 0x1B2B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH2 0x1BB7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CA SWAP2 SWAP1 PUSH2 0x2F75 JUMP JUMPDEST PUSH2 0x1C3A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x6B PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x44E JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x408 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x476 JUMPI PUSH2 0x475 PUSH2 0x26FC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4AF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x49C PUSH2 0x23E1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x494 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x503 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4D0 JUMPI PUSH2 0x4CF PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EB JUMPI PUSH2 0x4EA PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4B5 JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x541 PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x647 JUMPI PUSH1 0x6B PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x578 JUMPI PUSH2 0x577 PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5DD JUMPI PUSH2 0x5DC PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x6C PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x609 JUMPI PUSH2 0x608 PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x54A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE9D8299200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6D PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD PUSH32 0x56F1733F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP4 PUSH1 0x6D PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7AA SWAP2 SWAP1 PUSH2 0x3013 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x84C JUMPI PUSH1 0x1 PUSH1 0x6D PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH2 0x858 DUP10 DUP7 PUSH2 0x1D6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x888 JUMPI PUSH2 0x887 DUP11 PUSH2 0x1ED3 JUMP JUMPDEST JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8E9 SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x908 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x92C SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP9 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x96C SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x98B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9AF SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP PUSH1 0x0 DUP10 DUP10 SWAP1 POP SWAP1 POP PUSH1 0x0 DUP2 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x9CA SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAF5 JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP14 DUP14 DUP5 DUP2 DUP2 LT PUSH2 0xA06 JUMPI PUSH2 0xA05 PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA1B SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA39 SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA58 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP DUP2 DUP13 DUP13 DUP4 DUP2 DUP2 LT PUSH2 0xA91 JUMPI PUSH2 0xA90 PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAA6 SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x61DCEB70B8F97239C33A3F9C0D0EFC6C8759C7E9A808F75DD42B3A0F213186C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x9CF JUMP JUMPDEST POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH32 0x7B5664D3710676924BF38F3D89D38A62DB3AA5FCA4213ADF6FA36E51C3CFC854 DUP16 DUP12 PUSH1 0x40 MLOAD PUSH2 0xB3F SWAP3 SWAP2 SWAP1 PUSH2 0x312D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP12 DUP6 SWAP7 POP SWAP7 POP POP POP POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB65 PUSH2 0x1CF1 JUMP JUMPDEST PUSH2 0xB6F PUSH1 0x0 PUSH2 0x2027 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBFA JUMPI PUSH1 0x40 MLOAD PUSH32 0xE9D8299200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC55 SWAP1 PUSH2 0x31B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x6D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x6D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6D PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD90 SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDAF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDD3 SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP DUP2 PUSH32 0xFE509803C09416B28FF3D8F690C8B0C61462A892C46D5430C8FB20ABE472DAF0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x69 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE68 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1099 PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x1168 JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x11D1 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x11DD PUSH2 0x24C3 JUMP JUMPDEST PUSH1 0x6C PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1248 PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x12AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x132D JUMPI DUP1 PUSH1 0x69 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x13B0 JUMPI DUP1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x13ED JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH32 0x48BAE5B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E4 SWAP2 SWAP1 PUSH2 0x2EDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1420 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x66 PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP3 POP SWAP3 POP SWAP3 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x14AF JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x14DC JUMPI POP PUSH2 0x14BE ADDRESS PUSH2 0x20ED JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x14DB JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x151B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1512 SWAP1 PUSH2 0x327C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1558 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x69 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x1388 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1F4 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1638 PUSH2 0x2110 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1691 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1688 SWAP2 SWAP1 PUSH2 0x32EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16A4 DUP11 DUP11 DUP7 DUP10 DUP13 PUSH2 0x2169 JUMP JUMPDEST DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP13 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16E1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1700 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1724 SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP PUSH1 0x6E PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1775 SWAP1 PUSH2 0x3340 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0x6E PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17CC SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE POP PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP1 DUP10 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x34E33F86EB59D668184E1F86AEB03ED25F4CE72216218ED02DB752F21C6A4042 DUP11 DUP13 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x1AC0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x33F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B33 PUSH2 0x1CF1 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B6E SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B8D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BB1 SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1BBF PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C25 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C37 DUP2 PUSH2 0x2027 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1C42 PUSH2 0x1CF1 JUMP JUMPDEST DUP2 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xE38926C5806B98A6FD00C5D791A36FBD196537FE48D11C45C9F1D0ACD1EA74DF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1CE5 SWAP3 SWAP2 SWAP1 PUSH2 0x34C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1CF9 PUSH2 0x2378 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D17 PUSH2 0x1216 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D64 SWAP1 PUSH2 0x353C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1D77 PUSH2 0x24E3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x6D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x1DB4 SWAP2 SWAP1 PUSH2 0x355C JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x1DD3 SWAP2 SWAP1 PUSH2 0x3590 JUMP JUMPDEST PUSH2 0x1DDD SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1E29 SWAP2 SWAP1 PUSH2 0x3590 JUMP JUMPDEST PUSH2 0x1E33 SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1E50 SWAP2 SWAP1 PUSH2 0x355C JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1E9C SWAP2 SWAP1 PUSH2 0x3590 JUMP JUMPDEST PUSH2 0x1EA6 SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST DUP3 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x1EC3 SWAP2 SWAP1 PUSH2 0x355C JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x6D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F9A SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FDD SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x215F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2156 SWAP1 PUSH2 0x3644 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2167 PUSH2 0x2380 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x21F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21EC SWAP1 PUSH2 0x36B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 GT PUSH2 0x2238 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x222F SWAP1 PUSH2 0x371C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x22A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x229E SWAP1 PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2316 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x230D SWAP1 PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x6C PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x2371 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2368 SWAP1 PUSH2 0x37F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23C6 SWAP1 PUSH2 0x3644 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23DF PUSH2 0x23DA PUSH2 0x2378 JUMP JUMPDEST PUSH2 0x2027 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x252B DUP2 PUSH2 0x2518 JUMP JUMPDEST DUP2 EQ PUSH2 0x2536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2548 DUP2 PUSH2 0x2522 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2564 JUMPI PUSH2 0x2563 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2572 DUP5 DUP3 DUP6 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25B0 DUP2 PUSH2 0x2518 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x25CC PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25A7 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x25DF PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25A7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25F1 DUP4 DUP4 PUSH2 0x25B6 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2615 DUP3 PUSH2 0x257B JUMP JUMPDEST PUSH2 0x261F DUP2 DUP6 PUSH2 0x2586 JUMP JUMPDEST SWAP4 POP PUSH2 0x262A DUP4 PUSH2 0x2597 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x265B JUMPI DUP2 MLOAD PUSH2 0x2642 DUP9 DUP3 PUSH2 0x25E5 JUMP JUMPDEST SWAP8 POP PUSH2 0x264D DUP4 PUSH2 0x25FD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x262E JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2682 DUP2 DUP5 PUSH2 0x260A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26B5 DUP3 PUSH2 0x268A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26C5 DUP2 PUSH2 0x26AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2734 DUP3 PUSH2 0x26EB JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2753 JUMPI PUSH2 0x2752 PUSH2 0x26FC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2766 PUSH2 0x2504 JUMP JUMPDEST SWAP1 POP PUSH2 0x2772 DUP3 DUP3 PUSH2 0x272B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2792 JUMPI PUSH2 0x2791 PUSH2 0x26FC JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27C3 JUMPI PUSH2 0x27C2 PUSH2 0x27A8 JUMP JUMPDEST JUMPDEST PUSH2 0x27CD PUSH1 0x40 PUSH2 0x275C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27DD DUP5 DUP3 DUP6 ADD PUSH2 0x2539 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x27F1 DUP5 DUP3 DUP6 ADD PUSH2 0x2539 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2810 PUSH2 0x280B DUP5 PUSH2 0x2777 JUMP JUMPDEST PUSH2 0x275C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2833 JUMPI PUSH2 0x2832 PUSH2 0x27A3 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x285C JUMPI DUP1 PUSH2 0x2848 DUP9 DUP3 PUSH2 0x27AD JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2835 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x287B JUMPI PUSH2 0x287A PUSH2 0x26E6 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x288B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x27FD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28AB JUMPI PUSH2 0x28AA PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28B9 DUP6 DUP3 DUP7 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28DA JUMPI PUSH2 0x28D9 PUSH2 0x2513 JUMP JUMPDEST JUMPDEST PUSH2 0x28E6 DUP6 DUP3 DUP7 ADD PUSH2 0x2866 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x290B JUMPI PUSH2 0x290A PUSH2 0x26E6 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2928 JUMPI PUSH2 0x2927 PUSH2 0x28F0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2944 JUMPI PUSH2 0x2943 PUSH2 0x27A3 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2954 DUP2 PUSH2 0x26AA JUMP JUMPDEST DUP2 EQ PUSH2 0x295F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2971 DUP2 PUSH2 0x294B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2998 DUP2 PUSH2 0x2977 JUMP JUMPDEST DUP2 EQ PUSH2 0x29A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x29B5 DUP2 PUSH2 0x298F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x29D8 JUMPI PUSH2 0x29D7 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29E6 DUP10 DUP3 DUP11 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x29F7 DUP10 DUP3 DUP11 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A18 JUMPI PUSH2 0x2A17 PUSH2 0x2513 JUMP JUMPDEST JUMPDEST PUSH2 0x2A24 DUP10 DUP3 DUP11 ADD PUSH2 0x28F5 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 PUSH2 0x2A37 DUP10 DUP3 DUP11 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2A48 DUP10 DUP3 DUP11 ADD PUSH2 0x29A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x2A5E DUP2 PUSH2 0x2518 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2A79 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2A55 JUMP JUMPDEST PUSH2 0x2A86 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x26BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2AA2 DUP2 PUSH2 0x2A8D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2ABD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A99 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AD9 JUMPI PUSH2 0x2AD8 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AE7 DUP5 DUP3 DUP6 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2AF9 DUP2 PUSH2 0x26AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B12 DUP2 PUSH2 0x2AFF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2B21 DUP2 PUSH2 0x2977 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2B30 DUP2 PUSH2 0x2A8D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2B4D PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2AF0 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2B60 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2AF0 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2B73 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2AF0 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2B86 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2B09 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2B99 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2B18 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2BAC PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2B27 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2BBF PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2AF0 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2BD2 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2B18 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2BE7 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2B09 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2C03 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2B36 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C20 JUMPI PUSH2 0x2C1F PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C2E DUP6 DUP3 DUP7 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2C3F DUP6 DUP3 DUP7 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2C5F PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25A7 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2C72 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25A7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2C8D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2C49 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C9C DUP2 PUSH2 0x2A8D JUMP JUMPDEST DUP2 EQ PUSH2 0x2CA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2CB9 DUP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CD8 JUMPI PUSH2 0x2CD7 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CE6 DUP7 DUP3 DUP8 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2CF7 DUP7 DUP3 DUP8 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2D08 DUP7 DUP3 DUP8 ADD PUSH2 0x2CAA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D37 DUP2 PUSH2 0x2D12 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D46 DUP2 PUSH2 0x2AFF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2D61 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2D2E JUMP JUMPDEST PUSH2 0x2D6E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2D2E JUMP JUMPDEST PUSH2 0x2D7B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2D3D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2D8C DUP2 PUSH2 0x2AFF JUMP JUMPDEST DUP2 EQ PUSH2 0x2D97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2DA9 DUP2 PUSH2 0x2D83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2DC5 JUMPI PUSH2 0x2DC4 PUSH2 0x26E6 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2DE2 JUMPI PUSH2 0x2DE1 PUSH2 0x28F0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2DFE JUMPI PUSH2 0x2DFD PUSH2 0x27A3 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x2E28 JUMPI PUSH2 0x2E27 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E36 DUP13 DUP3 DUP14 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x20 PUSH2 0x2E47 DUP13 DUP3 DUP14 ADD PUSH2 0x2D9A JUMP JUMPDEST SWAP9 POP POP PUSH1 0x40 PUSH2 0x2E58 DUP13 DUP3 DUP14 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x60 PUSH2 0x2E69 DUP13 DUP3 DUP14 ADD PUSH2 0x29A6 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x80 PUSH2 0x2E7A DUP13 DUP3 DUP14 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP6 POP POP PUSH1 0xA0 PUSH2 0x2E8B DUP13 DUP3 DUP14 ADD PUSH2 0x2D9A JUMP JUMPDEST SWAP5 POP POP PUSH1 0xC0 PUSH2 0x2E9C DUP13 DUP3 DUP14 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EBD JUMPI PUSH2 0x2EBC PUSH2 0x2513 JUMP JUMPDEST JUMPDEST PUSH2 0x2EC9 DUP13 DUP3 DUP14 ADD PUSH2 0x2DAF JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EF0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A55 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F0F JUMPI PUSH2 0x2F0E PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F1D DUP7 DUP3 DUP8 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2F2E DUP7 DUP3 DUP8 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2F3F DUP7 DUP3 DUP8 ADD PUSH2 0x2D9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2F52 DUP2 PUSH2 0x2D12 JUMP JUMPDEST DUP2 EQ PUSH2 0x2F5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F6F DUP2 PUSH2 0x2F49 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F8C JUMPI PUSH2 0x2F8B PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F9A DUP6 DUP3 DUP7 ADD PUSH2 0x2F60 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2FAB DUP6 DUP3 DUP7 ADD PUSH2 0x2F60 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x301E DUP3 PUSH2 0x2977 JUMP JUMPDEST SWAP2 POP PUSH2 0x3029 DUP4 PUSH2 0x2977 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x304D JUMPI PUSH2 0x304C PUSH2 0x2FE4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3068 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x26BC JUMP JUMPDEST PUSH2 0x3075 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2D3D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x308B DUP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30A7 JUMPI PUSH2 0x30A6 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30B5 DUP5 DUP3 DUP6 ADD PUSH2 0x307C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x30F8 DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH2 0x3103 DUP4 PUSH2 0x2AFF JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3113 JUMPI PUSH2 0x3112 PUSH2 0x30BE JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3127 DUP2 PUSH2 0x2977 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3142 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2A55 JUMP JUMPDEST PUSH2 0x314F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x311E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x319D PUSH1 0xE DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x31A8 DUP3 PUSH2 0x3167 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31CC DUP2 PUSH2 0x3190 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31E8 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2A55 JUMP JUMPDEST PUSH2 0x31F5 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26BC JUMP JUMPDEST PUSH2 0x3202 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2A99 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3266 PUSH1 0x2E DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x3271 DUP3 PUSH2 0x320A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3295 DUP2 PUSH2 0x3259 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32D8 PUSH2 0x32D3 PUSH2 0x32CE DUP5 PUSH2 0x329C JUMP JUMPDEST PUSH2 0x32B3 JUMP JUMPDEST PUSH2 0x32A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32E8 DUP2 PUSH2 0x32BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3303 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x32DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x331E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x26BC JUMP JUMPDEST PUSH2 0x332B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26BC JUMP JUMPDEST PUSH2 0x3338 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2D3D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x334B DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x337D JUMPI PUSH2 0x337C PUSH2 0x2FE4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A3 PUSH2 0x339E PUSH2 0x3399 DUP5 PUSH2 0x2977 JUMP JUMPDEST PUSH2 0x32B3 JUMP JUMPDEST PUSH2 0x2AFF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33B3 DUP2 PUSH2 0x3388 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D4 DUP4 DUP6 PUSH2 0x3156 JUMP JUMPDEST SWAP4 POP PUSH2 0x33E1 DUP4 DUP6 DUP5 PUSH2 0x33B9 JUMP JUMPDEST PUSH2 0x33EA DUP4 PUSH2 0x26EB JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x340A PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x33AA JUMP JUMPDEST PUSH2 0x3417 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2A55 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x342A DUP2 DUP5 DUP7 PUSH2 0x33C8 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3491 PUSH1 0x26 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x349C DUP3 PUSH2 0x3435 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34C0 DUP2 PUSH2 0x3484 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x34DC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2D2E JUMP JUMPDEST PUSH2 0x34E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2D2E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3526 PUSH1 0x20 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x3531 DUP3 PUSH2 0x34F0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3555 DUP2 PUSH2 0x3519 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3567 DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH2 0x3572 DUP4 PUSH2 0x2AFF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x358A JUMPI PUSH2 0x3589 PUSH2 0x2FE4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359B DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH2 0x35A6 DUP4 PUSH2 0x2AFF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x35B4 DUP2 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x35CB JUMPI PUSH2 0x35CA PUSH2 0x2FE4 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x362E PUSH1 0x2B DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x3639 DUP3 PUSH2 0x35D2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x365D DUP2 PUSH2 0x3621 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x369A PUSH1 0x11 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x36A5 DUP3 PUSH2 0x3664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x36C9 DUP2 PUSH2 0x368D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3706 PUSH1 0xC DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x3711 DUP3 PUSH2 0x36D0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3735 DUP2 PUSH2 0x36F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3772 PUSH1 0x10 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x377D DUP3 PUSH2 0x373C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x37A1 DUP2 PUSH2 0x3765 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37DE PUSH1 0x16 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x37E9 DUP3 PUSH2 0x37A8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x380D DUP2 PUSH2 0x37D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 DUP3 EXTCODECOPY STATICCALL CREATE 0x49 PUSH3 0x4CC7C1 PUSH6 0xBACCD9AC4D6C 0xC8 ADDRESS PUSH7 0x9345B349CE319C 0xD5 0xC4 SWAP7 BALANCE CREATE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"367:9385:13:-:0;;;816:53;;;;;;;;;;840:22;:20;;;:22;;:::i;:::-;367:9385;;5939:280:1;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:17:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;367:9385:13:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_26":{"entryPoint":8464,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":9088,"id":37,"parameterSlots":0,"returnSlots":0},"@_calculateFees_3464":{"entryPoint":7535,"id":3464,"parameterSlots":2,"returnSlots":1},"@_checkOwner_68":{"entryPoint":7409,"id":68,"parameterSlots":0,"returnSlots":0},"@_handler_3133":{"entryPoint":8553,"id":3133,"parameterSlots":5,"returnSlots":0},"@_msgSender_1231":{"entryPoint":9080,"id":1231,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":8231,"id":125,"parameterSlots":1,"returnSlots":0},"@createOrder_3072":{"entryPoint":5781,"id":3072,"parameterSlots":9,"returnSlots":1},"@getFeeDetails_3580":{"entryPoint":5165,"id":3580,"parameterSlots":0,"returnSlots":3},"@getLiquidityAggregator_3589":{"entryPoint":1295,"id":3589,"parameterSlots":0,"returnSlots":1},"@getOrderInfo_3478":{"entryPoint":3680,"id":3478,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutionName_3505":{"entryPoint":4565,"id":3505,"parameterSlots":1,"returnSlots":1},"@getSupportedInstitutions_3564":{"entryPoint":977,"id":3564,"parameterSlots":1,"returnSlots":1},"@getWhitelistedStatus_3602":{"entryPoint":6869,"id":3602,"parameterSlots":1,"returnSlots":1},"@initialize_2967":{"entryPoint":5246,"id":2967,"parameterSlots":1,"returnSlots":0},"@isContract_892":{"entryPoint":8429,"id":892,"parameterSlots":1,"returnSlots":1},"@isTokenSupported_3491":{"entryPoint":3594,"id":3491,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":4630,"id":54,"parameterSlots":0,"returnSlots":1},"@refund_3380":{"entryPoint":2929,"id":3380,"parameterSlots":1,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":2909,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_3812":{"entryPoint":1337,"id":3812,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_3758":{"entryPoint":4672,"id":3758,"parameterSlots":3,"returnSlots":0},"@settle_3287":{"entryPoint":1613,"id":3287,"parameterSlots":6,"returnSlots":2},"@transferOwnership_105":{"entryPoint":7095,"id":105,"parameterSlots":1,"returnSlots":0},"@transferSenderFee_3323":{"entryPoint":7891,"id":3323,"parameterSlots":1,"returnSlots":0},"@updateProtocolAddresses_3871":{"entryPoint":4241,"id":3871,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_3835":{"entryPoint":7226,"id":3835,"parameterSlots":2,"returnSlots":0},"@withdraw_3622":{"entryPoint":6955,"id":3622,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":10237,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":10594,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_address_$dyn_calldata_ptr":{"entryPoint":10485,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":10342,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":11434,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":12412,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":9529,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_calldata_ptr":{"entryPoint":11695,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_struct$_Institution_$3633_memory_ptr":{"entryPoint":10157,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint128":{"entryPoint":12128,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":11674,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint96":{"entryPoint":10662,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10947,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":12022,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr":{"entryPoint":11781,"id":null,"parameterSlots":2,"returnSlots":9},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":12433,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":9550,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":11273,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":11455,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":10388,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_bytes32t_array$_t_address_$dyn_calldata_ptrt_addresst_uint96":{"entryPoint":10683,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint128t_uint128":{"entryPoint":12149,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr":{"entryPoint":9701,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":10992,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9916,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9738,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool":{"entryPoint":11047,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":10905,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":9639,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":10837,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":13023,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":13256,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":13444,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack":{"entryPoint":14073,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":12889,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack":{"entryPoint":12688,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack":{"entryPoint":14289,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":13593,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack":{"entryPoint":14181,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack":{"entryPoint":13965,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":13857,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_struct$_InstitutionByCode_$3638_memory_ptr_to_t_struct$_InstitutionByCode_$3638_memory_ptr_fromStack":{"entryPoint":11337,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr":{"entryPoint":9654,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_Order_$4294_memory_ptr_to_t_struct$_Order_$4294_memory_ptr_fromStack":{"entryPoint":11062,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint128_to_t_uint128_fromStack":{"entryPoint":11566,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":11017,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":11581,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint256_fromStack":{"entryPoint":13226,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96":{"entryPoint":11032,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96_fromStack":{"entryPoint":12574,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9931,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":13065,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12371,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9832,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":10920,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":11995,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":10852,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":12755,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint96__to_t_bytes32_t_uint96__fromStack_reversed":{"entryPoint":12589,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":13038,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13479,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14108,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12924,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12723,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14324,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13628,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14216,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14000,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13892,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_InstitutionByCode_$3638_memory_ptr__to_t_struct$_InstitutionByCode_$3638_memory_ptr__fromStack_reversed":{"entryPoint":11384,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_Order_$4294_memory_ptr__to_t_struct$_Order_$4294_memory_ptr__fromStack_reversed":{"entryPoint":11245,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed":{"entryPoint":13511,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint128_t_uint128_t_uint256__to_t_uint128_t_uint128_t_uint256__fromStack_reversed":{"entryPoint":11596,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint96_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13301,"id":null,"parameterSlots":5,"returnSlots":1},"allocate_memory":{"entryPoint":10076,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9476,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":10103,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":9623,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":9595,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":9725,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":9606,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":12630,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":12525,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":13712,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":13660,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint96":{"entryPoint":12307,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":9898,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":10893,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":9496,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":12956,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint128":{"entryPoint":11538,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9866,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":11007,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":12966,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":10615,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":12989,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint96_to_t_uint256":{"entryPoint":13192,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":13241,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":10027,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":12979,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":13120,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":12260,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":12478,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12213,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9980,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":10480,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9958,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":10152,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":10147,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9491,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9486,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9963,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":13365,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2":{"entryPoint":14032,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":12810,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5":{"entryPoint":12647,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5":{"entryPoint":14248,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":13552,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7":{"entryPoint":14140,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1":{"entryPoint":13924,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":13778,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":10571,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":11411,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":9506,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint128":{"entryPoint":12105,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":11651,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":10639,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:38330:17","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:17","statements":[{"nodeType":"YulAssignment","src":"57:19:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:17"},"nodeType":"YulFunctionCall","src":"67:9:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:17"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:17","type":""}],"src":"7:75:17"},{"body":{"nodeType":"YulBlock","src":"177:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:17"},"nodeType":"YulFunctionCall","src":"187:12:17"},"nodeType":"YulExpressionStatement","src":"187:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:17"},{"body":{"nodeType":"YulBlock","src":"300:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:17"},"nodeType":"YulFunctionCall","src":"310:12:17"},"nodeType":"YulExpressionStatement","src":"310:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:17"},{"body":{"nodeType":"YulBlock","src":"379:32:17","statements":[{"nodeType":"YulAssignment","src":"389:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:17"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:17","type":""}],"src":"334:77:17"},{"body":{"nodeType":"YulBlock","src":"460:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:17"},"nodeType":"YulFunctionCall","src":"519:12:17"},"nodeType":"YulExpressionStatement","src":"519:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:17"},"nodeType":"YulFunctionCall","src":"490:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:17"},"nodeType":"YulFunctionCall","src":"480:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:17"},"nodeType":"YulFunctionCall","src":"473:43:17"},"nodeType":"YulIf","src":"470:63:17"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:17","type":""}],"src":"417:122:17"},{"body":{"nodeType":"YulBlock","src":"597:87:17","statements":[{"nodeType":"YulAssignment","src":"607:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:17"},"nodeType":"YulFunctionCall","src":"616:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:17"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:17"},"nodeType":"YulFunctionCall","src":"645:33:17"},"nodeType":"YulExpressionStatement","src":"645:33:17"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:17","type":""}],"src":"545:139:17"},{"body":{"nodeType":"YulBlock","src":"756:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:17"},"nodeType":"YulFunctionCall","src":"804:79:17"},"nodeType":"YulExpressionStatement","src":"804:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:17"},"nodeType":"YulFunctionCall","src":"773:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:17"},"nodeType":"YulFunctionCall","src":"769:32:17"},"nodeType":"YulIf","src":"766:119:17"},{"nodeType":"YulBlock","src":"895:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:17","type":""}]},{"nodeType":"YulAssignment","src":"939:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:17"},"nodeType":"YulFunctionCall","src":"970:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"949:20:17"},"nodeType":"YulFunctionCall","src":"949:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:17","type":""}],"src":"690:329:17"},{"body":{"nodeType":"YulBlock","src":"1128:40:17","statements":[{"nodeType":"YulAssignment","src":"1139:22:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1155:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1149:5:17"},"nodeType":"YulFunctionCall","src":"1149:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1139:6:17"}]}]},"name":"array_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1111:5:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1121:6:17","type":""}],"src":"1025:143:17"},{"body":{"nodeType":"YulBlock","src":"1314:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1331:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"1336:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1324:6:17"},"nodeType":"YulFunctionCall","src":"1324:19:17"},"nodeType":"YulExpressionStatement","src":"1324:19:17"},{"nodeType":"YulAssignment","src":"1352:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1371:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"1376:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1367:3:17"},"nodeType":"YulFunctionCall","src":"1367:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1352:11:17"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1286:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"1291:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1302:11:17","type":""}],"src":"1174:213:17"},{"body":{"nodeType":"YulBlock","src":"1494:60:17","statements":[{"nodeType":"YulAssignment","src":"1504:11:17","value":{"name":"ptr","nodeType":"YulIdentifier","src":"1512:3:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1504:4:17"}]},{"nodeType":"YulAssignment","src":"1525:22:17","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1537:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"1542:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:17"},"nodeType":"YulFunctionCall","src":"1533:14:17"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1525:4:17"}]}]},"name":"array_dataslot_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1481:3:17","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1489:4:17","type":""}],"src":"1393:161:17"},{"body":{"nodeType":"YulBlock","src":"1615:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1632:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1655:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1637:17:17"},"nodeType":"YulFunctionCall","src":"1637:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1625:6:17"},"nodeType":"YulFunctionCall","src":"1625:37:17"},"nodeType":"YulExpressionStatement","src":"1625:37:17"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1603:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1610:3:17","type":""}],"src":"1560:108:17"},{"body":{"nodeType":"YulBlock","src":"1882:391:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1892:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1908:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"1913:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1904:3:17"},"nodeType":"YulFunctionCall","src":"1904:14:17"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"1896:4:17","type":""}]},{"nodeType":"YulBlock","src":"1928:164:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1963:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1993:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2000:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1989:3:17"},"nodeType":"YulFunctionCall","src":"1989:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1983:5:17"},"nodeType":"YulFunctionCall","src":"1983:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"1967:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2053:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2071:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2076:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:17"},"nodeType":"YulFunctionCall","src":"2067:14:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2019:33:17"},"nodeType":"YulFunctionCall","src":"2019:63:17"},"nodeType":"YulExpressionStatement","src":"2019:63:17"}]},{"nodeType":"YulBlock","src":"2102:164:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2137:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2167:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2174:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2163:3:17"},"nodeType":"YulFunctionCall","src":"2163:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2157:5:17"},"nodeType":"YulFunctionCall","src":"2157:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"2141:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"2227:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2245:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2250:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2241:3:17"},"nodeType":"YulFunctionCall","src":"2241:14:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"2193:33:17"},"nodeType":"YulFunctionCall","src":"2193:63:17"},"nodeType":"YulExpressionStatement","src":"2193:63:17"}]}]},"name":"abi_encode_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1869:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1876:3:17","type":""}],"src":"1768:505:17"},{"body":{"nodeType":"YulBlock","src":"2417:157:17","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2519:6:17"},{"name":"pos","nodeType":"YulIdentifier","src":"2527:3:17"}],"functionName":{"name":"abi_encode_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr","nodeType":"YulIdentifier","src":"2427:91:17"},"nodeType":"YulFunctionCall","src":"2427:104:17"},"nodeType":"YulExpressionStatement","src":"2427:104:17"},{"nodeType":"YulAssignment","src":"2540:28:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2558:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2563:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2554:3:17"},"nodeType":"YulFunctionCall","src":"2554:14:17"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"2540:10:17"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"2390:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2398:3:17","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"2406:10:17","type":""}],"src":"2279:295:17"},{"body":{"nodeType":"YulBlock","src":"2684:38:17","statements":[{"nodeType":"YulAssignment","src":"2694:22:17","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"2706:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"2711:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2702:3:17"},"nodeType":"YulFunctionCall","src":"2702:14:17"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"2694:4:17"}]}]},"name":"array_nextElement_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2671:3:17","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"2679:4:17","type":""}],"src":"2580:142:17"},{"body":{"nodeType":"YulBlock","src":"3008:782:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3018:97:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3109:5:17"}],"functionName":{"name":"array_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3032:76:17"},"nodeType":"YulFunctionCall","src":"3032:83:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3022:6:17","type":""}]},{"nodeType":"YulAssignment","src":"3124:122:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3234:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"3239:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3131:102:17"},"nodeType":"YulFunctionCall","src":"3131:115:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3124:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"3255:100:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3349:5:17"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3270:78:17"},"nodeType":"YulFunctionCall","src":"3270:85:17"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"3259:7:17","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3364:21:17","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"3378:7:17"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"3368:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3454:311:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3468:34:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3495:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3489:5:17"},"nodeType":"YulFunctionCall","src":"3489:13:17"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"3472:13:17","type":""}]},{"nodeType":"YulAssignment","src":"3515:128:17","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"3624:13:17"},{"name":"pos","nodeType":"YulIdentifier","src":"3639:3:17"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr","nodeType":"YulIdentifier","src":"3522:101:17"},"nodeType":"YulFunctionCall","src":"3522:121:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3515:3:17"}]},{"nodeType":"YulAssignment","src":"3656:99:17","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3748:6:17"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3666:81:17"},"nodeType":"YulFunctionCall","src":"3666:89:17"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"3656:6:17"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3416:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"3419:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3413:2:17"},"nodeType":"YulFunctionCall","src":"3413:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3427:18:17","statements":[{"nodeType":"YulAssignment","src":"3429:14:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3438:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"3441:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3434:3:17"},"nodeType":"YulFunctionCall","src":"3434:9:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3429:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"3398:14:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3400:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"3409:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3404:1:17","type":""}]}]},"src":"3394:371:17"},{"nodeType":"YulAssignment","src":"3774:10:17","value":{"name":"pos","nodeType":"YulIdentifier","src":"3781:3:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3774:3:17"}]}]},"name":"abi_encode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2987:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2994:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3003:3:17","type":""}],"src":"2826:964:17"},{"body":{"nodeType":"YulBlock","src":"4002:283:17","statements":[{"nodeType":"YulAssignment","src":"4012:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4024:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4035:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4020:3:17"},"nodeType":"YulFunctionCall","src":"4020:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4012:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4059:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4070:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4055:3:17"},"nodeType":"YulFunctionCall","src":"4055:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4078:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4084:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4074:3:17"},"nodeType":"YulFunctionCall","src":"4074:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4048:6:17"},"nodeType":"YulFunctionCall","src":"4048:47:17"},"nodeType":"YulExpressionStatement","src":"4048:47:17"},{"nodeType":"YulAssignment","src":"4104:174:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4264:6:17"},{"name":"tail","nodeType":"YulIdentifier","src":"4273:4:17"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4112:151:17"},"nodeType":"YulFunctionCall","src":"4112:166:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4104:4:17"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3974:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3986:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3997:4:17","type":""}],"src":"3796:489:17"},{"body":{"nodeType":"YulBlock","src":"4336:81:17","statements":[{"nodeType":"YulAssignment","src":"4346:65:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4361:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"4368:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4357:3:17"},"nodeType":"YulFunctionCall","src":"4357:54:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4346:7:17"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4318:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4328:7:17","type":""}],"src":"4291:126:17"},{"body":{"nodeType":"YulBlock","src":"4468:51:17","statements":[{"nodeType":"YulAssignment","src":"4478:35:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4507:5:17"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4489:17:17"},"nodeType":"YulFunctionCall","src":"4489:24:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4478:7:17"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4450:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4460:7:17","type":""}],"src":"4423:96:17"},{"body":{"nodeType":"YulBlock","src":"4590:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4607:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4630:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4612:17:17"},"nodeType":"YulFunctionCall","src":"4612:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4600:6:17"},"nodeType":"YulFunctionCall","src":"4600:37:17"},"nodeType":"YulExpressionStatement","src":"4600:37:17"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4578:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4585:3:17","type":""}],"src":"4525:118:17"},{"body":{"nodeType":"YulBlock","src":"4747:124:17","statements":[{"nodeType":"YulAssignment","src":"4757:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4769:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4780:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4765:3:17"},"nodeType":"YulFunctionCall","src":"4765:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4757:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4837:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4850:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4861:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4846:3:17"},"nodeType":"YulFunctionCall","src":"4846:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4793:43:17"},"nodeType":"YulFunctionCall","src":"4793:71:17"},"nodeType":"YulExpressionStatement","src":"4793:71:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4719:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4731:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4742:4:17","type":""}],"src":"4649:222:17"},{"body":{"nodeType":"YulBlock","src":"4966:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4983:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4986:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4976:6:17"},"nodeType":"YulFunctionCall","src":"4976:12:17"},"nodeType":"YulExpressionStatement","src":"4976:12:17"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"4877:117:17"},{"body":{"nodeType":"YulBlock","src":"5048:54:17","statements":[{"nodeType":"YulAssignment","src":"5058:38:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5076:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"5083:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5072:3:17"},"nodeType":"YulFunctionCall","src":"5072:14:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5092:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5088:3:17"},"nodeType":"YulFunctionCall","src":"5088:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5068:3:17"},"nodeType":"YulFunctionCall","src":"5068:28:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"5058:6:17"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5031:5:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"5041:6:17","type":""}],"src":"5000:102:17"},{"body":{"nodeType":"YulBlock","src":"5136:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5153:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5156:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5146:6:17"},"nodeType":"YulFunctionCall","src":"5146:88:17"},"nodeType":"YulExpressionStatement","src":"5146:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5250:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5253:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5243:6:17"},"nodeType":"YulFunctionCall","src":"5243:15:17"},"nodeType":"YulExpressionStatement","src":"5243:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5274:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5277:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5267:6:17"},"nodeType":"YulFunctionCall","src":"5267:15:17"},"nodeType":"YulExpressionStatement","src":"5267:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5108:180:17"},{"body":{"nodeType":"YulBlock","src":"5337:238:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5347:58:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5369:6:17"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5399:4:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5377:21:17"},"nodeType":"YulFunctionCall","src":"5377:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5365:3:17"},"nodeType":"YulFunctionCall","src":"5365:40:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5351:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"5516:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5518:16:17"},"nodeType":"YulFunctionCall","src":"5518:18:17"},"nodeType":"YulExpressionStatement","src":"5518:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5459:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"5471:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5456:2:17"},"nodeType":"YulFunctionCall","src":"5456:34:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5495:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5507:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5492:2:17"},"nodeType":"YulFunctionCall","src":"5492:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5453:2:17"},"nodeType":"YulFunctionCall","src":"5453:62:17"},"nodeType":"YulIf","src":"5450:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5554:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5558:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5547:6:17"},"nodeType":"YulFunctionCall","src":"5547:22:17"},"nodeType":"YulExpressionStatement","src":"5547:22:17"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5323:6:17","type":""},{"name":"size","nodeType":"YulTypedName","src":"5331:4:17","type":""}],"src":"5294:281:17"},{"body":{"nodeType":"YulBlock","src":"5622:88:17","statements":[{"nodeType":"YulAssignment","src":"5632:30:17","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5642:18:17"},"nodeType":"YulFunctionCall","src":"5642:20:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5632:6:17"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5691:6:17"},{"name":"size","nodeType":"YulIdentifier","src":"5699:4:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5671:19:17"},"nodeType":"YulFunctionCall","src":"5671:33:17"},"nodeType":"YulExpressionStatement","src":"5671:33:17"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5606:4:17","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5615:6:17","type":""}],"src":"5581:129:17"},{"body":{"nodeType":"YulBlock","src":"5827:229:17","statements":[{"body":{"nodeType":"YulBlock","src":"5932:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5934:16:17"},"nodeType":"YulFunctionCall","src":"5934:18:17"},"nodeType":"YulExpressionStatement","src":"5934:18:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5904:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"5912:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5901:2:17"},"nodeType":"YulFunctionCall","src":"5901:30:17"},"nodeType":"YulIf","src":"5898:56:17"},{"nodeType":"YulAssignment","src":"5964:25:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5976:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"5984:4:17","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5972:3:17"},"nodeType":"YulFunctionCall","src":"5972:17:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5964:4:17"}]},{"nodeType":"YulAssignment","src":"6026:23:17","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6038:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"6044:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6034:3:17"},"nodeType":"YulFunctionCall","src":"6034:15:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6026:4:17"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5811:6:17","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5822:4:17","type":""}],"src":"5716:340:17"},{"body":{"nodeType":"YulBlock","src":"6151:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6168:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6171:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6161:6:17"},"nodeType":"YulFunctionCall","src":"6161:12:17"},"nodeType":"YulExpressionStatement","src":"6161:12:17"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"6062:117:17"},{"body":{"nodeType":"YulBlock","src":"6274:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6291:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6294:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6284:6:17"},"nodeType":"YulFunctionCall","src":"6284:12:17"},"nodeType":"YulExpressionStatement","src":"6284:12:17"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"6185:117:17"},{"body":{"nodeType":"YulBlock","src":"6397:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6414:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6417:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6407:6:17"},"nodeType":"YulFunctionCall","src":"6407:12:17"},"nodeType":"YulExpressionStatement","src":"6407:12:17"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"6308:117:17"},{"body":{"nodeType":"YulBlock","src":"6564:494:17","statements":[{"body":{"nodeType":"YulBlock","src":"6608:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"6610:77:17"},"nodeType":"YulFunctionCall","src":"6610:79:17"},"nodeType":"YulExpressionStatement","src":"6610:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"6585:3:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6590:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6581:3:17"},"nodeType":"YulFunctionCall","src":"6581:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"6602:4:17","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6577:3:17"},"nodeType":"YulFunctionCall","src":"6577:30:17"},"nodeType":"YulIf","src":"6574:117:17"},{"nodeType":"YulAssignment","src":"6700:30:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6725:4:17","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6709:15:17"},"nodeType":"YulFunctionCall","src":"6709:21:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6700:5:17"}]},{"nodeType":"YulBlock","src":"6740:150:17","statements":[{"nodeType":"YulVariableDeclaration","src":"6775:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6789:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6779:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6815:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"6822:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6811:3:17"},"nodeType":"YulFunctionCall","src":"6811:16:17"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6854:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"6865:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6850:3:17"},"nodeType":"YulFunctionCall","src":"6850:22:17"},{"name":"end","nodeType":"YulIdentifier","src":"6874:3:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6829:20:17"},"nodeType":"YulFunctionCall","src":"6829:49:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6804:6:17"},"nodeType":"YulFunctionCall","src":"6804:75:17"},"nodeType":"YulExpressionStatement","src":"6804:75:17"}]},{"nodeType":"YulBlock","src":"6900:151:17","statements":[{"nodeType":"YulVariableDeclaration","src":"6935:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6949:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6939:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6976:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"6983:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6972:3:17"},"nodeType":"YulFunctionCall","src":"6972:16:17"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7015:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7026:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7011:3:17"},"nodeType":"YulFunctionCall","src":"7011:22:17"},{"name":"end","nodeType":"YulIdentifier","src":"7035:3:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6990:20:17"},"nodeType":"YulFunctionCall","src":"6990:49:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6965:6:17"},"nodeType":"YulFunctionCall","src":"6965:75:17"},"nodeType":"YulExpressionStatement","src":"6965:75:17"}]}]},"name":"abi_decode_t_struct$_Institution_$3633_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6539:9:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"6550:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6558:5:17","type":""}],"src":"6480:578:17"},{"body":{"nodeType":"YulBlock","src":"7246:666:17","statements":[{"nodeType":"YulAssignment","src":"7256:119:17","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7367:6:17"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7281:85:17"},"nodeType":"YulFunctionCall","src":"7281:93:17"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"7265:15:17"},"nodeType":"YulFunctionCall","src":"7265:110:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7256:5:17"}]},{"nodeType":"YulVariableDeclaration","src":"7384:16:17","value":{"name":"array","nodeType":"YulIdentifier","src":"7395:5:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7388:3:17","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7417:5:17"},{"name":"length","nodeType":"YulIdentifier","src":"7424:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7410:6:17"},"nodeType":"YulFunctionCall","src":"7410:21:17"},"nodeType":"YulExpressionStatement","src":"7410:21:17"},{"nodeType":"YulAssignment","src":"7440:23:17","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7451:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"7458:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7447:3:17"},"nodeType":"YulFunctionCall","src":"7447:16:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7440:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"7473:44:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7491:6:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7503:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"7511:4:17","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7499:3:17"},"nodeType":"YulFunctionCall","src":"7499:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7487:3:17"},"nodeType":"YulFunctionCall","src":"7487:30:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"7477:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"7545:103:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"7559:77:17"},"nodeType":"YulFunctionCall","src":"7559:79:17"},"nodeType":"YulExpressionStatement","src":"7559:79:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"7532:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"7540:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7529:2:17"},"nodeType":"YulFunctionCall","src":"7529:15:17"},"nodeType":"YulIf","src":"7526:122:17"},{"body":{"nodeType":"YulBlock","src":"7733:173:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7748:21:17","value":{"name":"src","nodeType":"YulIdentifier","src":"7766:3:17"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"7752:10:17","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7790:3:17"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"7845:10:17"},{"name":"end","nodeType":"YulIdentifier","src":"7857:3:17"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$3633_memory_ptr","nodeType":"YulIdentifier","src":"7795:49:17"},"nodeType":"YulFunctionCall","src":"7795:66:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7783:6:17"},"nodeType":"YulFunctionCall","src":"7783:79:17"},"nodeType":"YulExpressionStatement","src":"7783:79:17"},{"nodeType":"YulAssignment","src":"7875:21:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7886:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"7891:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7882:3:17"},"nodeType":"YulFunctionCall","src":"7882:14:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7875:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7686:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"7691:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7683:2:17"},"nodeType":"YulFunctionCall","src":"7683:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7699:25:17","statements":[{"nodeType":"YulAssignment","src":"7701:21:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7712:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"7717:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7708:3:17"},"nodeType":"YulFunctionCall","src":"7708:14:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"7701:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"7661:21:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7663:17:17","value":{"name":"offset","nodeType":"YulIdentifier","src":"7674:6:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"7667:3:17","type":""}]}]},"src":"7657:249:17"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7216:6:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"7224:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"7232:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7240:5:17","type":""}],"src":"7115:797:17"},{"body":{"nodeType":"YulBlock","src":"8075:322:17","statements":[{"body":{"nodeType":"YulBlock","src":"8124:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8126:77:17"},"nodeType":"YulFunctionCall","src":"8126:79:17"},"nodeType":"YulExpressionStatement","src":"8126:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8103:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8111:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8099:3:17"},"nodeType":"YulFunctionCall","src":"8099:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"8118:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8095:3:17"},"nodeType":"YulFunctionCall","src":"8095:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8088:6:17"},"nodeType":"YulFunctionCall","src":"8088:35:17"},"nodeType":"YulIf","src":"8085:122:17"},{"nodeType":"YulVariableDeclaration","src":"8216:34:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8243:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8230:12:17"},"nodeType":"YulFunctionCall","src":"8230:20:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8220:6:17","type":""}]},{"nodeType":"YulAssignment","src":"8259:132:17","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8364:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8372:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8360:3:17"},"nodeType":"YulFunctionCall","src":"8360:17:17"},{"name":"length","nodeType":"YulIdentifier","src":"8379:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"8387:3:17"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8268:91:17"},"nodeType":"YulFunctionCall","src":"8268:123:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8259:5:17"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8053:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"8061:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8069:5:17","type":""}],"src":"7969:428:17"},{"body":{"nodeType":"YulBlock","src":"8540:605:17","statements":[{"body":{"nodeType":"YulBlock","src":"8586:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8588:77:17"},"nodeType":"YulFunctionCall","src":"8588:79:17"},"nodeType":"YulExpressionStatement","src":"8588:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8561:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"8570:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8557:3:17"},"nodeType":"YulFunctionCall","src":"8557:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"8582:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8553:3:17"},"nodeType":"YulFunctionCall","src":"8553:32:17"},"nodeType":"YulIf","src":"8550:119:17"},{"nodeType":"YulBlock","src":"8679:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8694:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"8708:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8698:6:17","type":""}]},{"nodeType":"YulAssignment","src":"8723:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8758:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8769:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8754:3:17"},"nodeType":"YulFunctionCall","src":"8754:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8778:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"8733:20:17"},"nodeType":"YulFunctionCall","src":"8733:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8723:6:17"}]}]},{"nodeType":"YulBlock","src":"8806:332:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8821:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8852:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8863:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8848:3:17"},"nodeType":"YulFunctionCall","src":"8848:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8835:12:17"},"nodeType":"YulFunctionCall","src":"8835:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8825:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"8914:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8916:77:17"},"nodeType":"YulFunctionCall","src":"8916:79:17"},"nodeType":"YulExpressionStatement","src":"8916:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8886:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"8894:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8883:2:17"},"nodeType":"YulFunctionCall","src":"8883:30:17"},"nodeType":"YulIf","src":"8880:117:17"},{"nodeType":"YulAssignment","src":"9011:117:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9100:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"9111:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9096:3:17"},"nodeType":"YulFunctionCall","src":"9096:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9120:7:17"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9021:74:17"},"nodeType":"YulFunctionCall","src":"9021:107:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9011:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8502:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8513:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8525:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8533:6:17","type":""}],"src":"8403:742:17"},{"body":{"nodeType":"YulBlock","src":"9240:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9257:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9260:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9250:6:17"},"nodeType":"YulFunctionCall","src":"9250:12:17"},"nodeType":"YulExpressionStatement","src":"9250:12:17"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"9151:117:17"},{"body":{"nodeType":"YulBlock","src":"9381:478:17","statements":[{"body":{"nodeType":"YulBlock","src":"9430:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"9432:77:17"},"nodeType":"YulFunctionCall","src":"9432:79:17"},"nodeType":"YulExpressionStatement","src":"9432:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9409:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9417:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9405:3:17"},"nodeType":"YulFunctionCall","src":"9405:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"9424:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9401:3:17"},"nodeType":"YulFunctionCall","src":"9401:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9394:6:17"},"nodeType":"YulFunctionCall","src":"9394:35:17"},"nodeType":"YulIf","src":"9391:122:17"},{"nodeType":"YulAssignment","src":"9522:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9545:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9532:12:17"},"nodeType":"YulFunctionCall","src":"9532:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9522:6:17"}]},{"body":{"nodeType":"YulBlock","src":"9595:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"9597:77:17"},"nodeType":"YulFunctionCall","src":"9597:79:17"},"nodeType":"YulExpressionStatement","src":"9597:79:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9567:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9575:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9564:2:17"},"nodeType":"YulFunctionCall","src":"9564:30:17"},"nodeType":"YulIf","src":"9561:117:17"},{"nodeType":"YulAssignment","src":"9687:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9703:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9711:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9699:3:17"},"nodeType":"YulFunctionCall","src":"9699:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"9687:8:17"}]},{"body":{"nodeType":"YulBlock","src":"9770:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"9772:77:17"},"nodeType":"YulFunctionCall","src":"9772:79:17"},"nodeType":"YulExpressionStatement","src":"9772:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"9735:8:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9749:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9757:4:17","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9745:3:17"},"nodeType":"YulFunctionCall","src":"9745:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9731:3:17"},"nodeType":"YulFunctionCall","src":"9731:32:17"},{"name":"end","nodeType":"YulIdentifier","src":"9765:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9728:2:17"},"nodeType":"YulFunctionCall","src":"9728:41:17"},"nodeType":"YulIf","src":"9725:128:17"}]},"name":"abi_decode_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9348:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"9356:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"9364:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"9374:6:17","type":""}],"src":"9291:568:17"},{"body":{"nodeType":"YulBlock","src":"9908:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"9965:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9974:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9977:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9967:6:17"},"nodeType":"YulFunctionCall","src":"9967:12:17"},"nodeType":"YulExpressionStatement","src":"9967:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9931:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9956:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"9938:17:17"},"nodeType":"YulFunctionCall","src":"9938:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9928:2:17"},"nodeType":"YulFunctionCall","src":"9928:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9921:6:17"},"nodeType":"YulFunctionCall","src":"9921:43:17"},"nodeType":"YulIf","src":"9918:63:17"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9901:5:17","type":""}],"src":"9865:122:17"},{"body":{"nodeType":"YulBlock","src":"10045:87:17","statements":[{"nodeType":"YulAssignment","src":"10055:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10077:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10064:12:17"},"nodeType":"YulFunctionCall","src":"10064:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10055:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10120:5:17"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"10093:26:17"},"nodeType":"YulFunctionCall","src":"10093:33:17"},"nodeType":"YulExpressionStatement","src":"10093:33:17"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10023:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"10031:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10039:5:17","type":""}],"src":"9993:139:17"},{"body":{"nodeType":"YulBlock","src":"10182:65:17","statements":[{"nodeType":"YulAssignment","src":"10192:49:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10207:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"10214:26:17","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10203:3:17"},"nodeType":"YulFunctionCall","src":"10203:38:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"10192:7:17"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10164:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"10174:7:17","type":""}],"src":"10138:109:17"},{"body":{"nodeType":"YulBlock","src":"10295:78:17","statements":[{"body":{"nodeType":"YulBlock","src":"10351:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10360:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10363:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10353:6:17"},"nodeType":"YulFunctionCall","src":"10353:12:17"},"nodeType":"YulExpressionStatement","src":"10353:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10318:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10342:5:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"10325:16:17"},"nodeType":"YulFunctionCall","src":"10325:23:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10315:2:17"},"nodeType":"YulFunctionCall","src":"10315:34:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10308:6:17"},"nodeType":"YulFunctionCall","src":"10308:42:17"},"nodeType":"YulIf","src":"10305:62:17"}]},"name":"validator_revert_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10288:5:17","type":""}],"src":"10253:120:17"},{"body":{"nodeType":"YulBlock","src":"10430:86:17","statements":[{"nodeType":"YulAssignment","src":"10440:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10462:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10449:12:17"},"nodeType":"YulFunctionCall","src":"10449:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"10440:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10504:5:17"}],"functionName":{"name":"validator_revert_t_uint96","nodeType":"YulIdentifier","src":"10478:25:17"},"nodeType":"YulFunctionCall","src":"10478:32:17"},"nodeType":"YulExpressionStatement","src":"10478:32:17"}]},"name":"abi_decode_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10408:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"10416:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"10424:5:17","type":""}],"src":"10379:137:17"},{"body":{"nodeType":"YulBlock","src":"10690:971:17","statements":[{"body":{"nodeType":"YulBlock","src":"10737:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10739:77:17"},"nodeType":"YulFunctionCall","src":"10739:79:17"},"nodeType":"YulExpressionStatement","src":"10739:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10711:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"10720:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10707:3:17"},"nodeType":"YulFunctionCall","src":"10707:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"10732:3:17","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10703:3:17"},"nodeType":"YulFunctionCall","src":"10703:33:17"},"nodeType":"YulIf","src":"10700:120:17"},{"nodeType":"YulBlock","src":"10830:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"10845:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"10859:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10849:6:17","type":""}]},{"nodeType":"YulAssignment","src":"10874:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10909:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"10920:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10905:3:17"},"nodeType":"YulFunctionCall","src":"10905:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10929:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10884:20:17"},"nodeType":"YulFunctionCall","src":"10884:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10874:6:17"}]}]},{"nodeType":"YulBlock","src":"10957:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"10972:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"10986:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10976:6:17","type":""}]},{"nodeType":"YulAssignment","src":"11002:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11037:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"11048:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11033:3:17"},"nodeType":"YulFunctionCall","src":"11033:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11057:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"11012:20:17"},"nodeType":"YulFunctionCall","src":"11012:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11002:6:17"}]}]},{"nodeType":"YulBlock","src":"11085:313:17","statements":[{"nodeType":"YulVariableDeclaration","src":"11100:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11131:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11142:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11127:3:17"},"nodeType":"YulFunctionCall","src":"11127:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11114:12:17"},"nodeType":"YulFunctionCall","src":"11114:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11104:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"11193:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"11195:77:17"},"nodeType":"YulFunctionCall","src":"11195:79:17"},"nodeType":"YulExpressionStatement","src":"11195:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11165:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"11173:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11162:2:17"},"nodeType":"YulFunctionCall","src":"11162:30:17"},"nodeType":"YulIf","src":"11159:117:17"},{"nodeType":"YulAssignment","src":"11290:98:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11360:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"11371:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11356:3:17"},"nodeType":"YulFunctionCall","src":"11356:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11380:7:17"}],"functionName":{"name":"abi_decode_t_array$_t_address_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"11308:47:17"},"nodeType":"YulFunctionCall","src":"11308:80:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11290:6:17"},{"name":"value3","nodeType":"YulIdentifier","src":"11298:6:17"}]}]},{"nodeType":"YulBlock","src":"11408:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"11423:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"11437:2:17","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11427:6:17","type":""}]},{"nodeType":"YulAssignment","src":"11453:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11488:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"11499:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11484:3:17"},"nodeType":"YulFunctionCall","src":"11484:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11508:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11463:20:17"},"nodeType":"YulFunctionCall","src":"11463:53:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"11453:6:17"}]}]},{"nodeType":"YulBlock","src":"11536:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"11551:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"11565:3:17","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11555:6:17","type":""}]},{"nodeType":"YulAssignment","src":"11582:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11616:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"11627:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11612:3:17"},"nodeType":"YulFunctionCall","src":"11612:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11636:7:17"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"11592:19:17"},"nodeType":"YulFunctionCall","src":"11592:52:17"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"11582:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_array$_t_address_$dyn_calldata_ptrt_addresst_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10620:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10631:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10643:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10651:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10659:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10667:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"10675:6:17","type":""},{"name":"value5","nodeType":"YulTypedName","src":"10683:6:17","type":""}],"src":"10522:1139:17"},{"body":{"nodeType":"YulBlock","src":"11732:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11749:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11772:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"11754:17:17"},"nodeType":"YulFunctionCall","src":"11754:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11742:6:17"},"nodeType":"YulFunctionCall","src":"11742:37:17"},"nodeType":"YulExpressionStatement","src":"11742:37:17"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11720:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11727:3:17","type":""}],"src":"11667:118:17"},{"body":{"nodeType":"YulBlock","src":"11917:206:17","statements":[{"nodeType":"YulAssignment","src":"11927:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11939:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11950:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11935:3:17"},"nodeType":"YulFunctionCall","src":"11935:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11927:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12007:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12020:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12031:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12016:3:17"},"nodeType":"YulFunctionCall","src":"12016:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11963:43:17"},"nodeType":"YulFunctionCall","src":"11963:71:17"},"nodeType":"YulExpressionStatement","src":"11963:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12088:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12101:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12112:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12097:3:17"},"nodeType":"YulFunctionCall","src":"12097:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12044:43:17"},"nodeType":"YulFunctionCall","src":"12044:72:17"},"nodeType":"YulExpressionStatement","src":"12044:72:17"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11881:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11893:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11901:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11912:4:17","type":""}],"src":"11791:332:17"},{"body":{"nodeType":"YulBlock","src":"12171:48:17","statements":[{"nodeType":"YulAssignment","src":"12181:32:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12206:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12199:6:17"},"nodeType":"YulFunctionCall","src":"12199:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12192:6:17"},"nodeType":"YulFunctionCall","src":"12192:21:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12181:7:17"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12153:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12163:7:17","type":""}],"src":"12129:90:17"},{"body":{"nodeType":"YulBlock","src":"12284:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12301:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12321:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"12306:14:17"},"nodeType":"YulFunctionCall","src":"12306:21:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12294:6:17"},"nodeType":"YulFunctionCall","src":"12294:34:17"},"nodeType":"YulExpressionStatement","src":"12294:34:17"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12272:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12279:3:17","type":""}],"src":"12225:109:17"},{"body":{"nodeType":"YulBlock","src":"12432:118:17","statements":[{"nodeType":"YulAssignment","src":"12442:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12454:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12465:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12450:3:17"},"nodeType":"YulFunctionCall","src":"12450:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12442:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12516:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12529:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12540:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12525:3:17"},"nodeType":"YulFunctionCall","src":"12525:17:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"12478:37:17"},"nodeType":"YulFunctionCall","src":"12478:65:17"},"nodeType":"YulExpressionStatement","src":"12478:65:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12404:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12416:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12427:4:17","type":""}],"src":"12340:210:17"},{"body":{"nodeType":"YulBlock","src":"12622:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"12668:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12670:77:17"},"nodeType":"YulFunctionCall","src":"12670:79:17"},"nodeType":"YulExpressionStatement","src":"12670:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12643:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"12652:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12639:3:17"},"nodeType":"YulFunctionCall","src":"12639:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"12664:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12635:3:17"},"nodeType":"YulFunctionCall","src":"12635:32:17"},"nodeType":"YulIf","src":"12632:119:17"},{"nodeType":"YulBlock","src":"12761:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"12776:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"12790:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12780:6:17","type":""}]},{"nodeType":"YulAssignment","src":"12805:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12840:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"12851:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12836:3:17"},"nodeType":"YulFunctionCall","src":"12836:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12860:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12815:20:17"},"nodeType":"YulFunctionCall","src":"12815:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12805:6:17"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12592:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12603:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12615:6:17","type":""}],"src":"12556:329:17"},{"body":{"nodeType":"YulBlock","src":"12946:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12963:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12986:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"12968:17:17"},"nodeType":"YulFunctionCall","src":"12968:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12956:6:17"},"nodeType":"YulFunctionCall","src":"12956:37:17"},"nodeType":"YulExpressionStatement","src":"12956:37:17"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12934:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12941:3:17","type":""}],"src":"12891:108:17"},{"body":{"nodeType":"YulBlock","src":"13050:32:17","statements":[{"nodeType":"YulAssignment","src":"13060:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"13071:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"13060:7:17"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13032:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"13042:7:17","type":""}],"src":"13005:77:17"},{"body":{"nodeType":"YulBlock","src":"13143:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13160:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13183:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13165:17:17"},"nodeType":"YulFunctionCall","src":"13165:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13153:6:17"},"nodeType":"YulFunctionCall","src":"13153:37:17"},"nodeType":"YulExpressionStatement","src":"13153:37:17"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13131:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13138:3:17","type":""}],"src":"13088:108:17"},{"body":{"nodeType":"YulBlock","src":"13255:52:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13272:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13294:5:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"13277:16:17"},"nodeType":"YulFunctionCall","src":"13277:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13265:6:17"},"nodeType":"YulFunctionCall","src":"13265:36:17"},"nodeType":"YulExpressionStatement","src":"13265:36:17"}]},"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13243:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13250:3:17","type":""}],"src":"13202:105:17"},{"body":{"nodeType":"YulBlock","src":"13362:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13379:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13399:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"13384:14:17"},"nodeType":"YulFunctionCall","src":"13384:21:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13372:6:17"},"nodeType":"YulFunctionCall","src":"13372:34:17"},"nodeType":"YulExpressionStatement","src":"13372:34:17"}]},"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13350:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13357:3:17","type":""}],"src":"13313:99:17"},{"body":{"nodeType":"YulBlock","src":"13586:1651:17","statements":[{"nodeType":"YulVariableDeclaration","src":"13596:28:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13612:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"13617:6:17","type":"","value":"0x0120"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13608:3:17"},"nodeType":"YulFunctionCall","src":"13608:16:17"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"13600:4:17","type":""}]},{"nodeType":"YulBlock","src":"13634:166:17","statements":[{"nodeType":"YulVariableDeclaration","src":"13671:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13701:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"13708:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13697:3:17"},"nodeType":"YulFunctionCall","src":"13697:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13691:5:17"},"nodeType":"YulFunctionCall","src":"13691:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13675:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"13761:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13779:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"13784:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13775:3:17"},"nodeType":"YulFunctionCall","src":"13775:14:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"13727:33:17"},"nodeType":"YulFunctionCall","src":"13727:63:17"},"nodeType":"YulExpressionStatement","src":"13727:63:17"}]},{"nodeType":"YulBlock","src":"13810:165:17","statements":[{"nodeType":"YulVariableDeclaration","src":"13846:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13876:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"13883:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13872:3:17"},"nodeType":"YulFunctionCall","src":"13872:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13866:5:17"},"nodeType":"YulFunctionCall","src":"13866:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13850:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"13936:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13954:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"13959:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13950:3:17"},"nodeType":"YulFunctionCall","src":"13950:14:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"13902:33:17"},"nodeType":"YulFunctionCall","src":"13902:63:17"},"nodeType":"YulExpressionStatement","src":"13902:63:17"}]},{"nodeType":"YulBlock","src":"13985:178:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14034:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14064:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14071:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14060:3:17"},"nodeType":"YulFunctionCall","src":"14060:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14054:5:17"},"nodeType":"YulFunctionCall","src":"14054:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14038:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14124:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14142:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"14147:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14138:3:17"},"nodeType":"YulFunctionCall","src":"14138:14:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"14090:33:17"},"nodeType":"YulFunctionCall","src":"14090:63:17"},"nodeType":"YulExpressionStatement","src":"14090:63:17"}]},{"nodeType":"YulBlock","src":"14173:169:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14213:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14243:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14250:4:17","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14239:3:17"},"nodeType":"YulFunctionCall","src":"14239:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14233:5:17"},"nodeType":"YulFunctionCall","src":"14233:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14217:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14303:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14321:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"14326:4:17","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14317:3:17"},"nodeType":"YulFunctionCall","src":"14317:14:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"14269:33:17"},"nodeType":"YulFunctionCall","src":"14269:63:17"},"nodeType":"YulExpressionStatement","src":"14269:63:17"}]},{"nodeType":"YulBlock","src":"14352:162:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14387:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14417:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14424:4:17","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14413:3:17"},"nodeType":"YulFunctionCall","src":"14413:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14407:5:17"},"nodeType":"YulFunctionCall","src":"14407:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14391:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14475:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14493:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"14498:4:17","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14489:3:17"},"nodeType":"YulFunctionCall","src":"14489:14:17"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"14443:31:17"},"nodeType":"YulFunctionCall","src":"14443:61:17"},"nodeType":"YulExpressionStatement","src":"14443:61:17"}]},{"nodeType":"YulBlock","src":"14524:165:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14566:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14596:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14603:4:17","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14592:3:17"},"nodeType":"YulFunctionCall","src":"14592:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14586:5:17"},"nodeType":"YulFunctionCall","src":"14586:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14570:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14650:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14668:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"14673:4:17","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14664:3:17"},"nodeType":"YulFunctionCall","src":"14664:14:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool","nodeType":"YulIdentifier","src":"14622:27:17"},"nodeType":"YulFunctionCall","src":"14622:57:17"},"nodeType":"YulExpressionStatement","src":"14622:57:17"}]},{"nodeType":"YulBlock","src":"14699:173:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14743:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14773:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14780:4:17","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14769:3:17"},"nodeType":"YulFunctionCall","src":"14769:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14763:5:17"},"nodeType":"YulFunctionCall","src":"14763:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14747:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14833:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14851:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"14856:4:17","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14847:3:17"},"nodeType":"YulFunctionCall","src":"14847:14:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"14799:33:17"},"nodeType":"YulFunctionCall","src":"14799:63:17"},"nodeType":"YulExpressionStatement","src":"14799:63:17"}]},{"nodeType":"YulBlock","src":"14882:168:17","statements":[{"nodeType":"YulVariableDeclaration","src":"14923:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14953:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"14960:4:17","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14949:3:17"},"nodeType":"YulFunctionCall","src":"14949:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14943:5:17"},"nodeType":"YulFunctionCall","src":"14943:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14927:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15011:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15029:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"15034:4:17","type":"","value":"0xe0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15025:3:17"},"nodeType":"YulFunctionCall","src":"15025:14:17"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96","nodeType":"YulIdentifier","src":"14979:31:17"},"nodeType":"YulFunctionCall","src":"14979:61:17"},"nodeType":"YulExpressionStatement","src":"14979:61:17"}]},{"nodeType":"YulBlock","src":"15060:170:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15097:45:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15127:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"15134:6:17","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15123:3:17"},"nodeType":"YulFunctionCall","src":"15123:18:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15117:5:17"},"nodeType":"YulFunctionCall","src":"15117:25:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"15101:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"15189:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15207:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"15212:6:17","type":"","value":"0x0100"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15203:3:17"},"nodeType":"YulFunctionCall","src":"15203:16:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"15155:33:17"},"nodeType":"YulFunctionCall","src":"15155:65:17"},"nodeType":"YulExpressionStatement","src":"15155:65:17"}]}]},"name":"abi_encode_t_struct$_Order_$4294_memory_ptr_to_t_struct$_Order_$4294_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13573:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13580:3:17","type":""}],"src":"13474:1763:17"},{"body":{"nodeType":"YulBlock","src":"15387:171:17","statements":[{"nodeType":"YulAssignment","src":"15397:27:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15409:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15420:3:17","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15405:3:17"},"nodeType":"YulFunctionCall","src":"15405:19:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15397:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15524:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15537:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"15548:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15533:3:17"},"nodeType":"YulFunctionCall","src":"15533:17:17"}],"functionName":{"name":"abi_encode_t_struct$_Order_$4294_memory_ptr_to_t_struct$_Order_$4294_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15434:89:17"},"nodeType":"YulFunctionCall","src":"15434:117:17"},"nodeType":"YulExpressionStatement","src":"15434:117:17"}]},"name":"abi_encode_tuple_t_struct$_Order_$4294_memory_ptr__to_t_struct$_Order_$4294_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15359:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15371:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15382:4:17","type":""}],"src":"15243:315:17"},{"body":{"nodeType":"YulBlock","src":"15647:391:17","statements":[{"body":{"nodeType":"YulBlock","src":"15693:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15695:77:17"},"nodeType":"YulFunctionCall","src":"15695:79:17"},"nodeType":"YulExpressionStatement","src":"15695:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15668:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"15677:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15664:3:17"},"nodeType":"YulFunctionCall","src":"15664:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"15689:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15660:3:17"},"nodeType":"YulFunctionCall","src":"15660:32:17"},"nodeType":"YulIf","src":"15657:119:17"},{"nodeType":"YulBlock","src":"15786:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15801:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"15815:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15805:6:17","type":""}]},{"nodeType":"YulAssignment","src":"15830:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15865:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"15876:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15861:3:17"},"nodeType":"YulFunctionCall","src":"15861:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15885:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"15840:20:17"},"nodeType":"YulFunctionCall","src":"15840:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15830:6:17"}]}]},{"nodeType":"YulBlock","src":"15913:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15928:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"15942:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15932:6:17","type":""}]},{"nodeType":"YulAssignment","src":"15958:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15993:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"16004:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15989:3:17"},"nodeType":"YulFunctionCall","src":"15989:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16013:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15968:20:17"},"nodeType":"YulFunctionCall","src":"15968:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15958:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15609:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15620:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15632:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15640:6:17","type":""}],"src":"15564:474:17"},{"body":{"nodeType":"YulBlock","src":"16286:395:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16296:26:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16312:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16317:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16308:3:17"},"nodeType":"YulFunctionCall","src":"16308:14:17"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"16300:4:17","type":""}]},{"nodeType":"YulBlock","src":"16332:164:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16367:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16397:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"16404:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16393:3:17"},"nodeType":"YulFunctionCall","src":"16393:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16387:5:17"},"nodeType":"YulFunctionCall","src":"16387:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16371:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16457:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16475:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16480:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16471:3:17"},"nodeType":"YulFunctionCall","src":"16471:14:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"16423:33:17"},"nodeType":"YulFunctionCall","src":"16423:63:17"},"nodeType":"YulExpressionStatement","src":"16423:63:17"}]},{"nodeType":"YulBlock","src":"16506:168:17","statements":[{"nodeType":"YulVariableDeclaration","src":"16545:43:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16575:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"16582:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16571:3:17"},"nodeType":"YulFunctionCall","src":"16571:16:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16565:5:17"},"nodeType":"YulFunctionCall","src":"16565:23:17"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"16549:12:17","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"16635:12:17"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16653:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16658:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16649:3:17"},"nodeType":"YulFunctionCall","src":"16649:14:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"16601:33:17"},"nodeType":"YulFunctionCall","src":"16601:63:17"},"nodeType":"YulExpressionStatement","src":"16601:63:17"}]}]},"name":"abi_encode_t_struct$_InstitutionByCode_$3638_memory_ptr_to_t_struct$_InstitutionByCode_$3638_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16273:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16280:3:17","type":""}],"src":"16150:531:17"},{"body":{"nodeType":"YulBlock","src":"16855:194:17","statements":[{"nodeType":"YulAssignment","src":"16865:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16877:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16888:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16873:3:17"},"nodeType":"YulFunctionCall","src":"16873:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16865:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17015:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17028:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17039:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17024:3:17"},"nodeType":"YulFunctionCall","src":"17024:17:17"}],"functionName":{"name":"abi_encode_t_struct$_InstitutionByCode_$3638_memory_ptr_to_t_struct$_InstitutionByCode_$3638_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16901:113:17"},"nodeType":"YulFunctionCall","src":"16901:141:17"},"nodeType":"YulExpressionStatement","src":"16901:141:17"}]},"name":"abi_encode_tuple_t_struct$_InstitutionByCode_$3638_memory_ptr__to_t_struct$_InstitutionByCode_$3638_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16827:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16839:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16850:4:17","type":""}],"src":"16687:362:17"},{"body":{"nodeType":"YulBlock","src":"17095:76:17","statements":[{"body":{"nodeType":"YulBlock","src":"17149:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17158:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17161:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17151:6:17"},"nodeType":"YulFunctionCall","src":"17151:12:17"},"nodeType":"YulExpressionStatement","src":"17151:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17118:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17140:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"17125:14:17"},"nodeType":"YulFunctionCall","src":"17125:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17115:2:17"},"nodeType":"YulFunctionCall","src":"17115:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17108:6:17"},"nodeType":"YulFunctionCall","src":"17108:40:17"},"nodeType":"YulIf","src":"17105:60:17"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17088:5:17","type":""}],"src":"17055:116:17"},{"body":{"nodeType":"YulBlock","src":"17226:84:17","statements":[{"nodeType":"YulAssignment","src":"17236:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17258:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17245:12:17"},"nodeType":"YulFunctionCall","src":"17245:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"17236:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17298:5:17"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"17274:23:17"},"nodeType":"YulFunctionCall","src":"17274:30:17"},"nodeType":"YulExpressionStatement","src":"17274:30:17"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"17204:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"17212:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"17220:5:17","type":""}],"src":"17177:133:17"},{"body":{"nodeType":"YulBlock","src":"17413:516:17","statements":[{"body":{"nodeType":"YulBlock","src":"17459:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17461:77:17"},"nodeType":"YulFunctionCall","src":"17461:79:17"},"nodeType":"YulExpressionStatement","src":"17461:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17434:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"17443:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17430:3:17"},"nodeType":"YulFunctionCall","src":"17430:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"17455:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17426:3:17"},"nodeType":"YulFunctionCall","src":"17426:32:17"},"nodeType":"YulIf","src":"17423:119:17"},{"nodeType":"YulBlock","src":"17552:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"17567:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"17581:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17571:6:17","type":""}]},{"nodeType":"YulAssignment","src":"17596:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17631:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"17642:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17627:3:17"},"nodeType":"YulFunctionCall","src":"17627:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17651:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"17606:20:17"},"nodeType":"YulFunctionCall","src":"17606:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17596:6:17"}]}]},{"nodeType":"YulBlock","src":"17679:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"17694:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"17708:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17698:6:17","type":""}]},{"nodeType":"YulAssignment","src":"17724:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17759:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"17770:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17755:3:17"},"nodeType":"YulFunctionCall","src":"17755:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17779:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"17734:20:17"},"nodeType":"YulFunctionCall","src":"17734:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"17724:6:17"}]}]},{"nodeType":"YulBlock","src":"17807:115:17","statements":[{"nodeType":"YulVariableDeclaration","src":"17822:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"17836:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17826:6:17","type":""}]},{"nodeType":"YulAssignment","src":"17852:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17884:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"17895:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17880:3:17"},"nodeType":"YulFunctionCall","src":"17880:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17904:7:17"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"17862:17:17"},"nodeType":"YulFunctionCall","src":"17862:50:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"17852:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17367:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17378:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17390:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17398:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17406:6:17","type":""}],"src":"17316:613:17"},{"body":{"nodeType":"YulBlock","src":"17980:73:17","statements":[{"nodeType":"YulAssignment","src":"17990:57:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18005:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"18012:34:17","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18001:3:17"},"nodeType":"YulFunctionCall","src":"18001:46:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17990:7:17"}]}]},"name":"cleanup_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17962:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17972:7:17","type":""}],"src":"17935:118:17"},{"body":{"nodeType":"YulBlock","src":"18124:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18141:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18164:5:17"}],"functionName":{"name":"cleanup_t_uint128","nodeType":"YulIdentifier","src":"18146:17:17"},"nodeType":"YulFunctionCall","src":"18146:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18134:6:17"},"nodeType":"YulFunctionCall","src":"18134:37:17"},"nodeType":"YulExpressionStatement","src":"18134:37:17"}]},"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18112:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18119:3:17","type":""}],"src":"18059:118:17"},{"body":{"nodeType":"YulBlock","src":"18248:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18265:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18288:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18270:17:17"},"nodeType":"YulFunctionCall","src":"18270:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18258:6:17"},"nodeType":"YulFunctionCall","src":"18258:37:17"},"nodeType":"YulExpressionStatement","src":"18258:37:17"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18236:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18243:3:17","type":""}],"src":"18183:118:17"},{"body":{"nodeType":"YulBlock","src":"18461:288:17","statements":[{"nodeType":"YulAssignment","src":"18471:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18483:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18494:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18479:3:17"},"nodeType":"YulFunctionCall","src":"18479:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18471:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18551:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18564:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18575:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18560:3:17"},"nodeType":"YulFunctionCall","src":"18560:17:17"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulIdentifier","src":"18507:43:17"},"nodeType":"YulFunctionCall","src":"18507:71:17"},"nodeType":"YulExpressionStatement","src":"18507:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18632:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18645:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18656:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18641:3:17"},"nodeType":"YulFunctionCall","src":"18641:18:17"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulIdentifier","src":"18588:43:17"},"nodeType":"YulFunctionCall","src":"18588:72:17"},"nodeType":"YulExpressionStatement","src":"18588:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"18714:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18727:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"18738:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18723:3:17"},"nodeType":"YulFunctionCall","src":"18723:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"18670:43:17"},"nodeType":"YulFunctionCall","src":"18670:72:17"},"nodeType":"YulExpressionStatement","src":"18670:72:17"}]},"name":"abi_encode_tuple_t_uint128_t_uint128_t_uint256__to_t_uint128_t_uint128_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18417:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18429:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18437:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18445:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18456:4:17","type":""}],"src":"18307:442:17"},{"body":{"nodeType":"YulBlock","src":"18798:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"18855:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18864:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18867:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18857:6:17"},"nodeType":"YulFunctionCall","src":"18857:12:17"},"nodeType":"YulExpressionStatement","src":"18857:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18821:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18846:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18828:17:17"},"nodeType":"YulFunctionCall","src":"18828:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18818:2:17"},"nodeType":"YulFunctionCall","src":"18818:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"18811:6:17"},"nodeType":"YulFunctionCall","src":"18811:43:17"},"nodeType":"YulIf","src":"18808:63:17"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18791:5:17","type":""}],"src":"18755:122:17"},{"body":{"nodeType":"YulBlock","src":"18935:87:17","statements":[{"nodeType":"YulAssignment","src":"18945:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"18967:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"18954:12:17"},"nodeType":"YulFunctionCall","src":"18954:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18945:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19010:5:17"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"18983:26:17"},"nodeType":"YulFunctionCall","src":"18983:33:17"},"nodeType":"YulExpressionStatement","src":"18983:33:17"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"18913:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"18921:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"18929:5:17","type":""}],"src":"18883:139:17"},{"body":{"nodeType":"YulBlock","src":"19117:478:17","statements":[{"body":{"nodeType":"YulBlock","src":"19166:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"19168:77:17"},"nodeType":"YulFunctionCall","src":"19168:79:17"},"nodeType":"YulExpressionStatement","src":"19168:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19145:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19153:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19141:3:17"},"nodeType":"YulFunctionCall","src":"19141:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"19160:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19137:3:17"},"nodeType":"YulFunctionCall","src":"19137:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19130:6:17"},"nodeType":"YulFunctionCall","src":"19130:35:17"},"nodeType":"YulIf","src":"19127:122:17"},{"nodeType":"YulAssignment","src":"19258:30:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19281:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"19268:12:17"},"nodeType":"YulFunctionCall","src":"19268:20:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"19258:6:17"}]},{"body":{"nodeType":"YulBlock","src":"19331:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"19333:77:17"},"nodeType":"YulFunctionCall","src":"19333:79:17"},"nodeType":"YulExpressionStatement","src":"19333:79:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19303:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19311:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19300:2:17"},"nodeType":"YulFunctionCall","src":"19300:30:17"},"nodeType":"YulIf","src":"19297:117:17"},{"nodeType":"YulAssignment","src":"19423:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"19439:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19447:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19435:3:17"},"nodeType":"YulFunctionCall","src":"19435:17:17"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"19423:8:17"}]},{"body":{"nodeType":"YulBlock","src":"19506:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"19508:77:17"},"nodeType":"YulFunctionCall","src":"19508:79:17"},"nodeType":"YulExpressionStatement","src":"19508:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"19471:8:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"19485:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"19493:4:17","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"19481:3:17"},"nodeType":"YulFunctionCall","src":"19481:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19467:3:17"},"nodeType":"YulFunctionCall","src":"19467:32:17"},{"name":"end","nodeType":"YulIdentifier","src":"19501:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19464:2:17"},"nodeType":"YulFunctionCall","src":"19464:41:17"},"nodeType":"YulIf","src":"19461:128:17"}]},"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"19084:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"19092:3:17","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"19100:8:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"19110:6:17","type":""}],"src":"19042:553:17"},{"body":{"nodeType":"YulBlock","src":"19805:1343:17","statements":[{"body":{"nodeType":"YulBlock","src":"19852:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"19854:77:17"},"nodeType":"YulFunctionCall","src":"19854:79:17"},"nodeType":"YulExpressionStatement","src":"19854:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19826:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"19835:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19822:3:17"},"nodeType":"YulFunctionCall","src":"19822:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"19847:3:17","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"19818:3:17"},"nodeType":"YulFunctionCall","src":"19818:33:17"},"nodeType":"YulIf","src":"19815:120:17"},{"nodeType":"YulBlock","src":"19945:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"19960:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"19974:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"19964:6:17","type":""}]},{"nodeType":"YulAssignment","src":"19989:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20024:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20035:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20020:3:17"},"nodeType":"YulFunctionCall","src":"20020:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20044:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"19999:20:17"},"nodeType":"YulFunctionCall","src":"19999:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"19989:6:17"}]}]},{"nodeType":"YulBlock","src":"20072:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20087:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20101:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20091:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20117:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20152:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20163:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20148:3:17"},"nodeType":"YulFunctionCall","src":"20148:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20172:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"20127:20:17"},"nodeType":"YulFunctionCall","src":"20127:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"20117:6:17"}]}]},{"nodeType":"YulBlock","src":"20200:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20215:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20229:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20219:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20245:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20280:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20291:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20276:3:17"},"nodeType":"YulFunctionCall","src":"20276:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20300:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"20255:20:17"},"nodeType":"YulFunctionCall","src":"20255:53:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"20245:6:17"}]}]},{"nodeType":"YulBlock","src":"20328:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20343:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20357:2:17","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20347:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20373:62:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20407:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20418:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20403:3:17"},"nodeType":"YulFunctionCall","src":"20403:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20427:7:17"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"20383:19:17"},"nodeType":"YulFunctionCall","src":"20383:52:17"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"20373:6:17"}]}]},{"nodeType":"YulBlock","src":"20455:119:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20470:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20484:3:17","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20474:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20501:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20536:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20547:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20532:3:17"},"nodeType":"YulFunctionCall","src":"20532:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20556:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20511:20:17"},"nodeType":"YulFunctionCall","src":"20511:53:17"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"20501:6:17"}]}]},{"nodeType":"YulBlock","src":"20584:119:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20599:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20613:3:17","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20603:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20630:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20665:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20676:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20661:3:17"},"nodeType":"YulFunctionCall","src":"20661:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20685:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"20640:20:17"},"nodeType":"YulFunctionCall","src":"20640:53:17"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"20630:6:17"}]}]},{"nodeType":"YulBlock","src":"20713:119:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20728:17:17","value":{"kind":"number","nodeType":"YulLiteral","src":"20742:3:17","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20732:6:17","type":""}]},{"nodeType":"YulAssignment","src":"20759:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20794:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"20805:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20790:3:17"},"nodeType":"YulFunctionCall","src":"20790:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20814:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"20769:20:17"},"nodeType":"YulFunctionCall","src":"20769:53:17"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"20759:6:17"}]}]},{"nodeType":"YulBlock","src":"20842:299:17","statements":[{"nodeType":"YulVariableDeclaration","src":"20857:47:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20888:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"20899:3:17","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20884:3:17"},"nodeType":"YulFunctionCall","src":"20884:19:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"20871:12:17"},"nodeType":"YulFunctionCall","src":"20871:33:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20861:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"20951:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"20953:77:17"},"nodeType":"YulFunctionCall","src":"20953:79:17"},"nodeType":"YulExpressionStatement","src":"20953:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20923:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"20931:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20920:2:17"},"nodeType":"YulFunctionCall","src":"20920:30:17"},"nodeType":"YulIf","src":"20917:117:17"},{"nodeType":"YulAssignment","src":"21048:83:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21103:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"21114:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21099:3:17"},"nodeType":"YulFunctionCall","src":"21099:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21123:7:17"}],"functionName":{"name":"abi_decode_t_string_calldata_ptr","nodeType":"YulIdentifier","src":"21066:32:17"},"nodeType":"YulFunctionCall","src":"21066:65:17"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"21048:6:17"},{"name":"value8","nodeType":"YulIdentifier","src":"21056:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19711:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"19722:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"19734:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19742:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19750:6:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"19758:6:17","type":""},{"name":"value4","nodeType":"YulTypedName","src":"19766:6:17","type":""},{"name":"value5","nodeType":"YulTypedName","src":"19774:6:17","type":""},{"name":"value6","nodeType":"YulTypedName","src":"19782:6:17","type":""},{"name":"value7","nodeType":"YulTypedName","src":"19790:6:17","type":""},{"name":"value8","nodeType":"YulTypedName","src":"19798:6:17","type":""}],"src":"19601:1547:17"},{"body":{"nodeType":"YulBlock","src":"21252:124:17","statements":[{"nodeType":"YulAssignment","src":"21262:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21274:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21285:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21270:3:17"},"nodeType":"YulFunctionCall","src":"21270:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21262:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21342:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21355:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"21366:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21351:3:17"},"nodeType":"YulFunctionCall","src":"21351:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"21298:43:17"},"nodeType":"YulFunctionCall","src":"21298:71:17"},"nodeType":"YulExpressionStatement","src":"21298:71:17"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21224:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21236:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21247:4:17","type":""}],"src":"21154:222:17"},{"body":{"nodeType":"YulBlock","src":"21482:519:17","statements":[{"body":{"nodeType":"YulBlock","src":"21528:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"21530:77:17"},"nodeType":"YulFunctionCall","src":"21530:79:17"},"nodeType":"YulExpressionStatement","src":"21530:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21503:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"21512:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21499:3:17"},"nodeType":"YulFunctionCall","src":"21499:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"21524:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21495:3:17"},"nodeType":"YulFunctionCall","src":"21495:32:17"},"nodeType":"YulIf","src":"21492:119:17"},{"nodeType":"YulBlock","src":"21621:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"21636:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"21650:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21640:6:17","type":""}]},{"nodeType":"YulAssignment","src":"21665:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21700:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"21711:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21696:3:17"},"nodeType":"YulFunctionCall","src":"21696:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21720:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21675:20:17"},"nodeType":"YulFunctionCall","src":"21675:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21665:6:17"}]}]},{"nodeType":"YulBlock","src":"21748:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"21763:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"21777:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21767:6:17","type":""}]},{"nodeType":"YulAssignment","src":"21793:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21828:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"21839:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21824:3:17"},"nodeType":"YulFunctionCall","src":"21824:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21848:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"21803:20:17"},"nodeType":"YulFunctionCall","src":"21803:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"21793:6:17"}]}]},{"nodeType":"YulBlock","src":"21876:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"21891:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"21905:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"21895:6:17","type":""}]},{"nodeType":"YulAssignment","src":"21921:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21956:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"21967:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21952:3:17"},"nodeType":"YulFunctionCall","src":"21952:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"21976:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"21931:20:17"},"nodeType":"YulFunctionCall","src":"21931:53:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"21921:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21436:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21447:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21459:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21467:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21475:6:17","type":""}],"src":"21382:619:17"},{"body":{"nodeType":"YulBlock","src":"22050:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"22107:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22116:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22119:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22109:6:17"},"nodeType":"YulFunctionCall","src":"22109:12:17"},"nodeType":"YulExpressionStatement","src":"22109:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22073:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22098:5:17"}],"functionName":{"name":"cleanup_t_uint128","nodeType":"YulIdentifier","src":"22080:17:17"},"nodeType":"YulFunctionCall","src":"22080:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"22070:2:17"},"nodeType":"YulFunctionCall","src":"22070:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"22063:6:17"},"nodeType":"YulFunctionCall","src":"22063:43:17"},"nodeType":"YulIf","src":"22060:63:17"}]},"name":"validator_revert_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22043:5:17","type":""}],"src":"22007:122:17"},{"body":{"nodeType":"YulBlock","src":"22187:87:17","statements":[{"nodeType":"YulAssignment","src":"22197:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22219:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"22206:12:17"},"nodeType":"YulFunctionCall","src":"22206:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22197:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22262:5:17"}],"functionName":{"name":"validator_revert_t_uint128","nodeType":"YulIdentifier","src":"22235:26:17"},"nodeType":"YulFunctionCall","src":"22235:33:17"},"nodeType":"YulExpressionStatement","src":"22235:33:17"}]},"name":"abi_decode_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22165:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"22173:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"22181:5:17","type":""}],"src":"22135:139:17"},{"body":{"nodeType":"YulBlock","src":"22363:391:17","statements":[{"body":{"nodeType":"YulBlock","src":"22409:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"22411:77:17"},"nodeType":"YulFunctionCall","src":"22411:79:17"},"nodeType":"YulExpressionStatement","src":"22411:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22384:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"22393:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22380:3:17"},"nodeType":"YulFunctionCall","src":"22380:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"22405:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22376:3:17"},"nodeType":"YulFunctionCall","src":"22376:32:17"},"nodeType":"YulIf","src":"22373:119:17"},{"nodeType":"YulBlock","src":"22502:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"22517:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"22531:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22521:6:17","type":""}]},{"nodeType":"YulAssignment","src":"22546:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22581:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"22592:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22577:3:17"},"nodeType":"YulFunctionCall","src":"22577:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22601:7:17"}],"functionName":{"name":"abi_decode_t_uint128","nodeType":"YulIdentifier","src":"22556:20:17"},"nodeType":"YulFunctionCall","src":"22556:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22546:6:17"}]}]},{"nodeType":"YulBlock","src":"22629:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"22644:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"22658:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"22648:6:17","type":""}]},{"nodeType":"YulAssignment","src":"22674:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22709:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"22720:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22705:3:17"},"nodeType":"YulFunctionCall","src":"22705:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"22729:7:17"}],"functionName":{"name":"abi_decode_t_uint128","nodeType":"YulIdentifier","src":"22684:20:17"},"nodeType":"YulFunctionCall","src":"22684:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"22674:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint128t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22325:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22336:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22348:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22356:6:17","type":""}],"src":"22280:474:17"},{"body":{"nodeType":"YulBlock","src":"22788:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22805:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22808:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22798:6:17"},"nodeType":"YulFunctionCall","src":"22798:88:17"},"nodeType":"YulExpressionStatement","src":"22798:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22902:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"22905:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22895:6:17"},"nodeType":"YulFunctionCall","src":"22895:15:17"},"nodeType":"YulExpressionStatement","src":"22895:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22926:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22929:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22919:6:17"},"nodeType":"YulFunctionCall","src":"22919:15:17"},"nodeType":"YulExpressionStatement","src":"22919:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"22760:180:17"},{"body":{"nodeType":"YulBlock","src":"22974:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22991:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22994:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22984:6:17"},"nodeType":"YulFunctionCall","src":"22984:88:17"},"nodeType":"YulExpressionStatement","src":"22984:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23088:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"23091:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23081:6:17"},"nodeType":"YulFunctionCall","src":"23081:15:17"},"nodeType":"YulExpressionStatement","src":"23081:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23112:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23115:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23105:6:17"},"nodeType":"YulFunctionCall","src":"23105:15:17"},"nodeType":"YulExpressionStatement","src":"23105:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"22946:180:17"},{"body":{"nodeType":"YulBlock","src":"23176:172:17","statements":[{"nodeType":"YulAssignment","src":"23186:24:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23208:1:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"23191:16:17"},"nodeType":"YulFunctionCall","src":"23191:19:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"23186:1:17"}]},{"nodeType":"YulAssignment","src":"23219:24:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23241:1:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"23224:16:17"},"nodeType":"YulFunctionCall","src":"23224:19:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"23219:1:17"}]},{"nodeType":"YulAssignment","src":"23252:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23264:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"23267:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23260:3:17"},"nodeType":"YulFunctionCall","src":"23260:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"23252:4:17"}]},{"body":{"nodeType":"YulBlock","src":"23319:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23321:16:17"},"nodeType":"YulFunctionCall","src":"23321:18:17"},"nodeType":"YulExpressionStatement","src":"23321:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"23285:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"23291:26:17","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23282:2:17"},"nodeType":"YulFunctionCall","src":"23282:36:17"},"nodeType":"YulIf","src":"23279:62:17"}]},"name":"checked_sub_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23162:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"23165:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"23171:4:17","type":""}],"src":"23132:216:17"},{"body":{"nodeType":"YulBlock","src":"23480:206:17","statements":[{"nodeType":"YulAssignment","src":"23490:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23502:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23513:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23498:3:17"},"nodeType":"YulFunctionCall","src":"23498:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23490:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23570:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23583:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23594:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23579:3:17"},"nodeType":"YulFunctionCall","src":"23579:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23526:43:17"},"nodeType":"YulFunctionCall","src":"23526:71:17"},"nodeType":"YulExpressionStatement","src":"23526:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23651:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23664:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"23675:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23660:3:17"},"nodeType":"YulFunctionCall","src":"23660:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23607:43:17"},"nodeType":"YulFunctionCall","src":"23607:72:17"},"nodeType":"YulExpressionStatement","src":"23607:72:17"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23444:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23456:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23464:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23475:4:17","type":""}],"src":"23354:332:17"},{"body":{"nodeType":"YulBlock","src":"23752:77:17","statements":[{"nodeType":"YulAssignment","src":"23762:22:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23777:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23771:5:17"},"nodeType":"YulFunctionCall","src":"23771:13:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23762:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23817:5:17"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"23793:23:17"},"nodeType":"YulFunctionCall","src":"23793:30:17"},"nodeType":"YulExpressionStatement","src":"23793:30:17"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23730:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"23738:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23746:5:17","type":""}],"src":"23692:137:17"},{"body":{"nodeType":"YulBlock","src":"23909:271:17","statements":[{"body":{"nodeType":"YulBlock","src":"23955:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23957:77:17"},"nodeType":"YulFunctionCall","src":"23957:79:17"},"nodeType":"YulExpressionStatement","src":"23957:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23930:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"23939:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23926:3:17"},"nodeType":"YulFunctionCall","src":"23926:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"23951:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23922:3:17"},"nodeType":"YulFunctionCall","src":"23922:32:17"},"nodeType":"YulIf","src":"23919:119:17"},{"nodeType":"YulBlock","src":"24048:125:17","statements":[{"nodeType":"YulVariableDeclaration","src":"24063:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"24077:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24067:6:17","type":""}]},{"nodeType":"YulAssignment","src":"24092:71:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24135:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"24146:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24131:3:17"},"nodeType":"YulFunctionCall","src":"24131:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24155:7:17"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"24102:28:17"},"nodeType":"YulFunctionCall","src":"24102:61:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24092:6:17"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23879:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23890:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23902:6:17","type":""}],"src":"23835:345:17"},{"body":{"nodeType":"YulBlock","src":"24214:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24231:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24234:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24224:6:17"},"nodeType":"YulFunctionCall","src":"24224:88:17"},"nodeType":"YulExpressionStatement","src":"24224:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24328:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24331:4:17","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24321:6:17"},"nodeType":"YulFunctionCall","src":"24321:15:17"},"nodeType":"YulExpressionStatement","src":"24321:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24352:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24355:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24345:6:17"},"nodeType":"YulFunctionCall","src":"24345:15:17"},"nodeType":"YulExpressionStatement","src":"24345:15:17"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"24186:180:17"},{"body":{"nodeType":"YulBlock","src":"24414:143:17","statements":[{"nodeType":"YulAssignment","src":"24424:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24447:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24429:17:17"},"nodeType":"YulFunctionCall","src":"24429:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"24424:1:17"}]},{"nodeType":"YulAssignment","src":"24458:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"24481:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24463:17:17"},"nodeType":"YulFunctionCall","src":"24463:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"24458:1:17"}]},{"body":{"nodeType":"YulBlock","src":"24505:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"24507:16:17"},"nodeType":"YulFunctionCall","src":"24507:18:17"},"nodeType":"YulExpressionStatement","src":"24507:18:17"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"24502:1:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24495:6:17"},"nodeType":"YulFunctionCall","src":"24495:9:17"},"nodeType":"YulIf","src":"24492:35:17"},{"nodeType":"YulAssignment","src":"24537:14:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24546:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"24549:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"24542:3:17"},"nodeType":"YulFunctionCall","src":"24542:9:17"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"24537:1:17"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"24403:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"24406:1:17","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"24412:1:17","type":""}],"src":"24372:185:17"},{"body":{"nodeType":"YulBlock","src":"24626:52:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24643:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24665:5:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"24648:16:17"},"nodeType":"YulFunctionCall","src":"24648:23:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24636:6:17"},"nodeType":"YulFunctionCall","src":"24636:36:17"},"nodeType":"YulExpressionStatement","src":"24636:36:17"}]},"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24614:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24621:3:17","type":""}],"src":"24563:115:17"},{"body":{"nodeType":"YulBlock","src":"24808:204:17","statements":[{"nodeType":"YulAssignment","src":"24818:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24830:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24841:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24826:3:17"},"nodeType":"YulFunctionCall","src":"24826:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24818:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24898:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24911:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"24922:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24907:3:17"},"nodeType":"YulFunctionCall","src":"24907:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"24854:43:17"},"nodeType":"YulFunctionCall","src":"24854:71:17"},"nodeType":"YulExpressionStatement","src":"24854:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24977:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24990:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25001:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24986:3:17"},"nodeType":"YulFunctionCall","src":"24986:18:17"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"24935:41:17"},"nodeType":"YulFunctionCall","src":"24935:70:17"},"nodeType":"YulExpressionStatement","src":"24935:70:17"}]},"name":"abi_encode_tuple_t_bytes32_t_uint96__to_t_bytes32_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24772:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"24784:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24792:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24803:4:17","type":""}],"src":"24684:328:17"},{"body":{"nodeType":"YulBlock","src":"25114:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25131:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"25136:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25124:6:17"},"nodeType":"YulFunctionCall","src":"25124:19:17"},"nodeType":"YulExpressionStatement","src":"25124:19:17"},{"nodeType":"YulAssignment","src":"25152:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25171:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"25176:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25167:3:17"},"nodeType":"YulFunctionCall","src":"25167:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"25152:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25086:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"25091:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"25102:11:17","type":""}],"src":"25018:169:17"},{"body":{"nodeType":"YulBlock","src":"25299:58:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25321:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"25329:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25317:3:17"},"nodeType":"YulFunctionCall","src":"25317:14:17"},{"hexValue":"4f7264657246756c66696c6c6564","kind":"string","nodeType":"YulLiteral","src":"25333:16:17","type":"","value":"OrderFulfilled"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25310:6:17"},"nodeType":"YulFunctionCall","src":"25310:40:17"},"nodeType":"YulExpressionStatement","src":"25310:40:17"}]},"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25291:6:17","type":""}],"src":"25193:164:17"},{"body":{"nodeType":"YulBlock","src":"25509:220:17","statements":[{"nodeType":"YulAssignment","src":"25519:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25585:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"25590:2:17","type":"","value":"14"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25526:58:17"},"nodeType":"YulFunctionCall","src":"25526:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25519:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25691:3:17"}],"functionName":{"name":"store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5","nodeType":"YulIdentifier","src":"25602:88:17"},"nodeType":"YulFunctionCall","src":"25602:93:17"},"nodeType":"YulExpressionStatement","src":"25602:93:17"},{"nodeType":"YulAssignment","src":"25704:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25715:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"25720:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25711:3:17"},"nodeType":"YulFunctionCall","src":"25711:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25704:3:17"}]}]},"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25497:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25505:3:17","type":""}],"src":"25363:366:17"},{"body":{"nodeType":"YulBlock","src":"25906:248:17","statements":[{"nodeType":"YulAssignment","src":"25916:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25928:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25939:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25924:3:17"},"nodeType":"YulFunctionCall","src":"25924:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25916:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25963:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"25974:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25959:3:17"},"nodeType":"YulFunctionCall","src":"25959:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25982:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"25988:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25978:3:17"},"nodeType":"YulFunctionCall","src":"25978:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25952:6:17"},"nodeType":"YulFunctionCall","src":"25952:47:17"},"nodeType":"YulExpressionStatement","src":"25952:47:17"},{"nodeType":"YulAssignment","src":"26008:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26142:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26016:124:17"},"nodeType":"YulFunctionCall","src":"26016:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26008:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25886:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25901:4:17","type":""}],"src":"25735:419:17"},{"body":{"nodeType":"YulBlock","src":"26308:282:17","statements":[{"nodeType":"YulAssignment","src":"26318:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26330:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26341:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26326:3:17"},"nodeType":"YulFunctionCall","src":"26326:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26318:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26398:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26411:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26422:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26407:3:17"},"nodeType":"YulFunctionCall","src":"26407:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"26354:43:17"},"nodeType":"YulFunctionCall","src":"26354:71:17"},"nodeType":"YulExpressionStatement","src":"26354:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26479:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26492:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26503:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26488:3:17"},"nodeType":"YulFunctionCall","src":"26488:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"26435:43:17"},"nodeType":"YulFunctionCall","src":"26435:72:17"},"nodeType":"YulExpressionStatement","src":"26435:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26555:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26568:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"26579:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26564:3:17"},"nodeType":"YulFunctionCall","src":"26564:18:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"26517:37:17"},"nodeType":"YulFunctionCall","src":"26517:66:17"},"nodeType":"YulExpressionStatement","src":"26517:66:17"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26264:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26276:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26284:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26292:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26303:4:17","type":""}],"src":"26160:430:17"},{"body":{"nodeType":"YulBlock","src":"26702:127:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26724:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"26732:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26720:3:17"},"nodeType":"YulFunctionCall","src":"26720:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"26736:34:17","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26713:6:17"},"nodeType":"YulFunctionCall","src":"26713:58:17"},"nodeType":"YulExpressionStatement","src":"26713:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26792:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"26800:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26788:3:17"},"nodeType":"YulFunctionCall","src":"26788:15:17"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"26805:16:17","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26781:6:17"},"nodeType":"YulFunctionCall","src":"26781:41:17"},"nodeType":"YulExpressionStatement","src":"26781:41:17"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26694:6:17","type":""}],"src":"26596:233:17"},{"body":{"nodeType":"YulBlock","src":"26981:220:17","statements":[{"nodeType":"YulAssignment","src":"26991:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27057:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"27062:2:17","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26998:58:17"},"nodeType":"YulFunctionCall","src":"26998:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26991:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27163:3:17"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"27074:88:17"},"nodeType":"YulFunctionCall","src":"27074:93:17"},"nodeType":"YulExpressionStatement","src":"27074:93:17"},{"nodeType":"YulAssignment","src":"27176:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27187:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"27192:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27183:3:17"},"nodeType":"YulFunctionCall","src":"27183:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27176:3:17"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26969:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26977:3:17","type":""}],"src":"26835:366:17"},{"body":{"nodeType":"YulBlock","src":"27378:248:17","statements":[{"nodeType":"YulAssignment","src":"27388:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27400:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27411:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27396:3:17"},"nodeType":"YulFunctionCall","src":"27396:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27388:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27435:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"27446:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27431:3:17"},"nodeType":"YulFunctionCall","src":"27431:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27454:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"27460:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27450:3:17"},"nodeType":"YulFunctionCall","src":"27450:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27424:6:17"},"nodeType":"YulFunctionCall","src":"27424:47:17"},"nodeType":"YulExpressionStatement","src":"27424:47:17"},{"nodeType":"YulAssignment","src":"27480:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27614:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27488:124:17"},"nodeType":"YulFunctionCall","src":"27488:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27480:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27358:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27373:4:17","type":""}],"src":"27207:419:17"},{"body":{"nodeType":"YulBlock","src":"27685:32:17","statements":[{"nodeType":"YulAssignment","src":"27695:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"27706:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27695:7:17"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27667:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27677:7:17","type":""}],"src":"27632:85:17"},{"body":{"nodeType":"YulBlock","src":"27766:43:17","statements":[{"nodeType":"YulAssignment","src":"27776:27:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"27791:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"27798:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27787:3:17"},"nodeType":"YulFunctionCall","src":"27787:16:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"27776:7:17"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27748:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"27758:7:17","type":""}],"src":"27723:86:17"},{"body":{"nodeType":"YulBlock","src":"27847:28:17","statements":[{"nodeType":"YulAssignment","src":"27857:12:17","value":{"name":"value","nodeType":"YulIdentifier","src":"27864:5:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"27857:3:17"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27833:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"27843:3:17","type":""}],"src":"27815:60:17"},{"body":{"nodeType":"YulBlock","src":"27947:88:17","statements":[{"nodeType":"YulAssignment","src":"27957:72:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28021:5:17"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"27995:25:17"},"nodeType":"YulFunctionCall","src":"27995:32:17"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"27986:8:17"},"nodeType":"YulFunctionCall","src":"27986:42:17"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"27970:15:17"},"nodeType":"YulFunctionCall","src":"27970:59:17"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"27957:9:17"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"27927:5:17","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"27937:9:17","type":""}],"src":"27881:154:17"},{"body":{"nodeType":"YulBlock","src":"28112:72:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28129:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28171:5:17"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"28134:36:17"},"nodeType":"YulFunctionCall","src":"28134:43:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28122:6:17"},"nodeType":"YulFunctionCall","src":"28122:56:17"},"nodeType":"YulExpressionStatement","src":"28122:56:17"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28100:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28107:3:17","type":""}],"src":"28041:143:17"},{"body":{"nodeType":"YulBlock","src":"28294:130:17","statements":[{"nodeType":"YulAssignment","src":"28304:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28316:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28327:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28312:3:17"},"nodeType":"YulFunctionCall","src":"28312:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28304:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28390:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28403:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28414:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28399:3:17"},"nodeType":"YulFunctionCall","src":"28399:17:17"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"28340:49:17"},"nodeType":"YulFunctionCall","src":"28340:77:17"},"nodeType":"YulExpressionStatement","src":"28340:77:17"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28266:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28278:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28289:4:17","type":""}],"src":"28190:234:17"},{"body":{"nodeType":"YulBlock","src":"28584:288:17","statements":[{"nodeType":"YulAssignment","src":"28594:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28606:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28617:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28602:3:17"},"nodeType":"YulFunctionCall","src":"28602:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28594:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28674:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28687:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28698:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28683:3:17"},"nodeType":"YulFunctionCall","src":"28683:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28630:43:17"},"nodeType":"YulFunctionCall","src":"28630:71:17"},"nodeType":"YulExpressionStatement","src":"28630:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28755:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28768:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28779:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28764:3:17"},"nodeType":"YulFunctionCall","src":"28764:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28711:43:17"},"nodeType":"YulFunctionCall","src":"28711:72:17"},"nodeType":"YulExpressionStatement","src":"28711:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"28837:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28850:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"28861:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28846:3:17"},"nodeType":"YulFunctionCall","src":"28846:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28793:43:17"},"nodeType":"YulFunctionCall","src":"28793:72:17"},"nodeType":"YulExpressionStatement","src":"28793:72:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28540:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"28552:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28560:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28568:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28579:4:17","type":""}],"src":"28430:442:17"},{"body":{"nodeType":"YulBlock","src":"28921:190:17","statements":[{"nodeType":"YulAssignment","src":"28931:33:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28958:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28940:17:17"},"nodeType":"YulFunctionCall","src":"28940:24:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28931:5:17"}]},{"body":{"nodeType":"YulBlock","src":"29054:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"29056:16:17"},"nodeType":"YulFunctionCall","src":"29056:18:17"},"nodeType":"YulExpressionStatement","src":"29056:18:17"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28979:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"28986:66:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28976:2:17"},"nodeType":"YulFunctionCall","src":"28976:77:17"},"nodeType":"YulIf","src":"28973:103:17"},{"nodeType":"YulAssignment","src":"29085:20:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29096:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"29103:1:17","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29092:3:17"},"nodeType":"YulFunctionCall","src":"29092:13:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"29085:3:17"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28907:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28917:3:17","type":""}],"src":"28878:233:17"},{"body":{"nodeType":"YulBlock","src":"29176:81:17","statements":[{"nodeType":"YulAssignment","src":"29186:65:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29243:5:17"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"29226:16:17"},"nodeType":"YulFunctionCall","src":"29226:23:17"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"29217:8:17"},"nodeType":"YulFunctionCall","src":"29217:33:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29199:17:17"},"nodeType":"YulFunctionCall","src":"29199:52:17"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"29186:9:17"}]}]},"name":"convert_t_uint96_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29156:5:17","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"29166:9:17","type":""}],"src":"29117:140:17"},{"body":{"nodeType":"YulBlock","src":"29327:65:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29344:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29379:5:17"}],"functionName":{"name":"convert_t_uint96_to_t_uint256","nodeType":"YulIdentifier","src":"29349:29:17"},"nodeType":"YulFunctionCall","src":"29349:36:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29337:6:17"},"nodeType":"YulFunctionCall","src":"29337:49:17"},"nodeType":"YulExpressionStatement","src":"29337:49:17"}]},"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29315:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29322:3:17","type":""}],"src":"29263:129:17"},{"body":{"nodeType":"YulBlock","src":"29462:82:17","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"29485:3:17"},{"name":"src","nodeType":"YulIdentifier","src":"29490:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"29495:6:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"29472:12:17"},"nodeType":"YulFunctionCall","src":"29472:30:17"},"nodeType":"YulExpressionStatement","src":"29472:30:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"29522:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"29527:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29518:3:17"},"nodeType":"YulFunctionCall","src":"29518:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"29536:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29511:6:17"},"nodeType":"YulFunctionCall","src":"29511:27:17"},"nodeType":"YulExpressionStatement","src":"29511:27:17"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"29444:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"29449:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"29454:6:17","type":""}],"src":"29398:146:17"},{"body":{"nodeType":"YulBlock","src":"29676:215:17","statements":[{"nodeType":"YulAssignment","src":"29686:78:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29752:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"29757:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29693:58:17"},"nodeType":"YulFunctionCall","src":"29693:71:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29686:3:17"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"29811:5:17"},{"name":"pos","nodeType":"YulIdentifier","src":"29818:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"29823:6:17"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"29774:36:17"},"nodeType":"YulFunctionCall","src":"29774:56:17"},"nodeType":"YulExpressionStatement","src":"29774:56:17"},{"nodeType":"YulAssignment","src":"29839:46:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29850:3:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"29877:6:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"29855:21:17"},"nodeType":"YulFunctionCall","src":"29855:29:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29846:3:17"},"nodeType":"YulFunctionCall","src":"29846:39:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29839:3:17"}]}]},"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"29649:5:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"29656:6:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29664:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29672:3:17","type":""}],"src":"29574:317:17"},{"body":{"nodeType":"YulBlock","src":"30080:368:17","statements":[{"nodeType":"YulAssignment","src":"30090:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30102:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"30113:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30098:3:17"},"nodeType":"YulFunctionCall","src":"30098:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30090:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30169:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30182:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"30193:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30178:3:17"},"nodeType":"YulFunctionCall","src":"30178:17:17"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"30126:42:17"},"nodeType":"YulFunctionCall","src":"30126:70:17"},"nodeType":"YulExpressionStatement","src":"30126:70:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"30250:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30263:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"30274:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30259:3:17"},"nodeType":"YulFunctionCall","src":"30259:18:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"30206:43:17"},"nodeType":"YulFunctionCall","src":"30206:72:17"},"nodeType":"YulExpressionStatement","src":"30206:72:17"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30299:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"30310:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30295:3:17"},"nodeType":"YulFunctionCall","src":"30295:18:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30319:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"30325:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30315:3:17"},"nodeType":"YulFunctionCall","src":"30315:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30288:6:17"},"nodeType":"YulFunctionCall","src":"30288:48:17"},"nodeType":"YulExpressionStatement","src":"30288:48:17"},{"nodeType":"YulAssignment","src":"30345:96:17","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"30419:6:17"},{"name":"value3","nodeType":"YulIdentifier","src":"30427:6:17"},{"name":"tail","nodeType":"YulIdentifier","src":"30436:4:17"}],"functionName":{"name":"abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30353:65:17"},"nodeType":"YulFunctionCall","src":"30353:88:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30345:4:17"}]}]},"name":"abi_encode_tuple_t_uint96_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30028:9:17","type":""},{"name":"value3","nodeType":"YulTypedName","src":"30040:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"30048:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"30056:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30064:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30075:4:17","type":""}],"src":"29897:551:17"},{"body":{"nodeType":"YulBlock","src":"30560:119:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30582:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"30590:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30578:3:17"},"nodeType":"YulFunctionCall","src":"30578:14:17"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"30594:34:17","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30571:6:17"},"nodeType":"YulFunctionCall","src":"30571:58:17"},"nodeType":"YulExpressionStatement","src":"30571:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30650:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"30658:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30646:3:17"},"nodeType":"YulFunctionCall","src":"30646:15:17"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"30663:8:17","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30639:6:17"},"nodeType":"YulFunctionCall","src":"30639:33:17"},"nodeType":"YulExpressionStatement","src":"30639:33:17"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30552:6:17","type":""}],"src":"30454:225:17"},{"body":{"nodeType":"YulBlock","src":"30831:220:17","statements":[{"nodeType":"YulAssignment","src":"30841:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30907:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"30912:2:17","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30848:58:17"},"nodeType":"YulFunctionCall","src":"30848:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30841:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31013:3:17"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"30924:88:17"},"nodeType":"YulFunctionCall","src":"30924:93:17"},"nodeType":"YulExpressionStatement","src":"30924:93:17"},{"nodeType":"YulAssignment","src":"31026:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31037:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"31042:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31033:3:17"},"nodeType":"YulFunctionCall","src":"31033:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31026:3:17"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30819:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30827:3:17","type":""}],"src":"30685:366:17"},{"body":{"nodeType":"YulBlock","src":"31228:248:17","statements":[{"nodeType":"YulAssignment","src":"31238:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31250:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"31261:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31246:3:17"},"nodeType":"YulFunctionCall","src":"31246:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31238:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31285:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"31296:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31281:3:17"},"nodeType":"YulFunctionCall","src":"31281:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31304:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"31310:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31300:3:17"},"nodeType":"YulFunctionCall","src":"31300:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31274:6:17"},"nodeType":"YulFunctionCall","src":"31274:47:17"},"nodeType":"YulExpressionStatement","src":"31274:47:17"},{"nodeType":"YulAssignment","src":"31330:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31464:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31338:124:17"},"nodeType":"YulFunctionCall","src":"31338:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31330:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31208:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31223:4:17","type":""}],"src":"31057:419:17"},{"body":{"nodeType":"YulBlock","src":"31608:206:17","statements":[{"nodeType":"YulAssignment","src":"31618:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31630:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"31641:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31626:3:17"},"nodeType":"YulFunctionCall","src":"31626:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31618:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"31698:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31711:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"31722:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31707:3:17"},"nodeType":"YulFunctionCall","src":"31707:17:17"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulIdentifier","src":"31654:43:17"},"nodeType":"YulFunctionCall","src":"31654:71:17"},"nodeType":"YulExpressionStatement","src":"31654:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"31779:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31792:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"31803:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31788:3:17"},"nodeType":"YulFunctionCall","src":"31788:18:17"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulIdentifier","src":"31735:43:17"},"nodeType":"YulFunctionCall","src":"31735:72:17"},"nodeType":"YulExpressionStatement","src":"31735:72:17"}]},"name":"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31572:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"31584:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"31592:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31603:4:17","type":""}],"src":"31482:332:17"},{"body":{"nodeType":"YulBlock","src":"31926:76:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31948:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"31956:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31944:3:17"},"nodeType":"YulFunctionCall","src":"31944:14:17"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"31960:34:17","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31937:6:17"},"nodeType":"YulFunctionCall","src":"31937:58:17"},"nodeType":"YulExpressionStatement","src":"31937:58:17"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31918:6:17","type":""}],"src":"31820:182:17"},{"body":{"nodeType":"YulBlock","src":"32154:220:17","statements":[{"nodeType":"YulAssignment","src":"32164:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32230:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"32235:2:17","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32171:58:17"},"nodeType":"YulFunctionCall","src":"32171:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32164:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32336:3:17"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"32247:88:17"},"nodeType":"YulFunctionCall","src":"32247:93:17"},"nodeType":"YulExpressionStatement","src":"32247:93:17"},{"nodeType":"YulAssignment","src":"32349:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32360:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"32365:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32356:3:17"},"nodeType":"YulFunctionCall","src":"32356:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32349:3:17"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32142:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32150:3:17","type":""}],"src":"32008:366:17"},{"body":{"nodeType":"YulBlock","src":"32551:248:17","statements":[{"nodeType":"YulAssignment","src":"32561:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32573:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"32584:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32569:3:17"},"nodeType":"YulFunctionCall","src":"32569:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32561:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32608:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"32619:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32604:3:17"},"nodeType":"YulFunctionCall","src":"32604:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32627:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"32633:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32623:3:17"},"nodeType":"YulFunctionCall","src":"32623:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32597:6:17"},"nodeType":"YulFunctionCall","src":"32597:47:17"},"nodeType":"YulExpressionStatement","src":"32597:47:17"},{"nodeType":"YulAssignment","src":"32653:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32787:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32661:124:17"},"nodeType":"YulFunctionCall","src":"32661:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32653:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32531:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32546:4:17","type":""}],"src":"32380:419:17"},{"body":{"nodeType":"YulBlock","src":"32850:149:17","statements":[{"nodeType":"YulAssignment","src":"32860:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"32883:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32865:17:17"},"nodeType":"YulFunctionCall","src":"32865:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"32860:1:17"}]},{"nodeType":"YulAssignment","src":"32894:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"32917:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"32899:17:17"},"nodeType":"YulFunctionCall","src":"32899:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"32894:1:17"}]},{"nodeType":"YulAssignment","src":"32928:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"32940:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"32943:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32936:3:17"},"nodeType":"YulFunctionCall","src":"32936:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"32928:4:17"}]},{"body":{"nodeType":"YulBlock","src":"32970:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"32972:16:17"},"nodeType":"YulFunctionCall","src":"32972:18:17"},"nodeType":"YulExpressionStatement","src":"32972:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"32961:4:17"},{"name":"x","nodeType":"YulIdentifier","src":"32967:1:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"32958:2:17"},"nodeType":"YulFunctionCall","src":"32958:11:17"},"nodeType":"YulIf","src":"32955:37:17"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"32836:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"32839:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"32845:4:17","type":""}],"src":"32805:194:17"},{"body":{"nodeType":"YulBlock","src":"33053:362:17","statements":[{"nodeType":"YulAssignment","src":"33063:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33086:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33068:17:17"},"nodeType":"YulFunctionCall","src":"33068:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"33063:1:17"}]},{"nodeType":"YulAssignment","src":"33097:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"33120:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33102:17:17"},"nodeType":"YulFunctionCall","src":"33102:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"33097:1:17"}]},{"nodeType":"YulVariableDeclaration","src":"33131:28:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33154:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"33157:1:17"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"33150:3:17"},"nodeType":"YulFunctionCall","src":"33150:9:17"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"33135:11:17","type":""}]},{"nodeType":"YulAssignment","src":"33168:41:17","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"33197:11:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"33179:17:17"},"nodeType":"YulFunctionCall","src":"33179:30:17"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"33168:7:17"}]},{"body":{"nodeType":"YulBlock","src":"33386:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"33388:16:17"},"nodeType":"YulFunctionCall","src":"33388:18:17"},"nodeType":"YulExpressionStatement","src":"33388:18:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"33319:1:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33312:6:17"},"nodeType":"YulFunctionCall","src":"33312:9:17"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"33342:1:17"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"33349:7:17"},{"name":"x","nodeType":"YulIdentifier","src":"33358:1:17"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"33345:3:17"},"nodeType":"YulFunctionCall","src":"33345:15:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"33339:2:17"},"nodeType":"YulFunctionCall","src":"33339:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"33292:2:17"},"nodeType":"YulFunctionCall","src":"33292:83:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"33272:6:17"},"nodeType":"YulFunctionCall","src":"33272:113:17"},"nodeType":"YulIf","src":"33269:139:17"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"33036:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"33039:1:17","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"33045:7:17","type":""}],"src":"33005:410:17"},{"body":{"nodeType":"YulBlock","src":"33527:124:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33549:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"33557:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33545:3:17"},"nodeType":"YulFunctionCall","src":"33545:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"33561:34:17","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33538:6:17"},"nodeType":"YulFunctionCall","src":"33538:58:17"},"nodeType":"YulExpressionStatement","src":"33538:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"33617:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"33625:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33613:3:17"},"nodeType":"YulFunctionCall","src":"33613:15:17"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"33630:13:17","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33606:6:17"},"nodeType":"YulFunctionCall","src":"33606:38:17"},"nodeType":"YulExpressionStatement","src":"33606:38:17"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33519:6:17","type":""}],"src":"33421:230:17"},{"body":{"nodeType":"YulBlock","src":"33803:220:17","statements":[{"nodeType":"YulAssignment","src":"33813:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33879:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"33884:2:17","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"33820:58:17"},"nodeType":"YulFunctionCall","src":"33820:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33813:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33985:3:17"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"33896:88:17"},"nodeType":"YulFunctionCall","src":"33896:93:17"},"nodeType":"YulExpressionStatement","src":"33896:93:17"},{"nodeType":"YulAssignment","src":"33998:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34009:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"34014:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34005:3:17"},"nodeType":"YulFunctionCall","src":"34005:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33998:3:17"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33791:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33799:3:17","type":""}],"src":"33657:366:17"},{"body":{"nodeType":"YulBlock","src":"34200:248:17","statements":[{"nodeType":"YulAssignment","src":"34210:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34222:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"34233:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34218:3:17"},"nodeType":"YulFunctionCall","src":"34218:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34210:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34257:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"34268:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34253:3:17"},"nodeType":"YulFunctionCall","src":"34253:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34276:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"34282:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34272:3:17"},"nodeType":"YulFunctionCall","src":"34272:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34246:6:17"},"nodeType":"YulFunctionCall","src":"34246:47:17"},"nodeType":"YulExpressionStatement","src":"34246:47:17"},{"nodeType":"YulAssignment","src":"34302:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34436:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34310:124:17"},"nodeType":"YulFunctionCall","src":"34310:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34302:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34180:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34195:4:17","type":""}],"src":"34029:419:17"},{"body":{"nodeType":"YulBlock","src":"34560:61:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34582:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"34590:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34578:3:17"},"nodeType":"YulFunctionCall","src":"34578:14:17"},{"hexValue":"546f6b656e4e6f74537570706f72746564","kind":"string","nodeType":"YulLiteral","src":"34594:19:17","type":"","value":"TokenNotSupported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34571:6:17"},"nodeType":"YulFunctionCall","src":"34571:43:17"},"nodeType":"YulExpressionStatement","src":"34571:43:17"}]},"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"34552:6:17","type":""}],"src":"34454:167:17"},{"body":{"nodeType":"YulBlock","src":"34773:220:17","statements":[{"nodeType":"YulAssignment","src":"34783:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34849:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"34854:2:17","type":"","value":"17"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34790:58:17"},"nodeType":"YulFunctionCall","src":"34790:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"34783:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34955:3:17"}],"functionName":{"name":"store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1","nodeType":"YulIdentifier","src":"34866:88:17"},"nodeType":"YulFunctionCall","src":"34866:93:17"},"nodeType":"YulExpressionStatement","src":"34866:93:17"},{"nodeType":"YulAssignment","src":"34968:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34979:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"34984:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34975:3:17"},"nodeType":"YulFunctionCall","src":"34975:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"34968:3:17"}]}]},"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"34761:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"34769:3:17","type":""}],"src":"34627:366:17"},{"body":{"nodeType":"YulBlock","src":"35170:248:17","statements":[{"nodeType":"YulAssignment","src":"35180:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35192:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"35203:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35188:3:17"},"nodeType":"YulFunctionCall","src":"35188:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35180:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35227:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"35238:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35223:3:17"},"nodeType":"YulFunctionCall","src":"35223:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35246:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"35252:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35242:3:17"},"nodeType":"YulFunctionCall","src":"35242:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35216:6:17"},"nodeType":"YulFunctionCall","src":"35216:47:17"},"nodeType":"YulExpressionStatement","src":"35216:47:17"},{"nodeType":"YulAssignment","src":"35272:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"35406:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35280:124:17"},"nodeType":"YulFunctionCall","src":"35280:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35272:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35150:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35165:4:17","type":""}],"src":"34999:419:17"},{"body":{"nodeType":"YulBlock","src":"35530:56:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"35552:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"35560:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35548:3:17"},"nodeType":"YulFunctionCall","src":"35548:14:17"},{"hexValue":"416d6f756e7449735a65726f","kind":"string","nodeType":"YulLiteral","src":"35564:14:17","type":"","value":"AmountIsZero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35541:6:17"},"nodeType":"YulFunctionCall","src":"35541:38:17"},"nodeType":"YulExpressionStatement","src":"35541:38:17"}]},"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"35522:6:17","type":""}],"src":"35424:162:17"},{"body":{"nodeType":"YulBlock","src":"35738:220:17","statements":[{"nodeType":"YulAssignment","src":"35748:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35814:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"35819:2:17","type":"","value":"12"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35755:58:17"},"nodeType":"YulFunctionCall","src":"35755:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35748:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35920:3:17"}],"functionName":{"name":"store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2","nodeType":"YulIdentifier","src":"35831:88:17"},"nodeType":"YulFunctionCall","src":"35831:93:17"},"nodeType":"YulExpressionStatement","src":"35831:93:17"},{"nodeType":"YulAssignment","src":"35933:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35944:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"35949:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35940:3:17"},"nodeType":"YulFunctionCall","src":"35940:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35933:3:17"}]}]},"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35726:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35734:3:17","type":""}],"src":"35592:366:17"},{"body":{"nodeType":"YulBlock","src":"36135:248:17","statements":[{"nodeType":"YulAssignment","src":"36145:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36157:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36168:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36153:3:17"},"nodeType":"YulFunctionCall","src":"36153:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36145:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36192:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"36203:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36188:3:17"},"nodeType":"YulFunctionCall","src":"36188:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36211:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"36217:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36207:3:17"},"nodeType":"YulFunctionCall","src":"36207:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36181:6:17"},"nodeType":"YulFunctionCall","src":"36181:47:17"},"nodeType":"YulExpressionStatement","src":"36181:47:17"},{"nodeType":"YulAssignment","src":"36237:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36371:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36245:124:17"},"nodeType":"YulFunctionCall","src":"36245:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36237:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36115:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"36130:4:17","type":""}],"src":"35964:419:17"},{"body":{"nodeType":"YulBlock","src":"36495:60:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"36517:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"36525:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36513:3:17"},"nodeType":"YulFunctionCall","src":"36513:14:17"},{"hexValue":"5468726f775a65726f41646472657373","kind":"string","nodeType":"YulLiteral","src":"36529:18:17","type":"","value":"ThrowZeroAddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36506:6:17"},"nodeType":"YulFunctionCall","src":"36506:42:17"},"nodeType":"YulExpressionStatement","src":"36506:42:17"}]},"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"36487:6:17","type":""}],"src":"36389:166:17"},{"body":{"nodeType":"YulBlock","src":"36707:220:17","statements":[{"nodeType":"YulAssignment","src":"36717:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36783:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"36788:2:17","type":"","value":"16"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36724:58:17"},"nodeType":"YulFunctionCall","src":"36724:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"36717:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36889:3:17"}],"functionName":{"name":"store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7","nodeType":"YulIdentifier","src":"36800:88:17"},"nodeType":"YulFunctionCall","src":"36800:93:17"},"nodeType":"YulExpressionStatement","src":"36800:93:17"},{"nodeType":"YulAssignment","src":"36902:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"36913:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"36918:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36909:3:17"},"nodeType":"YulFunctionCall","src":"36909:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"36902:3:17"}]}]},"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"36695:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"36703:3:17","type":""}],"src":"36561:366:17"},{"body":{"nodeType":"YulBlock","src":"37104:248:17","statements":[{"nodeType":"YulAssignment","src":"37114:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37126:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"37137:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37122:3:17"},"nodeType":"YulFunctionCall","src":"37122:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37114:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37161:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"37172:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37157:3:17"},"nodeType":"YulFunctionCall","src":"37157:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37180:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"37186:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37176:3:17"},"nodeType":"YulFunctionCall","src":"37176:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37150:6:17"},"nodeType":"YulFunctionCall","src":"37150:47:17"},"nodeType":"YulExpressionStatement","src":"37150:47:17"},{"nodeType":"YulAssignment","src":"37206:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37340:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37214:124:17"},"nodeType":"YulFunctionCall","src":"37214:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37206:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37084:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37099:4:17","type":""}],"src":"36933:419:17"},{"body":{"nodeType":"YulBlock","src":"37464:66:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37486:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"37494:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37482:3:17"},"nodeType":"YulFunctionCall","src":"37482:14:17"},{"hexValue":"496e76616c6964496e737469747574696f6e436f6465","kind":"string","nodeType":"YulLiteral","src":"37498:24:17","type":"","value":"InvalidInstitutionCode"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37475:6:17"},"nodeType":"YulFunctionCall","src":"37475:48:17"},"nodeType":"YulExpressionStatement","src":"37475:48:17"}]},"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37456:6:17","type":""}],"src":"37358:172:17"},{"body":{"nodeType":"YulBlock","src":"37682:220:17","statements":[{"nodeType":"YulAssignment","src":"37692:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37758:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"37763:2:17","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37699:58:17"},"nodeType":"YulFunctionCall","src":"37699:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37692:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37864:3:17"}],"functionName":{"name":"store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5","nodeType":"YulIdentifier","src":"37775:88:17"},"nodeType":"YulFunctionCall","src":"37775:93:17"},"nodeType":"YulExpressionStatement","src":"37775:93:17"},{"nodeType":"YulAssignment","src":"37877:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37888:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"37893:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37884:3:17"},"nodeType":"YulFunctionCall","src":"37884:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37877:3:17"}]}]},"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37670:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37678:3:17","type":""}],"src":"37536:366:17"},{"body":{"nodeType":"YulBlock","src":"38079:248:17","statements":[{"nodeType":"YulAssignment","src":"38089:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38101:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"38112:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38097:3:17"},"nodeType":"YulFunctionCall","src":"38097:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38089:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38136:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"38147:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38132:3:17"},"nodeType":"YulFunctionCall","src":"38132:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38155:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"38161:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"38151:3:17"},"nodeType":"YulFunctionCall","src":"38151:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38125:6:17"},"nodeType":"YulFunctionCall","src":"38125:47:17"},"nodeType":"YulExpressionStatement","src":"38125:47:17"},{"nodeType":"YulAssignment","src":"38181:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"38315:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38189:124:17"},"nodeType":"YulFunctionCall","src":"38189:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38181:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38059:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38074:4:17","type":""}],"src":"37908:419:17"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    // struct PaycrestSettingManager.Institution -> struct PaycrestSettingManager.Institution\n    function abi_encode_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // code\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function array_nextElement_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct PaycrestSettingManager.Institution[] -> struct PaycrestSettingManager.Institution[]\n    function abi_encode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_Institution_$3633_memory_ptr_to_t_struct$_Institution_$3633_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$3633_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$3633_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    // address[]\n    function abi_decode_t_array$_t_address_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_bytes32t_array$_t_address_$dyn_calldata_ptrt_addresst_uint96(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2, value3 := abi_decode_t_array$_t_address_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value4 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value5 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint96_to_t_uint96(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    // struct IPaycrest.Order -> struct IPaycrest.Order\n    function abi_encode_t_struct$_Order_$4294_memory_ptr_to_t_struct$_Order_$4294_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0120)\n\n        {\n            // seller\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // token\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // senderFeeRecipient\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // senderFee\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // rate\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // isFulfilled\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_bool_to_t_bool(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // refundAddress\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0xc0))\n        }\n\n        {\n            // currentBPS\n\n            let memberValue0 := mload(add(value, 0xe0))\n            abi_encode_t_uint96_to_t_uint96(memberValue0, add(pos, 0xe0))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x0100))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x0100))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_Order_$4294_memory_ptr__to_t_struct$_Order_$4294_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_struct$_Order_$4294_memory_ptr_to_t_struct$_Order_$4294_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    // struct PaycrestSettingManager.InstitutionByCode -> struct PaycrestSettingManager.InstitutionByCode\n    function abi_encode_t_struct$_InstitutionByCode_$3638_memory_ptr_to_t_struct$_InstitutionByCode_$3638_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // name\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // currency\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_InstitutionByCode_$3638_memory_ptr__to_t_struct$_InstitutionByCode_$3638_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_struct$_InstitutionByCode_$3638_memory_ptr_to_t_struct$_InstitutionByCode_$3638_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function abi_encode_t_uint128_to_t_uint128_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint128(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint128_t_uint128_t_uint256__to_t_uint128_t_uint128_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint128_to_t_uint128_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint128_to_t_uint128_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    // string\n    function abi_decode_t_string_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint96t_addresst_uint256t_addresst_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8 {\n        if slt(sub(dataEnd, headStart), 256) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 224))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value7, value8 := abi_decode_t_string_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_uint128(value) {\n        if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint128(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint128(value)\n    }\n\n    function abi_decode_tuple_t_uint128t_uint128(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint96(x, y) -> diff {\n        x := cleanup_t_uint96(x)\n        y := cleanup_t_uint96(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function abi_encode_t_uint96_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint96__to_t_bytes32_t_uint96__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint96_to_t_uint96_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(memPtr) {\n\n        mstore(add(memPtr, 0), \"OrderFulfilled\")\n\n    }\n\n    function abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 14)\n        store_literal_in_memory_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_84045048554d058b8a53b78300214112125a1eccddd735f23a805c1c4be2d6f5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function convert_t_uint96_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint96(value)))\n    }\n\n    function abi_encode_t_uint96_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint96_to_t_uint256(value))\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    // string -> string\n    function abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_uint96_t_bytes32_t_string_calldata_ptr__to_t_uint256_t_bytes32_t_string_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_calldata_ptr_to_t_string_memory_ptr_fromStack(value2, value3,  tail)\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint128_to_t_uint128_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint128_to_t_uint128_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(memPtr) {\n\n        mstore(add(memPtr, 0), \"TokenNotSupported\")\n\n    }\n\n    function abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 17)\n        store_literal_in_memory_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d2f8e8f0a3132d85392dd42596f134395b200d03cc73cebaef0c903d898657e1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(memPtr) {\n\n        mstore(add(memPtr, 0), \"AmountIsZero\")\n\n    }\n\n    function abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 12)\n        store_literal_in_memory_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_41a3c7da6a405d0b582130b233ab9373122491f5044da88c4622af2417f2b5d2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(memPtr) {\n\n        mstore(add(memPtr, 0), \"ThrowZeroAddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 16)\n        store_literal_in_memory_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c69ddfb7ac12bc88a1972db6046dbf646efc1690dd81423d8eb86a59fbc59dd7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(memPtr) {\n\n        mstore(add(memPtr, 0), \"InvalidInstitutionCode\")\n\n    }\n\n    function abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8d342490ebeb898cd40842289fa022183f4fcca41c57866dcb96110f8ec752a5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101215760003560e01c806387490d86116100ad578063d12ff20a11610071578063d12ff20a1461031d578063d8e8de341461034d578063d9caed121461037d578063f2fde38b14610399578063f5326b19146103b557610121565b806387490d86146102775780638da5cb5b146102a757806399e3c0b4146102c5578063b810c636146102e1578063c4d66de81461030157610121565b8063715018a6116100f4578063715018a6146101c15780637249fbb6146101cb57806375151b63146101fb578063768c6ec01461022b57806379a0effb1461025b57610121565b806302621338146101265780632ebc5356146101565780633220088214610174578063384efd2714610190575b600080fd5b610140600480360381019061013b919061254e565b6103d1565b60405161014d9190612668565b60405180910390f35b61015e61050f565b60405161016b91906126cb565b60405180910390f35b61018e60048036038101906101899190612894565b610539565b005b6101aa60048036038101906101a591906129bb565b61064d565b6040516101b8929190612a64565b60405180910390f35b6101c9610b5d565b005b6101e560048036038101906101e0919061254e565b610b71565b6040516101f29190612aa8565b60405180910390f35b61021560048036038101906102109190612ac3565b610e0a565b6040516102229190612aa8565b60405180910390f35b6102456004803603810190610240919061254e565b610e60565b6040516102529190612bed565b60405180910390f35b61027560048036038101906102709190612c09565b611091565b005b610291600480360381019061028c919061254e565b6111d5565b60405161029e9190612c78565b60405180910390f35b6102af611216565b6040516102bc91906126cb565b60405180910390f35b6102df60048036038101906102da9190612cbf565b611240565b005b6102e961142d565b6040516102f893929190612d4c565b60405180910390f35b61031b60048036038101906103169190612ac3565b61147e565b005b61033760048036038101906103329190612e05565b611695565b6040516103449190612edb565b60405180910390f35b61036760048036038101906103629190612ac3565b611ad5565b6040516103749190612aa8565b60405180910390f35b61039760048036038101906103929190612ef6565b611b2b565b005b6103b360048036038101906103ae9190612ac3565b611bb7565b005b6103cf60048036038101906103ca9190612f75565b611c3a565b005b60606000606b6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561044e57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610408565b50505050905060008151905060008167ffffffffffffffff811115610476576104756126fc565b5b6040519080825280602002602001820160405280156104af57816020015b61049c6123e1565b8152602001906001900390816104945790505b50905060005b82811015610503578381815181106104d0576104cf612fb5565b5b60200260200101518282815181106104eb576104ea612fb5565b5b602002602001018190525080806001019150506104b5565b50809350505050919050565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610541611cf1565b60008151905060005b8181101561064757606b600085815260200190815260200160002083828151811061057857610577612fb5565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106105dd576105dc612fb5565b5b602002602001015160200151815260200185815250606c600085848151811061060957610608612fb5565b5b60200260200101516000015181526020019081526020016000206000820151816000015560208201518160010155905050808060010191505061054a565b50505050565b600080606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d7576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606d6000888152602001908152602001600020600401600c9054906101000a900460ff1615610732576040517f56f1733f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000606d600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083606d60008a815260200190815260200160002060050160148282829054906101000a90046bffffffffffffffffffffffff166107aa9190613013565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506000606d60008a815260200190815260200160002060050160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff160361084c576001606d60008a8152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055505b60006108588986611d6f565b90506000606d60008b81526020019081526020016000206003015490506000811115610888576108878a611ed3565b5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600001516040518363ffffffff1660e01b81526004016108e9929190613053565b6020604051808303816000875af1158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c9190613091565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8884602001516040518363ffffffff1660e01b815260040161096c929190613053565b6020604051808303816000875af115801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af9190613091565b50600089899050905060008184604001516109ca91906130ed565b905060005b82811015610af5578573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8d8d84818110610a0657610a05612fb5565b5b9050602002016020810190610a1b9190612ac3565b846040518363ffffffff1660e01b8152600401610a39929190613053565b6020604051808303816000875af1158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c9190613091565b50818c8c83818110610a9157610a90612fb5565b5b9050602002016020810190610aa69190612ac3565b73ffffffffffffffffffffffffffffffffffffffff167f61dceb70b8f97239c33a3f9c0d0efc6c8759c7e9a808f75dd42b3a0f213186c260405160405180910390a380806001019150506109cf565b508873ffffffffffffffffffffffffffffffffffffffff168c7f7b5664d3710676924bf38f3d89d38a62db3aa5fca4213adf6fa36e51c3cfc8548f8b604051610b3f92919061312d565b60405180910390a38b85965096505050505050965096945050505050565b610b65611cf1565b610b6f6000612027565b565b6000606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bfa576040517fe9d8299200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606d6000838152602001908152602001600020600401600c9054906101000a900460ff1615610c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c55906131b3565b60405180910390fd5b6001606d6000848152602001908152602001600020600401600c6101000a81548160ff0219169083151502179055506000606d600084815260200190815260200160002060050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550606d600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb606d600085815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606d6000868152602001908152602001600020600601546040518363ffffffff1660e01b8152600401610d90929190613053565b6020604051808303816000875af1158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd39190613091565b50817ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf060405160405180910390a260019050919050565b6000606960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b610e68612401565b606d6000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160048201600c9054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681526020016006820154815250509050919050565b611099611cf1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110ff576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036111685780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f720000000000000000000000000000000000000000000082036111d15780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6111dd6124c3565b606c6000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611248611cf1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ae576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e000000000000000000000000000000000000000000000000000000830361132d5780606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c697374000000000000000000000000000000000000000000000083036113b05780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506113ed565b826040517f48bae5b80000000000000000000000000000000000000000000000000000000081526004016113e49190612edb565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace930838383604051611420939291906131d3565b60405180910390a1505050565b6000806000606660009054906101000a90046fffffffffffffffffffffffffffffffff16606660109054906101000a90046fffffffffffffffffffffffffffffffff16606554925092509250909192565b60008060019054906101000a900460ff161590508080156114af5750600160008054906101000a900460ff1660ff16105b806114dc57506114be306120ed565b1580156114db5750600160008054906101000a900460ff1660ff16145b5b61151b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115129061327c565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611558576001600060016101000a81548160ff0219169083151502179055505b6001606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620186a0606581905550611388606660006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506101f4606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550611638612110565b80156116915760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161168891906132ee565b60405180910390a15b5050565b60006116a48a8a86898c612169565b8973ffffffffffffffffffffffffffffffffffffffff166323b872dd33308c6040518463ffffffff1660e01b81526004016116e193929190613309565b6020604051808303816000875af1158015611700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117249190613091565b50606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061177590613340565b919050555033606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040516020016117cc929190613053565b6040516020818303038152906040528051906020012090506040518061012001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001868152602001886bffffffffffffffffffffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016065546bffffffffffffffffffffffff1681526020018a815250606d600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060a082015181600401600c6101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160050160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550610100820151816006015590505080898b73ffffffffffffffffffffffffffffffffffffffff167f34e33f86eb59d668184e1f86aeb03ed25f4ce72216218ed02db752f21c6a40428a8c8888604051611ac094939291906133f5565b60405180910390a49998505050505050505050565b6000606a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b611b33611cf1565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611b6e929190613053565b6020604051808303816000875af1158015611b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb19190613091565b50505050565b611bbf611cf1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c25906134a7565b60405180910390fd5b611c3781612027565b50565b611c42611cf1565b81606660006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df8282604051611ce59291906134c7565b60405180910390a15050565b611cf9612378565b73ffffffffffffffffffffffffffffffffffffffff16611d17611216565b73ffffffffffffffffffffffffffffffffffffffff1614611d6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d649061353c565b60405180910390fd5b565b611d776124e3565b6000606d6000858152602001908152602001600020600601549050606d60008581526020019081526020016000206003015481611db4919061355c565b9050606554836bffffffffffffffffffffffff1682611dd39190613590565b611ddd91906130ed565b826020018181525050606554606660009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168360200151611e299190613590565b611e3391906130ed565b82600001818152505081600001518260200151611e50919061355c565b826020018181525050606554606660109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168360000151611e9c9190613590565b611ea691906130ed565b82604001818152505081604001518260000151611ec3919061355c565b8260000181815250505092915050565b6000606d600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606d6000848152602001908152602001600020600301549050606d600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611f9a929190613053565b6020604051808303816000875af1158015611fb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fdd9190613091565b50808273ffffffffffffffffffffffffffffffffffffffff167f96c76d5aec8a8c11a9c8e02768e3fa309347330d08961e0cf9fd43b349b684c260405160405180910390a3505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661215f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215690613644565b60405180910390fd5b612167612380565b565b606960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166121f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ec906136b0565b60405180910390fd5b60008411612238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222f9061371c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036122a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229e90613788565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612316576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230d90613788565b60405180910390fd5b6000801b606c60008381526020019081526020016000206000015403612371576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612368906137f4565b60405180910390fd5b5050505050565b600033905090565b600060019054906101000a900460ff166123cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c690613644565b60405180910390fd5b6123df6123da612378565b612027565b565b604051806040016040528060008019168152602001600080191681525090565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160006bffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff168152602001600081525090565b604051806040016040528060008019168152602001600080191681525090565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61252b81612518565b811461253657600080fd5b50565b60008135905061254881612522565b92915050565b6000602082840312156125645761256361250e565b5b600061257284828501612539565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6125b081612518565b82525050565b6040820160008201516125cc60008501826125a7565b5060208201516125df60208501826125a7565b50505050565b60006125f183836125b6565b60408301905092915050565b6000602082019050919050565b60006126158261257b565b61261f8185612586565b935061262a83612597565b8060005b8381101561265b57815161264288826125e5565b975061264d836125fd565b92505060018101905061262e565b5085935050505092915050565b60006020820190508181036000830152612682818461260a565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126b58261268a565b9050919050565b6126c5816126aa565b82525050565b60006020820190506126e060008301846126bc565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612734826126eb565b810181811067ffffffffffffffff82111715612753576127526126fc565b5b80604052505050565b6000612766612504565b9050612772828261272b565b919050565b600067ffffffffffffffff821115612792576127916126fc565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156127c3576127c26127a8565b5b6127cd604061275c565b905060006127dd84828501612539565b60008301525060206127f184828501612539565b60208301525092915050565b600061281061280b84612777565b61275c565b90508083825260208201905060408402830185811115612833576128326127a3565b5b835b8181101561285c578061284888826127ad565b845260208401935050604081019050612835565b5050509392505050565b600082601f83011261287b5761287a6126e6565b5b813561288b8482602086016127fd565b91505092915050565b600080604083850312156128ab576128aa61250e565b5b60006128b985828601612539565b925050602083013567ffffffffffffffff8111156128da576128d9612513565b5b6128e685828601612866565b9150509250929050565b600080fd5b60008083601f84011261290b5761290a6126e6565b5b8235905067ffffffffffffffff811115612928576129276128f0565b5b602083019150836020820283011115612944576129436127a3565b5b9250929050565b612954816126aa565b811461295f57600080fd5b50565b6000813590506129718161294b565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61299881612977565b81146129a357600080fd5b50565b6000813590506129b58161298f565b92915050565b60008060008060008060a087890312156129d8576129d761250e565b5b60006129e689828a01612539565b96505060206129f789828a01612539565b955050604087013567ffffffffffffffff811115612a1857612a17612513565b5b612a2489828a016128f5565b94509450506060612a3789828a01612962565b9250506080612a4889828a016129a6565b9150509295509295509295565b612a5e81612518565b82525050565b6000604082019050612a796000830185612a55565b612a8660208301846126bc565b9392505050565b60008115159050919050565b612aa281612a8d565b82525050565b6000602082019050612abd6000830184612a99565b92915050565b600060208284031215612ad957612ad861250e565b5b6000612ae784828501612962565b91505092915050565b612af9816126aa565b82525050565b6000819050919050565b612b1281612aff565b82525050565b612b2181612977565b82525050565b612b3081612a8d565b82525050565b61012082016000820151612b4d6000850182612af0565b506020820151612b606020850182612af0565b506040820151612b736040850182612af0565b506060820151612b866060850182612b09565b506080820151612b996080850182612b18565b5060a0820151612bac60a0850182612b27565b5060c0820151612bbf60c0850182612af0565b5060e0820151612bd260e0850182612b18565b50610100820151612be7610100850182612b09565b50505050565b600061012082019050612c036000830184612b36565b92915050565b60008060408385031215612c2057612c1f61250e565b5b6000612c2e85828601612539565b9250506020612c3f85828601612962565b9150509250929050565b604082016000820151612c5f60008501826125a7565b506020820151612c7260208501826125a7565b50505050565b6000604082019050612c8d6000830184612c49565b92915050565b612c9c81612a8d565b8114612ca757600080fd5b50565b600081359050612cb981612c93565b92915050565b600080600060608486031215612cd857612cd761250e565b5b6000612ce686828701612539565b9350506020612cf786828701612962565b9250506040612d0886828701612caa565b9150509250925092565b60006fffffffffffffffffffffffffffffffff82169050919050565b612d3781612d12565b82525050565b612d4681612aff565b82525050565b6000606082019050612d616000830186612d2e565b612d6e6020830185612d2e565b612d7b6040830184612d3d565b949350505050565b612d8c81612aff565b8114612d9757600080fd5b50565b600081359050612da981612d83565b92915050565b60008083601f840112612dc557612dc46126e6565b5b8235905067ffffffffffffffff811115612de257612de16128f0565b5b602083019150836001820283011115612dfe57612dfd6127a3565b5b9250929050565b60008060008060008060008060006101008a8c031215612e2857612e2761250e565b5b6000612e368c828d01612962565b9950506020612e478c828d01612d9a565b9850506040612e588c828d01612539565b9750506060612e698c828d016129a6565b9650506080612e7a8c828d01612962565b95505060a0612e8b8c828d01612d9a565b94505060c0612e9c8c828d01612962565b93505060e08a013567ffffffffffffffff811115612ebd57612ebc612513565b5b612ec98c828d01612daf565b92509250509295985092959850929598565b6000602082019050612ef06000830184612a55565b92915050565b600080600060608486031215612f0f57612f0e61250e565b5b6000612f1d86828701612962565b9350506020612f2e86828701612962565b9250506040612f3f86828701612d9a565b9150509250925092565b612f5281612d12565b8114612f5d57600080fd5b50565b600081359050612f6f81612f49565b92915050565b60008060408385031215612f8c57612f8b61250e565b5b6000612f9a85828601612f60565b9250506020612fab85828601612f60565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061301e82612977565b915061302983612977565b925082820390506bffffffffffffffffffffffff81111561304d5761304c612fe4565b5b92915050565b600060408201905061306860008301856126bc565b6130756020830184612d3d565b9392505050565b60008151905061308b81612c93565b92915050565b6000602082840312156130a7576130a661250e565b5b60006130b58482850161307c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130f882612aff565b915061310383612aff565b925082613113576131126130be565b5b828204905092915050565b61312781612977565b82525050565b60006040820190506131426000830185612a55565b61314f602083018461311e565b9392505050565b600082825260208201905092915050565b7f4f7264657246756c66696c6c6564000000000000000000000000000000000000600082015250565b600061319d600e83613156565b91506131a882613167565b602082019050919050565b600060208201905081810360008301526131cc81613190565b9050919050565b60006060820190506131e86000830186612a55565b6131f560208301856126bc565b6132026040830184612a99565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613266602e83613156565b91506132718261320a565b604082019050919050565b6000602082019050818103600083015261329581613259565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006132d86132d36132ce8461329c565b6132b3565b6132a6565b9050919050565b6132e8816132bd565b82525050565b600060208201905061330360008301846132df565b92915050565b600060608201905061331e60008301866126bc565b61332b60208301856126bc565b6133386040830184612d3d565b949350505050565b600061334b82612aff565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361337d5761337c612fe4565b5b600182019050919050565b60006133a361339e61339984612977565b6132b3565b612aff565b9050919050565b6133b381613388565b82525050565b82818337600083830152505050565b60006133d48385613156565b93506133e18385846133b9565b6133ea836126eb565b840190509392505050565b600060608201905061340a60008301876133aa565b6134176020830186612a55565b818103604083015261342a8184866133c8565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613491602683613156565b915061349c82613435565b604082019050919050565b600060208201905081810360008301526134c081613484565b9050919050565b60006040820190506134dc6000830185612d2e565b6134e96020830184612d2e565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613526602083613156565b9150613531826134f0565b602082019050919050565b6000602082019050818103600083015261355581613519565b9050919050565b600061356782612aff565b915061357283612aff565b925082820390508181111561358a57613589612fe4565b5b92915050565b600061359b82612aff565b91506135a683612aff565b92508282026135b481612aff565b915082820484148315176135cb576135ca612fe4565b5b5092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061362e602b83613156565b9150613639826135d2565b604082019050919050565b6000602082019050818103600083015261365d81613621565b9050919050565b7f546f6b656e4e6f74537570706f72746564000000000000000000000000000000600082015250565b600061369a601183613156565b91506136a582613664565b602082019050919050565b600060208201905081810360008301526136c98161368d565b9050919050565b7f416d6f756e7449735a65726f0000000000000000000000000000000000000000600082015250565b6000613706600c83613156565b9150613711826136d0565b602082019050919050565b60006020820190508181036000830152613735816136f9565b9050919050565b7f5468726f775a65726f4164647265737300000000000000000000000000000000600082015250565b6000613772601083613156565b915061377d8261373c565b602082019050919050565b600060208201905081810360008301526137a181613765565b9050919050565b7f496e76616c6964496e737469747574696f6e436f646500000000000000000000600082015250565b60006137de601683613156565b91506137e9826137a8565b602082019050919050565b6000602082019050818103600083015261380d816137d1565b905091905056fea2646970667358221220f8823cfaf049624cc7c165baccd9ac4d6cc830669345b349ce319cd5c49631f064736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x87490D86 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xD12FF20A GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD12FF20A EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0xD8E8DE34 EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0xD9CAED12 EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0xF5326B19 EQ PUSH2 0x3B5 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x87490D86 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0xB810C636 EQ PUSH2 0x2E1 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x301 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x7249FBB6 EQ PUSH2 0x1CB JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0x1FB JUMPI DUP1 PUSH4 0x768C6EC0 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0x25B JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x2621338 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x2EBC5356 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x32200882 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x384EFD27 EQ PUSH2 0x190 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x140 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x254E JUMP JUMPDEST PUSH2 0x3D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP2 SWAP1 PUSH2 0x2668 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15E PUSH2 0x50F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0x26CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x2894 JUMP JUMPDEST PUSH2 0x539 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A5 SWAP2 SWAP1 PUSH2 0x29BB JUMP JUMPDEST PUSH2 0x64D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B8 SWAP3 SWAP2 SWAP1 PUSH2 0x2A64 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C9 PUSH2 0xB5D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E0 SWAP2 SWAP1 PUSH2 0x254E JUMP JUMPDEST PUSH2 0xB71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x2AA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x215 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x210 SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH2 0xE0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x2AA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x245 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x240 SWAP2 SWAP1 PUSH2 0x254E JUMP JUMPDEST PUSH2 0xE60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x252 SWAP2 SWAP1 PUSH2 0x2BED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x275 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x270 SWAP2 SWAP1 PUSH2 0x2C09 JUMP JUMPDEST PUSH2 0x1091 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x291 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28C SWAP2 SWAP1 PUSH2 0x254E JUMP JUMPDEST PUSH2 0x11D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x2C78 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AF PUSH2 0x1216 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BC SWAP2 SWAP1 PUSH2 0x26CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x2CBF JUMP JUMPDEST PUSH2 0x1240 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E9 PUSH2 0x142D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH2 0x147E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x337 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x2E05 JUMP JUMPDEST PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x2EDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x367 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x362 SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH2 0x1AD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x374 SWAP2 SWAP1 PUSH2 0x2AA8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x397 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x392 SWAP2 SWAP1 PUSH2 0x2EF6 JUMP JUMPDEST PUSH2 0x1B2B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3B3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH2 0x1BB7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3CF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CA SWAP2 SWAP1 PUSH2 0x2F75 JUMP JUMPDEST PUSH2 0x1C3A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x6B PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x44E JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x408 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x476 JUMPI PUSH2 0x475 PUSH2 0x26FC JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4AF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x49C PUSH2 0x23E1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x494 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x503 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4D0 JUMPI PUSH2 0x4CF PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EB JUMPI PUSH2 0x4EA PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x4B5 JUMP JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x541 PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x647 JUMPI PUSH1 0x6B PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x578 JUMPI PUSH2 0x577 PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5DD JUMPI PUSH2 0x5DC PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x6C PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x609 JUMPI PUSH2 0x608 PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x54A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x6D7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE9D8299200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6D PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x732 JUMPI PUSH1 0x40 MLOAD PUSH32 0x56F1733F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP4 PUSH1 0x6D PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7AA SWAP2 SWAP1 PUSH2 0x3013 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x84C JUMPI PUSH1 0x1 PUSH1 0x6D PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH2 0x858 DUP10 DUP7 PUSH2 0x1D6F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x888 JUMPI PUSH2 0x887 DUP11 PUSH2 0x1ED3 JUMP JUMPDEST JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x67 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8E9 SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x908 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x92C SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP9 DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x96C SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x98B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9AF SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP PUSH1 0x0 DUP10 DUP10 SWAP1 POP SWAP1 POP PUSH1 0x0 DUP2 DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x9CA SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAF5 JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP14 DUP14 DUP5 DUP2 DUP2 LT PUSH2 0xA06 JUMPI PUSH2 0xA05 PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA1B SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA39 SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA58 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA7C SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP DUP2 DUP13 DUP13 DUP4 DUP2 DUP2 LT PUSH2 0xA91 JUMPI PUSH2 0xA90 PUSH2 0x2FB5 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAA6 SWAP2 SWAP1 PUSH2 0x2AC3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x61DCEB70B8F97239C33A3F9C0D0EFC6C8759C7E9A808F75DD42B3A0F213186C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x9CF JUMP JUMPDEST POP DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP13 PUSH32 0x7B5664D3710676924BF38F3D89D38A62DB3AA5FCA4213ADF6FA36E51C3CFC854 DUP16 DUP12 PUSH1 0x40 MLOAD PUSH2 0xB3F SWAP3 SWAP2 SWAP1 PUSH2 0x312D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP12 DUP6 SWAP7 POP SWAP7 POP POP POP POP POP POP SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xB65 PUSH2 0x1CF1 JUMP JUMPDEST PUSH2 0xB6F PUSH1 0x0 PUSH2 0x2027 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBFA JUMPI PUSH1 0x40 MLOAD PUSH32 0xE9D8299200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC55 SWAP1 PUSH2 0x31B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x6D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0x6D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6D PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD90 SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDAF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDD3 SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP DUP2 PUSH32 0xFE509803C09416B28FF3D8F690C8B0C61462A892C46D5430C8FB20ABE472DAF0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x69 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE68 PUSH2 0x2401 JUMP JUMPDEST PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1099 PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x1168 JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x11D1 JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x11DD PUSH2 0x24C3 JUMP JUMPDEST PUSH1 0x6C PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1248 PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x12AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x132D JUMPI DUP1 PUSH1 0x69 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x13B0 JUMPI DUP1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x13ED JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH32 0x48BAE5B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E4 SWAP2 SWAP1 PUSH2 0x2EDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1420 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x66 PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x65 SLOAD SWAP3 POP SWAP3 POP SWAP3 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x14AF JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x14DC JUMPI POP PUSH2 0x14BE ADDRESS PUSH2 0x20ED JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x14DB JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x151B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1512 SWAP1 PUSH2 0x327C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1558 JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x69 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 0x186A0 PUSH1 0x65 DUP2 SWAP1 SSTORE POP PUSH2 0x1388 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1F4 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1638 PUSH2 0x2110 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1691 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x1688 SWAP2 SWAP1 PUSH2 0x32EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16A4 DUP11 DUP11 DUP7 DUP10 DUP13 PUSH2 0x2169 JUMP JUMPDEST DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP13 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16E1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3309 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1700 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1724 SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP PUSH1 0x6E PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1775 SWAP1 PUSH2 0x3340 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP CALLER PUSH1 0x6E PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17CC SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x65 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP2 MSTORE POP PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x100 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP DUP1 DUP10 DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x34E33F86EB59D668184E1F86AEB03ED25F4CE72216218ED02DB752F21C6A4042 DUP11 DUP13 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH2 0x1AC0 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x33F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6A PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B33 PUSH2 0x1CF1 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B6E SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B8D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BB1 SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1BBF PUSH2 0x1CF1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C2E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C25 SWAP1 PUSH2 0x34A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1C37 DUP2 PUSH2 0x2027 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1C42 PUSH2 0x1CF1 JUMP JUMPDEST DUP2 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xE38926C5806B98A6FD00C5D791A36FBD196537FE48D11C45C9F1D0ACD1EA74DF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1CE5 SWAP3 SWAP2 SWAP1 PUSH2 0x34C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1CF9 PUSH2 0x2378 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1D17 PUSH2 0x1216 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D64 SWAP1 PUSH2 0x353C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x1D77 PUSH2 0x24E3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 POP PUSH1 0x6D PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD DUP2 PUSH2 0x1DB4 SWAP2 SWAP1 PUSH2 0x355C JUMP JUMPDEST SWAP1 POP PUSH1 0x65 SLOAD DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH2 0x1DD3 SWAP2 SWAP1 PUSH2 0x3590 JUMP JUMPDEST PUSH2 0x1DDD SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x1E29 SWAP2 SWAP1 PUSH2 0x3590 JUMP JUMPDEST PUSH2 0x1E33 SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x1E50 SWAP2 SWAP1 PUSH2 0x355C JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x65 SLOAD PUSH1 0x66 PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x0 ADD MLOAD PUSH2 0x1E9C SWAP2 SWAP1 PUSH2 0x3590 JUMP JUMPDEST PUSH2 0x1EA6 SWAP2 SWAP1 PUSH2 0x30ED JUMP JUMPDEST DUP3 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x1EC3 SWAP2 SWAP1 PUSH2 0x355C JUMP JUMPDEST DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x6D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 POP PUSH1 0x6D PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F9A SWAP3 SWAP2 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1FB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FDD SWAP2 SWAP1 PUSH2 0x3091 JUMP JUMPDEST POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x96C76D5AEC8A8C11A9C8E02768E3FA309347330D08961E0CF9FD43B349B684C2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x215F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2156 SWAP1 PUSH2 0x3644 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2167 PUSH2 0x2380 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x69 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x21F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21EC SWAP1 PUSH2 0x36B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 GT PUSH2 0x2238 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x222F SWAP1 PUSH2 0x371C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x22A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x229E SWAP1 PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2316 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x230D SWAP1 PUSH2 0x3788 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x6C PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x2371 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2368 SWAP1 PUSH2 0x37F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x23CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23C6 SWAP1 PUSH2 0x3644 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x23DF PUSH2 0x23DA PUSH2 0x2378 JUMP JUMPDEST PUSH2 0x2027 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x120 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x252B DUP2 PUSH2 0x2518 JUMP JUMPDEST DUP2 EQ PUSH2 0x2536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2548 DUP2 PUSH2 0x2522 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2564 JUMPI PUSH2 0x2563 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2572 DUP5 DUP3 DUP6 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25B0 DUP2 PUSH2 0x2518 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x25CC PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25A7 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x25DF PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25A7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25F1 DUP4 DUP4 PUSH2 0x25B6 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2615 DUP3 PUSH2 0x257B JUMP JUMPDEST PUSH2 0x261F DUP2 DUP6 PUSH2 0x2586 JUMP JUMPDEST SWAP4 POP PUSH2 0x262A DUP4 PUSH2 0x2597 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x265B JUMPI DUP2 MLOAD PUSH2 0x2642 DUP9 DUP3 PUSH2 0x25E5 JUMP JUMPDEST SWAP8 POP PUSH2 0x264D DUP4 PUSH2 0x25FD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x262E JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2682 DUP2 DUP5 PUSH2 0x260A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26B5 DUP3 PUSH2 0x268A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26C5 DUP2 PUSH2 0x26AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2734 DUP3 PUSH2 0x26EB JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2753 JUMPI PUSH2 0x2752 PUSH2 0x26FC JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2766 PUSH2 0x2504 JUMP JUMPDEST SWAP1 POP PUSH2 0x2772 DUP3 DUP3 PUSH2 0x272B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2792 JUMPI PUSH2 0x2791 PUSH2 0x26FC JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x27C3 JUMPI PUSH2 0x27C2 PUSH2 0x27A8 JUMP JUMPDEST JUMPDEST PUSH2 0x27CD PUSH1 0x40 PUSH2 0x275C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x27DD DUP5 DUP3 DUP6 ADD PUSH2 0x2539 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x27F1 DUP5 DUP3 DUP6 ADD PUSH2 0x2539 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2810 PUSH2 0x280B DUP5 PUSH2 0x2777 JUMP JUMPDEST PUSH2 0x275C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2833 JUMPI PUSH2 0x2832 PUSH2 0x27A3 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x285C JUMPI DUP1 PUSH2 0x2848 DUP9 DUP3 PUSH2 0x27AD JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x2835 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x287B JUMPI PUSH2 0x287A PUSH2 0x26E6 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x288B DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x27FD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28AB JUMPI PUSH2 0x28AA PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28B9 DUP6 DUP3 DUP7 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x28DA JUMPI PUSH2 0x28D9 PUSH2 0x2513 JUMP JUMPDEST JUMPDEST PUSH2 0x28E6 DUP6 DUP3 DUP7 ADD PUSH2 0x2866 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x290B JUMPI PUSH2 0x290A PUSH2 0x26E6 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2928 JUMPI PUSH2 0x2927 PUSH2 0x28F0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2944 JUMPI PUSH2 0x2943 PUSH2 0x27A3 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2954 DUP2 PUSH2 0x26AA JUMP JUMPDEST DUP2 EQ PUSH2 0x295F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2971 DUP2 PUSH2 0x294B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2998 DUP2 PUSH2 0x2977 JUMP JUMPDEST DUP2 EQ PUSH2 0x29A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x29B5 DUP2 PUSH2 0x298F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x29D8 JUMPI PUSH2 0x29D7 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29E6 DUP10 DUP3 DUP11 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x29F7 DUP10 DUP3 DUP11 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A18 JUMPI PUSH2 0x2A17 PUSH2 0x2513 JUMP JUMPDEST JUMPDEST PUSH2 0x2A24 DUP10 DUP3 DUP11 ADD PUSH2 0x28F5 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x60 PUSH2 0x2A37 DUP10 DUP3 DUP11 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2A48 DUP10 DUP3 DUP11 ADD PUSH2 0x29A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x2A5E DUP2 PUSH2 0x2518 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2A79 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2A55 JUMP JUMPDEST PUSH2 0x2A86 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x26BC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2AA2 DUP2 PUSH2 0x2A8D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2ABD PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A99 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AD9 JUMPI PUSH2 0x2AD8 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2AE7 DUP5 DUP3 DUP6 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2AF9 DUP2 PUSH2 0x26AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2B12 DUP2 PUSH2 0x2AFF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2B21 DUP2 PUSH2 0x2977 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2B30 DUP2 PUSH2 0x2A8D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2B4D PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2AF0 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2B60 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2AF0 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2B73 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x2AF0 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2B86 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2B09 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2B99 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2B18 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2BAC PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2B27 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x2BBF PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x2AF0 JUMP JUMPDEST POP PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x2BD2 PUSH1 0xE0 DUP6 ADD DUP3 PUSH2 0x2B18 JUMP JUMPDEST POP PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x2BE7 PUSH2 0x100 DUP6 ADD DUP3 PUSH2 0x2B09 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x2C03 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2B36 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C20 JUMPI PUSH2 0x2C1F PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C2E DUP6 DUP3 DUP7 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2C3F DUP6 DUP3 DUP7 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2C5F PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x25A7 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2C72 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x25A7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2C8D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2C49 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C9C DUP2 PUSH2 0x2A8D JUMP JUMPDEST DUP2 EQ PUSH2 0x2CA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2CB9 DUP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2CD8 JUMPI PUSH2 0x2CD7 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CE6 DUP7 DUP3 DUP8 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2CF7 DUP7 DUP3 DUP8 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2D08 DUP7 DUP3 DUP8 ADD PUSH2 0x2CAA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2D37 DUP2 PUSH2 0x2D12 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2D46 DUP2 PUSH2 0x2AFF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2D61 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2D2E JUMP JUMPDEST PUSH2 0x2D6E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2D2E JUMP JUMPDEST PUSH2 0x2D7B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2D3D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x2D8C DUP2 PUSH2 0x2AFF JUMP JUMPDEST DUP2 EQ PUSH2 0x2D97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2DA9 DUP2 PUSH2 0x2D83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2DC5 JUMPI PUSH2 0x2DC4 PUSH2 0x26E6 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2DE2 JUMPI PUSH2 0x2DE1 PUSH2 0x28F0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x2DFE JUMPI PUSH2 0x2DFD PUSH2 0x27A3 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x2E28 JUMPI PUSH2 0x2E27 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E36 DUP13 DUP3 DUP14 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP10 POP POP PUSH1 0x20 PUSH2 0x2E47 DUP13 DUP3 DUP14 ADD PUSH2 0x2D9A JUMP JUMPDEST SWAP9 POP POP PUSH1 0x40 PUSH2 0x2E58 DUP13 DUP3 DUP14 ADD PUSH2 0x2539 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x60 PUSH2 0x2E69 DUP13 DUP3 DUP14 ADD PUSH2 0x29A6 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x80 PUSH2 0x2E7A DUP13 DUP3 DUP14 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP6 POP POP PUSH1 0xA0 PUSH2 0x2E8B DUP13 DUP3 DUP14 ADD PUSH2 0x2D9A JUMP JUMPDEST SWAP5 POP POP PUSH1 0xC0 PUSH2 0x2E9C DUP13 DUP3 DUP14 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2EBD JUMPI PUSH2 0x2EBC PUSH2 0x2513 JUMP JUMPDEST JUMPDEST PUSH2 0x2EC9 DUP13 DUP3 DUP14 ADD PUSH2 0x2DAF JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2EF0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2A55 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F0F JUMPI PUSH2 0x2F0E PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F1D DUP7 DUP3 DUP8 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2F2E DUP7 DUP3 DUP8 ADD PUSH2 0x2962 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2F3F DUP7 DUP3 DUP8 ADD PUSH2 0x2D9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x2F52 DUP2 PUSH2 0x2D12 JUMP JUMPDEST DUP2 EQ PUSH2 0x2F5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2F6F DUP2 PUSH2 0x2F49 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2F8C JUMPI PUSH2 0x2F8B PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2F9A DUP6 DUP3 DUP7 ADD PUSH2 0x2F60 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2FAB DUP6 DUP3 DUP7 ADD PUSH2 0x2F60 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x301E DUP3 PUSH2 0x2977 JUMP JUMPDEST SWAP2 POP PUSH2 0x3029 DUP4 PUSH2 0x2977 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x304D JUMPI PUSH2 0x304C PUSH2 0x2FE4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3068 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x26BC JUMP JUMPDEST PUSH2 0x3075 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2D3D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x308B DUP2 PUSH2 0x2C93 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30A7 JUMPI PUSH2 0x30A6 PUSH2 0x250E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x30B5 DUP5 DUP3 DUP6 ADD PUSH2 0x307C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x30F8 DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH2 0x3103 DUP4 PUSH2 0x2AFF JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3113 JUMPI PUSH2 0x3112 PUSH2 0x30BE JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3127 DUP2 PUSH2 0x2977 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3142 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2A55 JUMP JUMPDEST PUSH2 0x314F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x311E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F7264657246756C66696C6C6564000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x319D PUSH1 0xE DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x31A8 DUP3 PUSH2 0x3167 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31CC DUP2 PUSH2 0x3190 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31E8 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2A55 JUMP JUMPDEST PUSH2 0x31F5 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26BC JUMP JUMPDEST PUSH2 0x3202 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2A99 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3266 PUSH1 0x2E DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x3271 DUP3 PUSH2 0x320A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3295 DUP2 PUSH2 0x3259 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32D8 PUSH2 0x32D3 PUSH2 0x32CE DUP5 PUSH2 0x329C JUMP JUMPDEST PUSH2 0x32B3 JUMP JUMPDEST PUSH2 0x32A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x32E8 DUP2 PUSH2 0x32BD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x3303 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x32DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x331E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x26BC JUMP JUMPDEST PUSH2 0x332B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26BC JUMP JUMPDEST PUSH2 0x3338 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2D3D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x334B DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x337D JUMPI PUSH2 0x337C PUSH2 0x2FE4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A3 PUSH2 0x339E PUSH2 0x3399 DUP5 PUSH2 0x2977 JUMP JUMPDEST PUSH2 0x32B3 JUMP JUMPDEST PUSH2 0x2AFF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x33B3 DUP2 PUSH2 0x3388 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D4 DUP4 DUP6 PUSH2 0x3156 JUMP JUMPDEST SWAP4 POP PUSH2 0x33E1 DUP4 DUP6 DUP5 PUSH2 0x33B9 JUMP JUMPDEST PUSH2 0x33EA DUP4 PUSH2 0x26EB JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x340A PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x33AA JUMP JUMPDEST PUSH2 0x3417 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2A55 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x342A DUP2 DUP5 DUP7 PUSH2 0x33C8 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3491 PUSH1 0x26 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x349C DUP3 PUSH2 0x3435 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34C0 DUP2 PUSH2 0x3484 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x34DC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2D2E JUMP JUMPDEST PUSH2 0x34E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2D2E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3526 PUSH1 0x20 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x3531 DUP3 PUSH2 0x34F0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3555 DUP2 PUSH2 0x3519 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3567 DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH2 0x3572 DUP4 PUSH2 0x2AFF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x358A JUMPI PUSH2 0x3589 PUSH2 0x2FE4 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x359B DUP3 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP PUSH2 0x35A6 DUP4 PUSH2 0x2AFF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x35B4 DUP2 PUSH2 0x2AFF JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x35CB JUMPI PUSH2 0x35CA PUSH2 0x2FE4 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x362E PUSH1 0x2B DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x3639 DUP3 PUSH2 0x35D2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x365D DUP2 PUSH2 0x3621 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E4E6F74537570706F72746564000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x369A PUSH1 0x11 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x36A5 DUP3 PUSH2 0x3664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x36C9 DUP2 PUSH2 0x368D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E7449735A65726F0000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3706 PUSH1 0xC DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x3711 DUP3 PUSH2 0x36D0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3735 DUP2 PUSH2 0x36F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5468726F775A65726F4164647265737300000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3772 PUSH1 0x10 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x377D DUP3 PUSH2 0x373C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x37A1 DUP2 PUSH2 0x3765 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E76616C6964496E737469747574696F6E436F646500000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37DE PUSH1 0x16 DUP4 PUSH2 0x3156 JUMP JUMPDEST SWAP2 POP PUSH2 0x37E9 DUP3 PUSH2 0x37A8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x380D DUP2 PUSH2 0x37D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 DUP3 EXTCODECOPY STATICCALL CREATE 0x49 PUSH3 0x4CC7C1 PUSH6 0xBACCD9AC4D6C 0xC8 ADDRESS PUSH7 0x9345B349CE319C 0xD5 0xC4 SWAP7 BALANCE CREATE PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"367:9385:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8432:487;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9213:109;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2110:500:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3583:1987:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;2064:101:0;;;:::i;:::-;;5965:522:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8083:119;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7912:115;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2907:261:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8269:157:13;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1721:383:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8972:179:13;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;875:249;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1490:1281;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9382:120;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9598:151;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2616:285:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8432:487:13;8507:20;8539:33;8575:21;:31;8597:8;8575:31;;;;;;;;;;;8539:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8616:14;8633:12;:19;8616:36;;8662:27;8710:6;8692:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8662:55;;8741:9;8736:145;8760:6;8756:1;:10;8736:145;;;8796:12;8809:1;8796:15;;;;;;;;:::i;:::-;;;;;;;;8784:6;8791:1;8784:9;;;;;;;;:::i;:::-;;;;;;;:27;;;;8853:3;;;;;;;8736:145;;;;8906:6;8899:13;;;;;8432:487;;;:::o;9213:109::-;9269:7;9295:20;;;;;;;;;;;9288:27;;9213:109;:::o;2110:500:14:-;1334:13:0;:11;:13::i;:::-;2227:14:14::1;2244:12;:19;2227:36;;2278:6;2273:331;2294:6;2290:1;:10;2273:331;;;2318:21;:31;2340:8;2318:31;;;;;;;;;;;2355:12;2368:1;2355:15;;;;;;;;:::i;:::-;;;;;;;;2318:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2437:97;;;;;;;;2479:12;2492:1;2479:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2437:97;;;;2511:8;2437:97;;::::0;2385:27:::1;:49;2413:12;2426:1;2413:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2385:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2576:3;;;;;;;2273:331;;;;2216:394;2110:500:::0;;:::o;3583:1987:13:-;3811:7;3820;1181:20;;;;;;;;;;;1167:34;;:10;:34;;;1164:62;;1210:16;;;;;;;;;;;;;;1164:62;3899:5:::1;:15;3905:8;3899:15;;;;;;;;;;;:27;;;;;;;;;;;;3896:55;;;3935:16;;;;;;;;;;;;;;3896:55;3999:13;4015:5;:15;4021:8;4015:15;;;;;;;;;;;:21;;;;;;;;;;;;3999:37;;4145:14;4115:5;:15;4121:8;4115:15;;;;;;;;;;;:26;;;:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4243:1;4213:5;:15;4219:8;4213:15;;;;;;;;;;;:26;;;;;;;;;;;;:31;;::::0;4210:149:::1;;4344:4;4314:5;:15;4320:8;4314:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;4210:149;4460:21;4487:40;4502:8;4512:14;4487;:40::i;:::-;4458:69;;4537:12;4552:5;:15;4558:8;4552:15;;;;;;;;;;;:25;;;4537:40;;4598:1;4591:4;:8;4587:101;;;4650:27;4668:8;4650:17;:27::i;:::-;4587:101;4737:5;4730:22;;;4753:12;;;;;;;;;;;4767:10;:22;;;4730:60;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4853:5;4846:22;;;4869:18;4889:10;:34;;;4846:78;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4971:14;4988:11;;:18;;4971:35;;5084:24;5141:6;5111:10;:27;;;:36;;;;:::i;:::-;5084:63;;5161:9;5157:267;5180:6;5176:1;:10;5157:267;;;5211:5;5204:22;;;5227:11;;5239:1;5227:14;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;5243:16;5204:56;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5337:16;5321:11;;5333:1;5321:14;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;5305:49;;;;;;;;;;;;5396:3;;;;;;;5157:267;;;;5494:18;5461:68;;5484:8;5461:68;5469:13;5514:14;5461:68;;;;;;;:::i;:::-;;;;;;;;5547:8;5557:5;5539:24;;;;;;;;;3583:1987:::0;;;;;;;;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;5965:522:13:-;6034:4;1181:20;;;;;;;;;;;1167:34;;:10;:34;;;1164:62;;1210:16;;;;;;;;;;;;;;1164:62;6116:5:::1;:15;6122:8;6116:15;;;;;;;;;;;:27;;;;;;;;;;;;6115:28;6107:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;6232:4;6202:5;:15;6208:8;6202:15;;;;;;;;;;;:27;;;:34;;;;;;;;;;;;;;;;;;6275:1;6246:5;:15;6252:8;6246:15;;;;;;;;;;;:26;;;:30;;;;;;;;;;;;;;;;;;6324:5;:15;6330:8;6324:15;;;;;;;;;;;:21;;;;;;;;;;;;6317:38;;;6356:5;:15;6362:8;6356:15;;;;;;;;;;;:29;;;;;;;;;;;;6387:5;:15;6393:8;6387:15;;;;;;;;;;;:22;;;6317:93;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6450:8;6441:18;;;;;;;;;;6476:4;6469:11;;5965:522:::0;;;:::o;8083:119::-;8147:4;8170:17;:25;8188:6;8170:25;;;;;;;;;;;;;;;;;;;;;;;;;8163:32;;8083:119;;;:::o;7912:115::-;7974:12;;:::i;:::-;8005:5;:15;8011:8;8005:15;;;;;;;;;;;7998:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7912:115;;;:::o;2907:261:14:-;1334:13:0;:11;:13::i;:::-;3019:1:14::1;3002:19;;:5;:19;;::::0;2998:50:::1;;3030:18;;;;;;;;;;;;;;2998:50;3062:13;:4;:13:::0;3058:39:::1;;3092:5;3077:12;;:20;;;;;;;;;;;;;;;;;;3058:39;3111:20;:4;:20:::0;3107:54:::1;;3156:5;3133:20;;:28;;;;;;;;;;;;;;;;;;3107:54;2907:261:::0;;:::o;8269:157:13:-;8343:24;;:::i;:::-;8386:27;:33;8414:4;8386:33;;;;;;;;;;;8379:40;;;;;;;;;;;;;;;;;;;;;;;;;;;8269:157;;;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1721:383:14:-;1334:13:0;:11;:13::i;:::-;1841:1:14::1;1824:19;;:5;:19;;::::0;1820:50:::1;;1852:18;;;;;;;;;;;;;;1820:50;1884:15;:4;:15:::0;1880:54:::1;;1928:6;1901:17;:24;1919:5;1901:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1880:54;1948:19;:4;:19:::0;1944:99:::1;;1993:6;1969:14;:21;1984:5;1969:21;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;1944:99;;;2038:4;2021:22;;;;;;;;;;;:::i;:::-;;;;;;;;1944:99;2058:39;2077:4;2083:5;2090:6;2058:39;;;;;;;;:::i;:::-;;;;;;;;1721:383:::0;;;:::o;8972:179:13:-;9028:7;9046;9064;9095:18;;;;;;;;;;;9115:19;;;;;;;;;;;9136:7;;9088:56;;;;;;8972:179;;;:::o;875:249::-;3279:19:1;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;972:4:13::1;945:17;:24;963:5;945:24;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;999:7;989;:17;;;;1038:4;1017:18;;:25;;;;;;;;;;;;;;;;;;1080:3;1058:19;;:25;;;;;;;;;;;;;;;;;;1101:16;:14;:16::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;875:249:13;:::o;1490:1281::-;1778:15;1841:80;1850:6;1858:7;1867:14;1883:19;1904:16;1841:8;:80::i;:::-;1986:6;1979:27;;;2007:10;2027:4;2034:7;1979:63;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2108:6;:18;2115:10;2108:18;;;;;;;;;;;;;;;;:21;;;;;;;;;:::i;:::-;;;;;;2225:10;2237:6;:18;2244:10;2237:18;;;;;;;;;;;;;;;;2214:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2204:53;;;;;;2194:63;;2314:334;;;;;;;;2342:10;2314:334;;;;;;2373:6;2314:334;;;;;;2413:19;2314:334;;;;;;2457:10;2314:334;;;;2487:5;2314:334;;;;;;2519:5;2314:334;;;;;;2553:14;2314:334;;;;;;2600:7;;2314:334;;;;;;2630:7;2314:334;;;2297:5;:14;2303:7;2297:14;;;;;;;;;;;:351;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2718:7;2709;2701:6;2693:71;;;2727:5;2734:16;2752:11;;2693:71;;;;;;;;;:::i;:::-;;;;;;;;1490:1281;;;;;;;;;;;:::o;9382:120::-;9450:4;9473:14;:22;9488:6;9473:22;;;;;;;;;;;;;;;;;;;;;;;;;9466:29;;9382:120;;;:::o;9598:151::-;1334:13:0;:11;:13::i;:::-;9705:6:13::1;9698:23;;;9722:10;9734:7;9698:44;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9598:151:::0;;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;2616:285:14:-;1334:13:0;:11;:13::i;:::-;2753:19:14::1;2732:18;;:40;;;;;;;;;;;;;;;;;;2804:20;2782:19;;:42;;;;;;;;;;;;;;;;;;2839:55;2852:19;2873:20;2839:55;;;;;;;:::i;:::-;;;;;;;;2616:285:::0;;:::o;1599:130:0:-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;6493:1172:13:-;6579:21;;:::i;:::-;6673:14;6690:5;:15;6696:8;6690:15;;;;;;;;;;;:22;;;6673:39;;6778:5;:15;6784:8;6778:15;;;;;;;;;;;:25;;;6769:6;:34;;;;:::i;:::-;6760:43;;6947:7;;6929:14;6920:23;;:6;:23;;;;:::i;:::-;6919:35;;;;:::i;:::-;6882:10;:34;;:72;;;;;7107:7;;7085:18;;;;;;;;;;;7048:55;;:10;:34;;;:55;;;;:::i;:::-;7047:67;;;;:::i;:::-;7022:10;:22;;:92;;;;;7287:10;:22;;;7250:10;:34;;;:59;;;;:::i;:::-;7212:10;:34;;:98;;;;;7462:7;;7439:19;;;;;;;;;;;7414:44;;:10;:22;;;:44;;;;:::i;:::-;7413:56;;;;:::i;:::-;7383:10;:27;;:86;;;;;7630:10;:27;;;7604:10;:22;;;:54;;;;:::i;:::-;7579:10;:22;;:79;;;;;6603:1062;6493:1172;;;;:::o;5576:343::-;5640:17;5660:5;:15;5666:8;5660:15;;;;;;;;;;;:34;;;;;;;;;;;;5640:54;;5704:12;5719:5;:15;5725:8;5719:15;;;;;;;;;;;:25;;;5704:40;;5792:5;:15;5798:8;5792:15;;;;;;;;;;;:21;;;;;;;;;;;;5785:38;;;5824:9;5835:4;5785:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5907:4;5896:9;5878:34;;;;;;;;;;;;5630:289;;5576:343;:::o;2666:187:0:-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;1423:320:6:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1003:95:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;2777:559:13:-;2988:17;:25;3006:6;2988:25;;;;;;;;;;;;;;;;;;;;;;;;;2980:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;3063:1;3053:7;:11;3045:36;;;;;;;;;;;;:::i;:::-;;;;;;;;;3125:1;3099:28;;:14;:28;;;3091:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3197:1;3166:33;;:19;:33;;;3158:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;3300:1;3292:10;;3238:27;:45;3266:16;3238:45;;;;;;;;;;;:50;;;:64;3230:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;2777:559;;;;;:::o;850:96:7:-;903:7;929:10;922:17;;850:96;:::o;1104:111:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:17:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:143::-;1121:6;1155:5;1149:12;1139:22;;1025:143;;;:::o;1174:213::-;1302:11;1336:6;1331:3;1324:19;1376:4;1371:3;1367:14;1352:29;;1174:213;;;;:::o;1393:161::-;1489:4;1512:3;1504:11;;1542:4;1537:3;1533:14;1525:22;;1393:161;;;:::o;1560:108::-;1637:24;1655:5;1637:24;:::i;:::-;1632:3;1625:37;1560:108;;:::o;1768:505::-;1913:4;1908:3;1904:14;2000:4;1993:5;1989:16;1983:23;2019:63;2076:4;2071:3;2067:14;2053:12;2019:63;:::i;:::-;1928:164;2174:4;2167:5;2163:16;2157:23;2193:63;2250:4;2245:3;2241:14;2227:12;2193:63;:::i;:::-;2102:164;1882:391;1768:505;;:::o;2279:295::-;2406:10;2427:104;2527:3;2519:6;2427:104;:::i;:::-;2563:4;2558:3;2554:14;2540:28;;2279:295;;;;:::o;2580:142::-;2679:4;2711;2706:3;2702:14;2694:22;;2580:142;;;:::o;2826:964::-;3003:3;3032:83;3109:5;3032:83;:::i;:::-;3131:115;3239:6;3234:3;3131:115;:::i;:::-;3124:122;;3270:85;3349:5;3270:85;:::i;:::-;3378:7;3409:1;3394:371;3419:6;3416:1;3413:13;3394:371;;;3495:6;3489:13;3522:121;3639:3;3624:13;3522:121;:::i;:::-;3515:128;;3666:89;3748:6;3666:89;:::i;:::-;3656:99;;3454:311;3441:1;3438;3434:9;3429:14;;3394:371;;;3398:14;3781:3;3774:10;;3008:782;;;2826:964;;;;:::o;3796:489::-;3997:4;4035:2;4024:9;4020:18;4012:26;;4084:9;4078:4;4074:20;4070:1;4059:9;4055:17;4048:47;4112:166;4273:4;4264:6;4112:166;:::i;:::-;4104:174;;3796:489;;;;:::o;4291:126::-;4328:7;4368:42;4361:5;4357:54;4346:65;;4291:126;;;:::o;4423:96::-;4460:7;4489:24;4507:5;4489:24;:::i;:::-;4478:35;;4423:96;;;:::o;4525:118::-;4612:24;4630:5;4612:24;:::i;:::-;4607:3;4600:37;4525:118;;:::o;4649:222::-;4742:4;4780:2;4769:9;4765:18;4757:26;;4793:71;4861:1;4850:9;4846:17;4837:6;4793:71;:::i;:::-;4649:222;;;;:::o;4877:117::-;4986:1;4983;4976:12;5000:102;5041:6;5092:2;5088:7;5083:2;5076:5;5072:14;5068:28;5058:38;;5000:102;;;:::o;5108:180::-;5156:77;5153:1;5146:88;5253:4;5250:1;5243:15;5277:4;5274:1;5267:15;5294:281;5377:27;5399:4;5377:27;:::i;:::-;5369:6;5365:40;5507:6;5495:10;5492:22;5471:18;5459:10;5456:34;5453:62;5450:88;;;5518:18;;:::i;:::-;5450:88;5558:10;5554:2;5547:22;5337:238;5294:281;;:::o;5581:129::-;5615:6;5642:20;;:::i;:::-;5632:30;;5671:33;5699:4;5691:6;5671:33;:::i;:::-;5581:129;;;:::o;5716:340::-;5822:4;5912:18;5904:6;5901:30;5898:56;;;5934:18;;:::i;:::-;5898:56;5984:4;5976:6;5972:17;5964:25;;6044:4;6038;6034:15;6026:23;;5716:340;;;:::o;6062:117::-;6171:1;6168;6161:12;6185:117;6294:1;6291;6284:12;6480:578;6558:5;6602:4;6590:9;6585:3;6581:19;6577:30;6574:117;;;6610:79;;:::i;:::-;6574:117;6709:21;6725:4;6709:21;:::i;:::-;6700:30;;6789:1;6829:49;6874:3;6865:6;6854:9;6850:22;6829:49;:::i;:::-;6822:4;6815:5;6811:16;6804:75;6740:150;6949:2;6990:49;7035:3;7026:6;7015:9;7011:22;6990:49;:::i;:::-;6983:4;6976:5;6972:16;6965:75;6900:151;6480:578;;;;:::o;7115:797::-;7240:5;7265:110;7281:93;7367:6;7281:93;:::i;:::-;7265:110;:::i;:::-;7256:119;;7395:5;7424:6;7417:5;7410:21;7458:4;7451:5;7447:16;7440:23;;7511:4;7503:6;7499:17;7491:6;7487:30;7540:3;7532:6;7529:15;7526:122;;;7559:79;;:::i;:::-;7526:122;7674:6;7657:249;7691:6;7686:3;7683:15;7657:249;;;7766:3;7795:66;7857:3;7845:10;7795:66;:::i;:::-;7790:3;7783:79;7891:4;7886:3;7882:14;7875:21;;7733:173;7717:4;7712:3;7708:14;7701:21;;7657:249;;;7661:21;7246:666;;7115:797;;;;;:::o;7969:428::-;8069:5;8118:3;8111:4;8103:6;8099:17;8095:27;8085:122;;8126:79;;:::i;:::-;8085:122;8243:6;8230:20;8268:123;8387:3;8379:6;8372:4;8364:6;8360:17;8268:123;:::i;:::-;8259:132;;8075:322;7969:428;;;;:::o;8403:742::-;8525:6;8533;8582:2;8570:9;8561:7;8557:23;8553:32;8550:119;;;8588:79;;:::i;:::-;8550:119;8708:1;8733:53;8778:7;8769:6;8758:9;8754:22;8733:53;:::i;:::-;8723:63;;8679:117;8863:2;8852:9;8848:18;8835:32;8894:18;8886:6;8883:30;8880:117;;;8916:79;;:::i;:::-;8880:117;9021:107;9120:7;9111:6;9100:9;9096:22;9021:107;:::i;:::-;9011:117;;8806:332;8403:742;;;;;:::o;9151:117::-;9260:1;9257;9250:12;9291:568;9364:8;9374:6;9424:3;9417:4;9409:6;9405:17;9401:27;9391:122;;9432:79;;:::i;:::-;9391:122;9545:6;9532:20;9522:30;;9575:18;9567:6;9564:30;9561:117;;;9597:79;;:::i;:::-;9561:117;9711:4;9703:6;9699:17;9687:29;;9765:3;9757:4;9749:6;9745:17;9735:8;9731:32;9728:41;9725:128;;;9772:79;;:::i;:::-;9725:128;9291:568;;;;;:::o;9865:122::-;9938:24;9956:5;9938:24;:::i;:::-;9931:5;9928:35;9918:63;;9977:1;9974;9967:12;9918:63;9865:122;:::o;9993:139::-;10039:5;10077:6;10064:20;10055:29;;10093:33;10120:5;10093:33;:::i;:::-;9993:139;;;;:::o;10138:109::-;10174:7;10214:26;10207:5;10203:38;10192:49;;10138:109;;;:::o;10253:120::-;10325:23;10342:5;10325:23;:::i;:::-;10318:5;10315:34;10305:62;;10363:1;10360;10353:12;10305:62;10253:120;:::o;10379:137::-;10424:5;10462:6;10449:20;10440:29;;10478:32;10504:5;10478:32;:::i;:::-;10379:137;;;;:::o;10522:1139::-;10643:6;10651;10659;10667;10675;10683;10732:3;10720:9;10711:7;10707:23;10703:33;10700:120;;;10739:79;;:::i;:::-;10700:120;10859:1;10884:53;10929:7;10920:6;10909:9;10905:22;10884:53;:::i;:::-;10874:63;;10830:117;10986:2;11012:53;11057:7;11048:6;11037:9;11033:22;11012:53;:::i;:::-;11002:63;;10957:118;11142:2;11131:9;11127:18;11114:32;11173:18;11165:6;11162:30;11159:117;;;11195:79;;:::i;:::-;11159:117;11308:80;11380:7;11371:6;11360:9;11356:22;11308:80;:::i;:::-;11290:98;;;;11085:313;11437:2;11463:53;11508:7;11499:6;11488:9;11484:22;11463:53;:::i;:::-;11453:63;;11408:118;11565:3;11592:52;11636:7;11627:6;11616:9;11612:22;11592:52;:::i;:::-;11582:62;;11536:118;10522:1139;;;;;;;;:::o;11667:118::-;11754:24;11772:5;11754:24;:::i;:::-;11749:3;11742:37;11667:118;;:::o;11791:332::-;11912:4;11950:2;11939:9;11935:18;11927:26;;11963:71;12031:1;12020:9;12016:17;12007:6;11963:71;:::i;:::-;12044:72;12112:2;12101:9;12097:18;12088:6;12044:72;:::i;:::-;11791:332;;;;;:::o;12129:90::-;12163:7;12206:5;12199:13;12192:21;12181:32;;12129:90;;;:::o;12225:109::-;12306:21;12321:5;12306:21;:::i;:::-;12301:3;12294:34;12225:109;;:::o;12340:210::-;12427:4;12465:2;12454:9;12450:18;12442:26;;12478:65;12540:1;12529:9;12525:17;12516:6;12478:65;:::i;:::-;12340:210;;;;:::o;12556:329::-;12615:6;12664:2;12652:9;12643:7;12639:23;12635:32;12632:119;;;12670:79;;:::i;:::-;12632:119;12790:1;12815:53;12860:7;12851:6;12840:9;12836:22;12815:53;:::i;:::-;12805:63;;12761:117;12556:329;;;;:::o;12891:108::-;12968:24;12986:5;12968:24;:::i;:::-;12963:3;12956:37;12891:108;;:::o;13005:77::-;13042:7;13071:5;13060:16;;13005:77;;;:::o;13088:108::-;13165:24;13183:5;13165:24;:::i;:::-;13160:3;13153:37;13088:108;;:::o;13202:105::-;13277:23;13294:5;13277:23;:::i;:::-;13272:3;13265:36;13202:105;;:::o;13313:99::-;13384:21;13399:5;13384:21;:::i;:::-;13379:3;13372:34;13313:99;;:::o;13474:1763::-;13617:6;13612:3;13608:16;13708:4;13701:5;13697:16;13691:23;13727:63;13784:4;13779:3;13775:14;13761:12;13727:63;:::i;:::-;13634:166;13883:4;13876:5;13872:16;13866:23;13902:63;13959:4;13954:3;13950:14;13936:12;13902:63;:::i;:::-;13810:165;14071:4;14064:5;14060:16;14054:23;14090:63;14147:4;14142:3;14138:14;14124:12;14090:63;:::i;:::-;13985:178;14250:4;14243:5;14239:16;14233:23;14269:63;14326:4;14321:3;14317:14;14303:12;14269:63;:::i;:::-;14173:169;14424:4;14417:5;14413:16;14407:23;14443:61;14498:4;14493:3;14489:14;14475:12;14443:61;:::i;:::-;14352:162;14603:4;14596:5;14592:16;14586:23;14622:57;14673:4;14668:3;14664:14;14650:12;14622:57;:::i;:::-;14524:165;14780:4;14773:5;14769:16;14763:23;14799:63;14856:4;14851:3;14847:14;14833:12;14799:63;:::i;:::-;14699:173;14960:4;14953:5;14949:16;14943:23;14979:61;15034:4;15029:3;15025:14;15011:12;14979:61;:::i;:::-;14882:168;15134:6;15127:5;15123:18;15117:25;15155:65;15212:6;15207:3;15203:16;15189:12;15155:65;:::i;:::-;15060:170;13586:1651;13474:1763;;:::o;15243:315::-;15382:4;15420:3;15409:9;15405:19;15397:27;;15434:117;15548:1;15537:9;15533:17;15524:6;15434:117;:::i;:::-;15243:315;;;;:::o;15564:474::-;15632:6;15640;15689:2;15677:9;15668:7;15664:23;15660:32;15657:119;;;15695:79;;:::i;:::-;15657:119;15815:1;15840:53;15885:7;15876:6;15865:9;15861:22;15840:53;:::i;:::-;15830:63;;15786:117;15942:2;15968:53;16013:7;16004:6;15993:9;15989:22;15968:53;:::i;:::-;15958:63;;15913:118;15564:474;;;;;:::o;16150:531::-;16317:4;16312:3;16308:14;16404:4;16397:5;16393:16;16387:23;16423:63;16480:4;16475:3;16471:14;16457:12;16423:63;:::i;:::-;16332:164;16582:4;16575:5;16571:16;16565:23;16601:63;16658:4;16653:3;16649:14;16635:12;16601:63;:::i;:::-;16506:168;16286:395;16150:531;;:::o;16687:362::-;16850:4;16888:2;16877:9;16873:18;16865:26;;16901:141;17039:1;17028:9;17024:17;17015:6;16901:141;:::i;:::-;16687:362;;;;:::o;17055:116::-;17125:21;17140:5;17125:21;:::i;:::-;17118:5;17115:32;17105:60;;17161:1;17158;17151:12;17105:60;17055:116;:::o;17177:133::-;17220:5;17258:6;17245:20;17236:29;;17274:30;17298:5;17274:30;:::i;:::-;17177:133;;;;:::o;17316:613::-;17390:6;17398;17406;17455:2;17443:9;17434:7;17430:23;17426:32;17423:119;;;17461:79;;:::i;:::-;17423:119;17581:1;17606:53;17651:7;17642:6;17631:9;17627:22;17606:53;:::i;:::-;17596:63;;17552:117;17708:2;17734:53;17779:7;17770:6;17759:9;17755:22;17734:53;:::i;:::-;17724:63;;17679:118;17836:2;17862:50;17904:7;17895:6;17884:9;17880:22;17862:50;:::i;:::-;17852:60;;17807:115;17316:613;;;;;:::o;17935:118::-;17972:7;18012:34;18005:5;18001:46;17990:57;;17935:118;;;:::o;18059:::-;18146:24;18164:5;18146:24;:::i;:::-;18141:3;18134:37;18059:118;;:::o;18183:::-;18270:24;18288:5;18270:24;:::i;:::-;18265:3;18258:37;18183:118;;:::o;18307:442::-;18456:4;18494:2;18483:9;18479:18;18471:26;;18507:71;18575:1;18564:9;18560:17;18551:6;18507:71;:::i;:::-;18588:72;18656:2;18645:9;18641:18;18632:6;18588:72;:::i;:::-;18670;18738:2;18727:9;18723:18;18714:6;18670:72;:::i;:::-;18307:442;;;;;;:::o;18755:122::-;18828:24;18846:5;18828:24;:::i;:::-;18821:5;18818:35;18808:63;;18867:1;18864;18857:12;18808:63;18755:122;:::o;18883:139::-;18929:5;18967:6;18954:20;18945:29;;18983:33;19010:5;18983:33;:::i;:::-;18883:139;;;;:::o;19042:553::-;19100:8;19110:6;19160:3;19153:4;19145:6;19141:17;19137:27;19127:122;;19168:79;;:::i;:::-;19127:122;19281:6;19268:20;19258:30;;19311:18;19303:6;19300:30;19297:117;;;19333:79;;:::i;:::-;19297:117;19447:4;19439:6;19435:17;19423:29;;19501:3;19493:4;19485:6;19481:17;19471:8;19467:32;19464:41;19461:128;;;19508:79;;:::i;:::-;19461:128;19042:553;;;;;:::o;19601:1547::-;19734:6;19742;19750;19758;19766;19774;19782;19790;19798;19847:3;19835:9;19826:7;19822:23;19818:33;19815:120;;;19854:79;;:::i;:::-;19815:120;19974:1;19999:53;20044:7;20035:6;20024:9;20020:22;19999:53;:::i;:::-;19989:63;;19945:117;20101:2;20127:53;20172:7;20163:6;20152:9;20148:22;20127:53;:::i;:::-;20117:63;;20072:118;20229:2;20255:53;20300:7;20291:6;20280:9;20276:22;20255:53;:::i;:::-;20245:63;;20200:118;20357:2;20383:52;20427:7;20418:6;20407:9;20403:22;20383:52;:::i;:::-;20373:62;;20328:117;20484:3;20511:53;20556:7;20547:6;20536:9;20532:22;20511:53;:::i;:::-;20501:63;;20455:119;20613:3;20640:53;20685:7;20676:6;20665:9;20661:22;20640:53;:::i;:::-;20630:63;;20584:119;20742:3;20769:53;20814:7;20805:6;20794:9;20790:22;20769:53;:::i;:::-;20759:63;;20713:119;20899:3;20888:9;20884:19;20871:33;20931:18;20923:6;20920:30;20917:117;;;20953:79;;:::i;:::-;20917:117;21066:65;21123:7;21114:6;21103:9;21099:22;21066:65;:::i;:::-;21048:83;;;;20842:299;19601:1547;;;;;;;;;;;:::o;21154:222::-;21247:4;21285:2;21274:9;21270:18;21262:26;;21298:71;21366:1;21355:9;21351:17;21342:6;21298:71;:::i;:::-;21154:222;;;;:::o;21382:619::-;21459:6;21467;21475;21524:2;21512:9;21503:7;21499:23;21495:32;21492:119;;;21530:79;;:::i;:::-;21492:119;21650:1;21675:53;21720:7;21711:6;21700:9;21696:22;21675:53;:::i;:::-;21665:63;;21621:117;21777:2;21803:53;21848:7;21839:6;21828:9;21824:22;21803:53;:::i;:::-;21793:63;;21748:118;21905:2;21931:53;21976:7;21967:6;21956:9;21952:22;21931:53;:::i;:::-;21921:63;;21876:118;21382:619;;;;;:::o;22007:122::-;22080:24;22098:5;22080:24;:::i;:::-;22073:5;22070:35;22060:63;;22119:1;22116;22109:12;22060:63;22007:122;:::o;22135:139::-;22181:5;22219:6;22206:20;22197:29;;22235:33;22262:5;22235:33;:::i;:::-;22135:139;;;;:::o;22280:474::-;22348:6;22356;22405:2;22393:9;22384:7;22380:23;22376:32;22373:119;;;22411:79;;:::i;:::-;22373:119;22531:1;22556:53;22601:7;22592:6;22581:9;22577:22;22556:53;:::i;:::-;22546:63;;22502:117;22658:2;22684:53;22729:7;22720:6;22709:9;22705:22;22684:53;:::i;:::-;22674:63;;22629:118;22280:474;;;;;:::o;22760:180::-;22808:77;22805:1;22798:88;22905:4;22902:1;22895:15;22929:4;22926:1;22919:15;22946:180;22994:77;22991:1;22984:88;23091:4;23088:1;23081:15;23115:4;23112:1;23105:15;23132:216;23171:4;23191:19;23208:1;23191:19;:::i;:::-;23186:24;;23224:19;23241:1;23224:19;:::i;:::-;23219:24;;23267:1;23264;23260:9;23252:17;;23291:26;23285:4;23282:36;23279:62;;;23321:18;;:::i;:::-;23279:62;23132:216;;;;:::o;23354:332::-;23475:4;23513:2;23502:9;23498:18;23490:26;;23526:71;23594:1;23583:9;23579:17;23570:6;23526:71;:::i;:::-;23607:72;23675:2;23664:9;23660:18;23651:6;23607:72;:::i;:::-;23354:332;;;;;:::o;23692:137::-;23746:5;23777:6;23771:13;23762:22;;23793:30;23817:5;23793:30;:::i;:::-;23692:137;;;;:::o;23835:345::-;23902:6;23951:2;23939:9;23930:7;23926:23;23922:32;23919:119;;;23957:79;;:::i;:::-;23919:119;24077:1;24102:61;24155:7;24146:6;24135:9;24131:22;24102:61;:::i;:::-;24092:71;;24048:125;23835:345;;;;:::o;24186:180::-;24234:77;24231:1;24224:88;24331:4;24328:1;24321:15;24355:4;24352:1;24345:15;24372:185;24412:1;24429:20;24447:1;24429:20;:::i;:::-;24424:25;;24463:20;24481:1;24463:20;:::i;:::-;24458:25;;24502:1;24492:35;;24507:18;;:::i;:::-;24492:35;24549:1;24546;24542:9;24537:14;;24372:185;;;;:::o;24563:115::-;24648:23;24665:5;24648:23;:::i;:::-;24643:3;24636:36;24563:115;;:::o;24684:328::-;24803:4;24841:2;24830:9;24826:18;24818:26;;24854:71;24922:1;24911:9;24907:17;24898:6;24854:71;:::i;:::-;24935:70;25001:2;24990:9;24986:18;24977:6;24935:70;:::i;:::-;24684:328;;;;;:::o;25018:169::-;25102:11;25136:6;25131:3;25124:19;25176:4;25171:3;25167:14;25152:29;;25018:169;;;;:::o;25193:164::-;25333:16;25329:1;25321:6;25317:14;25310:40;25193:164;:::o;25363:366::-;25505:3;25526:67;25590:2;25585:3;25526:67;:::i;:::-;25519:74;;25602:93;25691:3;25602:93;:::i;:::-;25720:2;25715:3;25711:12;25704:19;;25363:366;;;:::o;25735:419::-;25901:4;25939:2;25928:9;25924:18;25916:26;;25988:9;25982:4;25978:20;25974:1;25963:9;25959:17;25952:47;26016:131;26142:4;26016:131;:::i;:::-;26008:139;;25735:419;;;:::o;26160:430::-;26303:4;26341:2;26330:9;26326:18;26318:26;;26354:71;26422:1;26411:9;26407:17;26398:6;26354:71;:::i;:::-;26435:72;26503:2;26492:9;26488:18;26479:6;26435:72;:::i;:::-;26517:66;26579:2;26568:9;26564:18;26555:6;26517:66;:::i;:::-;26160:430;;;;;;:::o;26596:233::-;26736:34;26732:1;26724:6;26720:14;26713:58;26805:16;26800:2;26792:6;26788:15;26781:41;26596:233;:::o;26835:366::-;26977:3;26998:67;27062:2;27057:3;26998:67;:::i;:::-;26991:74;;27074:93;27163:3;27074:93;:::i;:::-;27192:2;27187:3;27183:12;27176:19;;26835:366;;;:::o;27207:419::-;27373:4;27411:2;27400:9;27396:18;27388:26;;27460:9;27454:4;27450:20;27446:1;27435:9;27431:17;27424:47;27488:131;27614:4;27488:131;:::i;:::-;27480:139;;27207:419;;;:::o;27632:85::-;27677:7;27706:5;27695:16;;27632:85;;;:::o;27723:86::-;27758:7;27798:4;27791:5;27787:16;27776:27;;27723:86;;;:::o;27815:60::-;27843:3;27864:5;27857:12;;27815:60;;;:::o;27881:154::-;27937:9;27970:59;27986:42;27995:32;28021:5;27995:32;:::i;:::-;27986:42;:::i;:::-;27970:59;:::i;:::-;27957:72;;27881:154;;;:::o;28041:143::-;28134:43;28171:5;28134:43;:::i;:::-;28129:3;28122:56;28041:143;;:::o;28190:234::-;28289:4;28327:2;28316:9;28312:18;28304:26;;28340:77;28414:1;28403:9;28399:17;28390:6;28340:77;:::i;:::-;28190:234;;;;:::o;28430:442::-;28579:4;28617:2;28606:9;28602:18;28594:26;;28630:71;28698:1;28687:9;28683:17;28674:6;28630:71;:::i;:::-;28711:72;28779:2;28768:9;28764:18;28755:6;28711:72;:::i;:::-;28793;28861:2;28850:9;28846:18;28837:6;28793:72;:::i;:::-;28430:442;;;;;;:::o;28878:233::-;28917:3;28940:24;28958:5;28940:24;:::i;:::-;28931:33;;28986:66;28979:5;28976:77;28973:103;;29056:18;;:::i;:::-;28973:103;29103:1;29096:5;29092:13;29085:20;;28878:233;;;:::o;29117:140::-;29166:9;29199:52;29217:33;29226:23;29243:5;29226:23;:::i;:::-;29217:33;:::i;:::-;29199:52;:::i;:::-;29186:65;;29117:140;;;:::o;29263:129::-;29349:36;29379:5;29349:36;:::i;:::-;29344:3;29337:49;29263:129;;:::o;29398:146::-;29495:6;29490:3;29485;29472:30;29536:1;29527:6;29522:3;29518:16;29511:27;29398:146;;;:::o;29574:317::-;29672:3;29693:71;29757:6;29752:3;29693:71;:::i;:::-;29686:78;;29774:56;29823:6;29818:3;29811:5;29774:56;:::i;:::-;29855:29;29877:6;29855:29;:::i;:::-;29850:3;29846:39;29839:46;;29574:317;;;;;:::o;29897:551::-;30075:4;30113:2;30102:9;30098:18;30090:26;;30126:70;30193:1;30182:9;30178:17;30169:6;30126:70;:::i;:::-;30206:72;30274:2;30263:9;30259:18;30250:6;30206:72;:::i;:::-;30325:9;30319:4;30315:20;30310:2;30299:9;30295:18;30288:48;30353:88;30436:4;30427:6;30419;30353:88;:::i;:::-;30345:96;;29897:551;;;;;;;:::o;30454:225::-;30594:34;30590:1;30582:6;30578:14;30571:58;30663:8;30658:2;30650:6;30646:15;30639:33;30454:225;:::o;30685:366::-;30827:3;30848:67;30912:2;30907:3;30848:67;:::i;:::-;30841:74;;30924:93;31013:3;30924:93;:::i;:::-;31042:2;31037:3;31033:12;31026:19;;30685:366;;;:::o;31057:419::-;31223:4;31261:2;31250:9;31246:18;31238:26;;31310:9;31304:4;31300:20;31296:1;31285:9;31281:17;31274:47;31338:131;31464:4;31338:131;:::i;:::-;31330:139;;31057:419;;;:::o;31482:332::-;31603:4;31641:2;31630:9;31626:18;31618:26;;31654:71;31722:1;31711:9;31707:17;31698:6;31654:71;:::i;:::-;31735:72;31803:2;31792:9;31788:18;31779:6;31735:72;:::i;:::-;31482:332;;;;;:::o;31820:182::-;31960:34;31956:1;31948:6;31944:14;31937:58;31820:182;:::o;32008:366::-;32150:3;32171:67;32235:2;32230:3;32171:67;:::i;:::-;32164:74;;32247:93;32336:3;32247:93;:::i;:::-;32365:2;32360:3;32356:12;32349:19;;32008:366;;;:::o;32380:419::-;32546:4;32584:2;32573:9;32569:18;32561:26;;32633:9;32627:4;32623:20;32619:1;32608:9;32604:17;32597:47;32661:131;32787:4;32661:131;:::i;:::-;32653:139;;32380:419;;;:::o;32805:194::-;32845:4;32865:20;32883:1;32865:20;:::i;:::-;32860:25;;32899:20;32917:1;32899:20;:::i;:::-;32894:25;;32943:1;32940;32936:9;32928:17;;32967:1;32961:4;32958:11;32955:37;;;32972:18;;:::i;:::-;32955:37;32805:194;;;;:::o;33005:410::-;33045:7;33068:20;33086:1;33068:20;:::i;:::-;33063:25;;33102:20;33120:1;33102:20;:::i;:::-;33097:25;;33157:1;33154;33150:9;33179:30;33197:11;33179:30;:::i;:::-;33168:41;;33358:1;33349:7;33345:15;33342:1;33339:22;33319:1;33312:9;33292:83;33269:139;;33388:18;;:::i;:::-;33269:139;33053:362;33005:410;;;;:::o;33421:230::-;33561:34;33557:1;33549:6;33545:14;33538:58;33630:13;33625:2;33617:6;33613:15;33606:38;33421:230;:::o;33657:366::-;33799:3;33820:67;33884:2;33879:3;33820:67;:::i;:::-;33813:74;;33896:93;33985:3;33896:93;:::i;:::-;34014:2;34009:3;34005:12;33998:19;;33657:366;;;:::o;34029:419::-;34195:4;34233:2;34222:9;34218:18;34210:26;;34282:9;34276:4;34272:20;34268:1;34257:9;34253:17;34246:47;34310:131;34436:4;34310:131;:::i;:::-;34302:139;;34029:419;;;:::o;34454:167::-;34594:19;34590:1;34582:6;34578:14;34571:43;34454:167;:::o;34627:366::-;34769:3;34790:67;34854:2;34849:3;34790:67;:::i;:::-;34783:74;;34866:93;34955:3;34866:93;:::i;:::-;34984:2;34979:3;34975:12;34968:19;;34627:366;;;:::o;34999:419::-;35165:4;35203:2;35192:9;35188:18;35180:26;;35252:9;35246:4;35242:20;35238:1;35227:9;35223:17;35216:47;35280:131;35406:4;35280:131;:::i;:::-;35272:139;;34999:419;;;:::o;35424:162::-;35564:14;35560:1;35552:6;35548:14;35541:38;35424:162;:::o;35592:366::-;35734:3;35755:67;35819:2;35814:3;35755:67;:::i;:::-;35748:74;;35831:93;35920:3;35831:93;:::i;:::-;35949:2;35944:3;35940:12;35933:19;;35592:366;;;:::o;35964:419::-;36130:4;36168:2;36157:9;36153:18;36145:26;;36217:9;36211:4;36207:20;36203:1;36192:9;36188:17;36181:47;36245:131;36371:4;36245:131;:::i;:::-;36237:139;;35964:419;;;:::o;36389:166::-;36529:18;36525:1;36517:6;36513:14;36506:42;36389:166;:::o;36561:366::-;36703:3;36724:67;36788:2;36783:3;36724:67;:::i;:::-;36717:74;;36800:93;36889:3;36800:93;:::i;:::-;36918:2;36913:3;36909:12;36902:19;;36561:366;;;:::o;36933:419::-;37099:4;37137:2;37126:9;37122:18;37114:26;;37186:9;37180:4;37176:20;37172:1;37161:9;37157:17;37150:47;37214:131;37340:4;37214:131;:::i;:::-;37206:139;;36933:419;;;:::o;37358:172::-;37498:24;37494:1;37486:6;37482:14;37475:48;37358:172;:::o;37536:366::-;37678:3;37699:67;37763:2;37758:3;37699:67;:::i;:::-;37692:74;;37775:93;37864:3;37775:93;:::i;:::-;37893:2;37888:3;37884:12;37877:19;;37536:366;;;:::o;37908:419::-;38074:4;38112:2;38101:9;38097:18;38089:26;;38161:9;38155:4;38151:20;38147:1;38136:9;38132:17;38125:47;38189:131;38315:4;38189:131;:::i;:::-;38181:139;;37908:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2882000","executionCost":"infinite","totalCost":"infinite"},"external":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":"infinite","getFeeDetails()":"infinite","getLiquidityAggregator()":"2568","getOrderInfo(bytes32)":"infinite","getSupportedInstitutionName(bytes32)":"infinite","getSupportedInstitutions(bytes32)":"infinite","getWhitelistedStatus(address)":"2927","initialize(address)":"211604","isTokenSupported(address)":"2950","owner()":"2567","refund(bytes32)":"infinite","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","settle(bytes32,bytes32,address[],address,uint96)":"infinite","transferOwnership(address)":"30832","updateProtocolAddresses(bytes32,address)":"51618","updateProtocolFees(uint128,uint128)":"infinite","withdraw(address,address,uint256)":"infinite"},"internal":{"_calculateFees(bytes32,uint96)":"infinite","_handler(address,uint256,address,address,bytes32)":"infinite","transferSenderFee(bytes32)":"infinite"}},"methodIdentifiers":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":"d12ff20a","getFeeDetails()":"b810c636","getLiquidityAggregator()":"2ebc5356","getOrderInfo(bytes32)":"768c6ec0","getSupportedInstitutionName(bytes32)":"87490d86","getSupportedInstitutions(bytes32)":"02621338","getWhitelistedStatus(address)":"d8e8de34","initialize(address)":"c4d66de8","isTokenSupported(address)":"75151b63","owner()":"8da5cb5b","refund(bytes32)":"7249fbb6","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","settle(bytes32,bytes32,address[],address,uint96)":"384efd27","transferOwnership(address)":"f2fde38b","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolFees(uint128,uint128)":"f5326b19","withdraw(address,address,uint256)":"d9caed12"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInstitutionCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAggregator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToProcessRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsuported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"validatorFeePercent\",\"type\":\"uint128\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"status\",\"type\":\"bytes8\"}],\"name\":\"SettingManagerForInstitution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutionName\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.InstitutionByCode\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"}],\"name\":\"getSupportedInstitutions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_settlePercent\",\"type\":\"uint96\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_protocolFeePercent\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_validatorFeePercent\",\"type\":\"uint128\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Deposit(address,uint256,bytes32,uint256,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Refunded(bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"RewardValidator(address,uint256)\":{\"details\":\"Emitted when primary validator get therir rewards.\"},\"Settled(bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {createOrder-IPaycrest}. \"},\"getFeeDetails()\":{\"details\":\"See {getFeeDetails-IPaycrest}. \"},\"getLiquidityAggregator()\":{\"details\":\"See {getLiquidityAggregator-IPaycrest}. \"},\"getOrderInfo(bytes32)\":{\"details\":\"See {getOrderInfo-IPaycrest}. \"},\"getSupportedInstitutionName(bytes32)\":{\"details\":\"See {getSupportedInstitutionName-IPaycrest}. \"},\"getWhitelistedStatus(address)\":{\"details\":\"See {getWhitelistedStatus-IPaycrest}. \"},\"isTokenSupported(address)\":{\"details\":\"See {isTokenSupported-IPaycrest}. \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"refund(bytes32)\":{\"details\":\"See {refund-IPaycrest}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settle(bytes32,bytes32,address[],address,uint96)\":{\"details\":\"See {settle-IPaycrest}. \"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AmountIsZero()\":[{\"notice\":\"Revert when input amount is zero\"}],\"InvalidParameter(bytes32)\":[{\"notice\":\"Revert when zero address is passed in\"}],\"InvalidSigner()\":[{\"notice\":\"Revert with invalid signer\"}],\"OnlyAggregator()\":[{\"notice\":\"Revert when caller is not an aggregator\"}],\"OrderFulfilled()\":[{\"notice\":\"Revert when trx has been fulfilled\"}],\"ThrowZeroAddress()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"ThrowZeroValue()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"TokenNotSupported()\":[{\"notice\":\"Revert when invalid token is provided\"}],\"UnableToProcessRewards()\":[{\"notice\":\"Revert when rewards are not been distributed.\"}],\"Unsuported()\":[{\"notice\":\"Revert when input amount is zero\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paycrest.sol\":\"Paycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Paycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {PaycrestSettingManager} from \\\"./PaycrestSettingManager.sol\\\";\\nimport {IPaycrest, IERC20} from \\\"./interface/IPaycrest.sol\\\";\\ncontract Paycrest is IPaycrest, PaycrestSettingManager { \\n    using SafeERC20Upgradeable for IERC20;\\n    using ECDSAUpgradeable for bytes32;\\n    struct fee {\\n        uint256 protocolFee;\\n        uint256 liquidityProviderAmount;\\n        uint256 validatorsReward;\\n    }\\n    mapping(bytes32 => Order) private order;\\n    mapping(address => uint256) private _nonce;\\n    uint256[50] private __gap;\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _usdc) external initializer {    \\n        _isTokenSupported[_usdc] = true;   \\n        MAX_BPS = 100_000; \\n        protocolFeePercent = 5000; // 5%\\n        validatorFeePercent = 500; // 0.5%\\n        __Ownable_init();\\n    }\\n\\n    modifier onlyAggregator {\\n        if(msg.sender != _liquidityAggregator) revert OnlyAggregator();\\n        _;\\n    }\\n    \\n    /* ##################################################################\\n                                USER CALLS\\n    ################################################################## */\\n    /** @dev See {createOrder-IPaycrest}. */\\n    function createOrder(\\n        address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash\\n    )  external returns(bytes32 orderId) {\\n        // checks that are required\\n        _handler(_token, _amount, _refundAddress, _senderFeeRecipient, _institutionCode);\\n        // first transfer token from msg.sender\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        // increase users nonce to avoid replay attacks\\n        _nonce[msg.sender] ++;\\n        // generate transaction id for the transaction\\n        orderId = keccak256(abi.encode(msg.sender, _nonce[msg.sender]));\\n        // update transaction\\n        order[orderId] = Order({\\n            seller: msg.sender,\\n            token: _token,\\n            senderFeeRecipient: _senderFeeRecipient,\\n            senderFee: _senderFee,\\n            rate: _rate,\\n            isFulfilled: false,\\n            refundAddress: _refundAddress,\\n            currentBPS: uint96(MAX_BPS),\\n            amount: _amount\\n        });\\n        // emit deposit event\\n        emit Deposit(_token, _amount, orderId, _rate, _institutionCode, messageHash);\\n    }\\n\\n    function _handler(address _token, uint256 _amount, address _refundAddress, address _senderFeeRecipient, bytes32 _institutionCode) internal view {\\n        // use require for all the custom errors\\n        require(_isTokenSupported[_token], \\\"TokenNotSupported\\\");\\n        require(_amount > 0, \\\"AmountIsZero\\\");\\n        require(_refundAddress != address(0), \\\"ThrowZeroAddress\\\");\\n        require(_senderFeeRecipient != address(0), \\\"ThrowZeroAddress\\\");\\n        require(supportedInstitutionsByCode[_institutionCode].name != bytes32(0), \\\"InvalidInstitutionCode\\\");\\n    }\\n\\n    /* ##################################################################\\n                                AGGREGATOR FUNCTIONS\\n    ################################################################## */\\n    /** @dev See {settle-IPaycrest}. */\\n    function settle(\\n        bytes32 _splitOrderId,\\n        bytes32 _orderId, \\n        address[] calldata _validators, \\n        address _liquidityProvider, \\n        uint96 _settlePercent\\n        )  external onlyAggregator() returns(bytes32, address) {\\n        // ensure the transaction has not been fulfilled\\n        if(order[_orderId].isFulfilled) revert OrderFulfilled();\\n        // load the token into memory\\n        address token = order[_orderId].token;\\n        // substract sum of amount based on the input _settlePercent\\n        order[_orderId].currentBPS -= _settlePercent;\\n        // if transaction amount is zero\\n        if(order[_orderId].currentBPS == 0) {\\n            // update the transaction to be fulfilled\\n            order[_orderId].isFulfilled = true;\\n        }\\n\\n        // load the fees and transfer associated protocol fees to protocol fee recipient\\n        ( fee memory _feeParams  ) = _calculateFees(_orderId, _settlePercent);\\n        uint256 _fee = order[_orderId].senderFee;\\n        if (_fee > 0) {\\n            // transfer sender fee\\n            transferSenderFee(_orderId);\\n        }\\n        // transfer protocol fee\\n        IERC20(token).transfer(feeRecipient, _feeParams.protocolFee);\\n        // // transfer to liquidity provider \\n        IERC20(token).transfer(_liquidityProvider, _feeParams.liquidityProviderAmount);\\n        // // transfer to validators\\n        uint256 length = _validators.length;\\n        // divide the validators reward by the number of validators\\n        uint256 _validatorReward = _feeParams.validatorsReward / length;\\n        for(uint256 i = 0; i < length; ) {\\n            IERC20(token).transfer(_validators[i], _validatorReward);\\n            // emit event\\n            emit RewardValidator(_validators[i], _validatorReward);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // emit event\\n        emit Settled(_splitOrderId, _orderId, _liquidityProvider, _settlePercent);\\n        return (_orderId, token);\\n    }\\n\\n    function transferSenderFee(bytes32 _orderId) internal {\\n        address recipient = order[_orderId].senderFeeRecipient;\\n        uint256 _fee = order[_orderId].senderFee;\\n        // transfer sender fee\\n        IERC20(order[_orderId].token).transfer(recipient, _fee);\\n        // emmit event\\n        emit TransferSenderFee(recipient, _fee);\\n    }\\n\\n    /** @dev See {refund-IPaycrest}. */\\n    function refund(bytes32 _orderId)  external onlyAggregator() returns(bool) {\\n        // ensure the transaction has not been fulfilled\\n        require(!order[_orderId].isFulfilled, \\\"OrderFulfilled\\\");\\n        // reser state values\\n        order[_orderId].isFulfilled = true;\\n        order[_orderId].currentBPS = 0;\\n        // transfer to seller \\n        IERC20(order[_orderId].token).transfer(order[_orderId].refundAddress, order[_orderId].amount);\\n        // emit\\n        emit Refunded(_orderId);\\n        return true;\\n    }\\n\\n    function _calculateFees(bytes32 _orderId, uint96 _settlePercent) private view returns(fee memory _feeParams ) {\\n        // get the total amount associated with the orderId\\n        uint256 amount = order[_orderId].amount;\\n        // get sender fee from amount\\n        amount = amount - order[_orderId].senderFee;\\n        // get the settled percent that is scheduled for this amount\\n        _feeParams.liquidityProviderAmount = (amount * _settlePercent) / MAX_BPS;\\n        // deduct protocol fees from the new total amount\\n        _feeParams.protocolFee = (_feeParams.liquidityProviderAmount * protocolFeePercent) / MAX_BPS; \\n        // substract total fees from the new amount after getting the scheduled amount\\n        _feeParams.liquidityProviderAmount = (_feeParams.liquidityProviderAmount - _feeParams.protocolFee);\\n        // get primary validators fees primaryValidatorsReward\\n        _feeParams.validatorsReward = (_feeParams.protocolFee * validatorFeePercent) / MAX_BPS;\\n        // get primary validators fees secondaryValidatorsReward\\n        // update new protocol fee\\n        _feeParams.protocolFee = _feeParams.protocolFee - (_feeParams.validatorsReward);\\n    }\\n    \\n    /* ##################################################################\\n                                VIEW CALLS\\n    ################################################################## */\\n    /** @dev See {getOrderInfo-IPaycrest}. */\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory) {\\n        return order[_orderId];\\n    }\\n\\n    /** @dev See {isTokenSupported-IPaycrest}. */\\n    function isTokenSupported(address _token) external view returns(bool) {\\n        return _isTokenSupported[_token];\\n    }\\n\\n    /** @dev See {getSupportedInstitutionName-IPaycrest}. */\\n    function getSupportedInstitutionName(bytes32 code) external view returns (InstitutionByCode memory) {\\n        return supportedInstitutionsByCode[code];\\n    }\\n\\n    function getSupportedInstitutions(bytes32 currency) external view returns (Institution[] memory) {\\n        Institution[] memory institutions = supportedInstitutions[currency];\\n        uint256 length = institutions.length;\\n        Institution[] memory result = new Institution[](length);\\n        \\n        for (uint256 i = 0; i < length; ) {\\n            result[i] = institutions[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n\\n    /** @dev See {getFeeDetails-IPaycrest}. */\\n    function getFeeDetails() external view returns(\\n        uint128, \\n        uint128, \\n        uint256\\n    ) {\\n        return(protocolFeePercent, validatorFeePercent, MAX_BPS);\\n    }\\n\\n    /** @dev See {getLiquidityAggregator-IPaycrest}. */\\n    function getLiquidityAggregator() external view returns(address) {\\n        return _liquidityAggregator;\\n    }\\n\\n    /** @dev See {getWhitelistedStatus-IPaycrest}. */\\n    function getWhitelistedStatus(address sender) external view returns(bool) {\\n        return _isWhitelisted[sender];\\n    }\\n\\n    // DECLARE A FUNCTION TO WITHDRAW ANY TOKEN FROM CONTRACT CAN ONLY NE CALLED BY OWNER\\n    function withdraw(address _token, address _recipient, uint256 _amount) external onlyOwner {\\n        IERC20(_token).transfer(_recipient, _amount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xc5da3f40f1ed520453e717b9a1ab3ffefae1cd05aa43a3a00c242874e4ad6a75\",\"license\":\"UNLICENSED\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS;\\n    uint128 internal protocolFeePercent; // 5%\\n    uint128 internal validatorFeePercent; // 0.5%\\n    address internal feeRecipient;\\n    address internal _liquidityAggregator;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroAddress();\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroValue();\\n    /// @notice Revert when zero address is passed in\\n    error InvalidParameter(bytes32 what);\\n    /// @notice Revert when invalid token is provided\\n    error TokenNotSupported();\\n    /// @notice Revert when input amount is zero\\n    error AmountIsZero();\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status);\\n    event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n        else revert InvalidParameter(what);\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        validatorFeePercent = _validatorFeePercent;\\n        emit PaycrestFees(_protocolFeePercent, _validatorFeePercent);\\n    }\\n\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _liquidityAggregator = value;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf22889996d424921485a42095cd138ff97b5dbe6ef8aa13ae719cda1950cf851\",\"license\":\"UNLICENSED\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n    /// @dev Emitted when primary validator get therir rewards.\\n    event RewardValidator(address indexed validator, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                CUSTOM ERRORS\\n    ################################################################## */\\n    /// @notice Revert when caller is not an aggregator\\n    error OnlyAggregator();\\n    /// @notice Revert with invalid signer\\n    error InvalidSigner();\\n    /// @notice Revert when input amount is zero\\n    error Unsuported();\\n    /// @notice Revert when trx has been fulfilled\\n    error OrderFulfilled();\\n    /// @notice Revert when rewards are not been distributed.\\n    error UnableToProcessRewards();\\n    error InvalidInstitutionCode();\\n    error NotWhitelisted();\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _validators arrays of secondary validators.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, address[] calldata _validators, address _liquidityProvider, uint96 _settlePercent)  external returns(bytes32, address);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return validatorFeePercent amount that will be given to primary validator in percentage from `protocolReward`\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint128 protocolReward, \\n        uint128 validatorFeePercent, \\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `liquidityAggregator`.\\n    function getLiquidityAggregator() external view returns(address);\\n\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x9ce83e02026dd27b151e272ec54ad74c1880993c802fbc0f52c203b54c8e16cf\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/Paycrest.sol:Paycrest","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/Paycrest.sol:Paycrest","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3640,"contract":"contracts/Paycrest.sol:Paycrest","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":3642,"contract":"contracts/Paycrest.sol:Paycrest","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint128"},{"astId":3644,"contract":"contracts/Paycrest.sol:Paycrest","label":"validatorFeePercent","offset":16,"slot":"102","type":"t_uint128"},{"astId":3646,"contract":"contracts/Paycrest.sol:Paycrest","label":"feeRecipient","offset":0,"slot":"103","type":"t_address"},{"astId":3648,"contract":"contracts/Paycrest.sol:Paycrest","label":"_liquidityAggregator","offset":0,"slot":"104","type":"t_address"},{"astId":3652,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isTokenSupported","offset":0,"slot":"105","type":"t_mapping(t_address,t_bool)"},{"astId":3656,"contract":"contracts/Paycrest.sol:Paycrest","label":"_isWhitelisted","offset":0,"slot":"106","type":"t_mapping(t_address,t_bool)"},{"astId":3662,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutions","offset":0,"slot":"107","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)3633_storage)dyn_storage)"},{"astId":3667,"contract":"contracts/Paycrest.sol:Paycrest","label":"supportedInstitutionsByCode","offset":0,"slot":"108","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)3638_storage)"},{"astId":2922,"contract":"contracts/Paycrest.sol:Paycrest","label":"order","offset":0,"slot":"109","type":"t_mapping(t_bytes32,t_struct(Order)4294_storage)"},{"astId":2926,"contract":"contracts/Paycrest.sol:Paycrest","label":"_nonce","offset":0,"slot":"110","type":"t_mapping(t_address,t_uint256)"},{"astId":2930,"contract":"contracts/Paycrest.sol:Paycrest","label":"__gap","offset":0,"slot":"111","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)3633_storage)dyn_storage":{"base":"t_struct(Institution)3633_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_array(t_struct(Institution)3633_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)3633_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)3638_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)3638_storage"},"t_mapping(t_bytes32,t_struct(Order)4294_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct IPaycrest.Order)","numberOfBytes":"32","value":"t_struct(Order)4294_storage"},"t_struct(Institution)3633_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":3630,"contract":"contracts/Paycrest.sol:Paycrest","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3632,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)3638_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":3635,"contract":"contracts/Paycrest.sol:Paycrest","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3637,"contract":"contracts/Paycrest.sol:Paycrest","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(Order)4294_storage":{"encoding":"inplace","label":"struct IPaycrest.Order","members":[{"astId":4277,"contract":"contracts/Paycrest.sol:Paycrest","label":"seller","offset":0,"slot":"0","type":"t_address"},{"astId":4279,"contract":"contracts/Paycrest.sol:Paycrest","label":"token","offset":0,"slot":"1","type":"t_address"},{"astId":4281,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFeeRecipient","offset":0,"slot":"2","type":"t_address"},{"astId":4283,"contract":"contracts/Paycrest.sol:Paycrest","label":"senderFee","offset":0,"slot":"3","type":"t_uint256"},{"astId":4285,"contract":"contracts/Paycrest.sol:Paycrest","label":"rate","offset":0,"slot":"4","type":"t_uint96"},{"astId":4287,"contract":"contracts/Paycrest.sol:Paycrest","label":"isFulfilled","offset":12,"slot":"4","type":"t_bool"},{"astId":4289,"contract":"contracts/Paycrest.sol:Paycrest","label":"refundAddress","offset":0,"slot":"5","type":"t_address"},{"astId":4291,"contract":"contracts/Paycrest.sol:Paycrest","label":"currentBPS","offset":20,"slot":"5","type":"t_uint96"},{"astId":4293,"contract":"contracts/Paycrest.sol:Paycrest","label":"amount","offset":0,"slot":"6","type":"t_uint256"}],"numberOfBytes":"224"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"errors":{"AmountIsZero()":[{"notice":"Revert when input amount is zero"}],"InvalidParameter(bytes32)":[{"notice":"Revert when zero address is passed in"}],"InvalidSigner()":[{"notice":"Revert with invalid signer"}],"OnlyAggregator()":[{"notice":"Revert when caller is not an aggregator"}],"OrderFulfilled()":[{"notice":"Revert when trx has been fulfilled"}],"ThrowZeroAddress()":[{"notice":"Revert when zero address is passed in"}],"ThrowZeroValue()":[{"notice":"Revert when zero address is passed in"}],"TokenNotSupported()":[{"notice":"Revert when invalid token is provided"}],"UnableToProcessRewards()":[{"notice":"Revert when rewards are not been distributed."}],"Unsuported()":[{"notice":"Revert when input amount is zero"}]},"kind":"user","methods":{},"version":1}}},"contracts/PaycrestSettingManager.sol":{"PaycrestSettingManager":{"abi":[{"inputs":[],"name":"AmountIsZero","type":"error"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"}],"name":"InvalidParameter","type":"error"},{"inputs":[],"name":"ThrowZeroAddress","type":"error"},{"inputs":[],"name":"ThrowZeroValue","type":"error"},{"inputs":[],"name":"TokenNotSupported","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint128","name":"protocolFee","type":"uint128"},{"indexed":false,"internalType":"uint128","name":"validatorFeePercent","type":"uint128"}],"name":"PaycrestFees","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"address","name":"value","type":"address"},{"indexed":false,"internalType":"bool","name":"status","type":"bool"}],"name":"SettingManagerBool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"what","type":"bytes32"},{"indexed":false,"internalType":"bytes8","name":"value","type":"bytes8"},{"indexed":false,"internalType":"bytes8","name":"status","type":"bytes8"}],"name":"SettingManagerForInstitution","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"currency","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"code","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"internalType":"struct PaycrestSettingManager.Institution[]","name":"institutions","type":"tuple[]"}],"name":"setSupportedInstitutions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"},{"internalType":"bool","name":"status","type":"bool"}],"name":"settingManagerBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"value","type":"address"}],"name":"updateProtocolAddresses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint128","name":"_protocolFeePercent","type":"uint128"},{"internalType":"uint128","name":"_validatorFeePercent","type":"uint128"}],"name":"updateProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610eb7806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c457806399e3c0b4146100e2578063f2fde38b146100fe578063f5326b191461011a5761007d565b80633220088214610082578063715018a61461009e57806379a0effb146100a8575b600080fd5b61009c60048036038101906100979190610a37565b610136565b005b6100a661024a565b005b6100c260048036038101906100bd9190610af1565b61025e565b005b6100cc6103a2565b6040516100d99190610b40565b60405180910390f35b6100fc60048036038101906100f79190610b93565b6103cc565b005b61011860048036038101906101139190610be6565b6105b9565b005b610134600480360381019061012f9190610c5b565b61063c565b005b61013e6106f3565b60008151905060005b8181101561024457606b600085815260200190815260200160002083828151811061017557610174610c9b565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106101da576101d9610c9b565b5b602002602001015160200151815260200185815250606c600085848151811061020657610205610c9b565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610147565b50505050565b6102526106f3565b61025c6000610771565b565b6102666106f3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102cc576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036103355780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361039e5780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103d46106f3565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361043a576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036104b95780606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c6973740000000000000000000000000000000000000000000000830361053c5780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610579565b826040517f48bae5b80000000000000000000000000000000000000000000000000000000081526004016105709190610cd9565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace9308383836040516105ac93929190610d03565b60405180910390a1505050565b6105c16106f3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790610dbd565b60405180910390fd5b61063981610771565b50565b6106446106f3565b81606660006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df82826040516106e7929190610dec565b60405180910390a15050565b6106fb610837565b73ffffffffffffffffffffffffffffffffffffffff166107196103a2565b73ffffffffffffffffffffffffffffffffffffffff161461076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076690610e61565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61086681610853565b811461087157600080fd5b50565b6000813590506108838161085d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108d78261088e565b810181811067ffffffffffffffff821117156108f6576108f561089f565b5b80604052505050565b600061090961083f565b905061091582826108ce565b919050565b600067ffffffffffffffff8211156109355761093461089f565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156109665761096561094b565b5b61097060406108ff565b9050600061098084828501610874565b600083015250602061099484828501610874565b60208301525092915050565b60006109b36109ae8461091a565b6108ff565b905080838252602082019050604084028301858111156109d6576109d5610946565b5b835b818110156109ff57806109eb8882610950565b8452602084019350506040810190506109d8565b5050509392505050565b600082601f830112610a1e57610a1d610889565b5b8135610a2e8482602086016109a0565b91505092915050565b60008060408385031215610a4e57610a4d610849565b5b6000610a5c85828601610874565b925050602083013567ffffffffffffffff811115610a7d57610a7c61084e565b5b610a8985828601610a09565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610abe82610a93565b9050919050565b610ace81610ab3565b8114610ad957600080fd5b50565b600081359050610aeb81610ac5565b92915050565b60008060408385031215610b0857610b07610849565b5b6000610b1685828601610874565b9250506020610b2785828601610adc565b9150509250929050565b610b3a81610ab3565b82525050565b6000602082019050610b556000830184610b31565b92915050565b60008115159050919050565b610b7081610b5b565b8114610b7b57600080fd5b50565b600081359050610b8d81610b67565b92915050565b600080600060608486031215610bac57610bab610849565b5b6000610bba86828701610874565b9350506020610bcb86828701610adc565b9250506040610bdc86828701610b7e565b9150509250925092565b600060208284031215610bfc57610bfb610849565b5b6000610c0a84828501610adc565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610c3881610c13565b8114610c4357600080fd5b50565b600081359050610c5581610c2f565b92915050565b60008060408385031215610c7257610c71610849565b5b6000610c8085828601610c46565b9250506020610c9185828601610c46565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610cd381610853565b82525050565b6000602082019050610cee6000830184610cca565b92915050565b610cfd81610b5b565b82525050565b6000606082019050610d186000830186610cca565b610d256020830185610b31565b610d326040830184610cf4565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610da7602683610d3a565b9150610db282610d4b565b604082019050919050565b60006020820190508181036000830152610dd681610d9a565b9050919050565b610de681610c13565b82525050565b6000604082019050610e016000830185610ddd565b610e0e6020830184610ddd565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e4b602083610d3a565b9150610e5682610e15565b602082019050919050565b60006020820190508181036000830152610e7a81610e3e565b905091905056fea2646970667358221220b19f0b7827414567c24332da49151ff9617d5b3e55b2bf79b0d1bca9f8d7135864736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB7 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xF5326B19 EQ PUSH2 0x11A JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xA8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA6 PUSH2 0x24A JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBD SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST PUSH2 0x25E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCC PUSH2 0x3A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP2 SWAP1 PUSH2 0xB40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x3CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x118 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x113 SWAP2 SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0x63C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13E PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x244 JUMPI PUSH1 0x6B PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x175 JUMPI PUSH2 0x174 PUSH2 0xC9B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1DA JUMPI PUSH2 0x1D9 PUSH2 0xC9B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x6C PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x206 JUMPI PUSH2 0x205 PUSH2 0xC9B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x147 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x252 PUSH2 0x6F3 JUMP JUMPDEST PUSH2 0x25C PUSH1 0x0 PUSH2 0x771 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x266 PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x335 JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x39E JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3D4 PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x43A JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x4B9 JUMPI DUP1 PUSH1 0x69 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x53C JUMPI DUP1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x579 JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH32 0x48BAE5B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x570 SWAP2 SWAP1 PUSH2 0xCD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x5AC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x5C1 PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x630 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x627 SWAP1 PUSH2 0xDBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x639 DUP2 PUSH2 0x771 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x644 PUSH2 0x6F3 JUMP JUMPDEST DUP2 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xE38926C5806B98A6FD00C5D791A36FBD196537FE48D11C45C9F1D0ACD1EA74DF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x6E7 SWAP3 SWAP2 SWAP1 PUSH2 0xDEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x6FB PUSH2 0x837 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x719 PUSH2 0x3A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x76F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x766 SWAP1 PUSH2 0xE61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x866 DUP2 PUSH2 0x853 JUMP JUMPDEST DUP2 EQ PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x883 DUP2 PUSH2 0x85D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8D7 DUP3 PUSH2 0x88E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8F6 JUMPI PUSH2 0x8F5 PUSH2 0x89F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x909 PUSH2 0x83F JUMP JUMPDEST SWAP1 POP PUSH2 0x915 DUP3 DUP3 PUSH2 0x8CE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x935 JUMPI PUSH2 0x934 PUSH2 0x89F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x966 JUMPI PUSH2 0x965 PUSH2 0x94B JUMP JUMPDEST JUMPDEST PUSH2 0x970 PUSH1 0x40 PUSH2 0x8FF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x980 DUP5 DUP3 DUP6 ADD PUSH2 0x874 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x994 DUP5 DUP3 DUP6 ADD PUSH2 0x874 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B3 PUSH2 0x9AE DUP5 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x8FF JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x9D6 JUMPI PUSH2 0x9D5 PUSH2 0x946 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9FF JUMPI DUP1 PUSH2 0x9EB DUP9 DUP3 PUSH2 0x950 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x9D8 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA1E JUMPI PUSH2 0xA1D PUSH2 0x889 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA2E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x9A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA4E JUMPI PUSH2 0xA4D PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA5C DUP6 DUP3 DUP7 ADD PUSH2 0x874 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA7D JUMPI PUSH2 0xA7C PUSH2 0x84E JUMP JUMPDEST JUMPDEST PUSH2 0xA89 DUP6 DUP3 DUP7 ADD PUSH2 0xA09 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xABE DUP3 PUSH2 0xA93 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xACE DUP2 PUSH2 0xAB3 JUMP JUMPDEST DUP2 EQ PUSH2 0xAD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAEB DUP2 PUSH2 0xAC5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB08 JUMPI PUSH2 0xB07 PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB16 DUP6 DUP3 DUP7 ADD PUSH2 0x874 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB27 DUP6 DUP3 DUP7 ADD PUSH2 0xADC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xB3A DUP2 PUSH2 0xAB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB55 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB31 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB70 DUP2 PUSH2 0xB5B JUMP JUMPDEST DUP2 EQ PUSH2 0xB7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8D DUP2 PUSH2 0xB67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBAC JUMPI PUSH2 0xBAB PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBBA DUP7 DUP3 DUP8 ADD PUSH2 0x874 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBCB DUP7 DUP3 DUP8 ADD PUSH2 0xADC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xBDC DUP7 DUP3 DUP8 ADD PUSH2 0xB7E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBFC JUMPI PUSH2 0xBFB PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC0A DUP5 DUP3 DUP6 ADD PUSH2 0xADC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC38 DUP2 PUSH2 0xC13 JUMP JUMPDEST DUP2 EQ PUSH2 0xC43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC55 DUP2 PUSH2 0xC2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC72 JUMPI PUSH2 0xC71 PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC80 DUP6 DUP3 DUP7 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC91 DUP6 DUP3 DUP7 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xCD3 DUP2 PUSH2 0x853 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCFD DUP2 PUSH2 0xB5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xD18 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCCA JUMP JUMPDEST PUSH2 0xD25 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB31 JUMP JUMPDEST PUSH2 0xD32 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCF4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA7 PUSH1 0x26 DUP4 PUSH2 0xD3A JUMP JUMPDEST SWAP2 POP PUSH2 0xDB2 DUP3 PUSH2 0xD4B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD6 DUP2 PUSH2 0xD9A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDE6 DUP2 PUSH2 0xC13 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xE01 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xDDD JUMP JUMPDEST PUSH2 0xE0E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDDD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE4B PUSH1 0x20 DUP4 PUSH2 0xD3A JUMP JUMPDEST SWAP2 POP PUSH2 0xE56 DUP3 PUSH2 0xE15 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE7A DUP2 PUSH2 0xE3E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 SWAP16 SIGNEXTEND PUSH25 0x27414567C24332DA49151FF9617D5B3E55B2BF79B0D1BCA9F8 0xD7 SGT PC PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"139:3032:14:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_68":{"entryPoint":1779,"id":68,"parameterSlots":0,"returnSlots":0},"@_msgSender_1231":{"entryPoint":2103,"id":1231,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_125":{"entryPoint":1905,"id":125,"parameterSlots":1,"returnSlots":0},"@owner_54":{"entryPoint":930,"id":54,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":586,"id":82,"parameterSlots":0,"returnSlots":0},"@setSupportedInstitutions_3812":{"entryPoint":310,"id":3812,"parameterSlots":2,"returnSlots":0},"@settingManagerBool_3758":{"entryPoint":972,"id":3758,"parameterSlots":3,"returnSlots":0},"@transferOwnership_105":{"entryPoint":1465,"id":105,"parameterSlots":1,"returnSlots":0},"@updateProtocolAddresses_3871":{"entryPoint":606,"id":3871,"parameterSlots":2,"returnSlots":0},"@updateProtocolFees_3835":{"entryPoint":1596,"id":3835,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":2464,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2780,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":2569,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":2942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":2164,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_Institution_$3633_memory_ptr":{"entryPoint":2384,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint128":{"entryPoint":3142,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3046,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":2801,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_addresst_bool":{"entryPoint":2963,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":2615,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint128t_uint128":{"entryPoint":3163,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2865,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3316,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3274,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":3482,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":3646,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint128_to_t_uint128_fromStack":{"entryPoint":3549,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":2880,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":3289,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":3331,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3517,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3681,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed":{"entryPoint":3564,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":2303,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":2111,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr":{"entryPoint":2330,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3386,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2739,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":2907,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2131,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint128":{"entryPoint":3091,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2707,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":2254,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x32":{"entryPoint":3227,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2207,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2185,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":2379,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2374,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":2126,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2121,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2190,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":3403,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":3605,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2757,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":2919,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2141,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint128":{"entryPoint":3119,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12227:17","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:17","statements":[{"nodeType":"YulAssignment","src":"57:19:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:17"},"nodeType":"YulFunctionCall","src":"67:9:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:17"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:17","type":""}],"src":"7:75:17"},{"body":{"nodeType":"YulBlock","src":"177:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:17"},"nodeType":"YulFunctionCall","src":"187:12:17"},"nodeType":"YulExpressionStatement","src":"187:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:17"},{"body":{"nodeType":"YulBlock","src":"300:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:17"},"nodeType":"YulFunctionCall","src":"310:12:17"},"nodeType":"YulExpressionStatement","src":"310:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:17"},{"body":{"nodeType":"YulBlock","src":"379:32:17","statements":[{"nodeType":"YulAssignment","src":"389:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:17"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:17","type":""}],"src":"334:77:17"},{"body":{"nodeType":"YulBlock","src":"460:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:17"},"nodeType":"YulFunctionCall","src":"519:12:17"},"nodeType":"YulExpressionStatement","src":"519:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"490:17:17"},"nodeType":"YulFunctionCall","src":"490:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:17"},"nodeType":"YulFunctionCall","src":"480:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:17"},"nodeType":"YulFunctionCall","src":"473:43:17"},"nodeType":"YulIf","src":"470:63:17"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:17","type":""}],"src":"417:122:17"},{"body":{"nodeType":"YulBlock","src":"597:87:17","statements":[{"nodeType":"YulAssignment","src":"607:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:17"},"nodeType":"YulFunctionCall","src":"616:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:17"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"645:26:17"},"nodeType":"YulFunctionCall","src":"645:33:17"},"nodeType":"YulExpressionStatement","src":"645:33:17"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:17","type":""}],"src":"545:139:17"},{"body":{"nodeType":"YulBlock","src":"779:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"796:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"799:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"789:6:17"},"nodeType":"YulFunctionCall","src":"789:12:17"},"nodeType":"YulExpressionStatement","src":"789:12:17"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"690:117:17"},{"body":{"nodeType":"YulBlock","src":"861:54:17","statements":[{"nodeType":"YulAssignment","src":"871:38:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"889:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"896:2:17","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"885:3:17"},"nodeType":"YulFunctionCall","src":"885:14:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:2:17","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"901:3:17"},"nodeType":"YulFunctionCall","src":"901:7:17"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"881:3:17"},"nodeType":"YulFunctionCall","src":"881:28:17"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"871:6:17"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"844:5:17","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"854:6:17","type":""}],"src":"813:102:17"},{"body":{"nodeType":"YulBlock","src":"949:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"966:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"969:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"959:6:17"},"nodeType":"YulFunctionCall","src":"959:88:17"},"nodeType":"YulExpressionStatement","src":"959:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1063:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1066:4:17","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1056:6:17"},"nodeType":"YulFunctionCall","src":"1056:15:17"},"nodeType":"YulExpressionStatement","src":"1056:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1087:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1090:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1080:6:17"},"nodeType":"YulFunctionCall","src":"1080:15:17"},"nodeType":"YulExpressionStatement","src":"1080:15:17"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"921:180:17"},{"body":{"nodeType":"YulBlock","src":"1150:238:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1160:58:17","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1182:6:17"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1212:4:17"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1190:21:17"},"nodeType":"YulFunctionCall","src":"1190:27:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1178:3:17"},"nodeType":"YulFunctionCall","src":"1178:40:17"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1164:10:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"1329:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1331:16:17"},"nodeType":"YulFunctionCall","src":"1331:18:17"},"nodeType":"YulExpressionStatement","src":"1331:18:17"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1272:10:17"},{"kind":"number","nodeType":"YulLiteral","src":"1284:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1269:2:17"},"nodeType":"YulFunctionCall","src":"1269:34:17"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1308:10:17"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1320:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1305:2:17"},"nodeType":"YulFunctionCall","src":"1305:22:17"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1266:2:17"},"nodeType":"YulFunctionCall","src":"1266:62:17"},"nodeType":"YulIf","src":"1263:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1367:2:17","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1371:10:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1360:6:17"},"nodeType":"YulFunctionCall","src":"1360:22:17"},"nodeType":"YulExpressionStatement","src":"1360:22:17"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1136:6:17","type":""},{"name":"size","nodeType":"YulTypedName","src":"1144:4:17","type":""}],"src":"1107:281:17"},{"body":{"nodeType":"YulBlock","src":"1435:88:17","statements":[{"nodeType":"YulAssignment","src":"1445:30:17","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1455:18:17"},"nodeType":"YulFunctionCall","src":"1455:20:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1445:6:17"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1504:6:17"},{"name":"size","nodeType":"YulIdentifier","src":"1512:4:17"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1484:19:17"},"nodeType":"YulFunctionCall","src":"1484:33:17"},"nodeType":"YulExpressionStatement","src":"1484:33:17"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1419:4:17","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1428:6:17","type":""}],"src":"1394:129:17"},{"body":{"nodeType":"YulBlock","src":"1640:229:17","statements":[{"body":{"nodeType":"YulBlock","src":"1745:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1747:16:17"},"nodeType":"YulFunctionCall","src":"1747:18:17"},"nodeType":"YulExpressionStatement","src":"1747:18:17"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1717:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1725:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1714:2:17"},"nodeType":"YulFunctionCall","src":"1714:30:17"},"nodeType":"YulIf","src":"1711:56:17"},{"nodeType":"YulAssignment","src":"1777:25:17","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1789:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"1797:4:17","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1785:3:17"},"nodeType":"YulFunctionCall","src":"1785:17:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1777:4:17"}]},{"nodeType":"YulAssignment","src":"1839:23:17","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1851:4:17"},{"kind":"number","nodeType":"YulLiteral","src":"1857:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1847:3:17"},"nodeType":"YulFunctionCall","src":"1847:15:17"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1839:4:17"}]}]},"name":"array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1624:6:17","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1635:4:17","type":""}],"src":"1529:340:17"},{"body":{"nodeType":"YulBlock","src":"1964:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1981:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1984:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1974:6:17"},"nodeType":"YulFunctionCall","src":"1974:12:17"},"nodeType":"YulExpressionStatement","src":"1974:12:17"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"1875:117:17"},{"body":{"nodeType":"YulBlock","src":"2087:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2104:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2107:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2097:6:17"},"nodeType":"YulFunctionCall","src":"2097:12:17"},"nodeType":"YulExpressionStatement","src":"2097:12:17"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"1998:117:17"},{"body":{"nodeType":"YulBlock","src":"2210:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2227:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2230:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2220:6:17"},"nodeType":"YulFunctionCall","src":"2220:12:17"},"nodeType":"YulExpressionStatement","src":"2220:12:17"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"2121:117:17"},{"body":{"nodeType":"YulBlock","src":"2377:494:17","statements":[{"body":{"nodeType":"YulBlock","src":"2421:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"2423:77:17"},"nodeType":"YulFunctionCall","src":"2423:79:17"},"nodeType":"YulExpressionStatement","src":"2423:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2398:3:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"2403:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2394:3:17"},"nodeType":"YulFunctionCall","src":"2394:19:17"},{"kind":"number","nodeType":"YulLiteral","src":"2415:4:17","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2390:3:17"},"nodeType":"YulFunctionCall","src":"2390:30:17"},"nodeType":"YulIf","src":"2387:117:17"},{"nodeType":"YulAssignment","src":"2513:30:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2538:4:17","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2522:15:17"},"nodeType":"YulFunctionCall","src":"2522:21:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2513:5:17"}]},{"nodeType":"YulBlock","src":"2553:150:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2588:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2602:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2592:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2628:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2635:4:17","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2624:3:17"},"nodeType":"YulFunctionCall","src":"2624:16:17"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2667:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"2678:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2663:3:17"},"nodeType":"YulFunctionCall","src":"2663:22:17"},{"name":"end","nodeType":"YulIdentifier","src":"2687:3:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2642:20:17"},"nodeType":"YulFunctionCall","src":"2642:49:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2617:6:17"},"nodeType":"YulFunctionCall","src":"2617:75:17"},"nodeType":"YulExpressionStatement","src":"2617:75:17"}]},{"nodeType":"YulBlock","src":"2713:151:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2748:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2762:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2752:6:17","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2789:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"2796:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2785:3:17"},"nodeType":"YulFunctionCall","src":"2785:16:17"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2828:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"2839:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2824:3:17"},"nodeType":"YulFunctionCall","src":"2824:22:17"},{"name":"end","nodeType":"YulIdentifier","src":"2848:3:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2803:20:17"},"nodeType":"YulFunctionCall","src":"2803:49:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2778:6:17"},"nodeType":"YulFunctionCall","src":"2778:75:17"},"nodeType":"YulExpressionStatement","src":"2778:75:17"}]}]},"name":"abi_decode_t_struct$_Institution_$3633_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2352:9:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"2363:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2371:5:17","type":""}],"src":"2293:578:17"},{"body":{"nodeType":"YulBlock","src":"3059:666:17","statements":[{"nodeType":"YulAssignment","src":"3069:119:17","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3180:6:17"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"3094:85:17"},"nodeType":"YulFunctionCall","src":"3094:93:17"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3078:15:17"},"nodeType":"YulFunctionCall","src":"3078:110:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3069:5:17"}]},{"nodeType":"YulVariableDeclaration","src":"3197:16:17","value":{"name":"array","nodeType":"YulIdentifier","src":"3208:5:17"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"3201:3:17","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3230:5:17"},{"name":"length","nodeType":"YulIdentifier","src":"3237:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3223:6:17"},"nodeType":"YulFunctionCall","src":"3223:21:17"},"nodeType":"YulExpressionStatement","src":"3223:21:17"},{"nodeType":"YulAssignment","src":"3253:23:17","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"3264:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"3271:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3260:3:17"},"nodeType":"YulFunctionCall","src":"3260:16:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3253:3:17"}]},{"nodeType":"YulVariableDeclaration","src":"3286:44:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:17"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3316:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3324:4:17","type":"","value":"0x40"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3312:3:17"},"nodeType":"YulFunctionCall","src":"3312:17:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3300:3:17"},"nodeType":"YulFunctionCall","src":"3300:30:17"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"3290:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"3358:103:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"3372:77:17"},"nodeType":"YulFunctionCall","src":"3372:79:17"},"nodeType":"YulExpressionStatement","src":"3372:79:17"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"3345:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"3353:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3342:2:17"},"nodeType":"YulFunctionCall","src":"3342:15:17"},"nodeType":"YulIf","src":"3339:122:17"},{"body":{"nodeType":"YulBlock","src":"3546:173:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3561:21:17","value":{"name":"src","nodeType":"YulIdentifier","src":"3579:3:17"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"3565:10:17","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3603:3:17"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"3658:10:17"},{"name":"end","nodeType":"YulIdentifier","src":"3670:3:17"}],"functionName":{"name":"abi_decode_t_struct$_Institution_$3633_memory_ptr","nodeType":"YulIdentifier","src":"3608:49:17"},"nodeType":"YulFunctionCall","src":"3608:66:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3596:6:17"},"nodeType":"YulFunctionCall","src":"3596:79:17"},"nodeType":"YulExpressionStatement","src":"3596:79:17"},{"nodeType":"YulAssignment","src":"3688:21:17","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3699:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"3704:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3695:3:17"},"nodeType":"YulFunctionCall","src":"3695:14:17"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"3688:3:17"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3499:3:17"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"3504:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3496:2:17"},"nodeType":"YulFunctionCall","src":"3496:15:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3512:25:17","statements":[{"nodeType":"YulAssignment","src":"3514:21:17","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3525:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"3530:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3521:3:17"},"nodeType":"YulFunctionCall","src":"3521:14:17"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3514:3:17"}]}]},"pre":{"nodeType":"YulBlock","src":"3474:21:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3476:17:17","value":{"name":"offset","nodeType":"YulIdentifier","src":"3487:6:17"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"3480:3:17","type":""}]}]},"src":"3470:249:17"}]},"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3029:6:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"3037:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"3045:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3053:5:17","type":""}],"src":"2928:797:17"},{"body":{"nodeType":"YulBlock","src":"3888:322:17","statements":[{"body":{"nodeType":"YulBlock","src":"3937:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"3939:77:17"},"nodeType":"YulFunctionCall","src":"3939:79:17"},"nodeType":"YulExpressionStatement","src":"3939:79:17"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3916:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"3924:4:17","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3912:3:17"},"nodeType":"YulFunctionCall","src":"3912:17:17"},{"name":"end","nodeType":"YulIdentifier","src":"3931:3:17"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3908:3:17"},"nodeType":"YulFunctionCall","src":"3908:27:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3901:6:17"},"nodeType":"YulFunctionCall","src":"3901:35:17"},"nodeType":"YulIf","src":"3898:122:17"},{"nodeType":"YulVariableDeclaration","src":"4029:34:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4056:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4043:12:17"},"nodeType":"YulFunctionCall","src":"4043:20:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4033:6:17","type":""}]},{"nodeType":"YulAssignment","src":"4072:132:17","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4177:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4185:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4173:3:17"},"nodeType":"YulFunctionCall","src":"4173:17:17"},{"name":"length","nodeType":"YulIdentifier","src":"4192:6:17"},{"name":"end","nodeType":"YulIdentifier","src":"4200:3:17"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4081:91:17"},"nodeType":"YulFunctionCall","src":"4081:123:17"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4072:5:17"}]}]},"name":"abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3866:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"3874:3:17","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3882:5:17","type":""}],"src":"3782:428:17"},{"body":{"nodeType":"YulBlock","src":"4353:605:17","statements":[{"body":{"nodeType":"YulBlock","src":"4399:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4401:77:17"},"nodeType":"YulFunctionCall","src":"4401:79:17"},"nodeType":"YulExpressionStatement","src":"4401:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4374:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4383:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4370:3:17"},"nodeType":"YulFunctionCall","src":"4370:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"4395:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4366:3:17"},"nodeType":"YulFunctionCall","src":"4366:32:17"},"nodeType":"YulIf","src":"4363:119:17"},{"nodeType":"YulBlock","src":"4492:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4507:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4521:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4511:6:17","type":""}]},{"nodeType":"YulAssignment","src":"4536:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"4582:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4567:3:17"},"nodeType":"YulFunctionCall","src":"4567:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4591:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"4546:20:17"},"nodeType":"YulFunctionCall","src":"4546:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4536:6:17"}]}]},{"nodeType":"YulBlock","src":"4619:332:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4634:46:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4665:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4676:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4661:3:17"},"nodeType":"YulFunctionCall","src":"4661:18:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4648:12:17"},"nodeType":"YulFunctionCall","src":"4648:32:17"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4638:6:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"4727:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"4729:77:17"},"nodeType":"YulFunctionCall","src":"4729:79:17"},"nodeType":"YulExpressionStatement","src":"4729:79:17"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4699:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"4707:18:17","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4696:2:17"},"nodeType":"YulFunctionCall","src":"4696:30:17"},"nodeType":"YulIf","src":"4693:117:17"},{"nodeType":"YulAssignment","src":"4824:117:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4913:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"4924:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4909:3:17"},"nodeType":"YulFunctionCall","src":"4909:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4933:7:17"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"4834:74:17"},"nodeType":"YulFunctionCall","src":"4834:107:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4824:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4315:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4326:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4338:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4346:6:17","type":""}],"src":"4216:742:17"},{"body":{"nodeType":"YulBlock","src":"5009:81:17","statements":[{"nodeType":"YulAssignment","src":"5019:65:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5034:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"5041:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5030:3:17"},"nodeType":"YulFunctionCall","src":"5030:54:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5019:7:17"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4991:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5001:7:17","type":""}],"src":"4964:126:17"},{"body":{"nodeType":"YulBlock","src":"5141:51:17","statements":[{"nodeType":"YulAssignment","src":"5151:35:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5180:5:17"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"5162:17:17"},"nodeType":"YulFunctionCall","src":"5162:24:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"5151:7:17"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5123:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"5133:7:17","type":""}],"src":"5096:96:17"},{"body":{"nodeType":"YulBlock","src":"5241:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"5298:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5307:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5310:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5300:6:17"},"nodeType":"YulFunctionCall","src":"5300:12:17"},"nodeType":"YulExpressionStatement","src":"5300:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5264:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5289:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5271:17:17"},"nodeType":"YulFunctionCall","src":"5271:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5261:2:17"},"nodeType":"YulFunctionCall","src":"5261:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5254:6:17"},"nodeType":"YulFunctionCall","src":"5254:43:17"},"nodeType":"YulIf","src":"5251:63:17"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5234:5:17","type":""}],"src":"5198:122:17"},{"body":{"nodeType":"YulBlock","src":"5378:87:17","statements":[{"nodeType":"YulAssignment","src":"5388:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5410:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5397:12:17"},"nodeType":"YulFunctionCall","src":"5397:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5388:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5453:5:17"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"5426:26:17"},"nodeType":"YulFunctionCall","src":"5426:33:17"},"nodeType":"YulExpressionStatement","src":"5426:33:17"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5356:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"5364:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5372:5:17","type":""}],"src":"5326:139:17"},{"body":{"nodeType":"YulBlock","src":"5554:391:17","statements":[{"body":{"nodeType":"YulBlock","src":"5600:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5602:77:17"},"nodeType":"YulFunctionCall","src":"5602:79:17"},"nodeType":"YulExpressionStatement","src":"5602:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5575:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5584:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5571:3:17"},"nodeType":"YulFunctionCall","src":"5571:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"5596:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5567:3:17"},"nodeType":"YulFunctionCall","src":"5567:32:17"},"nodeType":"YulIf","src":"5564:119:17"},{"nodeType":"YulBlock","src":"5693:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5708:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"5722:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5712:6:17","type":""}]},{"nodeType":"YulAssignment","src":"5737:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5772:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"5783:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5768:3:17"},"nodeType":"YulFunctionCall","src":"5768:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5792:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"5747:20:17"},"nodeType":"YulFunctionCall","src":"5747:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5737:6:17"}]}]},{"nodeType":"YulBlock","src":"5820:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"5835:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"5849:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5839:6:17","type":""}]},{"nodeType":"YulAssignment","src":"5865:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5900:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"5911:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5896:3:17"},"nodeType":"YulFunctionCall","src":"5896:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5920:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5875:20:17"},"nodeType":"YulFunctionCall","src":"5875:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5865:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5516:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5527:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5539:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5547:6:17","type":""}],"src":"5471:474:17"},{"body":{"nodeType":"YulBlock","src":"6016:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6033:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6056:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"6038:17:17"},"nodeType":"YulFunctionCall","src":"6038:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6026:6:17"},"nodeType":"YulFunctionCall","src":"6026:37:17"},"nodeType":"YulExpressionStatement","src":"6026:37:17"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6004:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6011:3:17","type":""}],"src":"5951:118:17"},{"body":{"nodeType":"YulBlock","src":"6173:124:17","statements":[{"nodeType":"YulAssignment","src":"6183:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6195:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6206:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6191:3:17"},"nodeType":"YulFunctionCall","src":"6191:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6183:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6263:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6276:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6287:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6272:3:17"},"nodeType":"YulFunctionCall","src":"6272:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6219:43:17"},"nodeType":"YulFunctionCall","src":"6219:71:17"},"nodeType":"YulExpressionStatement","src":"6219:71:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6145:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6157:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6168:4:17","type":""}],"src":"6075:222:17"},{"body":{"nodeType":"YulBlock","src":"6345:48:17","statements":[{"nodeType":"YulAssignment","src":"6355:32:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6380:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6373:6:17"},"nodeType":"YulFunctionCall","src":"6373:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6366:6:17"},"nodeType":"YulFunctionCall","src":"6366:21:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6355:7:17"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6327:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6337:7:17","type":""}],"src":"6303:90:17"},{"body":{"nodeType":"YulBlock","src":"6439:76:17","statements":[{"body":{"nodeType":"YulBlock","src":"6493:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6502:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6505:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6495:6:17"},"nodeType":"YulFunctionCall","src":"6495:12:17"},"nodeType":"YulExpressionStatement","src":"6495:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6462:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6484:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6469:14:17"},"nodeType":"YulFunctionCall","src":"6469:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6459:2:17"},"nodeType":"YulFunctionCall","src":"6459:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6452:6:17"},"nodeType":"YulFunctionCall","src":"6452:40:17"},"nodeType":"YulIf","src":"6449:60:17"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6432:5:17","type":""}],"src":"6399:116:17"},{"body":{"nodeType":"YulBlock","src":"6570:84:17","statements":[{"nodeType":"YulAssignment","src":"6580:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6602:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6589:12:17"},"nodeType":"YulFunctionCall","src":"6589:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6580:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6642:5:17"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6618:23:17"},"nodeType":"YulFunctionCall","src":"6618:30:17"},"nodeType":"YulExpressionStatement","src":"6618:30:17"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6548:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"6556:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6564:5:17","type":""}],"src":"6521:133:17"},{"body":{"nodeType":"YulBlock","src":"6757:516:17","statements":[{"body":{"nodeType":"YulBlock","src":"6803:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6805:77:17"},"nodeType":"YulFunctionCall","src":"6805:79:17"},"nodeType":"YulExpressionStatement","src":"6805:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6778:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6787:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6774:3:17"},"nodeType":"YulFunctionCall","src":"6774:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"6799:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6770:3:17"},"nodeType":"YulFunctionCall","src":"6770:32:17"},"nodeType":"YulIf","src":"6767:119:17"},{"nodeType":"YulBlock","src":"6896:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"6911:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"6925:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6915:6:17","type":""}]},{"nodeType":"YulAssignment","src":"6940:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6975:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"6986:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6971:3:17"},"nodeType":"YulFunctionCall","src":"6971:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6995:7:17"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"6950:20:17"},"nodeType":"YulFunctionCall","src":"6950:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6940:6:17"}]}]},{"nodeType":"YulBlock","src":"7023:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7038:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7052:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7042:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7068:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7103:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7114:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7099:3:17"},"nodeType":"YulFunctionCall","src":"7099:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7123:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7078:20:17"},"nodeType":"YulFunctionCall","src":"7078:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7068:6:17"}]}]},{"nodeType":"YulBlock","src":"7151:115:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7166:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7180:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7170:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7196:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7228:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7239:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7224:3:17"},"nodeType":"YulFunctionCall","src":"7224:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7248:7:17"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"7206:17:17"},"nodeType":"YulFunctionCall","src":"7206:50:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7196:6:17"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6711:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6722:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6734:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6742:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6750:6:17","type":""}],"src":"6660:613:17"},{"body":{"nodeType":"YulBlock","src":"7345:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"7391:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7393:77:17"},"nodeType":"YulFunctionCall","src":"7393:79:17"},"nodeType":"YulExpressionStatement","src":"7393:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7366:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7375:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7362:3:17"},"nodeType":"YulFunctionCall","src":"7362:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"7387:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7358:3:17"},"nodeType":"YulFunctionCall","src":"7358:32:17"},"nodeType":"YulIf","src":"7355:119:17"},{"nodeType":"YulBlock","src":"7484:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"7499:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"7513:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7503:6:17","type":""}]},{"nodeType":"YulAssignment","src":"7528:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7563:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"7574:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7559:3:17"},"nodeType":"YulFunctionCall","src":"7559:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7583:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7538:20:17"},"nodeType":"YulFunctionCall","src":"7538:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7528:6:17"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7315:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7326:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7338:6:17","type":""}],"src":"7279:329:17"},{"body":{"nodeType":"YulBlock","src":"7659:73:17","statements":[{"nodeType":"YulAssignment","src":"7669:57:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7684:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"7691:34:17","type":"","value":"0xffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7680:3:17"},"nodeType":"YulFunctionCall","src":"7680:46:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7669:7:17"}]}]},"name":"cleanup_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7641:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7651:7:17","type":""}],"src":"7614:118:17"},{"body":{"nodeType":"YulBlock","src":"7781:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"7838:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7847:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7850:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7840:6:17"},"nodeType":"YulFunctionCall","src":"7840:12:17"},"nodeType":"YulExpressionStatement","src":"7840:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7804:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7829:5:17"}],"functionName":{"name":"cleanup_t_uint128","nodeType":"YulIdentifier","src":"7811:17:17"},"nodeType":"YulFunctionCall","src":"7811:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7801:2:17"},"nodeType":"YulFunctionCall","src":"7801:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7794:6:17"},"nodeType":"YulFunctionCall","src":"7794:43:17"},"nodeType":"YulIf","src":"7791:63:17"}]},"name":"validator_revert_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7774:5:17","type":""}],"src":"7738:122:17"},{"body":{"nodeType":"YulBlock","src":"7918:87:17","statements":[{"nodeType":"YulAssignment","src":"7928:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7950:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7937:12:17"},"nodeType":"YulFunctionCall","src":"7937:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"7928:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7993:5:17"}],"functionName":{"name":"validator_revert_t_uint128","nodeType":"YulIdentifier","src":"7966:26:17"},"nodeType":"YulFunctionCall","src":"7966:33:17"},"nodeType":"YulExpressionStatement","src":"7966:33:17"}]},"name":"abi_decode_t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7896:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"7904:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"7912:5:17","type":""}],"src":"7866:139:17"},{"body":{"nodeType":"YulBlock","src":"8094:391:17","statements":[{"body":{"nodeType":"YulBlock","src":"8140:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8142:77:17"},"nodeType":"YulFunctionCall","src":"8142:79:17"},"nodeType":"YulExpressionStatement","src":"8142:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8115:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"8124:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8111:3:17"},"nodeType":"YulFunctionCall","src":"8111:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"8136:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8107:3:17"},"nodeType":"YulFunctionCall","src":"8107:32:17"},"nodeType":"YulIf","src":"8104:119:17"},{"nodeType":"YulBlock","src":"8233:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8248:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"8262:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8252:6:17","type":""}]},{"nodeType":"YulAssignment","src":"8277:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8312:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8323:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8308:3:17"},"nodeType":"YulFunctionCall","src":"8308:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8332:7:17"}],"functionName":{"name":"abi_decode_t_uint128","nodeType":"YulIdentifier","src":"8287:20:17"},"nodeType":"YulFunctionCall","src":"8287:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8277:6:17"}]}]},{"nodeType":"YulBlock","src":"8360:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8375:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"8389:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8379:6:17","type":""}]},{"nodeType":"YulAssignment","src":"8405:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8440:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8451:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8436:3:17"},"nodeType":"YulFunctionCall","src":"8436:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8460:7:17"}],"functionName":{"name":"abi_decode_t_uint128","nodeType":"YulIdentifier","src":"8415:20:17"},"nodeType":"YulFunctionCall","src":"8415:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8405:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint128t_uint128","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8056:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8067:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8079:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8087:6:17","type":""}],"src":"8011:474:17"},{"body":{"nodeType":"YulBlock","src":"8519:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8539:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8529:6:17"},"nodeType":"YulFunctionCall","src":"8529:88:17"},"nodeType":"YulExpressionStatement","src":"8529:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8633:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8636:4:17","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8626:6:17"},"nodeType":"YulFunctionCall","src":"8626:15:17"},"nodeType":"YulExpressionStatement","src":"8626:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8657:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8660:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8650:6:17"},"nodeType":"YulFunctionCall","src":"8650:15:17"},"nodeType":"YulExpressionStatement","src":"8650:15:17"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8491:180:17"},{"body":{"nodeType":"YulBlock","src":"8742:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8759:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8782:5:17"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"8764:17:17"},"nodeType":"YulFunctionCall","src":"8764:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8752:6:17"},"nodeType":"YulFunctionCall","src":"8752:37:17"},"nodeType":"YulExpressionStatement","src":"8752:37:17"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8730:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8737:3:17","type":""}],"src":"8677:118:17"},{"body":{"nodeType":"YulBlock","src":"8899:124:17","statements":[{"nodeType":"YulAssignment","src":"8909:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8921:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8932:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8917:3:17"},"nodeType":"YulFunctionCall","src":"8917:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8909:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8989:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9002:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9013:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8998:3:17"},"nodeType":"YulFunctionCall","src":"8998:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8945:43:17"},"nodeType":"YulFunctionCall","src":"8945:71:17"},"nodeType":"YulExpressionStatement","src":"8945:71:17"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8871:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8883:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8894:4:17","type":""}],"src":"8801:222:17"},{"body":{"nodeType":"YulBlock","src":"9088:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9105:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9125:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"9110:14:17"},"nodeType":"YulFunctionCall","src":"9110:21:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9098:6:17"},"nodeType":"YulFunctionCall","src":"9098:34:17"},"nodeType":"YulExpressionStatement","src":"9098:34:17"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9076:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9083:3:17","type":""}],"src":"9029:109:17"},{"body":{"nodeType":"YulBlock","src":"9292:282:17","statements":[{"nodeType":"YulAssignment","src":"9302:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9314:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9325:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9310:3:17"},"nodeType":"YulFunctionCall","src":"9310:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9302:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9382:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9395:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9406:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9391:3:17"},"nodeType":"YulFunctionCall","src":"9391:17:17"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"9338:43:17"},"nodeType":"YulFunctionCall","src":"9338:71:17"},"nodeType":"YulExpressionStatement","src":"9338:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9463:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9476:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9487:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9472:3:17"},"nodeType":"YulFunctionCall","src":"9472:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"9419:43:17"},"nodeType":"YulFunctionCall","src":"9419:72:17"},"nodeType":"YulExpressionStatement","src":"9419:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9539:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9552:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"9563:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9548:3:17"},"nodeType":"YulFunctionCall","src":"9548:18:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"9501:37:17"},"nodeType":"YulFunctionCall","src":"9501:66:17"},"nodeType":"YulExpressionStatement","src":"9501:66:17"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9248:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9260:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9268:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9276:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9287:4:17","type":""}],"src":"9144:430:17"},{"body":{"nodeType":"YulBlock","src":"9676:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9693:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"9698:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9686:6:17"},"nodeType":"YulFunctionCall","src":"9686:19:17"},"nodeType":"YulExpressionStatement","src":"9686:19:17"},{"nodeType":"YulAssignment","src":"9714:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9733:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"9738:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9729:3:17"},"nodeType":"YulFunctionCall","src":"9729:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9714:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9648:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"9653:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9664:11:17","type":""}],"src":"9580:169:17"},{"body":{"nodeType":"YulBlock","src":"9861:119:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9883:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9891:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9879:3:17"},"nodeType":"YulFunctionCall","src":"9879:14:17"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"9895:34:17","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9872:6:17"},"nodeType":"YulFunctionCall","src":"9872:58:17"},"nodeType":"YulExpressionStatement","src":"9872:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9951:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9959:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9947:3:17"},"nodeType":"YulFunctionCall","src":"9947:15:17"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"9964:8:17","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9940:6:17"},"nodeType":"YulFunctionCall","src":"9940:33:17"},"nodeType":"YulExpressionStatement","src":"9940:33:17"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9853:6:17","type":""}],"src":"9755:225:17"},{"body":{"nodeType":"YulBlock","src":"10132:220:17","statements":[{"nodeType":"YulAssignment","src":"10142:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10208:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"10213:2:17","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10149:58:17"},"nodeType":"YulFunctionCall","src":"10149:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10142:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10314:3:17"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"10225:88:17"},"nodeType":"YulFunctionCall","src":"10225:93:17"},"nodeType":"YulExpressionStatement","src":"10225:93:17"},{"nodeType":"YulAssignment","src":"10327:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10338:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"10343:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10334:3:17"},"nodeType":"YulFunctionCall","src":"10334:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10327:3:17"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10120:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10128:3:17","type":""}],"src":"9986:366:17"},{"body":{"nodeType":"YulBlock","src":"10529:248:17","statements":[{"nodeType":"YulAssignment","src":"10539:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10551:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10562:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10547:3:17"},"nodeType":"YulFunctionCall","src":"10547:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10539:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10586:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10597:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10582:3:17"},"nodeType":"YulFunctionCall","src":"10582:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10605:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"10611:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10601:3:17"},"nodeType":"YulFunctionCall","src":"10601:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10575:6:17"},"nodeType":"YulFunctionCall","src":"10575:47:17"},"nodeType":"YulExpressionStatement","src":"10575:47:17"},{"nodeType":"YulAssignment","src":"10631:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10765:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10639:124:17"},"nodeType":"YulFunctionCall","src":"10639:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10631:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10509:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10524:4:17","type":""}],"src":"10358:419:17"},{"body":{"nodeType":"YulBlock","src":"10848:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10865:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10888:5:17"}],"functionName":{"name":"cleanup_t_uint128","nodeType":"YulIdentifier","src":"10870:17:17"},"nodeType":"YulFunctionCall","src":"10870:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10858:6:17"},"nodeType":"YulFunctionCall","src":"10858:37:17"},"nodeType":"YulExpressionStatement","src":"10858:37:17"}]},"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10836:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10843:3:17","type":""}],"src":"10783:118:17"},{"body":{"nodeType":"YulBlock","src":"11033:206:17","statements":[{"nodeType":"YulAssignment","src":"11043:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11055:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11066:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11051:3:17"},"nodeType":"YulFunctionCall","src":"11051:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11043:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11123:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11136:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11147:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11132:3:17"},"nodeType":"YulFunctionCall","src":"11132:17:17"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulIdentifier","src":"11079:43:17"},"nodeType":"YulFunctionCall","src":"11079:71:17"},"nodeType":"YulExpressionStatement","src":"11079:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11204:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11217:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11228:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11213:3:17"},"nodeType":"YulFunctionCall","src":"11213:18:17"}],"functionName":{"name":"abi_encode_t_uint128_to_t_uint128_fromStack","nodeType":"YulIdentifier","src":"11160:43:17"},"nodeType":"YulFunctionCall","src":"11160:72:17"},"nodeType":"YulExpressionStatement","src":"11160:72:17"}]},"name":"abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10997:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11009:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11017:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11028:4:17","type":""}],"src":"10907:332:17"},{"body":{"nodeType":"YulBlock","src":"11351:76:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11373:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"11381:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11369:3:17"},"nodeType":"YulFunctionCall","src":"11369:14:17"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"11385:34:17","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11362:6:17"},"nodeType":"YulFunctionCall","src":"11362:58:17"},"nodeType":"YulExpressionStatement","src":"11362:58:17"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11343:6:17","type":""}],"src":"11245:182:17"},{"body":{"nodeType":"YulBlock","src":"11579:220:17","statements":[{"nodeType":"YulAssignment","src":"11589:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11655:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"11660:2:17","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11596:58:17"},"nodeType":"YulFunctionCall","src":"11596:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11589:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11761:3:17"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"11672:88:17"},"nodeType":"YulFunctionCall","src":"11672:93:17"},"nodeType":"YulExpressionStatement","src":"11672:93:17"},{"nodeType":"YulAssignment","src":"11774:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11785:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"11790:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11781:3:17"},"nodeType":"YulFunctionCall","src":"11781:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11774:3:17"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11567:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11575:3:17","type":""}],"src":"11433:366:17"},{"body":{"nodeType":"YulBlock","src":"11976:248:17","statements":[{"nodeType":"YulAssignment","src":"11986:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11998:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12009:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11994:3:17"},"nodeType":"YulFunctionCall","src":"11994:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11986:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12033:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12044:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12029:3:17"},"nodeType":"YulFunctionCall","src":"12029:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12052:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"12058:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12048:3:17"},"nodeType":"YulFunctionCall","src":"12048:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12022:6:17"},"nodeType":"YulFunctionCall","src":"12022:47:17"},"nodeType":"YulExpressionStatement","src":"12022:47:17"},{"nodeType":"YulAssignment","src":"12078:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12212:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12086:124:17"},"nodeType":"YulFunctionCall","src":"12086:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12078:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11956:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11971:4:17","type":""}],"src":"11805:419:17"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    // struct PaycrestSettingManager.Institution\n    function abi_decode_t_struct$_Institution_$3633_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // code\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // name\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_Institution_$3633_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct PaycrestSettingManager.Institution[]\n    function abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_bytes32t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_struct$_Institution_$3633_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_addresst_bool(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint128(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint128(value) {\n        if iszero(eq(value, cleanup_t_uint128(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint128(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint128(value)\n    }\n\n    function abi_decode_tuple_t_uint128t_uint128(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint128(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_uint128_to_t_uint128_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint128(value))\n    }\n\n    function abi_encode_tuple_t_uint128_t_uint128__to_t_uint128_t_uint128__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint128_to_t_uint128_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint128_to_t_uint128_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c457806399e3c0b4146100e2578063f2fde38b146100fe578063f5326b191461011a5761007d565b80633220088214610082578063715018a61461009e57806379a0effb146100a8575b600080fd5b61009c60048036038101906100979190610a37565b610136565b005b6100a661024a565b005b6100c260048036038101906100bd9190610af1565b61025e565b005b6100cc6103a2565b6040516100d99190610b40565b60405180910390f35b6100fc60048036038101906100f79190610b93565b6103cc565b005b61011860048036038101906101139190610be6565b6105b9565b005b610134600480360381019061012f9190610c5b565b61063c565b005b61013e6106f3565b60008151905060005b8181101561024457606b600085815260200190815260200160002083828151811061017557610174610c9b565b5b602002602001015190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180604001604052808483815181106101da576101d9610c9b565b5b602002602001015160200151815260200185815250606c600085848151811061020657610205610c9b565b5b602002602001015160000151815260200190815260200160002060008201518160000155602082015181600101559050508080600101915050610147565b50505050565b6102526106f3565b61025c6000610771565b565b6102666106f3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102cc576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f666565000000000000000000000000000000000000000000000000000000000082036103355780606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f61676772656761746f7200000000000000000000000000000000000000000000820361039e5780606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103d46106f3565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361043a576040517f9c8e2b5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f746f6b656e00000000000000000000000000000000000000000000000000000083036104b95780606960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b7f77686974656c6973740000000000000000000000000000000000000000000000830361053c5780606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610579565b826040517f48bae5b80000000000000000000000000000000000000000000000000000000081526004016105709190610cd9565b60405180910390fd5b7fe22cadcc5ddbc0a185e8920eaa6825bcc06dcd6b432988e7e9912caa59ace9308383836040516105ac93929190610d03565b60405180910390a1505050565b6105c16106f3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790610dbd565b60405180910390fd5b61063981610771565b50565b6106446106f3565b81606660006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555080606660106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055507fe38926c5806b98a6fd00c5d791a36fbd196537fe48d11c45c9f1d0acd1ea74df82826040516106e7929190610dec565b60405180910390a15050565b6106fb610837565b73ffffffffffffffffffffffffffffffffffffffff166107196103a2565b73ffffffffffffffffffffffffffffffffffffffff161461076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076690610e61565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61086681610853565b811461087157600080fd5b50565b6000813590506108838161085d565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108d78261088e565b810181811067ffffffffffffffff821117156108f6576108f561089f565b5b80604052505050565b600061090961083f565b905061091582826108ce565b919050565b600067ffffffffffffffff8211156109355761093461089f565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000604082840312156109665761096561094b565b5b61097060406108ff565b9050600061098084828501610874565b600083015250602061099484828501610874565b60208301525092915050565b60006109b36109ae8461091a565b6108ff565b905080838252602082019050604084028301858111156109d6576109d5610946565b5b835b818110156109ff57806109eb8882610950565b8452602084019350506040810190506109d8565b5050509392505050565b600082601f830112610a1e57610a1d610889565b5b8135610a2e8482602086016109a0565b91505092915050565b60008060408385031215610a4e57610a4d610849565b5b6000610a5c85828601610874565b925050602083013567ffffffffffffffff811115610a7d57610a7c61084e565b5b610a8985828601610a09565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610abe82610a93565b9050919050565b610ace81610ab3565b8114610ad957600080fd5b50565b600081359050610aeb81610ac5565b92915050565b60008060408385031215610b0857610b07610849565b5b6000610b1685828601610874565b9250506020610b2785828601610adc565b9150509250929050565b610b3a81610ab3565b82525050565b6000602082019050610b556000830184610b31565b92915050565b60008115159050919050565b610b7081610b5b565b8114610b7b57600080fd5b50565b600081359050610b8d81610b67565b92915050565b600080600060608486031215610bac57610bab610849565b5b6000610bba86828701610874565b9350506020610bcb86828701610adc565b9250506040610bdc86828701610b7e565b9150509250925092565b600060208284031215610bfc57610bfb610849565b5b6000610c0a84828501610adc565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610c3881610c13565b8114610c4357600080fd5b50565b600081359050610c5581610c2f565b92915050565b60008060408385031215610c7257610c71610849565b5b6000610c8085828601610c46565b9250506020610c9185828601610c46565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b610cd381610853565b82525050565b6000602082019050610cee6000830184610cca565b92915050565b610cfd81610b5b565b82525050565b6000606082019050610d186000830186610cca565b610d256020830185610b31565b610d326040830184610cf4565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610da7602683610d3a565b9150610db282610d4b565b604082019050919050565b60006020820190508181036000830152610dd681610d9a565b9050919050565b610de681610c13565b82525050565b6000604082019050610e016000830185610ddd565b610e0e6020830184610ddd565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e4b602083610d3a565b9150610e5682610e15565b602082019050919050565b60006020820190508181036000830152610e7a81610e3e565b905091905056fea2646970667358221220b19f0b7827414567c24332da49151ff9617d5b3e55b2bf79b0d1bca9f8d7135864736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x99E3C0B4 EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xF5326B19 EQ PUSH2 0x11A JUMPI PUSH2 0x7D JUMP JUMPDEST DUP1 PUSH4 0x32200882 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x9E JUMPI DUP1 PUSH4 0x79A0EFFB EQ PUSH2 0xA8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x97 SWAP2 SWAP1 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA6 PUSH2 0x24A JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xBD SWAP2 SWAP1 PUSH2 0xAF1 JUMP JUMPDEST PUSH2 0x25E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCC PUSH2 0x3A2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD9 SWAP2 SWAP1 PUSH2 0xB40 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF7 SWAP2 SWAP1 PUSH2 0xB93 JUMP JUMPDEST PUSH2 0x3CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x118 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x113 SWAP2 SWAP1 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x5B9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC5B JUMP JUMPDEST PUSH2 0x63C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x13E PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x244 JUMPI PUSH1 0x6B PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x175 JUMPI PUSH2 0x174 PUSH2 0xC9B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1DA JUMPI PUSH2 0x1D9 PUSH2 0xC9B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE POP PUSH1 0x6C PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x206 JUMPI PUSH2 0x205 PUSH2 0xC9B JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x147 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x252 PUSH2 0x6F3 JUMP JUMPDEST PUSH2 0x25C PUSH1 0x0 PUSH2 0x771 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x266 PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x335 JUMPI DUP1 PUSH1 0x67 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x61676772656761746F7200000000000000000000000000000000000000000000 DUP3 SUB PUSH2 0x39E JUMPI DUP1 PUSH1 0x68 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x3D4 PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x43A JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C8E2B5D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x746F6B656E000000000000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x4B9 JUMPI DUP1 PUSH1 0x69 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH32 0x77686974656C6973740000000000000000000000000000000000000000000000 DUP4 SUB PUSH2 0x53C JUMPI DUP1 PUSH1 0x6A PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x579 JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH32 0x48BAE5B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x570 SWAP2 SWAP1 PUSH2 0xCD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xE22CADCC5DDBC0A185E8920EAA6825BCC06DCD6B432988E7E9912CAA59ACE930 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x5AC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xD03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x5C1 PUSH2 0x6F3 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x630 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x627 SWAP1 PUSH2 0xDBD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x639 DUP2 PUSH2 0x771 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x644 PUSH2 0x6F3 JUMP JUMPDEST DUP2 PUSH1 0x66 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x66 PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH32 0xE38926C5806B98A6FD00C5D791A36FBD196537FE48D11C45C9F1D0ACD1EA74DF DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x6E7 SWAP3 SWAP2 SWAP1 PUSH2 0xDEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x6FB PUSH2 0x837 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x719 PUSH2 0x3A2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x76F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x766 SWAP1 PUSH2 0xE61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x866 DUP2 PUSH2 0x853 JUMP JUMPDEST DUP2 EQ PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x883 DUP2 PUSH2 0x85D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8D7 DUP3 PUSH2 0x88E JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x8F6 JUMPI PUSH2 0x8F5 PUSH2 0x89F JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x909 PUSH2 0x83F JUMP JUMPDEST SWAP1 POP PUSH2 0x915 DUP3 DUP3 PUSH2 0x8CE JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x935 JUMPI PUSH2 0x934 PUSH2 0x89F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x966 JUMPI PUSH2 0x965 PUSH2 0x94B JUMP JUMPDEST JUMPDEST PUSH2 0x970 PUSH1 0x40 PUSH2 0x8FF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x980 DUP5 DUP3 DUP6 ADD PUSH2 0x874 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x994 DUP5 DUP3 DUP6 ADD PUSH2 0x874 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9B3 PUSH2 0x9AE DUP5 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x8FF JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x9D6 JUMPI PUSH2 0x9D5 PUSH2 0x946 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9FF JUMPI DUP1 PUSH2 0x9EB DUP9 DUP3 PUSH2 0x950 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x9D8 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA1E JUMPI PUSH2 0xA1D PUSH2 0x889 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA2E DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x9A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA4E JUMPI PUSH2 0xA4D PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA5C DUP6 DUP3 DUP7 ADD PUSH2 0x874 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA7D JUMPI PUSH2 0xA7C PUSH2 0x84E JUMP JUMPDEST JUMPDEST PUSH2 0xA89 DUP6 DUP3 DUP7 ADD PUSH2 0xA09 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xABE DUP3 PUSH2 0xA93 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xACE DUP2 PUSH2 0xAB3 JUMP JUMPDEST DUP2 EQ PUSH2 0xAD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xAEB DUP2 PUSH2 0xAC5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB08 JUMPI PUSH2 0xB07 PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB16 DUP6 DUP3 DUP7 ADD PUSH2 0x874 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xB27 DUP6 DUP3 DUP7 ADD PUSH2 0xADC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xB3A DUP2 PUSH2 0xAB3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xB55 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xB31 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB70 DUP2 PUSH2 0xB5B JUMP JUMPDEST DUP2 EQ PUSH2 0xB7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB8D DUP2 PUSH2 0xB67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xBAC JUMPI PUSH2 0xBAB PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBBA DUP7 DUP3 DUP8 ADD PUSH2 0x874 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xBCB DUP7 DUP3 DUP8 ADD PUSH2 0xADC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xBDC DUP7 DUP3 DUP8 ADD PUSH2 0xB7E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBFC JUMPI PUSH2 0xBFB PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC0A DUP5 DUP3 DUP6 ADD PUSH2 0xADC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC38 DUP2 PUSH2 0xC13 JUMP JUMPDEST DUP2 EQ PUSH2 0xC43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xC55 DUP2 PUSH2 0xC2F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC72 JUMPI PUSH2 0xC71 PUSH2 0x849 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC80 DUP6 DUP3 DUP7 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC91 DUP6 DUP3 DUP7 ADD PUSH2 0xC46 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0xCD3 DUP2 PUSH2 0x853 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCEE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCCA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCFD DUP2 PUSH2 0xB5B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xD18 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xCCA JUMP JUMPDEST PUSH2 0xD25 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xB31 JUMP JUMPDEST PUSH2 0xD32 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xCF4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDA7 PUSH1 0x26 DUP4 PUSH2 0xD3A JUMP JUMPDEST SWAP2 POP PUSH2 0xDB2 DUP3 PUSH2 0xD4B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDD6 DUP2 PUSH2 0xD9A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDE6 DUP2 PUSH2 0xC13 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xE01 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xDDD JUMP JUMPDEST PUSH2 0xE0E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDDD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE4B PUSH1 0x20 DUP4 PUSH2 0xD3A JUMP JUMPDEST SWAP2 POP PUSH2 0xE56 DUP3 PUSH2 0xE15 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE7A DUP2 PUSH2 0xE3E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 SWAP16 SIGNEXTEND PUSH25 0x27414567C24332DA49151FF9617D5B3E55B2BF79B0D1BCA9F8 0xD7 SGT PC PUSH5 0x736F6C6343 STOP ADDMOD SLT STOP CALLER ","sourceMap":"139:3032:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2110:500;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2064:101:0;;;:::i;:::-;;2907:261:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1441:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1721:383:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2616:285:14;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2110:500;1334:13:0;:11;:13::i;:::-;2227:14:14::1;2244:12;:19;2227:36;;2278:6;2273:331;2294:6;2290:1;:10;2273:331;;;2318:21;:31;2340:8;2318:31;;;;;;;;;;;2355:12;2368:1;2355:15;;;;;;;;:::i;:::-;;;;;;;;2318:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2437:97;;;;;;;;2479:12;2492:1;2479:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2437:97;;;;2511:8;2437:97;;::::0;2385:27:::1;:49;2413:12;2426:1;2413:15;;;;;;;;:::i;:::-;;;;;;;;:20;;;2385:49;;;;;;;;;;;:149;;;;;;;;;;;;;;;;;;;2576:3;;;;;;;2273:331;;;;2216:394;2110:500:::0;;:::o;2064:101:0:-;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;2907:261:14:-;1334:13:0;:11;:13::i;:::-;3019:1:14::1;3002:19;;:5;:19;;::::0;2998:50:::1;;3030:18;;;;;;;;;;;;;;2998:50;3062:13;:4;:13:::0;3058:39:::1;;3092:5;3077:12;;:20;;;;;;;;;;;;;;;;;;3058:39;3111:20;:4;:20:::0;3107:54:::1;;3156:5;3133:20;;:28;;;;;;;;;;;;;;;;;;3107:54;2907:261:::0;;:::o;1441:85:0:-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1721:383:14:-;1334:13:0;:11;:13::i;:::-;1841:1:14::1;1824:19;;:5;:19;;::::0;1820:50:::1;;1852:18;;;;;;;;;;;;;;1820:50;1884:15;:4;:15:::0;1880:54:::1;;1928:6;1901:17;:24;1919:5;1901:24;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;1880:54;1948:19;:4;:19:::0;1944:99:::1;;1993:6;1969:14;:21;1984:5;1969:21;;;;;;;;;;;;;;;;:30;;;;;;;;;;;;;;;;;;1944:99;;;2038:4;2021:22;;;;;;;;;;;:::i;:::-;;;;;;;;1944:99;2058:39;2077:4;2083:5;2090:6;2058:39;;;;;;;;:::i;:::-;;;;;;;;1721:383:::0;;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;2616:285:14:-;1334:13:0;:11;:13::i;:::-;2753:19:14::1;2732:18;;:40;;;;;;;;;;;;;;;;;;2804:20;2782:19;;:42;;;;;;;;;;;;;;;;;;2839:55;2852:19;2873:20;2839:55;;;;;;;:::i;:::-;;;;;;;;2616:285:::0;;:::o;1599:130:0:-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;850:96:7:-;903:7;929:10;922:17;;850:96;:::o;7:75:17:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:117::-;799:1;796;789:12;813:102;854:6;905:2;901:7;896:2;889:5;885:14;881:28;871:38;;813:102;;;:::o;921:180::-;969:77;966:1;959:88;1066:4;1063:1;1056:15;1090:4;1087:1;1080:15;1107:281;1190:27;1212:4;1190:27;:::i;:::-;1182:6;1178:40;1320:6;1308:10;1305:22;1284:18;1272:10;1269:34;1266:62;1263:88;;;1331:18;;:::i;:::-;1263:88;1371:10;1367:2;1360:22;1150:238;1107:281;;:::o;1394:129::-;1428:6;1455:20;;:::i;:::-;1445:30;;1484:33;1512:4;1504:6;1484:33;:::i;:::-;1394:129;;;:::o;1529:340::-;1635:4;1725:18;1717:6;1714:30;1711:56;;;1747:18;;:::i;:::-;1711:56;1797:4;1789:6;1785:17;1777:25;;1857:4;1851;1847:15;1839:23;;1529:340;;;:::o;1875:117::-;1984:1;1981;1974:12;1998:117;2107:1;2104;2097:12;2293:578;2371:5;2415:4;2403:9;2398:3;2394:19;2390:30;2387:117;;;2423:79;;:::i;:::-;2387:117;2522:21;2538:4;2522:21;:::i;:::-;2513:30;;2602:1;2642:49;2687:3;2678:6;2667:9;2663:22;2642:49;:::i;:::-;2635:4;2628:5;2624:16;2617:75;2553:150;2762:2;2803:49;2848:3;2839:6;2828:9;2824:22;2803:49;:::i;:::-;2796:4;2789:5;2785:16;2778:75;2713:151;2293:578;;;;:::o;2928:797::-;3053:5;3078:110;3094:93;3180:6;3094:93;:::i;:::-;3078:110;:::i;:::-;3069:119;;3208:5;3237:6;3230:5;3223:21;3271:4;3264:5;3260:16;3253:23;;3324:4;3316:6;3312:17;3304:6;3300:30;3353:3;3345:6;3342:15;3339:122;;;3372:79;;:::i;:::-;3339:122;3487:6;3470:249;3504:6;3499:3;3496:15;3470:249;;;3579:3;3608:66;3670:3;3658:10;3608:66;:::i;:::-;3603:3;3596:79;3704:4;3699:3;3695:14;3688:21;;3546:173;3530:4;3525:3;3521:14;3514:21;;3470:249;;;3474:21;3059:666;;2928:797;;;;;:::o;3782:428::-;3882:5;3931:3;3924:4;3916:6;3912:17;3908:27;3898:122;;3939:79;;:::i;:::-;3898:122;4056:6;4043:20;4081:123;4200:3;4192:6;4185:4;4177:6;4173:17;4081:123;:::i;:::-;4072:132;;3888:322;3782:428;;;;:::o;4216:742::-;4338:6;4346;4395:2;4383:9;4374:7;4370:23;4366:32;4363:119;;;4401:79;;:::i;:::-;4363:119;4521:1;4546:53;4591:7;4582:6;4571:9;4567:22;4546:53;:::i;:::-;4536:63;;4492:117;4676:2;4665:9;4661:18;4648:32;4707:18;4699:6;4696:30;4693:117;;;4729:79;;:::i;:::-;4693:117;4834:107;4933:7;4924:6;4913:9;4909:22;4834:107;:::i;:::-;4824:117;;4619:332;4216:742;;;;;:::o;4964:126::-;5001:7;5041:42;5034:5;5030:54;5019:65;;4964:126;;;:::o;5096:96::-;5133:7;5162:24;5180:5;5162:24;:::i;:::-;5151:35;;5096:96;;;:::o;5198:122::-;5271:24;5289:5;5271:24;:::i;:::-;5264:5;5261:35;5251:63;;5310:1;5307;5300:12;5251:63;5198:122;:::o;5326:139::-;5372:5;5410:6;5397:20;5388:29;;5426:33;5453:5;5426:33;:::i;:::-;5326:139;;;;:::o;5471:474::-;5539:6;5547;5596:2;5584:9;5575:7;5571:23;5567:32;5564:119;;;5602:79;;:::i;:::-;5564:119;5722:1;5747:53;5792:7;5783:6;5772:9;5768:22;5747:53;:::i;:::-;5737:63;;5693:117;5849:2;5875:53;5920:7;5911:6;5900:9;5896:22;5875:53;:::i;:::-;5865:63;;5820:118;5471:474;;;;;:::o;5951:118::-;6038:24;6056:5;6038:24;:::i;:::-;6033:3;6026:37;5951:118;;:::o;6075:222::-;6168:4;6206:2;6195:9;6191:18;6183:26;;6219:71;6287:1;6276:9;6272:17;6263:6;6219:71;:::i;:::-;6075:222;;;;:::o;6303:90::-;6337:7;6380:5;6373:13;6366:21;6355:32;;6303:90;;;:::o;6399:116::-;6469:21;6484:5;6469:21;:::i;:::-;6462:5;6459:32;6449:60;;6505:1;6502;6495:12;6449:60;6399:116;:::o;6521:133::-;6564:5;6602:6;6589:20;6580:29;;6618:30;6642:5;6618:30;:::i;:::-;6521:133;;;;:::o;6660:613::-;6734:6;6742;6750;6799:2;6787:9;6778:7;6774:23;6770:32;6767:119;;;6805:79;;:::i;:::-;6767:119;6925:1;6950:53;6995:7;6986:6;6975:9;6971:22;6950:53;:::i;:::-;6940:63;;6896:117;7052:2;7078:53;7123:7;7114:6;7103:9;7099:22;7078:53;:::i;:::-;7068:63;;7023:118;7180:2;7206:50;7248:7;7239:6;7228:9;7224:22;7206:50;:::i;:::-;7196:60;;7151:115;6660:613;;;;;:::o;7279:329::-;7338:6;7387:2;7375:9;7366:7;7362:23;7358:32;7355:119;;;7393:79;;:::i;:::-;7355:119;7513:1;7538:53;7583:7;7574:6;7563:9;7559:22;7538:53;:::i;:::-;7528:63;;7484:117;7279:329;;;;:::o;7614:118::-;7651:7;7691:34;7684:5;7680:46;7669:57;;7614:118;;;:::o;7738:122::-;7811:24;7829:5;7811:24;:::i;:::-;7804:5;7801:35;7791:63;;7850:1;7847;7840:12;7791:63;7738:122;:::o;7866:139::-;7912:5;7950:6;7937:20;7928:29;;7966:33;7993:5;7966:33;:::i;:::-;7866:139;;;;:::o;8011:474::-;8079:6;8087;8136:2;8124:9;8115:7;8111:23;8107:32;8104:119;;;8142:79;;:::i;:::-;8104:119;8262:1;8287:53;8332:7;8323:6;8312:9;8308:22;8287:53;:::i;:::-;8277:63;;8233:117;8389:2;8415:53;8460:7;8451:6;8440:9;8436:22;8415:53;:::i;:::-;8405:63;;8360:118;8011:474;;;;;:::o;8491:180::-;8539:77;8536:1;8529:88;8636:4;8633:1;8626:15;8660:4;8657:1;8650:15;8677:118;8764:24;8782:5;8764:24;:::i;:::-;8759:3;8752:37;8677:118;;:::o;8801:222::-;8894:4;8932:2;8921:9;8917:18;8909:26;;8945:71;9013:1;9002:9;8998:17;8989:6;8945:71;:::i;:::-;8801:222;;;;:::o;9029:109::-;9110:21;9125:5;9110:21;:::i;:::-;9105:3;9098:34;9029:109;;:::o;9144:430::-;9287:4;9325:2;9314:9;9310:18;9302:26;;9338:71;9406:1;9395:9;9391:17;9382:6;9338:71;:::i;:::-;9419:72;9487:2;9476:9;9472:18;9463:6;9419:72;:::i;:::-;9501:66;9563:2;9552:9;9548:18;9539:6;9501:66;:::i;:::-;9144:430;;;;;;:::o;9580:169::-;9664:11;9698:6;9693:3;9686:19;9738:4;9733:3;9729:14;9714:29;;9580:169;;;;:::o;9755:225::-;9895:34;9891:1;9883:6;9879:14;9872:58;9964:8;9959:2;9951:6;9947:15;9940:33;9755:225;:::o;9986:366::-;10128:3;10149:67;10213:2;10208:3;10149:67;:::i;:::-;10142:74;;10225:93;10314:3;10225:93;:::i;:::-;10343:2;10338:3;10334:12;10327:19;;9986:366;;;:::o;10358:419::-;10524:4;10562:2;10551:9;10547:18;10539:26;;10611:9;10605:4;10601:20;10597:1;10586:9;10582:17;10575:47;10639:131;10765:4;10639:131;:::i;:::-;10631:139;;10358:419;;;:::o;10783:118::-;10870:24;10888:5;10870:24;:::i;:::-;10865:3;10858:37;10783:118;;:::o;10907:332::-;11028:4;11066:2;11055:9;11051:18;11043:26;;11079:71;11147:1;11136:9;11132:17;11123:6;11079:71;:::i;:::-;11160:72;11228:2;11217:9;11213:18;11204:6;11160:72;:::i;:::-;10907:332;;;;;:::o;11245:182::-;11385:34;11381:1;11373:6;11369:14;11362:58;11245:182;:::o;11433:366::-;11575:3;11596:67;11660:2;11655:3;11596:67;:::i;:::-;11589:74;;11672:93;11761:3;11672:93;:::i;:::-;11790:2;11785:3;11781:12;11774:19;;11433:366;;;:::o;11805:419::-;11971:4;12009:2;11998:9;11994:18;11986:26;;12058:9;12052:4;12048:20;12044:1;12033:9;12029:17;12022:47;12086:131;12212:4;12086:131;:::i;:::-;12078:139;;11805:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"753400","executionCost":"786","totalCost":"754186"},"external":{"owner()":"2522","renounceOwnership()":"30421","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"infinite","settingManagerBool(bytes32,address,bool)":"infinite","transferOwnership(address)":"30788","updateProtocolAddresses(bytes32,address)":"51552","updateProtocolFees(uint128,uint128)":"infinite"}},"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","setSupportedInstitutions(bytes32,(bytes32,bytes32)[])":"32200882","settingManagerBool(bytes32,address,bool)":"99e3c0b4","transferOwnership(address)":"f2fde38b","updateProtocolAddresses(bytes32,address)":"79a0effb","updateProtocolFees(uint128,uint128)":"f5326b19"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThrowZeroValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"protocolFee\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"validatorFeePercent\",\"type\":\"uint128\"}],\"name\":\"PaycrestFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SettingManagerBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"value\",\"type\":\"bytes8\"},{\"indexed\":false,\"internalType\":\"bytes8\",\"name\":\"status\",\"type\":\"bytes8\"}],\"name\":\"SettingManagerForInstitution\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currency\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"internalType\":\"struct PaycrestSettingManager.Institution[]\",\"name\":\"institutions\",\"type\":\"tuple[]\"}],\"name\":\"setSupportedInstitutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"settingManagerBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"updateProtocolAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_protocolFeePercent\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_validatorFeePercent\",\"type\":\"uint128\"}],\"name\":\"updateProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"AmountIsZero()\":[{\"notice\":\"Revert when input amount is zero\"}],\"InvalidParameter(bytes32)\":[{\"notice\":\"Revert when zero address is passed in\"}],\"ThrowZeroAddress()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"ThrowZeroValue()\":[{\"notice\":\"Revert when zero address is passed in\"}],\"TokenNotSupported()\":[{\"notice\":\"Revert when invalid token is provided\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaycrestSettingManager.sol\":\"PaycrestSettingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PaycrestSettingManager.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract PaycrestSettingManager is OwnableUpgradeable { \\n    struct Institution {\\n        bytes32 code; // usually not more than 8 letters\\n        bytes32 name; // \\n    }\\n    struct InstitutionByCode {\\n        bytes32 name;\\n        bytes32 currency;\\n    }\\n    uint256 internal MAX_BPS;\\n    uint128 internal protocolFeePercent; // 5%\\n    uint128 internal validatorFeePercent; // 0.5%\\n    address internal feeRecipient;\\n    address internal _liquidityAggregator;\\n\\n    mapping(address => bool) internal _isTokenSupported;\\n    mapping(address => bool) internal _isWhitelisted;\\n\\n    mapping(bytes32 => Institution[]) internal supportedInstitutions;\\n    mapping(bytes32 => InstitutionByCode) internal supportedInstitutionsByCode;\\n\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroAddress();\\n    /// @notice Revert when zero address is passed in\\n    error ThrowZeroValue();\\n    /// @notice Revert when zero address is passed in\\n    error InvalidParameter(bytes32 what);\\n    /// @notice Revert when invalid token is provided\\n    error TokenNotSupported();\\n    /// @notice Revert when input amount is zero\\n    error AmountIsZero();\\n\\n    event SettingManagerBool(bytes32 what, address value, bool status);\\n    event SettingManagerForInstitution(bytes32 what, bytes8 value, bytes8 status);\\n    event PaycrestFees(uint128 protocolFee, uint128 validatorFeePercent);\\n    \\n    /* ##################################################################\\n                                OWNER FUNCTIONS\\n    ################################################################## */\\n    function settingManagerBool(bytes32 what, address value, bool status) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"token\\\") _isTokenSupported[value] = status;\\n        if (what == \\\"whitelist\\\") _isWhitelisted[value] = status;\\n        else revert InvalidParameter(what);\\n        emit SettingManagerBool(what, value, status);\\n    }\\n\\n    function setSupportedInstitutions(bytes32 currency, Institution[] memory institutions) external onlyOwner { \\n        uint256 length = institutions.length;\\n        for (uint i = 0; i < length; ) {\\n            supportedInstitutions[currency].push(institutions[i]);\\n            supportedInstitutionsByCode[institutions[i].code] = InstitutionByCode({\\n                name: institutions[i].name, currency: currency\\n            });\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function updateProtocolFees(uint128 _protocolFeePercent, uint128 _validatorFeePercent) external onlyOwner {\\n        protocolFeePercent = _protocolFeePercent;\\n        validatorFeePercent = _validatorFeePercent;\\n        emit PaycrestFees(_protocolFeePercent, _validatorFeePercent);\\n    }\\n\\n    function updateProtocolAddresses(bytes32 what, address value) external onlyOwner {\\n        if (value == address(0)) revert ThrowZeroAddress();\\n        if (what == \\\"fee\\\") feeRecipient = value;\\n        if (what == \\\"aggregator\\\") _liquidityAggregator = value;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf22889996d424921485a42095cd138ff97b5dbe6ef8aa13ae719cda1950cf851\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":3640,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"MAX_BPS","offset":0,"slot":"101","type":"t_uint256"},{"astId":3642,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"protocolFeePercent","offset":0,"slot":"102","type":"t_uint128"},{"astId":3644,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"validatorFeePercent","offset":16,"slot":"102","type":"t_uint128"},{"astId":3646,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"feeRecipient","offset":0,"slot":"103","type":"t_address"},{"astId":3648,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_liquidityAggregator","offset":0,"slot":"104","type":"t_address"},{"astId":3652,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isTokenSupported","offset":0,"slot":"105","type":"t_mapping(t_address,t_bool)"},{"astId":3656,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"_isWhitelisted","offset":0,"slot":"106","type":"t_mapping(t_address,t_bool)"},{"astId":3662,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutions","offset":0,"slot":"107","type":"t_mapping(t_bytes32,t_array(t_struct(Institution)3633_storage)dyn_storage)"},{"astId":3667,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"supportedInstitutionsByCode","offset":0,"slot":"108","type":"t_mapping(t_bytes32,t_struct(InstitutionByCode)3638_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Institution)3633_storage)dyn_storage":{"base":"t_struct(Institution)3633_storage","encoding":"dynamic_array","label":"struct PaycrestSettingManager.Institution[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_array(t_struct(Institution)3633_storage)dyn_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.Institution[])","numberOfBytes":"32","value":"t_array(t_struct(Institution)3633_storage)dyn_storage"},"t_mapping(t_bytes32,t_struct(InstitutionByCode)3638_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PaycrestSettingManager.InstitutionByCode)","numberOfBytes":"32","value":"t_struct(InstitutionByCode)3638_storage"},"t_struct(Institution)3633_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.Institution","members":[{"astId":3630,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"code","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3632,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(InstitutionByCode)3638_storage":{"encoding":"inplace","label":"struct PaycrestSettingManager.InstitutionByCode","members":[{"astId":3635,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"name","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3637,"contract":"contracts/PaycrestSettingManager.sol:PaycrestSettingManager","label":"currency","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint128":{"encoding":"inplace","label":"uint128","numberOfBytes":"16"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"errors":{"AmountIsZero()":[{"notice":"Revert when input amount is zero"}],"InvalidParameter(bytes32)":[{"notice":"Revert when zero address is passed in"}],"ThrowZeroAddress()":[{"notice":"Revert when zero address is passed in"}],"ThrowZeroValue()":[{"notice":"Revert when zero address is passed in"}],"TokenNotSupported()":[{"notice":"Revert when invalid token is provided"}]},"kind":"user","methods":{},"version":1}}},"contracts/PaycrestValidator.sol":{"PaycrestValidator":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bool","name":"status","type":"bool"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"minimumStakeAmount","type":"uint256"}],"name":"NewTokenSupported","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"validatorsReward","type":"uint256"}],"name":"RewardValidators","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"getInitializationState","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getMinimumAmountRequiredFor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaycrest","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"address","name":"token","type":"address"}],"name":"getValidatorInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_paycrest","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"status","type":"bool"}],"name":"initialized","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"minimumStakeAmount","type":"uint256"}],"name":"setMinimumAmountForTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"constructor":{"custom:oz-upgrades-unsafe-allow":"constructor"},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_3912":{"entryPoint":null,"id":3912,"parameterSlots":0,"returnSlots":0},"@_disableInitializers_281":{"entryPoint":40,"id":281,"parameterSlots":0,"returnSlots":0},"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack":{"entryPoint":334,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":420,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":373,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":437,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":238,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":407,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a":{"entryPoint":255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1638:17","statements":[{"body":{"nodeType":"YulBlock","src":"103:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"120:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"125:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"113:6:17"},"nodeType":"YulFunctionCall","src":"113:19:17"},"nodeType":"YulExpressionStatement","src":"113:19:17"},{"nodeType":"YulAssignment","src":"141:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"160:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"165:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"156:3:17"},"nodeType":"YulFunctionCall","src":"156:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"141:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"75:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"80:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"91:11:17","type":""}],"src":"7:169:17"},{"body":{"nodeType":"YulBlock","src":"288:120:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"310:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"318:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"306:3:17"},"nodeType":"YulFunctionCall","src":"306:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469","kind":"string","nodeType":"YulLiteral","src":"322:34:17","type":"","value":"Initializable: contract is initi"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"299:6:17"},"nodeType":"YulFunctionCall","src":"299:58:17"},"nodeType":"YulExpressionStatement","src":"299:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"378:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"386:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:17"},"nodeType":"YulFunctionCall","src":"374:15:17"},{"hexValue":"616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"391:9:17","type":"","value":"alizing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"367:6:17"},"nodeType":"YulFunctionCall","src":"367:34:17"},"nodeType":"YulExpressionStatement","src":"367:34:17"}]},"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"280:6:17","type":""}],"src":"182:226:17"},{"body":{"nodeType":"YulBlock","src":"560:220:17","statements":[{"nodeType":"YulAssignment","src":"570:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"636:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"641:2:17","type":"","value":"39"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"577:58:17"},"nodeType":"YulFunctionCall","src":"577:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"570:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"742:3:17"}],"functionName":{"name":"store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","nodeType":"YulIdentifier","src":"653:88:17"},"nodeType":"YulFunctionCall","src":"653:93:17"},"nodeType":"YulExpressionStatement","src":"653:93:17"},{"nodeType":"YulAssignment","src":"755:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"766:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"771:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"762:3:17"},"nodeType":"YulFunctionCall","src":"762:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"755:3:17"}]}]},"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"548:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"556:3:17","type":""}],"src":"414:366:17"},{"body":{"nodeType":"YulBlock","src":"957:248:17","statements":[{"nodeType":"YulAssignment","src":"967:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"979:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"990:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"975:3:17"},"nodeType":"YulFunctionCall","src":"975:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"967:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1014:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1025:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1010:3:17"},"nodeType":"YulFunctionCall","src":"1010:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1033:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1039:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1029:3:17"},"nodeType":"YulFunctionCall","src":"1029:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1003:6:17"},"nodeType":"YulFunctionCall","src":"1003:47:17"},"nodeType":"YulExpressionStatement","src":"1003:47:17"},{"nodeType":"YulAssignment","src":"1059:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1193:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1067:124:17"},"nodeType":"YulFunctionCall","src":"1067:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1059:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"937:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"952:4:17","type":""}],"src":"786:419:17"},{"body":{"nodeType":"YulBlock","src":"1254:43:17","statements":[{"nodeType":"YulAssignment","src":"1264:27:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1279:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"1286:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1275:3:17"},"nodeType":"YulFunctionCall","src":"1275:16:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1264:7:17"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1236:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1246:7:17","type":""}],"src":"1211:86:17"},{"body":{"nodeType":"YulBlock","src":"1364:51:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1381:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1402:5:17"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"1386:15:17"},"nodeType":"YulFunctionCall","src":"1386:22:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1374:6:17"},"nodeType":"YulFunctionCall","src":"1374:35:17"},"nodeType":"YulExpressionStatement","src":"1374:35:17"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1352:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1359:3:17","type":""}],"src":"1303:112:17"},{"body":{"nodeType":"YulBlock","src":"1515:120:17","statements":[{"nodeType":"YulAssignment","src":"1525:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1537:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1548:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1533:3:17"},"nodeType":"YulFunctionCall","src":"1533:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1525:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1601:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1614:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"1625:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1610:3:17"},"nodeType":"YulFunctionCall","src":"1610:17:17"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"1561:39:17"},"nodeType":"YulFunctionCall","src":"1561:67:17"},"nodeType":"YulExpressionStatement","src":"1561:67:17"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1487:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1499:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1510:4:17","type":""}],"src":"1421:214:17"}]},"contents":"{\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is initi\")\n\n        mstore(add(memPtr, 32), \"alizing\")\n\n    }\n\n    function abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 39)\n        store_literal_in_memory_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b6118e780620001e26000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c4d66de811610071578063c4d66de814610153578063c56f80c11461016f578063c5923aaf1461018d578063e74599f3146101bd578063f239c626146101ed578063f2fde38b14610209576100b4565b8063715018a6146100b95780638da5cb5b146100c3578063adc9772e146100e1578063b460af94146100fd578063c2b4610b14610119578063c4a0bb0714610137575b600080fd5b6100c1610225565b005b6100cb610239565b6040516100d89190610fd3565b60405180910390f35b6100fb60048036038101906100f69190611055565b610263565b005b61011760048036038101906101129190611095565b6104d8565b005b610121610708565b60405161012e9190611103565b60405180910390f35b610151600480360381019061014c919061114a565b61071f565b005b61016d60048036038101906101689190611177565b610773565b005b610177610916565b6040516101849190610fd3565b60405180910390f35b6101a760048036038101906101a291906111a4565b610940565b6040516101b491906111f3565b60405180910390f35b6101d760048036038101906101d29190611177565b6109c7565b6040516101e491906111f3565b60405180910390f35b61020760048036038101906102029190611055565b610a10565b005b610223600480360381019061021e9190611177565b610aa4565b005b61022d610b27565b6102376000610ba5565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609760149054906101000a900460ff166102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a99061126b565b60405180910390fd5b6102bb82610c6b565b6102fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f1906112d7565b60405180910390fd5b609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481101561037c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037390611369565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103b993929190611389565b6020604051808303816000875af11580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc91906113d5565b5080609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104899190611431565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a35050565b6104e0610da2565b6000609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808411156105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059b906114b1565b60405180910390fd5b83609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461063091906114d1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83866040518363ffffffff1660e01b8152600401610672929190611505565b6020604051808303816000875af1158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906113d5565b50833373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d560405160405180910390a350610703610df1565b505050565b6000609760149054906101000a900460ff16905090565b610727610b27565b80609760146101000a81548160ff0219169083151502179055508015157fdebf9dd297d3980055770d6c047a67eed8f6b1e91397831703b5f2a73bec132060405160405180910390a250565b60008060019054906101000a900460ff161590508080156107a45750600160008054906101000a900460ff1660ff16105b806107d157506107b330610dfb565b1580156107d05750600160008054906101000a900460ff1660ff16145b5b610810576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610807906115a0565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561084d576001600060016101000a81548160ff0219169083151502179055505b81609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001609760146101000a81548160ff0219169083151502179055506108b1610e1e565b6108b9610e77565b80156109125760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109099190611612565b60405180910390a15b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a18610b27565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff167fd0380f7d3d322fabf37539b9c6b985c069348a14121a426f3cceb8b5a93cd9ab60405160405180910390a35050565b610aac610b27565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b129061169f565b60405180910390fd5b610b2481610ba5565b50565b610b2f610ed0565b73ffffffffffffffffffffffffffffffffffffffff16610b4d610239565b73ffffffffffffffffffffffffffffffffffffffff1614610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a9061170b565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051602401610cb89190610fd3565b6040516020818303038152906040527f75151b63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d42919061179c565b600060405180830381855afa9150503d8060008114610d7d576040519150601f19603f3d011682016040523d82523d6000602084013e610d82565b606091505b5091505080806020019051810190610d9a91906113d5565b915050919050565b600260655403610de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dde906117ff565b60405180910390fd5b6002606581905550565b6001606581905550565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6490611891565b60405180910390fd5b610e75610ed8565b565b600060019054906101000a900460ff16610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd90611891565b60405180910390fd5b610ece610f39565b565b600033905090565b600060019054906101000a900460ff16610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e90611891565b60405180910390fd5b610f37610f32610ed0565b610ba5565b565b600060019054906101000a900460ff16610f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7f90611891565b60405180910390fd5b6001606581905550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fbd82610f92565b9050919050565b610fcd81610fb2565b82525050565b6000602082019050610fe86000830184610fc4565b92915050565b600080fd5b610ffc81610fb2565b811461100757600080fd5b50565b60008135905061101981610ff3565b92915050565b6000819050919050565b6110328161101f565b811461103d57600080fd5b50565b60008135905061104f81611029565b92915050565b6000806040838503121561106c5761106b610fee565b5b600061107a8582860161100a565b925050602061108b85828601611040565b9150509250929050565b6000806000606084860312156110ae576110ad610fee565b5b60006110bc86828701611040565b93505060206110cd8682870161100a565b92505060406110de8682870161100a565b9150509250925092565b60008115159050919050565b6110fd816110e8565b82525050565b600060208201905061111860008301846110f4565b92915050565b611127816110e8565b811461113257600080fd5b50565b6000813590506111448161111e565b92915050565b6000602082840312156111605761115f610fee565b5b600061116e84828501611135565b91505092915050565b60006020828403121561118d5761118c610fee565b5b600061119b8482850161100a565b91505092915050565b600080604083850312156111bb576111ba610fee565b5b60006111c98582860161100a565b92505060206111da8582860161100a565b9150509250929050565b6111ed8161101f565b82525050565b600060208201905061120860008301846111e4565b92915050565b600082825260208201905092915050565b7f496e697469616c697a6174696f6e206973207061757365640000000000000000600082015250565b600061125560188361120e565b91506112608261121f565b602082019050919050565b6000602082019050818103600083015261128481611248565b9050919050565b7f546f6b656e206973206e6f7420737570706f7274656400000000000000000000600082015250565b60006112c160168361120e565b91506112cc8261128b565b602082019050919050565b600060208201905081810360008301526112f0816112b4565b9050919050565b7f416d6f756e74206973206c657373207468616e206d696e696d756d207265717560008201527f6972656400000000000000000000000000000000000000000000000000000000602082015250565b600061135360248361120e565b915061135e826112f7565b604082019050919050565b6000602082019050818103600083015261138281611346565b9050919050565b600060608201905061139e6000830186610fc4565b6113ab6020830185610fc4565b6113b860408301846111e4565b949350505050565b6000815190506113cf8161111e565b92915050565b6000602082840312156113eb576113ea610fee565b5b60006113f9848285016113c0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061143c8261101f565b91506114478361101f565b925082820190508082111561145f5761145e611402565b5b92915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061149b60148361120e565b91506114a682611465565b602082019050919050565b600060208201905081810360008301526114ca8161148e565b9050919050565b60006114dc8261101f565b91506114e78361101f565b92508282039050818111156114ff576114fe611402565b5b92915050565b600060408201905061151a6000830185610fc4565b61152760208301846111e4565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061158a602e8361120e565b91506115958261152e565b604082019050919050565b600060208201905081810360008301526115b98161157d565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006115fc6115f76115f2846115c0565b6115d7565b6115ca565b9050919050565b61160c816115e1565b82525050565b60006020820190506116276000830184611603565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061168960268361120e565b91506116948261162d565b604082019050919050565b600060208201905081810360008301526116b88161167c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116f560208361120e565b9150611700826116bf565b602082019050919050565b60006020820190508181036000830152611724816116e8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561175f578082015181840152602081019050611744565b60008484015250505050565b60006117768261172b565b6117808185611736565b9350611790818560208601611741565b80840191505092915050565b60006117a8828461176b565b915081905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006117e9601f8361120e565b91506117f4826117b3565b602082019050919050565b60006020820190508181036000830152611818816117dc565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061187b602b8361120e565b91506118868261181f565b604082019050919050565b600060208201905081810360008301526118aa8161186e565b905091905056fea26469706673582212207bc6e88ed2538f594ece330f2a5fe838a73f8b52ec73ada42f59d472b299317c64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x22 PUSH3 0x28 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x1D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x72 SWAP1 PUSH3 0x175 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xFF DUP1 AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ PUSH3 0xEC JUMPI PUSH1 0xFF PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH3 0xE3 SWAP2 SWAP1 PUSH3 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320696E697469 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C697A696E6700000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x15D PUSH1 0x27 DUP4 PUSH3 0xEE JUMP JUMPDEST SWAP2 POP PUSH3 0x16A DUP3 PUSH3 0xFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x190 DUP2 PUSH3 0x14E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x1AF DUP2 PUSH3 0x197 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1CC PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x1A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x18E7 DUP1 PUSH3 0x1E2 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xC56F80C1 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0xC5923AAF EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0xE74599F3 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0xF239C626 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x209 JUMPI PUSH2 0xB4 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xADC9772E EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0xC2B4610B EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0xC4A0BB07 EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x225 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCB PUSH2 0x239 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x112 SWAP2 SWAP1 PUSH2 0x1095 JUMP JUMPDEST PUSH2 0x4D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x121 PUSH2 0x708 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12E SWAP2 SWAP1 PUSH2 0x1103 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x151 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14C SWAP2 SWAP1 PUSH2 0x114A JUMP JUMPDEST PUSH2 0x71F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0x773 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x177 PUSH2 0x916 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x184 SWAP2 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A2 SWAP2 SWAP1 PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x940 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B4 SWAP2 SWAP1 PUSH2 0x11F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0x9C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E4 SWAP2 SWAP1 PUSH2 0x11F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x207 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x202 SWAP2 SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH2 0xA10 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x223 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0xAA4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22D PUSH2 0xB27 JUMP JUMPDEST PUSH2 0x237 PUSH1 0x0 PUSH2 0xBA5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x97 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A9 SWAP1 PUSH2 0x126B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2BB DUP3 PUSH2 0xC6B JUMP JUMPDEST PUSH2 0x2FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F1 SWAP1 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x98 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x37C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x373 SWAP1 PUSH2 0x1369 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x13D5 JUMP JUMPDEST POP DUP1 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x489 SWAP2 SWAP1 PUSH2 0x1431 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x4E0 PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59B SWAP1 PUSH2 0x14B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x630 SWAP2 SWAP1 PUSH2 0x14D1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x672 SWAP3 SWAP2 SWAP1 PUSH2 0x1505 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6B5 SWAP2 SWAP1 PUSH2 0x13D5 JUMP JUMPDEST POP DUP4 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH2 0x703 PUSH2 0xDF1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x727 PUSH2 0xB27 JUMP JUMPDEST DUP1 PUSH1 0x97 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO ISZERO PUSH32 0xDEBF9DD297D3980055770D6C047A67EED8F6B1E91397831703B5F2A73BEC1320 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x7A4 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x7D1 JUMPI POP PUSH2 0x7B3 ADDRESS PUSH2 0xDFB JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x7D0 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x810 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x807 SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x84D JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP2 PUSH1 0x97 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x97 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x8B1 PUSH2 0xE1E JUMP JUMPDEST PUSH2 0x8B9 PUSH2 0xE77 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x909 SWAP2 SWAP1 PUSH2 0x1612 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x98 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA18 PUSH2 0xB27 JUMP JUMPDEST DUP1 PUSH1 0x98 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD0380F7D3D322FABF37539B9C6B985C069348A14121A426F3CCEB8B5A93CD9AB PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xAAC PUSH2 0xB27 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB1B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB12 SWAP1 PUSH2 0x169F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB24 DUP2 PUSH2 0xBA5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xB2F PUSH2 0xED0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB4D PUSH2 0x239 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9A SWAP1 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xCB8 SWAP2 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x75151B6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0xD42 SWAP2 SWAP1 PUSH2 0x179C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD7D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD82 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD9A SWAP2 SWAP1 PUSH2 0x13D5 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x65 SLOAD SUB PUSH2 0xDE7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDDE SWAP1 PUSH2 0x17FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE64 SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE75 PUSH2 0xED8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEC6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEBD SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xECE PUSH2 0xF39 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1E SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF37 PUSH2 0xF32 PUSH2 0xED0 JUMP JUMPDEST PUSH2 0xBA5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF88 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF7F SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBD DUP3 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFCD DUP2 PUSH2 0xFB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xFC4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFFC DUP2 PUSH2 0xFB2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1019 DUP2 PUSH2 0xFF3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1032 DUP2 PUSH2 0x101F JUMP JUMPDEST DUP2 EQ PUSH2 0x103D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x104F DUP2 PUSH2 0x1029 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x106C JUMPI PUSH2 0x106B PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x107A DUP6 DUP3 DUP7 ADD PUSH2 0x100A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x108B DUP6 DUP3 DUP7 ADD PUSH2 0x1040 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x10AE JUMPI PUSH2 0x10AD PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10BC DUP7 DUP3 DUP8 ADD PUSH2 0x1040 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x10CD DUP7 DUP3 DUP8 ADD PUSH2 0x100A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x10DE DUP7 DUP3 DUP8 ADD PUSH2 0x100A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10FD DUP2 PUSH2 0x10E8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1118 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1127 DUP2 PUSH2 0x10E8 JUMP JUMPDEST DUP2 EQ PUSH2 0x1132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1144 DUP2 PUSH2 0x111E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1160 JUMPI PUSH2 0x115F PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x116E DUP5 DUP3 DUP6 ADD PUSH2 0x1135 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x118D JUMPI PUSH2 0x118C PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x119B DUP5 DUP3 DUP6 ADD PUSH2 0x100A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11BB JUMPI PUSH2 0x11BA PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x11C9 DUP6 DUP3 DUP7 ADD PUSH2 0x100A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x11DA DUP6 DUP3 DUP7 ADD PUSH2 0x100A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x11ED DUP2 PUSH2 0x101F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1208 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A6174696F6E206973207061757365640000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1255 PUSH1 0x18 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1260 DUP3 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1284 DUP2 PUSH2 0x1248 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E206973206E6F7420737570706F7274656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12C1 PUSH1 0x16 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x12CC DUP3 PUSH2 0x128B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12F0 DUP2 PUSH2 0x12B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E74206973206C657373207468616E206D696E696D756D2072657175 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6972656400000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1353 PUSH1 0x24 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x135E DUP3 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1382 DUP2 PUSH2 0x1346 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x139E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xFC4 JUMP JUMPDEST PUSH2 0x13AB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xFC4 JUMP JUMPDEST PUSH2 0x13B8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x11E4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x13CF DUP2 PUSH2 0x111E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13EB JUMPI PUSH2 0x13EA PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x13F9 DUP5 DUP3 DUP6 ADD PUSH2 0x13C0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x143C DUP3 PUSH2 0x101F JUMP JUMPDEST SWAP2 POP PUSH2 0x1447 DUP4 PUSH2 0x101F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x145F JUMPI PUSH2 0x145E PUSH2 0x1402 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x149B PUSH1 0x14 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x14A6 DUP3 PUSH2 0x1465 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14CA DUP2 PUSH2 0x148E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14DC DUP3 PUSH2 0x101F JUMP JUMPDEST SWAP2 POP PUSH2 0x14E7 DUP4 PUSH2 0x101F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x14FF JUMPI PUSH2 0x14FE PUSH2 0x1402 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x151A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xFC4 JUMP JUMPDEST PUSH2 0x1527 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x11E4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158A PUSH1 0x2E DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1595 DUP3 PUSH2 0x152E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15B9 DUP2 PUSH2 0x157D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15FC PUSH2 0x15F7 PUSH2 0x15F2 DUP5 PUSH2 0x15C0 JUMP JUMPDEST PUSH2 0x15D7 JUMP JUMPDEST PUSH2 0x15CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x160C DUP2 PUSH2 0x15E1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1627 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1603 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1689 PUSH1 0x26 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1694 DUP3 PUSH2 0x162D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16B8 DUP2 PUSH2 0x167C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F5 PUSH1 0x20 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1700 DUP3 PUSH2 0x16BF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1724 DUP2 PUSH2 0x16E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x175F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1744 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1776 DUP3 PUSH2 0x172B JUMP JUMPDEST PUSH2 0x1780 DUP2 DUP6 PUSH2 0x1736 JUMP JUMPDEST SWAP4 POP PUSH2 0x1790 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1741 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17A8 DUP3 DUP5 PUSH2 0x176B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E9 PUSH1 0x1F DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x17F4 DUP3 PUSH2 0x17B3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1818 DUP2 PUSH2 0x17DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x187B PUSH1 0x2B DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1886 DUP3 PUSH2 0x181F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18AA DUP2 PUSH2 0x186E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0xC6E88ED2538F594ECE330F2A5FE838A73F8B52EC73ADA42F59D472B2 SWAP10 BALANCE PUSH29 0x64736F6C63430008120033000000000000000000000000000000000000 ","sourceMap":"395:3159:15:-:0;;;816:53;;;;;;;;;;840:22;:20;;;:22;;:::i;:::-;395:3159;;5939:280:1;6007:13;;;;;;;;;;;6006:14;5998:66;;;;;;;;;;;;:::i;:::-;;;;;;;;;6094:15;6078:31;;:12;;;;;;;;;;:31;;;6074:139;;6140:15;6125:12;;:30;;;;;;;;;;;;;;;;;;6174:28;6186:15;6174:28;;;;;;:::i;:::-;;;;;;;;6074:139;5939:280::o;7:169:17:-;91:11;125:6;120:3;113:19;165:4;160:3;156:14;141:29;;7:169;;;;:::o;182:226::-;322:34;318:1;310:6;306:14;299:58;391:9;386:2;378:6;374:15;367:34;182:226;:::o;414:366::-;556:3;577:67;641:2;636:3;577:67;:::i;:::-;570:74;;653:93;742:3;653:93;:::i;:::-;771:2;766:3;762:12;755:19;;414:366;;;:::o;786:419::-;952:4;990:2;979:9;975:18;967:26;;1039:9;1033:4;1029:20;1025:1;1014:9;1010:17;1003:47;1067:131;1193:4;1067:131;:::i;:::-;1059:139;;786:419;;;:::o;1211:86::-;1246:7;1286:4;1279:5;1275:16;1264:27;;1211:86;;;:::o;1303:112::-;1386:22;1402:5;1386:22;:::i;:::-;1381:3;1374:35;1303:112;;:::o;1421:214::-;1510:4;1548:2;1537:9;1533:18;1525:26;;1561:67;1625:1;1614:9;1610:17;1601:6;1561:67;:::i;:::-;1421:214;;;;:::o;395:3159:15:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__Ownable_init_26":{"entryPoint":3614,"id":26,"parameterSlots":0,"returnSlots":0},"@__Ownable_init_unchained_37":{"entryPoint":3800,"id":37,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_323":{"entryPoint":3703,"id":323,"parameterSlots":0,"returnSlots":0},"@__ReentrancyGuard_init_unchained_333":{"entryPoint":3897,"id":333,"parameterSlots":0,"returnSlots":0},"@_checkOwner_68":{"entryPoint":2855,"id":68,"parameterSlots":0,"returnSlots":0},"@_isTokenSupported_4150":{"entryPoint":3179,"id":4150,"parameterSlots":1,"returnSlots":1},"@_msgSender_1231":{"entryPoint":3792,"id":1231,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_367":{"entryPoint":3569,"id":367,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_359":{"entryPoint":3490,"id":359,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_125":{"entryPoint":2981,"id":125,"parameterSlots":1,"returnSlots":0},"@getInitializationState_4166":{"entryPoint":1800,"id":4166,"parameterSlots":0,"returnSlots":1},"@getMinimumAmountRequiredFor_4178":{"entryPoint":2503,"id":4178,"parameterSlots":1,"returnSlots":1},"@getPaycrest_4158":{"entryPoint":2326,"id":4158,"parameterSlots":0,"returnSlots":1},"@getValidatorInfo_4194":{"entryPoint":2368,"id":4194,"parameterSlots":2,"returnSlots":1},"@initialize_3934":{"entryPoint":1907,"id":3934,"parameterSlots":1,"returnSlots":0},"@initialized_4015":{"entryPoint":1823,"id":4015,"parameterSlots":1,"returnSlots":0},"@isContract_892":{"entryPoint":3579,"id":892,"parameterSlots":1,"returnSlots":1},"@owner_54":{"entryPoint":569,"id":54,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_82":{"entryPoint":549,"id":82,"parameterSlots":0,"returnSlots":0},"@setMinimumAmountForTokens_3999":{"entryPoint":2576,"id":3999,"parameterSlots":2,"returnSlots":0},"@stake_4072":{"entryPoint":611,"id":4072,"parameterSlots":2,"returnSlots":0},"@transferOwnership_105":{"entryPoint":2724,"id":105,"parameterSlots":1,"returnSlots":0},"@withdraw_4123":{"entryPoint":1240,"id":4123,"parameterSlots":3,"returnSlots":0},"abi_decode_t_address":{"entryPoint":4106,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":4405,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":5056,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":4160,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4471,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4516,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4181,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool":{"entryPoint":4426,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":5077,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_addresst_address":{"entryPoint":4245,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":4036,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":4340,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":5995,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack":{"entryPoint":5635,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54_to_t_string_memory_ptr_fromStack":{"entryPoint":4788,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":5756,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack":{"entryPoint":5262,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae_to_t_string_memory_ptr_fromStack":{"entryPoint":4934,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack":{"entryPoint":5501,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":5864,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack":{"entryPoint":6254,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d_to_t_string_memory_ptr_fromStack":{"entryPoint":4680,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack":{"entryPoint":6108,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":4580,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6044,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":4051,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":5001,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":5381,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":4355,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed":{"entryPoint":5650,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4823,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5791,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5297,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4969,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5536,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5899,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6289,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4715,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6143,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":4595,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":5931,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":5942,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":4622,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5169,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5329,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":4018,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":4328,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_rational_1_by_1":{"entryPoint":5568,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3986,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4127,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":5578,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_rational_1_by_1_to_t_uint8":{"entryPoint":5601,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5953,"id":null,"parameterSlots":3,"returnSlots":0},"identity":{"entryPoint":5591,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5122,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":4078,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54":{"entryPoint":4747,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":5677,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5":{"entryPoint":5221,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae":{"entryPoint":4855,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759":{"entryPoint":5422,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":5823,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b":{"entryPoint":6175,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d":{"entryPoint":4639,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619":{"entryPoint":6067,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":4083,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":4382,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":4137,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17866:17","statements":[{"body":{"nodeType":"YulBlock","src":"52:81:17","statements":[{"nodeType":"YulAssignment","src":"62:65:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"77:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"84:42:17","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"73:3:17"},"nodeType":"YulFunctionCall","src":"73:54:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:17"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:17","type":""}],"src":"7:126:17"},{"body":{"nodeType":"YulBlock","src":"184:51:17","statements":[{"nodeType":"YulAssignment","src":"194:35:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:17"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"205:17:17"},"nodeType":"YulFunctionCall","src":"205:24:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"194:7:17"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"166:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"176:7:17","type":""}],"src":"139:96:17"},{"body":{"nodeType":"YulBlock","src":"306:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"323:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"346:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"328:17:17"},"nodeType":"YulFunctionCall","src":"328:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"316:6:17"},"nodeType":"YulFunctionCall","src":"316:37:17"},"nodeType":"YulExpressionStatement","src":"316:37:17"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"294:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"301:3:17","type":""}],"src":"241:118:17"},{"body":{"nodeType":"YulBlock","src":"463:124:17","statements":[{"nodeType":"YulAssignment","src":"473:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"485:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"496:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"481:3:17"},"nodeType":"YulFunctionCall","src":"481:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"473:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"553:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"566:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"577:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"562:3:17"},"nodeType":"YulFunctionCall","src":"562:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"509:43:17"},"nodeType":"YulFunctionCall","src":"509:71:17"},"nodeType":"YulExpressionStatement","src":"509:71:17"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"435:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"447:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"458:4:17","type":""}],"src":"365:222:17"},{"body":{"nodeType":"YulBlock","src":"633:35:17","statements":[{"nodeType":"YulAssignment","src":"643:19:17","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"659:2:17","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"653:5:17"},"nodeType":"YulFunctionCall","src":"653:9:17"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"643:6:17"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"626:6:17","type":""}],"src":"593:75:17"},{"body":{"nodeType":"YulBlock","src":"763:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"780:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"783:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"773:6:17"},"nodeType":"YulFunctionCall","src":"773:12:17"},"nodeType":"YulExpressionStatement","src":"773:12:17"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"674:117:17"},{"body":{"nodeType":"YulBlock","src":"886:28:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"903:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"906:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"896:6:17"},"nodeType":"YulFunctionCall","src":"896:12:17"},"nodeType":"YulExpressionStatement","src":"896:12:17"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"797:117:17"},{"body":{"nodeType":"YulBlock","src":"963:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"1020:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1029:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1032:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1022:6:17"},"nodeType":"YulFunctionCall","src":"1022:12:17"},"nodeType":"YulExpressionStatement","src":"1022:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"986:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1011:5:17"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"993:17:17"},"nodeType":"YulFunctionCall","src":"993:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"983:2:17"},"nodeType":"YulFunctionCall","src":"983:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"976:6:17"},"nodeType":"YulFunctionCall","src":"976:43:17"},"nodeType":"YulIf","src":"973:63:17"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"956:5:17","type":""}],"src":"920:122:17"},{"body":{"nodeType":"YulBlock","src":"1100:87:17","statements":[{"nodeType":"YulAssignment","src":"1110:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1132:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1119:12:17"},"nodeType":"YulFunctionCall","src":"1119:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1110:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1175:5:17"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1148:26:17"},"nodeType":"YulFunctionCall","src":"1148:33:17"},"nodeType":"YulExpressionStatement","src":"1148:33:17"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1078:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"1086:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1094:5:17","type":""}],"src":"1048:139:17"},{"body":{"nodeType":"YulBlock","src":"1238:32:17","statements":[{"nodeType":"YulAssignment","src":"1248:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"1259:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1248:7:17"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1220:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1230:7:17","type":""}],"src":"1193:77:17"},{"body":{"nodeType":"YulBlock","src":"1319:79:17","statements":[{"body":{"nodeType":"YulBlock","src":"1376:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1385:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1388:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1378:6:17"},"nodeType":"YulFunctionCall","src":"1378:12:17"},"nodeType":"YulExpressionStatement","src":"1378:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1342:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1367:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1349:17:17"},"nodeType":"YulFunctionCall","src":"1349:24:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1339:2:17"},"nodeType":"YulFunctionCall","src":"1339:35:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1332:6:17"},"nodeType":"YulFunctionCall","src":"1332:43:17"},"nodeType":"YulIf","src":"1329:63:17"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1312:5:17","type":""}],"src":"1276:122:17"},{"body":{"nodeType":"YulBlock","src":"1456:87:17","statements":[{"nodeType":"YulAssignment","src":"1466:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1488:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1475:12:17"},"nodeType":"YulFunctionCall","src":"1475:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1466:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1531:5:17"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1504:26:17"},"nodeType":"YulFunctionCall","src":"1504:33:17"},"nodeType":"YulExpressionStatement","src":"1504:33:17"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1434:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"1442:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1450:5:17","type":""}],"src":"1404:139:17"},{"body":{"nodeType":"YulBlock","src":"1632:391:17","statements":[{"body":{"nodeType":"YulBlock","src":"1678:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1680:77:17"},"nodeType":"YulFunctionCall","src":"1680:79:17"},"nodeType":"YulExpressionStatement","src":"1680:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1653:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"1662:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1649:3:17"},"nodeType":"YulFunctionCall","src":"1649:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"1674:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1645:3:17"},"nodeType":"YulFunctionCall","src":"1645:32:17"},"nodeType":"YulIf","src":"1642:119:17"},{"nodeType":"YulBlock","src":"1771:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1786:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1800:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1790:6:17","type":""}]},{"nodeType":"YulAssignment","src":"1815:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1850:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"1861:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1846:3:17"},"nodeType":"YulFunctionCall","src":"1846:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1870:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1825:20:17"},"nodeType":"YulFunctionCall","src":"1825:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1815:6:17"}]}]},{"nodeType":"YulBlock","src":"1898:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"1913:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1927:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1917:6:17","type":""}]},{"nodeType":"YulAssignment","src":"1943:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1978:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"1989:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1974:3:17"},"nodeType":"YulFunctionCall","src":"1974:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1998:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1953:20:17"},"nodeType":"YulFunctionCall","src":"1953:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1943:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1594:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1605:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1617:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1625:6:17","type":""}],"src":"1549:474:17"},{"body":{"nodeType":"YulBlock","src":"2129:519:17","statements":[{"body":{"nodeType":"YulBlock","src":"2175:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2177:77:17"},"nodeType":"YulFunctionCall","src":"2177:79:17"},"nodeType":"YulExpressionStatement","src":"2177:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2150:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"2159:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2146:3:17"},"nodeType":"YulFunctionCall","src":"2146:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:17","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2142:3:17"},"nodeType":"YulFunctionCall","src":"2142:32:17"},"nodeType":"YulIf","src":"2139:119:17"},{"nodeType":"YulBlock","src":"2268:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2283:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2297:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2287:6:17","type":""}]},{"nodeType":"YulAssignment","src":"2312:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2347:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"2358:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2343:3:17"},"nodeType":"YulFunctionCall","src":"2343:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2367:7:17"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2322:20:17"},"nodeType":"YulFunctionCall","src":"2322:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2312:6:17"}]}]},{"nodeType":"YulBlock","src":"2395:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2410:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2424:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2414:6:17","type":""}]},{"nodeType":"YulAssignment","src":"2440:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2475:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"2486:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2471:3:17"},"nodeType":"YulFunctionCall","src":"2471:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2495:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2450:20:17"},"nodeType":"YulFunctionCall","src":"2450:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2440:6:17"}]}]},{"nodeType":"YulBlock","src":"2523:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"2538:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"2552:2:17","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2542:6:17","type":""}]},{"nodeType":"YulAssignment","src":"2568:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2603:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"2614:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2599:3:17"},"nodeType":"YulFunctionCall","src":"2599:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2623:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2578:20:17"},"nodeType":"YulFunctionCall","src":"2578:53:17"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2568:6:17"}]}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2083:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2094:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2106:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2114:6:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2122:6:17","type":""}],"src":"2029:619:17"},{"body":{"nodeType":"YulBlock","src":"2696:48:17","statements":[{"nodeType":"YulAssignment","src":"2706:32:17","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2731:5:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2724:6:17"},"nodeType":"YulFunctionCall","src":"2724:13:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2717:6:17"},"nodeType":"YulFunctionCall","src":"2717:21:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2706:7:17"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2678:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2688:7:17","type":""}],"src":"2654:90:17"},{"body":{"nodeType":"YulBlock","src":"2809:50:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2826:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2846:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"2831:14:17"},"nodeType":"YulFunctionCall","src":"2831:21:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2819:6:17"},"nodeType":"YulFunctionCall","src":"2819:34:17"},"nodeType":"YulExpressionStatement","src":"2819:34:17"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2797:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2804:3:17","type":""}],"src":"2750:109:17"},{"body":{"nodeType":"YulBlock","src":"2957:118:17","statements":[{"nodeType":"YulAssignment","src":"2967:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2979:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"2990:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2975:3:17"},"nodeType":"YulFunctionCall","src":"2975:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2967:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3041:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3054:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"3065:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3050:3:17"},"nodeType":"YulFunctionCall","src":"3050:17:17"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3003:37:17"},"nodeType":"YulFunctionCall","src":"3003:65:17"},"nodeType":"YulExpressionStatement","src":"3003:65:17"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2929:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2941:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2952:4:17","type":""}],"src":"2865:210:17"},{"body":{"nodeType":"YulBlock","src":"3121:76:17","statements":[{"body":{"nodeType":"YulBlock","src":"3175:16:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3184:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3187:1:17","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3177:6:17"},"nodeType":"YulFunctionCall","src":"3177:12:17"},"nodeType":"YulExpressionStatement","src":"3177:12:17"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3144:5:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3166:5:17"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3151:14:17"},"nodeType":"YulFunctionCall","src":"3151:21:17"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3141:2:17"},"nodeType":"YulFunctionCall","src":"3141:32:17"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3134:6:17"},"nodeType":"YulFunctionCall","src":"3134:40:17"},"nodeType":"YulIf","src":"3131:60:17"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3114:5:17","type":""}],"src":"3081:116:17"},{"body":{"nodeType":"YulBlock","src":"3252:84:17","statements":[{"nodeType":"YulAssignment","src":"3262:29:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3284:6:17"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3271:12:17"},"nodeType":"YulFunctionCall","src":"3271:20:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3262:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3324:5:17"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"3300:23:17"},"nodeType":"YulFunctionCall","src":"3300:30:17"},"nodeType":"YulExpressionStatement","src":"3300:30:17"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3230:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"3238:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3246:5:17","type":""}],"src":"3203:133:17"},{"body":{"nodeType":"YulBlock","src":"3405:260:17","statements":[{"body":{"nodeType":"YulBlock","src":"3451:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3453:77:17"},"nodeType":"YulFunctionCall","src":"3453:79:17"},"nodeType":"YulExpressionStatement","src":"3453:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3426:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3435:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3422:3:17"},"nodeType":"YulFunctionCall","src":"3422:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3447:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3418:3:17"},"nodeType":"YulFunctionCall","src":"3418:32:17"},"nodeType":"YulIf","src":"3415:119:17"},{"nodeType":"YulBlock","src":"3544:114:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3559:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"3573:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3563:6:17","type":""}]},{"nodeType":"YulAssignment","src":"3588:60:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3620:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"3631:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3616:3:17"},"nodeType":"YulFunctionCall","src":"3616:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3640:7:17"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"3598:17:17"},"nodeType":"YulFunctionCall","src":"3598:50:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3588:6:17"}]}]}]},"name":"abi_decode_tuple_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3375:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3386:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3398:6:17","type":""}],"src":"3342:323:17"},{"body":{"nodeType":"YulBlock","src":"3737:263:17","statements":[{"body":{"nodeType":"YulBlock","src":"3783:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3785:77:17"},"nodeType":"YulFunctionCall","src":"3785:79:17"},"nodeType":"YulExpressionStatement","src":"3785:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3758:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"3767:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3754:3:17"},"nodeType":"YulFunctionCall","src":"3754:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"3779:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3750:3:17"},"nodeType":"YulFunctionCall","src":"3750:32:17"},"nodeType":"YulIf","src":"3747:119:17"},{"nodeType":"YulBlock","src":"3876:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"3891:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"3905:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3895:6:17","type":""}]},{"nodeType":"YulAssignment","src":"3920:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3955:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"3966:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3951:3:17"},"nodeType":"YulFunctionCall","src":"3951:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3975:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3930:20:17"},"nodeType":"YulFunctionCall","src":"3930:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3920:6:17"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3707:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3718:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3730:6:17","type":""}],"src":"3671:329:17"},{"body":{"nodeType":"YulBlock","src":"4089:391:17","statements":[{"body":{"nodeType":"YulBlock","src":"4135:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4137:77:17"},"nodeType":"YulFunctionCall","src":"4137:79:17"},"nodeType":"YulExpressionStatement","src":"4137:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4110:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"4119:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4106:3:17"},"nodeType":"YulFunctionCall","src":"4106:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"4131:2:17","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4102:3:17"},"nodeType":"YulFunctionCall","src":"4102:32:17"},"nodeType":"YulIf","src":"4099:119:17"},{"nodeType":"YulBlock","src":"4228:117:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4243:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4257:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4247:6:17","type":""}]},{"nodeType":"YulAssignment","src":"4272:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4307:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"4318:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4303:3:17"},"nodeType":"YulFunctionCall","src":"4303:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4327:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4282:20:17"},"nodeType":"YulFunctionCall","src":"4282:53:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4272:6:17"}]}]},{"nodeType":"YulBlock","src":"4355:118:17","statements":[{"nodeType":"YulVariableDeclaration","src":"4370:16:17","value":{"kind":"number","nodeType":"YulLiteral","src":"4384:2:17","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4374:6:17","type":""}]},{"nodeType":"YulAssignment","src":"4400:63:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4435:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"4446:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4431:3:17"},"nodeType":"YulFunctionCall","src":"4431:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4455:7:17"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4410:20:17"},"nodeType":"YulFunctionCall","src":"4410:53:17"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4400:6:17"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4051:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4062:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4074:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4082:6:17","type":""}],"src":"4006:474:17"},{"body":{"nodeType":"YulBlock","src":"4551:53:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4568:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4591:5:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4573:17:17"},"nodeType":"YulFunctionCall","src":"4573:24:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4561:6:17"},"nodeType":"YulFunctionCall","src":"4561:37:17"},"nodeType":"YulExpressionStatement","src":"4561:37:17"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4539:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4546:3:17","type":""}],"src":"4486:118:17"},{"body":{"nodeType":"YulBlock","src":"4708:124:17","statements":[{"nodeType":"YulAssignment","src":"4718:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4730:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4741:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4726:3:17"},"nodeType":"YulFunctionCall","src":"4726:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4718:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4798:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4811:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"4822:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4807:3:17"},"nodeType":"YulFunctionCall","src":"4807:17:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"4754:43:17"},"nodeType":"YulFunctionCall","src":"4754:71:17"},"nodeType":"YulExpressionStatement","src":"4754:71:17"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4680:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4692:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4703:4:17","type":""}],"src":"4610:222:17"},{"body":{"nodeType":"YulBlock","src":"4934:73:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4951:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"4956:6:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4944:6:17"},"nodeType":"YulFunctionCall","src":"4944:19:17"},"nodeType":"YulExpressionStatement","src":"4944:19:17"},{"nodeType":"YulAssignment","src":"4972:29:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4991:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"4996:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4987:3:17"},"nodeType":"YulFunctionCall","src":"4987:14:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4972:11:17"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4906:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"4911:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"4922:11:17","type":""}],"src":"4838:169:17"},{"body":{"nodeType":"YulBlock","src":"5119:68:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5141:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"5149:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5137:3:17"},"nodeType":"YulFunctionCall","src":"5137:14:17"},{"hexValue":"496e697469616c697a6174696f6e20697320706175736564","kind":"string","nodeType":"YulLiteral","src":"5153:26:17","type":"","value":"Initialization is paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5130:6:17"},"nodeType":"YulFunctionCall","src":"5130:50:17"},"nodeType":"YulExpressionStatement","src":"5130:50:17"}]},"name":"store_literal_in_memory_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5111:6:17","type":""}],"src":"5013:174:17"},{"body":{"nodeType":"YulBlock","src":"5339:220:17","statements":[{"nodeType":"YulAssignment","src":"5349:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5415:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"5420:2:17","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5356:58:17"},"nodeType":"YulFunctionCall","src":"5356:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5349:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5521:3:17"}],"functionName":{"name":"store_literal_in_memory_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d","nodeType":"YulIdentifier","src":"5432:88:17"},"nodeType":"YulFunctionCall","src":"5432:93:17"},"nodeType":"YulExpressionStatement","src":"5432:93:17"},{"nodeType":"YulAssignment","src":"5534:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5545:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"5550:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5541:3:17"},"nodeType":"YulFunctionCall","src":"5541:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5534:3:17"}]}]},"name":"abi_encode_t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5327:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5335:3:17","type":""}],"src":"5193:366:17"},{"body":{"nodeType":"YulBlock","src":"5736:248:17","statements":[{"nodeType":"YulAssignment","src":"5746:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5758:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5769:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5754:3:17"},"nodeType":"YulFunctionCall","src":"5754:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5746:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5793:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"5804:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5789:3:17"},"nodeType":"YulFunctionCall","src":"5789:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5812:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"5818:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5808:3:17"},"nodeType":"YulFunctionCall","src":"5808:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5782:6:17"},"nodeType":"YulFunctionCall","src":"5782:47:17"},"nodeType":"YulExpressionStatement","src":"5782:47:17"},{"nodeType":"YulAssignment","src":"5838:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5972:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5846:124:17"},"nodeType":"YulFunctionCall","src":"5846:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5838:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5716:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5731:4:17","type":""}],"src":"5565:419:17"},{"body":{"nodeType":"YulBlock","src":"6096:66:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6118:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"6126:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6114:3:17"},"nodeType":"YulFunctionCall","src":"6114:14:17"},{"hexValue":"546f6b656e206973206e6f7420737570706f72746564","kind":"string","nodeType":"YulLiteral","src":"6130:24:17","type":"","value":"Token is not supported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6107:6:17"},"nodeType":"YulFunctionCall","src":"6107:48:17"},"nodeType":"YulExpressionStatement","src":"6107:48:17"}]},"name":"store_literal_in_memory_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6088:6:17","type":""}],"src":"5990:172:17"},{"body":{"nodeType":"YulBlock","src":"6314:220:17","statements":[{"nodeType":"YulAssignment","src":"6324:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6390:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"6395:2:17","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6331:58:17"},"nodeType":"YulFunctionCall","src":"6331:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6324:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6496:3:17"}],"functionName":{"name":"store_literal_in_memory_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54","nodeType":"YulIdentifier","src":"6407:88:17"},"nodeType":"YulFunctionCall","src":"6407:93:17"},"nodeType":"YulExpressionStatement","src":"6407:93:17"},{"nodeType":"YulAssignment","src":"6509:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6520:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"6525:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6516:3:17"},"nodeType":"YulFunctionCall","src":"6516:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6509:3:17"}]}]},"name":"abi_encode_t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6302:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6310:3:17","type":""}],"src":"6168:366:17"},{"body":{"nodeType":"YulBlock","src":"6711:248:17","statements":[{"nodeType":"YulAssignment","src":"6721:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6733:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6744:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6729:3:17"},"nodeType":"YulFunctionCall","src":"6729:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6721:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6768:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"6779:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6764:3:17"},"nodeType":"YulFunctionCall","src":"6764:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6787:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"6793:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6783:3:17"},"nodeType":"YulFunctionCall","src":"6783:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6757:6:17"},"nodeType":"YulFunctionCall","src":"6757:47:17"},"nodeType":"YulExpressionStatement","src":"6757:47:17"},{"nodeType":"YulAssignment","src":"6813:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6947:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6821:124:17"},"nodeType":"YulFunctionCall","src":"6821:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6813:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6691:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6706:4:17","type":""}],"src":"6540:419:17"},{"body":{"nodeType":"YulBlock","src":"7071:117:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7093:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"7101:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7089:3:17"},"nodeType":"YulFunctionCall","src":"7089:14:17"},{"hexValue":"416d6f756e74206973206c657373207468616e206d696e696d756d2072657175","kind":"string","nodeType":"YulLiteral","src":"7105:34:17","type":"","value":"Amount is less than minimum requ"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7082:6:17"},"nodeType":"YulFunctionCall","src":"7082:58:17"},"nodeType":"YulExpressionStatement","src":"7082:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7161:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"7169:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7157:3:17"},"nodeType":"YulFunctionCall","src":"7157:15:17"},{"hexValue":"69726564","kind":"string","nodeType":"YulLiteral","src":"7174:6:17","type":"","value":"ired"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7150:6:17"},"nodeType":"YulFunctionCall","src":"7150:31:17"},"nodeType":"YulExpressionStatement","src":"7150:31:17"}]},"name":"store_literal_in_memory_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7063:6:17","type":""}],"src":"6965:223:17"},{"body":{"nodeType":"YulBlock","src":"7340:220:17","statements":[{"nodeType":"YulAssignment","src":"7350:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7416:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"7421:2:17","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7357:58:17"},"nodeType":"YulFunctionCall","src":"7357:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7350:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7522:3:17"}],"functionName":{"name":"store_literal_in_memory_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae","nodeType":"YulIdentifier","src":"7433:88:17"},"nodeType":"YulFunctionCall","src":"7433:93:17"},"nodeType":"YulExpressionStatement","src":"7433:93:17"},{"nodeType":"YulAssignment","src":"7535:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7546:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"7551:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7542:3:17"},"nodeType":"YulFunctionCall","src":"7542:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7535:3:17"}]}]},"name":"abi_encode_t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7328:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7336:3:17","type":""}],"src":"7194:366:17"},{"body":{"nodeType":"YulBlock","src":"7737:248:17","statements":[{"nodeType":"YulAssignment","src":"7747:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7759:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7770:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7755:3:17"},"nodeType":"YulFunctionCall","src":"7755:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7747:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7794:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"7805:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7790:3:17"},"nodeType":"YulFunctionCall","src":"7790:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7813:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"7819:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7809:3:17"},"nodeType":"YulFunctionCall","src":"7809:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7783:6:17"},"nodeType":"YulFunctionCall","src":"7783:47:17"},"nodeType":"YulExpressionStatement","src":"7783:47:17"},{"nodeType":"YulAssignment","src":"7839:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7973:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7847:124:17"},"nodeType":"YulFunctionCall","src":"7847:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7839:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7717:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7732:4:17","type":""}],"src":"7566:419:17"},{"body":{"nodeType":"YulBlock","src":"8145:288:17","statements":[{"nodeType":"YulAssignment","src":"8155:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8167:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8178:2:17","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8163:3:17"},"nodeType":"YulFunctionCall","src":"8163:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8155:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8235:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8248:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8259:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8244:3:17"},"nodeType":"YulFunctionCall","src":"8244:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"8191:43:17"},"nodeType":"YulFunctionCall","src":"8191:71:17"},"nodeType":"YulExpressionStatement","src":"8191:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8316:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8329:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8340:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8325:3:17"},"nodeType":"YulFunctionCall","src":"8325:18:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"8272:43:17"},"nodeType":"YulFunctionCall","src":"8272:72:17"},"nodeType":"YulExpressionStatement","src":"8272:72:17"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8398:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8411:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"8422:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8407:3:17"},"nodeType":"YulFunctionCall","src":"8407:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8354:43:17"},"nodeType":"YulFunctionCall","src":"8354:72:17"},"nodeType":"YulExpressionStatement","src":"8354:72:17"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8101:9:17","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8113:6:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8121:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8129:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8140:4:17","type":""}],"src":"7991:442:17"},{"body":{"nodeType":"YulBlock","src":"8499:77:17","statements":[{"nodeType":"YulAssignment","src":"8509:22:17","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8524:6:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8518:5:17"},"nodeType":"YulFunctionCall","src":"8518:13:17"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8509:5:17"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8564:5:17"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"8540:23:17"},"nodeType":"YulFunctionCall","src":"8540:30:17"},"nodeType":"YulExpressionStatement","src":"8540:30:17"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8477:6:17","type":""},{"name":"end","nodeType":"YulTypedName","src":"8485:3:17","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8493:5:17","type":""}],"src":"8439:137:17"},{"body":{"nodeType":"YulBlock","src":"8656:271:17","statements":[{"body":{"nodeType":"YulBlock","src":"8702:83:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8704:77:17"},"nodeType":"YulFunctionCall","src":"8704:79:17"},"nodeType":"YulExpressionStatement","src":"8704:79:17"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8677:7:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"8686:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8673:3:17"},"nodeType":"YulFunctionCall","src":"8673:23:17"},{"kind":"number","nodeType":"YulLiteral","src":"8698:2:17","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8669:3:17"},"nodeType":"YulFunctionCall","src":"8669:32:17"},"nodeType":"YulIf","src":"8666:119:17"},{"nodeType":"YulBlock","src":"8795:125:17","statements":[{"nodeType":"YulVariableDeclaration","src":"8810:15:17","value":{"kind":"number","nodeType":"YulLiteral","src":"8824:1:17","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8814:6:17","type":""}]},{"nodeType":"YulAssignment","src":"8839:71:17","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8882:9:17"},{"name":"offset","nodeType":"YulIdentifier","src":"8893:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8878:3:17"},"nodeType":"YulFunctionCall","src":"8878:22:17"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8902:7:17"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"8849:28:17"},"nodeType":"YulFunctionCall","src":"8849:61:17"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8839:6:17"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8626:9:17","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8637:7:17","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8649:6:17","type":""}],"src":"8582:345:17"},{"body":{"nodeType":"YulBlock","src":"8961:152:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8978:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8981:77:17","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8971:6:17"},"nodeType":"YulFunctionCall","src":"8971:88:17"},"nodeType":"YulExpressionStatement","src":"8971:88:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9075:1:17","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9078:4:17","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9068:6:17"},"nodeType":"YulFunctionCall","src":"9068:15:17"},"nodeType":"YulExpressionStatement","src":"9068:15:17"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9099:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9102:4:17","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9092:6:17"},"nodeType":"YulFunctionCall","src":"9092:15:17"},"nodeType":"YulExpressionStatement","src":"9092:15:17"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"8933:180:17"},{"body":{"nodeType":"YulBlock","src":"9163:147:17","statements":[{"nodeType":"YulAssignment","src":"9173:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9196:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9178:17:17"},"nodeType":"YulFunctionCall","src":"9178:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9173:1:17"}]},{"nodeType":"YulAssignment","src":"9207:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9230:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9212:17:17"},"nodeType":"YulFunctionCall","src":"9212:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9207:1:17"}]},{"nodeType":"YulAssignment","src":"9241:16:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9252:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"9255:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9248:3:17"},"nodeType":"YulFunctionCall","src":"9248:9:17"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9241:3:17"}]},{"body":{"nodeType":"YulBlock","src":"9281:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9283:16:17"},"nodeType":"YulFunctionCall","src":"9283:18:17"},"nodeType":"YulExpressionStatement","src":"9283:18:17"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9273:1:17"},{"name":"sum","nodeType":"YulIdentifier","src":"9276:3:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9270:2:17"},"nodeType":"YulFunctionCall","src":"9270:10:17"},"nodeType":"YulIf","src":"9267:36:17"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9150:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"9153:1:17","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9159:3:17","type":""}],"src":"9119:191:17"},{"body":{"nodeType":"YulBlock","src":"9422:64:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9444:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"9452:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9440:3:17"},"nodeType":"YulFunctionCall","src":"9440:14:17"},{"hexValue":"496e73756666696369656e742062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"9456:22:17","type":"","value":"Insufficient balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9433:6:17"},"nodeType":"YulFunctionCall","src":"9433:46:17"},"nodeType":"YulExpressionStatement","src":"9433:46:17"}]},"name":"store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9414:6:17","type":""}],"src":"9316:170:17"},{"body":{"nodeType":"YulBlock","src":"9638:220:17","statements":[{"nodeType":"YulAssignment","src":"9648:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9714:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"9719:2:17","type":"","value":"20"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9655:58:17"},"nodeType":"YulFunctionCall","src":"9655:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9648:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9820:3:17"}],"functionName":{"name":"store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5","nodeType":"YulIdentifier","src":"9731:88:17"},"nodeType":"YulFunctionCall","src":"9731:93:17"},"nodeType":"YulExpressionStatement","src":"9731:93:17"},{"nodeType":"YulAssignment","src":"9833:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9844:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"9849:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9840:3:17"},"nodeType":"YulFunctionCall","src":"9840:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9833:3:17"}]}]},"name":"abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9626:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9634:3:17","type":""}],"src":"9492:366:17"},{"body":{"nodeType":"YulBlock","src":"10035:248:17","statements":[{"nodeType":"YulAssignment","src":"10045:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10057:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10068:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10053:3:17"},"nodeType":"YulFunctionCall","src":"10053:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10045:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10092:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10103:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10088:3:17"},"nodeType":"YulFunctionCall","src":"10088:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10111:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"10117:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10107:3:17"},"nodeType":"YulFunctionCall","src":"10107:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10081:6:17"},"nodeType":"YulFunctionCall","src":"10081:47:17"},"nodeType":"YulExpressionStatement","src":"10081:47:17"},{"nodeType":"YulAssignment","src":"10137:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10271:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10145:124:17"},"nodeType":"YulFunctionCall","src":"10145:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10137:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10015:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10030:4:17","type":""}],"src":"9864:419:17"},{"body":{"nodeType":"YulBlock","src":"10334:149:17","statements":[{"nodeType":"YulAssignment","src":"10344:25:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10367:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10349:17:17"},"nodeType":"YulFunctionCall","src":"10349:20:17"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"10344:1:17"}]},{"nodeType":"YulAssignment","src":"10378:25:17","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"10401:1:17"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10383:17:17"},"nodeType":"YulFunctionCall","src":"10383:20:17"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"10378:1:17"}]},{"nodeType":"YulAssignment","src":"10412:17:17","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"10424:1:17"},{"name":"y","nodeType":"YulIdentifier","src":"10427:1:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10420:3:17"},"nodeType":"YulFunctionCall","src":"10420:9:17"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"10412:4:17"}]},{"body":{"nodeType":"YulBlock","src":"10454:22:17","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10456:16:17"},"nodeType":"YulFunctionCall","src":"10456:18:17"},"nodeType":"YulExpressionStatement","src":"10456:18:17"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"10445:4:17"},{"name":"x","nodeType":"YulIdentifier","src":"10451:1:17"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10442:2:17"},"nodeType":"YulFunctionCall","src":"10442:11:17"},"nodeType":"YulIf","src":"10439:37:17"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"10320:1:17","type":""},{"name":"y","nodeType":"YulTypedName","src":"10323:1:17","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"10329:4:17","type":""}],"src":"10289:194:17"},{"body":{"nodeType":"YulBlock","src":"10615:206:17","statements":[{"nodeType":"YulAssignment","src":"10625:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10637:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10648:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10633:3:17"},"nodeType":"YulFunctionCall","src":"10633:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10625:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10705:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10718:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10729:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10714:3:17"},"nodeType":"YulFunctionCall","src":"10714:17:17"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"10661:43:17"},"nodeType":"YulFunctionCall","src":"10661:71:17"},"nodeType":"YulExpressionStatement","src":"10661:71:17"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10786:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10799:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"10810:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10795:3:17"},"nodeType":"YulFunctionCall","src":"10795:18:17"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10742:43:17"},"nodeType":"YulFunctionCall","src":"10742:72:17"},"nodeType":"YulExpressionStatement","src":"10742:72:17"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10579:9:17","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10591:6:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10599:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10610:4:17","type":""}],"src":"10489:332:17"},{"body":{"nodeType":"YulBlock","src":"10933:127:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10955:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"10963:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10951:3:17"},"nodeType":"YulFunctionCall","src":"10951:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561","kind":"string","nodeType":"YulLiteral","src":"10967:34:17","type":"","value":"Initializable: contract is alrea"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10944:6:17"},"nodeType":"YulFunctionCall","src":"10944:58:17"},"nodeType":"YulExpressionStatement","src":"10944:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11023:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"11031:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11019:3:17"},"nodeType":"YulFunctionCall","src":"11019:15:17"},{"hexValue":"647920696e697469616c697a6564","kind":"string","nodeType":"YulLiteral","src":"11036:16:17","type":"","value":"dy initialized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11012:6:17"},"nodeType":"YulFunctionCall","src":"11012:41:17"},"nodeType":"YulExpressionStatement","src":"11012:41:17"}]},"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10925:6:17","type":""}],"src":"10827:233:17"},{"body":{"nodeType":"YulBlock","src":"11212:220:17","statements":[{"nodeType":"YulAssignment","src":"11222:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11288:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"11293:2:17","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11229:58:17"},"nodeType":"YulFunctionCall","src":"11229:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11222:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11394:3:17"}],"functionName":{"name":"store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","nodeType":"YulIdentifier","src":"11305:88:17"},"nodeType":"YulFunctionCall","src":"11305:93:17"},"nodeType":"YulExpressionStatement","src":"11305:93:17"},{"nodeType":"YulAssignment","src":"11407:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11418:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"11423:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11414:3:17"},"nodeType":"YulFunctionCall","src":"11414:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11407:3:17"}]}]},"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11200:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11208:3:17","type":""}],"src":"11066:366:17"},{"body":{"nodeType":"YulBlock","src":"11609:248:17","statements":[{"nodeType":"YulAssignment","src":"11619:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11631:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11642:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11627:3:17"},"nodeType":"YulFunctionCall","src":"11627:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11619:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11666:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"11677:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11662:3:17"},"nodeType":"YulFunctionCall","src":"11662:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11685:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"11691:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11681:3:17"},"nodeType":"YulFunctionCall","src":"11681:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11655:6:17"},"nodeType":"YulFunctionCall","src":"11655:47:17"},"nodeType":"YulExpressionStatement","src":"11655:47:17"},{"nodeType":"YulAssignment","src":"11711:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11845:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11719:124:17"},"nodeType":"YulFunctionCall","src":"11719:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11711:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11589:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11604:4:17","type":""}],"src":"11438:419:17"},{"body":{"nodeType":"YulBlock","src":"11916:32:17","statements":[{"nodeType":"YulAssignment","src":"11926:16:17","value":{"name":"value","nodeType":"YulIdentifier","src":"11937:5:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11926:7:17"}]}]},"name":"cleanup_t_rational_1_by_1","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11898:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11908:7:17","type":""}],"src":"11863:85:17"},{"body":{"nodeType":"YulBlock","src":"11997:43:17","statements":[{"nodeType":"YulAssignment","src":"12007:27:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12022:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"12029:4:17","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12018:3:17"},"nodeType":"YulFunctionCall","src":"12018:16:17"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12007:7:17"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11979:5:17","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11989:7:17","type":""}],"src":"11954:86:17"},{"body":{"nodeType":"YulBlock","src":"12078:28:17","statements":[{"nodeType":"YulAssignment","src":"12088:12:17","value":{"name":"value","nodeType":"YulIdentifier","src":"12095:5:17"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"12088:3:17"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12064:5:17","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12074:3:17","type":""}],"src":"12046:60:17"},{"body":{"nodeType":"YulBlock","src":"12178:88:17","statements":[{"nodeType":"YulAssignment","src":"12188:72:17","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12252:5:17"}],"functionName":{"name":"cleanup_t_rational_1_by_1","nodeType":"YulIdentifier","src":"12226:25:17"},"nodeType":"YulFunctionCall","src":"12226:32:17"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"12217:8:17"},"nodeType":"YulFunctionCall","src":"12217:42:17"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"12201:15:17"},"nodeType":"YulFunctionCall","src":"12201:59:17"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"12188:9:17"}]}]},"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12158:5:17","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"12168:9:17","type":""}],"src":"12112:154:17"},{"body":{"nodeType":"YulBlock","src":"12343:72:17","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12360:3:17"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12402:5:17"}],"functionName":{"name":"convert_t_rational_1_by_1_to_t_uint8","nodeType":"YulIdentifier","src":"12365:36:17"},"nodeType":"YulFunctionCall","src":"12365:43:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12353:6:17"},"nodeType":"YulFunctionCall","src":"12353:56:17"},"nodeType":"YulExpressionStatement","src":"12353:56:17"}]},"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12331:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12338:3:17","type":""}],"src":"12272:143:17"},{"body":{"nodeType":"YulBlock","src":"12525:130:17","statements":[{"nodeType":"YulAssignment","src":"12535:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12547:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12558:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12543:3:17"},"nodeType":"YulFunctionCall","src":"12543:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12535:4:17"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12621:6:17"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12634:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"12645:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12630:3:17"},"nodeType":"YulFunctionCall","src":"12630:17:17"}],"functionName":{"name":"abi_encode_t_rational_1_by_1_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"12571:49:17"},"nodeType":"YulFunctionCall","src":"12571:77:17"},"nodeType":"YulExpressionStatement","src":"12571:77:17"}]},"name":"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12497:9:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12509:6:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12520:4:17","type":""}],"src":"12421:234:17"},{"body":{"nodeType":"YulBlock","src":"12767:119:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12789:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12797:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12785:3:17"},"nodeType":"YulFunctionCall","src":"12785:14:17"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"12801:34:17","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12778:6:17"},"nodeType":"YulFunctionCall","src":"12778:58:17"},"nodeType":"YulExpressionStatement","src":"12778:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12857:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"12865:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12853:3:17"},"nodeType":"YulFunctionCall","src":"12853:15:17"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"12870:8:17","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12846:6:17"},"nodeType":"YulFunctionCall","src":"12846:33:17"},"nodeType":"YulExpressionStatement","src":"12846:33:17"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12759:6:17","type":""}],"src":"12661:225:17"},{"body":{"nodeType":"YulBlock","src":"13038:220:17","statements":[{"nodeType":"YulAssignment","src":"13048:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13114:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"13119:2:17","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13055:58:17"},"nodeType":"YulFunctionCall","src":"13055:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13048:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13220:3:17"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"13131:88:17"},"nodeType":"YulFunctionCall","src":"13131:93:17"},"nodeType":"YulExpressionStatement","src":"13131:93:17"},{"nodeType":"YulAssignment","src":"13233:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13244:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"13249:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13240:3:17"},"nodeType":"YulFunctionCall","src":"13240:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13233:3:17"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13026:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13034:3:17","type":""}],"src":"12892:366:17"},{"body":{"nodeType":"YulBlock","src":"13435:248:17","statements":[{"nodeType":"YulAssignment","src":"13445:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13457:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13468:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13453:3:17"},"nodeType":"YulFunctionCall","src":"13453:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13445:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13492:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"13503:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13488:3:17"},"nodeType":"YulFunctionCall","src":"13488:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13511:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"13517:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13507:3:17"},"nodeType":"YulFunctionCall","src":"13507:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13481:6:17"},"nodeType":"YulFunctionCall","src":"13481:47:17"},"nodeType":"YulExpressionStatement","src":"13481:47:17"},{"nodeType":"YulAssignment","src":"13537:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13671:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13545:124:17"},"nodeType":"YulFunctionCall","src":"13545:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13537:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13415:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13430:4:17","type":""}],"src":"13264:419:17"},{"body":{"nodeType":"YulBlock","src":"13795:76:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13817:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"13825:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13813:3:17"},"nodeType":"YulFunctionCall","src":"13813:14:17"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"13829:34:17","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13806:6:17"},"nodeType":"YulFunctionCall","src":"13806:58:17"},"nodeType":"YulExpressionStatement","src":"13806:58:17"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13787:6:17","type":""}],"src":"13689:182:17"},{"body":{"nodeType":"YulBlock","src":"14023:220:17","statements":[{"nodeType":"YulAssignment","src":"14033:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14099:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"14104:2:17","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14040:58:17"},"nodeType":"YulFunctionCall","src":"14040:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14033:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14205:3:17"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"14116:88:17"},"nodeType":"YulFunctionCall","src":"14116:93:17"},"nodeType":"YulExpressionStatement","src":"14116:93:17"},{"nodeType":"YulAssignment","src":"14218:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14229:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"14234:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14225:3:17"},"nodeType":"YulFunctionCall","src":"14225:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14218:3:17"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14011:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14019:3:17","type":""}],"src":"13877:366:17"},{"body":{"nodeType":"YulBlock","src":"14420:248:17","statements":[{"nodeType":"YulAssignment","src":"14430:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14442:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14453:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14438:3:17"},"nodeType":"YulFunctionCall","src":"14438:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14430:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14477:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"14488:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14473:3:17"},"nodeType":"YulFunctionCall","src":"14473:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14496:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"14502:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14492:3:17"},"nodeType":"YulFunctionCall","src":"14492:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14466:6:17"},"nodeType":"YulFunctionCall","src":"14466:47:17"},"nodeType":"YulExpressionStatement","src":"14466:47:17"},{"nodeType":"YulAssignment","src":"14522:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14656:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14530:124:17"},"nodeType":"YulFunctionCall","src":"14530:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14522:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14400:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14415:4:17","type":""}],"src":"14249:419:17"},{"body":{"nodeType":"YulBlock","src":"14732:40:17","statements":[{"nodeType":"YulAssignment","src":"14743:22:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14759:5:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14753:5:17"},"nodeType":"YulFunctionCall","src":"14753:12:17"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14743:6:17"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14715:5:17","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"14725:6:17","type":""}],"src":"14674:98:17"},{"body":{"nodeType":"YulBlock","src":"14891:34:17","statements":[{"nodeType":"YulAssignment","src":"14901:18:17","value":{"name":"pos","nodeType":"YulIdentifier","src":"14916:3:17"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14901:11:17"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14863:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"14868:6:17","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"14879:11:17","type":""}],"src":"14778:147:17"},{"body":{"nodeType":"YulBlock","src":"14993:184:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15003:10:17","value":{"kind":"number","nodeType":"YulLiteral","src":"15012:1:17","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"15007:1:17","type":""}]},{"body":{"nodeType":"YulBlock","src":"15072:63:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15097:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"15102:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15093:3:17"},"nodeType":"YulFunctionCall","src":"15093:11:17"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15116:3:17"},{"name":"i","nodeType":"YulIdentifier","src":"15121:1:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15112:3:17"},"nodeType":"YulFunctionCall","src":"15112:11:17"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15106:5:17"},"nodeType":"YulFunctionCall","src":"15106:18:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15086:6:17"},"nodeType":"YulFunctionCall","src":"15086:39:17"},"nodeType":"YulExpressionStatement","src":"15086:39:17"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15033:1:17"},{"name":"length","nodeType":"YulIdentifier","src":"15036:6:17"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15030:2:17"},"nodeType":"YulFunctionCall","src":"15030:13:17"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15044:19:17","statements":[{"nodeType":"YulAssignment","src":"15046:15:17","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15055:1:17"},{"kind":"number","nodeType":"YulLiteral","src":"15058:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15051:3:17"},"nodeType":"YulFunctionCall","src":"15051:10:17"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"15046:1:17"}]}]},"pre":{"nodeType":"YulBlock","src":"15026:3:17","statements":[]},"src":"15022:113:17"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"15155:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"15160:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15151:3:17"},"nodeType":"YulFunctionCall","src":"15151:16:17"},{"kind":"number","nodeType":"YulLiteral","src":"15169:1:17","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15144:6:17"},"nodeType":"YulFunctionCall","src":"15144:27:17"},"nodeType":"YulExpressionStatement","src":"15144:27:17"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"14975:3:17","type":""},{"name":"dst","nodeType":"YulTypedName","src":"14980:3:17","type":""},{"name":"length","nodeType":"YulTypedName","src":"14985:6:17","type":""}],"src":"14931:246:17"},{"body":{"nodeType":"YulBlock","src":"15291:278:17","statements":[{"nodeType":"YulVariableDeclaration","src":"15301:52:17","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15347:5:17"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"15315:31:17"},"nodeType":"YulFunctionCall","src":"15315:38:17"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15305:6:17","type":""}]},{"nodeType":"YulAssignment","src":"15362:95:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15445:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"15450:6:17"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15369:75:17"},"nodeType":"YulFunctionCall","src":"15369:88:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15362:3:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15505:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"15512:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15501:3:17"},"nodeType":"YulFunctionCall","src":"15501:16:17"},{"name":"pos","nodeType":"YulIdentifier","src":"15519:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"15524:6:17"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"15466:34:17"},"nodeType":"YulFunctionCall","src":"15466:65:17"},"nodeType":"YulExpressionStatement","src":"15466:65:17"},{"nodeType":"YulAssignment","src":"15540:23:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15551:3:17"},{"name":"length","nodeType":"YulIdentifier","src":"15556:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15547:3:17"},"nodeType":"YulFunctionCall","src":"15547:16:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15540:3:17"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15272:5:17","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15279:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15287:3:17","type":""}],"src":"15183:386:17"},{"body":{"nodeType":"YulBlock","src":"15709:137:17","statements":[{"nodeType":"YulAssignment","src":"15720:100:17","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15807:6:17"},{"name":"pos","nodeType":"YulIdentifier","src":"15816:3:17"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"15727:79:17"},"nodeType":"YulFunctionCall","src":"15727:93:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15720:3:17"}]},{"nodeType":"YulAssignment","src":"15830:10:17","value":{"name":"pos","nodeType":"YulIdentifier","src":"15837:3:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15830:3:17"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15688:3:17","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15694:6:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15705:3:17","type":""}],"src":"15575:271:17"},{"body":{"nodeType":"YulBlock","src":"15958:75:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15980:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"15988:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15976:3:17"},"nodeType":"YulFunctionCall","src":"15976:14:17"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"15992:33:17","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15969:6:17"},"nodeType":"YulFunctionCall","src":"15969:57:17"},"nodeType":"YulExpressionStatement","src":"15969:57:17"}]},"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15950:6:17","type":""}],"src":"15852:181:17"},{"body":{"nodeType":"YulBlock","src":"16185:220:17","statements":[{"nodeType":"YulAssignment","src":"16195:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16261:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16266:2:17","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16202:58:17"},"nodeType":"YulFunctionCall","src":"16202:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16195:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16367:3:17"}],"functionName":{"name":"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","nodeType":"YulIdentifier","src":"16278:88:17"},"nodeType":"YulFunctionCall","src":"16278:93:17"},"nodeType":"YulExpressionStatement","src":"16278:93:17"},{"nodeType":"YulAssignment","src":"16380:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16391:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"16396:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16387:3:17"},"nodeType":"YulFunctionCall","src":"16387:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16380:3:17"}]}]},"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16173:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16181:3:17","type":""}],"src":"16039:366:17"},{"body":{"nodeType":"YulBlock","src":"16582:248:17","statements":[{"nodeType":"YulAssignment","src":"16592:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16604:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16615:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16600:3:17"},"nodeType":"YulFunctionCall","src":"16600:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16592:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16639:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"16650:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16635:3:17"},"nodeType":"YulFunctionCall","src":"16635:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16658:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"16664:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16654:3:17"},"nodeType":"YulFunctionCall","src":"16654:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16628:6:17"},"nodeType":"YulFunctionCall","src":"16628:47:17"},"nodeType":"YulExpressionStatement","src":"16628:47:17"},{"nodeType":"YulAssignment","src":"16684:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16818:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16692:124:17"},"nodeType":"YulFunctionCall","src":"16692:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16684:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16562:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16577:4:17","type":""}],"src":"16411:419:17"},{"body":{"nodeType":"YulBlock","src":"16942:124:17","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16964:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"16972:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16960:3:17"},"nodeType":"YulFunctionCall","src":"16960:14:17"},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069","kind":"string","nodeType":"YulLiteral","src":"16976:34:17","type":"","value":"Initializable: contract is not i"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16953:6:17"},"nodeType":"YulFunctionCall","src":"16953:58:17"},"nodeType":"YulExpressionStatement","src":"16953:58:17"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17032:6:17"},{"kind":"number","nodeType":"YulLiteral","src":"17040:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17028:3:17"},"nodeType":"YulFunctionCall","src":"17028:15:17"},{"hexValue":"6e697469616c697a696e67","kind":"string","nodeType":"YulLiteral","src":"17045:13:17","type":"","value":"nitializing"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17021:6:17"},"nodeType":"YulFunctionCall","src":"17021:38:17"},"nodeType":"YulExpressionStatement","src":"17021:38:17"}]},"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16934:6:17","type":""}],"src":"16836:230:17"},{"body":{"nodeType":"YulBlock","src":"17218:220:17","statements":[{"nodeType":"YulAssignment","src":"17228:74:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17294:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"17299:2:17","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17235:58:17"},"nodeType":"YulFunctionCall","src":"17235:67:17"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17228:3:17"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17400:3:17"}],"functionName":{"name":"store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","nodeType":"YulIdentifier","src":"17311:88:17"},"nodeType":"YulFunctionCall","src":"17311:93:17"},"nodeType":"YulExpressionStatement","src":"17311:93:17"},{"nodeType":"YulAssignment","src":"17413:19:17","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17424:3:17"},{"kind":"number","nodeType":"YulLiteral","src":"17429:2:17","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17420:3:17"},"nodeType":"YulFunctionCall","src":"17420:12:17"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17413:3:17"}]}]},"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17206:3:17","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17214:3:17","type":""}],"src":"17072:366:17"},{"body":{"nodeType":"YulBlock","src":"17615:248:17","statements":[{"nodeType":"YulAssignment","src":"17625:26:17","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17637:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17648:2:17","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17633:3:17"},"nodeType":"YulFunctionCall","src":"17633:18:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17625:4:17"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17672:9:17"},{"kind":"number","nodeType":"YulLiteral","src":"17683:1:17","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17668:3:17"},"nodeType":"YulFunctionCall","src":"17668:17:17"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17691:4:17"},{"name":"headStart","nodeType":"YulIdentifier","src":"17697:9:17"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17687:3:17"},"nodeType":"YulFunctionCall","src":"17687:20:17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17661:6:17"},"nodeType":"YulFunctionCall","src":"17661:47:17"},"nodeType":"YulExpressionStatement","src":"17661:47:17"},{"nodeType":"YulAssignment","src":"17717:139:17","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17851:4:17"}],"functionName":{"name":"abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17725:124:17"},"nodeType":"YulFunctionCall","src":"17725:131:17"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17717:4:17"}]}]},"name":"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17595:9:17","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17610:4:17","type":""}],"src":"17444:419:17"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initialization is paused\")\n\n    }\n\n    function abi_encode_t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_dc94b5889e61ef114c68a6a1ea7f79b70bec03dd753281dd1ed1be760eeaf35d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54(memPtr) {\n\n        mstore(add(memPtr, 0), \"Token is not supported\")\n\n    }\n\n    function abi_encode_t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_08f940d27b4142df22b08a95cf096357d0cf140e3f7719a827da7e3acae03b54_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae(memPtr) {\n\n        mstore(add(memPtr, 0), \"Amount is less than minimum requ\")\n\n        mstore(add(memPtr, 32), \"ired\")\n\n    }\n\n    function abi_encode_t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7667b59edf9743c6d33c985e9049ef8ce623c43ad9bef0dfb80231f6530972ae_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Insufficient balance\")\n\n    }\n\n    function abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 20)\n        store_literal_in_memory_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is alrea\")\n\n        mstore(add(memPtr, 32), \"dy initialized\")\n\n    }\n\n    function abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n        store_literal_in_memory_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_rational_1_by_1(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_rational_1_by_1_to_t_uint8(value) -> converted {\n        converted := cleanup_t_uint8(identity(cleanup_t_rational_1_by_1(value)))\n    }\n\n    function abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_rational_1_by_1_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_rational_1_by_1_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(memPtr) {\n\n        mstore(add(memPtr, 0), \"Initializable: contract is not i\")\n\n        mstore(add(memPtr, 32), \"nitializing\")\n\n    }\n\n    function abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":17,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c4d66de811610071578063c4d66de814610153578063c56f80c11461016f578063c5923aaf1461018d578063e74599f3146101bd578063f239c626146101ed578063f2fde38b14610209576100b4565b8063715018a6146100b95780638da5cb5b146100c3578063adc9772e146100e1578063b460af94146100fd578063c2b4610b14610119578063c4a0bb0714610137575b600080fd5b6100c1610225565b005b6100cb610239565b6040516100d89190610fd3565b60405180910390f35b6100fb60048036038101906100f69190611055565b610263565b005b61011760048036038101906101129190611095565b6104d8565b005b610121610708565b60405161012e9190611103565b60405180910390f35b610151600480360381019061014c919061114a565b61071f565b005b61016d60048036038101906101689190611177565b610773565b005b610177610916565b6040516101849190610fd3565b60405180910390f35b6101a760048036038101906101a291906111a4565b610940565b6040516101b491906111f3565b60405180910390f35b6101d760048036038101906101d29190611177565b6109c7565b6040516101e491906111f3565b60405180910390f35b61020760048036038101906102029190611055565b610a10565b005b610223600480360381019061021e9190611177565b610aa4565b005b61022d610b27565b6102376000610ba5565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b609760149054906101000a900460ff166102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a99061126b565b60405180910390fd5b6102bb82610c6b565b6102fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f1906112d7565b60405180910390fd5b609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481101561037c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037390611369565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103b993929190611389565b6020604051808303816000875af11580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc91906113d5565b5080609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104899190611431565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a35050565b6104e0610da2565b6000609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808411156105a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059b906114b1565b60405180910390fd5b83609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461063091906114d1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83866040518363ffffffff1660e01b8152600401610672929190611505565b6020604051808303816000875af1158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906113d5565b50833373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d560405160405180910390a350610703610df1565b505050565b6000609760149054906101000a900460ff16905090565b610727610b27565b80609760146101000a81548160ff0219169083151502179055508015157fdebf9dd297d3980055770d6c047a67eed8f6b1e91397831703b5f2a73bec132060405160405180910390a250565b60008060019054906101000a900460ff161590508080156107a45750600160008054906101000a900460ff1660ff16105b806107d157506107b330610dfb565b1580156107d05750600160008054906101000a900460ff1660ff16145b5b610810576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610807906115a0565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561084d576001600060016101000a81548160ff0219169083151502179055505b81609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001609760146101000a81548160ff0219169083151502179055506108b1610e1e565b6108b9610e77565b80156109125760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109099190611612565b60405180910390a15b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a18610b27565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550808273ffffffffffffffffffffffffffffffffffffffff167fd0380f7d3d322fabf37539b9c6b985c069348a14121a426f3cceb8b5a93cd9ab60405160405180910390a35050565b610aac610b27565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b129061169f565b60405180910390fd5b610b2481610ba5565b50565b610b2f610ed0565b73ffffffffffffffffffffffffffffffffffffffff16610b4d610239565b73ffffffffffffffffffffffffffffffffffffffff1614610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a9061170b565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051602401610cb89190610fd3565b6040516020818303038152906040527f75151b63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d42919061179c565b600060405180830381855afa9150503d8060008114610d7d576040519150601f19603f3d011682016040523d82523d6000602084013e610d82565b606091505b5091505080806020019051810190610d9a91906113d5565b915050919050565b600260655403610de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dde906117ff565b60405180910390fd5b6002606581905550565b6001606581905550565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6490611891565b60405180910390fd5b610e75610ed8565b565b600060019054906101000a900460ff16610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd90611891565b60405180910390fd5b610ece610f39565b565b600033905090565b600060019054906101000a900460ff16610f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1e90611891565b60405180910390fd5b610f37610f32610ed0565b610ba5565b565b600060019054906101000a900460ff16610f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7f90611891565b60405180910390fd5b6001606581905550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fbd82610f92565b9050919050565b610fcd81610fb2565b82525050565b6000602082019050610fe86000830184610fc4565b92915050565b600080fd5b610ffc81610fb2565b811461100757600080fd5b50565b60008135905061101981610ff3565b92915050565b6000819050919050565b6110328161101f565b811461103d57600080fd5b50565b60008135905061104f81611029565b92915050565b6000806040838503121561106c5761106b610fee565b5b600061107a8582860161100a565b925050602061108b85828601611040565b9150509250929050565b6000806000606084860312156110ae576110ad610fee565b5b60006110bc86828701611040565b93505060206110cd8682870161100a565b92505060406110de8682870161100a565b9150509250925092565b60008115159050919050565b6110fd816110e8565b82525050565b600060208201905061111860008301846110f4565b92915050565b611127816110e8565b811461113257600080fd5b50565b6000813590506111448161111e565b92915050565b6000602082840312156111605761115f610fee565b5b600061116e84828501611135565b91505092915050565b60006020828403121561118d5761118c610fee565b5b600061119b8482850161100a565b91505092915050565b600080604083850312156111bb576111ba610fee565b5b60006111c98582860161100a565b92505060206111da8582860161100a565b9150509250929050565b6111ed8161101f565b82525050565b600060208201905061120860008301846111e4565b92915050565b600082825260208201905092915050565b7f496e697469616c697a6174696f6e206973207061757365640000000000000000600082015250565b600061125560188361120e565b91506112608261121f565b602082019050919050565b6000602082019050818103600083015261128481611248565b9050919050565b7f546f6b656e206973206e6f7420737570706f7274656400000000000000000000600082015250565b60006112c160168361120e565b91506112cc8261128b565b602082019050919050565b600060208201905081810360008301526112f0816112b4565b9050919050565b7f416d6f756e74206973206c657373207468616e206d696e696d756d207265717560008201527f6972656400000000000000000000000000000000000000000000000000000000602082015250565b600061135360248361120e565b915061135e826112f7565b604082019050919050565b6000602082019050818103600083015261138281611346565b9050919050565b600060608201905061139e6000830186610fc4565b6113ab6020830185610fc4565b6113b860408301846111e4565b949350505050565b6000815190506113cf8161111e565b92915050565b6000602082840312156113eb576113ea610fee565b5b60006113f9848285016113c0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061143c8261101f565b91506114478361101f565b925082820190508082111561145f5761145e611402565b5b92915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061149b60148361120e565b91506114a682611465565b602082019050919050565b600060208201905081810360008301526114ca8161148e565b9050919050565b60006114dc8261101f565b91506114e78361101f565b92508282039050818111156114ff576114fe611402565b5b92915050565b600060408201905061151a6000830185610fc4565b61152760208301846111e4565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061158a602e8361120e565b91506115958261152e565b604082019050919050565b600060208201905081810360008301526115b98161157d565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006115fc6115f76115f2846115c0565b6115d7565b6115ca565b9050919050565b61160c816115e1565b82525050565b60006020820190506116276000830184611603565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061168960268361120e565b91506116948261162d565b604082019050919050565b600060208201905081810360008301526116b88161167c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116f560208361120e565b9150611700826116bf565b602082019050919050565b60006020820190508181036000830152611724816116e8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561175f578082015181840152602081019050611744565b60008484015250505050565b60006117768261172b565b6117808185611736565b9350611790818560208601611741565b80840191505092915050565b60006117a8828461176b565b915081905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006117e9601f8361120e565b91506117f4826117b3565b602082019050919050565b60006020820190508181036000830152611818816117dc565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061187b602b8361120e565b91506118868261181f565b604082019050919050565b600060208201905081810360008301526118aa8161186e565b905091905056fea26469706673582212207bc6e88ed2538f594ece330f2a5fe838a73f8b52ec73ada42f59d472b299317c64736f6c63430008120033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xC56F80C1 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0xC5923AAF EQ PUSH2 0x18D JUMPI DUP1 PUSH4 0xE74599F3 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0xF239C626 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x209 JUMPI PUSH2 0xB4 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xADC9772E EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0xC2B4610B EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0xC4A0BB07 EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x225 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xCB PUSH2 0x239 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF6 SWAP2 SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH2 0x263 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x112 SWAP2 SWAP1 PUSH2 0x1095 JUMP JUMPDEST PUSH2 0x4D8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x121 PUSH2 0x708 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12E SWAP2 SWAP1 PUSH2 0x1103 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x151 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14C SWAP2 SWAP1 PUSH2 0x114A JUMP JUMPDEST PUSH2 0x71F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0x773 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x177 PUSH2 0x916 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x184 SWAP2 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A2 SWAP2 SWAP1 PUSH2 0x11A4 JUMP JUMPDEST PUSH2 0x940 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B4 SWAP2 SWAP1 PUSH2 0x11F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D2 SWAP2 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0x9C7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E4 SWAP2 SWAP1 PUSH2 0x11F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x207 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x202 SWAP2 SWAP1 PUSH2 0x1055 JUMP JUMPDEST PUSH2 0xA10 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x223 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21E SWAP2 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH2 0xAA4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22D PUSH2 0xB27 JUMP JUMPDEST PUSH2 0x237 PUSH1 0x0 PUSH2 0xBA5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x97 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x2B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A9 SWAP1 PUSH2 0x126B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2BB DUP3 PUSH2 0xC6B JUMP JUMPDEST PUSH2 0x2FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2F1 SWAP1 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x98 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x37C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x373 SWAP1 PUSH2 0x1369 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP5 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1389 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x13D5 JUMP JUMPDEST POP DUP1 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x489 SWAP2 SWAP1 PUSH2 0x1431 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x4E0 PUSH2 0xDA2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP5 GT ISZERO PUSH2 0x5A4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59B SWAP1 PUSH2 0x14B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH1 0x99 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x630 SWAP2 SWAP1 PUSH2 0x14D1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP4 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x672 SWAP3 SWAP2 SWAP1 PUSH2 0x1505 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6B5 SWAP2 SWAP1 PUSH2 0x13D5 JUMP JUMPDEST POP DUP4 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH2 0x703 PUSH2 0xDF1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x727 PUSH2 0xB27 JUMP JUMPDEST DUP1 PUSH1 0x97 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO ISZERO PUSH32 0xDEBF9DD297D3980055770D6C047A67EED8F6B1E91397831703B5F2A73BEC1320 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO SWAP1 POP DUP1 DUP1 ISZERO PUSH2 0x7A4 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND LT JUMPDEST DUP1 PUSH2 0x7D1 JUMPI POP PUSH2 0x7B3 ADDRESS PUSH2 0xDFB JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x7D0 JUMPI POP PUSH1 0x1 PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0xFF AND EQ JUMPDEST JUMPDEST PUSH2 0x810 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x807 SWAP1 PUSH2 0x15A0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x84D JUMPI PUSH1 0x1 PUSH1 0x0 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST DUP2 PUSH1 0x97 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x97 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 0x8B1 PUSH2 0xE1E JUMP JUMPDEST PUSH2 0x8B9 PUSH2 0xE77 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x912 JUMPI PUSH1 0x0 DUP1 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH2 0x909 SWAP2 SWAP1 PUSH2 0x1612 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x99 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x98 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA18 PUSH2 0xB27 JUMP JUMPDEST DUP1 PUSH1 0x98 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD0380F7D3D322FABF37539B9C6B985C069348A14121A426F3CCEB8B5A93CD9AB PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0xAAC PUSH2 0xB27 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB1B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB12 SWAP1 PUSH2 0x169F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB24 DUP2 PUSH2 0xBA5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xB2F PUSH2 0xED0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB4D PUSH2 0x239 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB9A SWAP1 PUSH2 0x170B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x33 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x33 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x97 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xCB8 SWAP2 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x75151B6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0xD42 SWAP2 SWAP1 PUSH2 0x179C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD7D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD82 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD9A SWAP2 SWAP1 PUSH2 0x13D5 JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x65 SLOAD SUB PUSH2 0xDE7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDDE SWAP1 PUSH2 0x17FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE6D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE64 SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xE75 PUSH2 0xED8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEC6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEBD SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xECE PUSH2 0xF39 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF1E SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF37 PUSH2 0xF32 PUSH2 0xED0 JUMP JUMPDEST PUSH2 0xBA5 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF88 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF7F SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x65 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFBD DUP3 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xFCD DUP2 PUSH2 0xFB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFE8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xFC4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFFC DUP2 PUSH2 0xFB2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1019 DUP2 PUSH2 0xFF3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1032 DUP2 PUSH2 0x101F JUMP JUMPDEST DUP2 EQ PUSH2 0x103D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x104F DUP2 PUSH2 0x1029 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x106C JUMPI PUSH2 0x106B PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x107A DUP6 DUP3 DUP7 ADD PUSH2 0x100A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x108B DUP6 DUP3 DUP7 ADD PUSH2 0x1040 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x10AE JUMPI PUSH2 0x10AD PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x10BC DUP7 DUP3 DUP8 ADD PUSH2 0x1040 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x10CD DUP7 DUP3 DUP8 ADD PUSH2 0x100A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x10DE DUP7 DUP3 DUP8 ADD PUSH2 0x100A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10FD DUP2 PUSH2 0x10E8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1118 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x10F4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1127 DUP2 PUSH2 0x10E8 JUMP JUMPDEST DUP2 EQ PUSH2 0x1132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1144 DUP2 PUSH2 0x111E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1160 JUMPI PUSH2 0x115F PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x116E DUP5 DUP3 DUP6 ADD PUSH2 0x1135 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x118D JUMPI PUSH2 0x118C PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x119B DUP5 DUP3 DUP6 ADD PUSH2 0x100A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x11BB JUMPI PUSH2 0x11BA PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x11C9 DUP6 DUP3 DUP7 ADD PUSH2 0x100A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x11DA DUP6 DUP3 DUP7 ADD PUSH2 0x100A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x11ED DUP2 PUSH2 0x101F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1208 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x11E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A6174696F6E206973207061757365640000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1255 PUSH1 0x18 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1260 DUP3 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1284 DUP2 PUSH2 0x1248 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x546F6B656E206973206E6F7420737570706F7274656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12C1 PUSH1 0x16 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x12CC DUP3 PUSH2 0x128B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12F0 DUP2 PUSH2 0x12B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416D6F756E74206973206C657373207468616E206D696E696D756D2072657175 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6972656400000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1353 PUSH1 0x24 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x135E DUP3 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1382 DUP2 PUSH2 0x1346 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x139E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xFC4 JUMP JUMPDEST PUSH2 0x13AB PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xFC4 JUMP JUMPDEST PUSH2 0x13B8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x11E4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x13CF DUP2 PUSH2 0x111E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13EB JUMPI PUSH2 0x13EA PUSH2 0xFEE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x13F9 DUP5 DUP3 DUP6 ADD PUSH2 0x13C0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x143C DUP3 PUSH2 0x101F JUMP JUMPDEST SWAP2 POP PUSH2 0x1447 DUP4 PUSH2 0x101F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x145F JUMPI PUSH2 0x145E PUSH2 0x1402 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x149B PUSH1 0x14 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x14A6 DUP3 PUSH2 0x1465 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14CA DUP2 PUSH2 0x148E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14DC DUP3 PUSH2 0x101F JUMP JUMPDEST SWAP2 POP PUSH2 0x14E7 DUP4 PUSH2 0x101F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x14FF JUMPI PUSH2 0x14FE PUSH2 0x1402 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x151A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xFC4 JUMP JUMPDEST PUSH2 0x1527 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x11E4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x647920696E697469616C697A6564000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x158A PUSH1 0x2E DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1595 DUP3 PUSH2 0x152E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15B9 DUP2 PUSH2 0x157D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15FC PUSH2 0x15F7 PUSH2 0x15F2 DUP5 PUSH2 0x15C0 JUMP JUMPDEST PUSH2 0x15D7 JUMP JUMPDEST PUSH2 0x15CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x160C DUP2 PUSH2 0x15E1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1627 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1603 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1689 PUSH1 0x26 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1694 DUP3 PUSH2 0x162D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x16B8 DUP2 PUSH2 0x167C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16F5 PUSH1 0x20 DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1700 DUP3 PUSH2 0x16BF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1724 DUP2 PUSH2 0x16E8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x175F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1744 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1776 DUP3 PUSH2 0x172B JUMP JUMPDEST PUSH2 0x1780 DUP2 DUP6 PUSH2 0x1736 JUMP JUMPDEST SWAP4 POP PUSH2 0x1790 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1741 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17A8 DUP3 DUP5 PUSH2 0x176B JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E9 PUSH1 0x1F DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x17F4 DUP3 PUSH2 0x17B3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1818 DUP2 PUSH2 0x17DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6E697469616C697A696E67000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x187B PUSH1 0x2B DUP4 PUSH2 0x120E JUMP JUMPDEST SWAP2 POP PUSH2 0x1886 DUP3 PUSH2 0x181F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x18AA DUP2 PUSH2 0x186E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0xC6E88ED2538F594ECE330F2A5FE838A73F8B52EC73ADA42F59D472B2 SWAP10 BALANCE PUSH29 0x64736F6C63430008120033000000000000000000000000000000000000 ","sourceMap":"395:3159:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2064:101:0;;;:::i;:::-;;1441:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1987:452:15;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2445:397;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3181:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1854:127;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;875:195;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3089:86;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3420:131;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3287:127;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1631:217;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2314:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2064:101;1334:13;:11;:13::i;:::-;2128:30:::1;2155:1;2128:18;:30::i;:::-;2064:101::o:0;1441:85::-;1487:7;1513:6;;;;;;;;;;;1506:13;;1441:85;:::o;1987:452:15:-;2061:14;;;;;;;;;;;2053:51;;;;;;;;;;;;:::i;:::-;;;;;;;;;2122:24;2140:5;2122:17;:24::i;:::-;2114:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;2201:13;:20;2215:5;2201:20;;;;;;;;;;;;;;;;2191:6;:30;;2183:79;;;;;;;;;;;;:::i;:::-;;;;;;;;;2290:5;2272:37;;;2310:10;2330:4;2337:6;2272:72;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2385:6;2354:8;:20;2363:10;2354:20;;;;;;;;;;;;;;;:27;2375:5;2354:27;;;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;2425:6;2413:10;2406:26;;;;;;;;;;;;1987:452;;:::o;2445:397::-;2505:21:2;:19;:21::i;:::-;2547:30:15::1;2580:8;:20;2589:10;2580:20;;;;;;;;;;;;;;;:27;2601:5;2580:27;;;;;;;;;;;;;;;;2547:60;;2635:22;2625:6;:32;;2617:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;2723:6;2692:8;:20;2701:10;2692:20;;;;;;;;;;;;;;;:27;2713:5;2692:27;;;;;;;;;;;;;;;;:37;;;;;;;:::i;:::-;;;;;;;;2757:5;2739:33;;;2773:9;2784:6;2739:52;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2828:6;2816:10;2806:29;;;;;;;;;;;;2537:305;2547:20:2::0;:18;:20::i;:::-;2445:397:15;;;:::o;3181:100::-;3237:4;3260:14;;;;;;;;;;;3253:21;;3181:100;:::o;1854:127::-;1334:13:0;:11;:13::i;:::-;1934:6:15::1;1917:14;;:23;;;;;;;;;;;;;;;;;;1967:6;1955:19;;;;;;;;;;;;1854:127:::0;:::o;875:195::-;3279:19:1;3302:13;;;;;;;;;;;3301:14;3279:36;;3347:14;:34;;;;;3380:1;3365:12;;;;;;;;;;:16;;;3347:34;3346:108;;;;3388:44;3426:4;3388:29;:44::i;:::-;3387:45;:66;;;;;3452:1;3436:12;;;;;;;;;;:17;;;3387:66;3346:108;3325:201;;;;;;;;;;;;:::i;:::-;;;;;;;;;3551:1;3536:12;;:16;;;;;;;;;;;;;;;;;;3566:14;3562:65;;;3612:4;3596:13;;:20;;;;;;;;;;;;;;;;;;3562:65;960:9:15::1;949:8;;:20;;;;;;;;;;;;;;;;;;999:4;982:14;;:21;;;;;;;;;;;;;;;;;;1013:16;:14;:16::i;:::-;1039:24;:22;:24::i;:::-;3651:14:1::0;3647:99;;;3697:5;3681:13;;:21;;;;;;;;;;;;;;;;;;3721:14;3733:1;3721:14;;;;;;:::i;:::-;;;;;;;;3647:99;3269:483;875:195:15;:::o;3089:86::-;3134:7;3160:8;;;;;;;;;;;3153:15;;3089:86;:::o;3420:131::-;3497:7;3523:8;:14;3532:4;3523:14;;;;;;;;;;;;;;;:21;3538:5;3523:21;;;;;;;;;;;;;;;;3516:28;;3420:131;;;;:::o;3287:127::-;3361:7;3387:13;:20;3401:5;3387:20;;;;;;;;;;;;;;;;3380:27;;3287:127;;;:::o;1631:217::-;1334:13:0;:11;:13::i;:::-;1763:18:15::1;1739:13;:21;1753:6;1739:21;;;;;;;;;;;;;;;:42;;;;1822:18;1814:6;1796:45;;;;;;;;;;;;1631:217:::0;;:::o;2314:198:0:-;1334:13;:11;:13::i;:::-;2422:1:::1;2402:22;;:8;:22;;::::0;2394:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2477:28;2496:8;2477:18;:28::i;:::-;2314:198:::0;:::o;1599:130::-;1673:12;:10;:12::i;:::-;1662:23;;:7;:5;:7::i;:::-;:23;;;1654:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1599:130::o;2666:187::-;2739:16;2758:6;;;;;;;;;;;2739:25;;2783:8;2774:6;;:17;;;;;;;;;;;;;;;;;;2837:8;2806:40;;2827:8;2806:40;;;;;;;;;;;;2729:124;2666:187;:::o;2848:235:15:-;2911:4;2930:19;2953:8;;;;;;;;;;;:19;;3026:5;2973:59;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2953:80;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2927:106;;;3061:6;3050:26;;;;;;;;;;;;:::i;:::-;3043:33;;;2848:235;;;:::o;2580:287:2:-;1830:1;2712:7;;:19;2704:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1830:1;2842:7;:18;;;;2580:287::o;2873:209::-;1787:1;3053:7;:22;;;;2873:209::o;1423:320:6:-;1483:4;1735:1;1713:7;:19;;;:23;1706:30;;1423:320;;;:::o;1003:95:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1065:26:0::1;:24;:26::i;:::-;1003:95::o:0;1868:111:2:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1938:34:2::1;:32;:34::i;:::-;1868:111::o:0;850:96:7:-;903:7;929:10;922:17;;850:96;:::o;1104:111:0:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1176:32:0::1;1195:12;:10;:12::i;:::-;1176:18;:32::i;:::-;1104:111::o:0;1985:109:2:-;5374:13:1;;;;;;;;;;;5366:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;1787:1:2::1;2065:7;:22;;;;1985:109::o:0;7:126:17:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:77::-;1230:7;1259:5;1248:16;;1193:77;;;:::o;1276:122::-;1349:24;1367:5;1349:24;:::i;:::-;1342:5;1339:35;1329:63;;1388:1;1385;1378:12;1329:63;1276:122;:::o;1404:139::-;1450:5;1488:6;1475:20;1466:29;;1504:33;1531:5;1504:33;:::i;:::-;1404:139;;;;:::o;1549:474::-;1617:6;1625;1674:2;1662:9;1653:7;1649:23;1645:32;1642:119;;;1680:79;;:::i;:::-;1642:119;1800:1;1825:53;1870:7;1861:6;1850:9;1846:22;1825:53;:::i;:::-;1815:63;;1771:117;1927:2;1953:53;1998:7;1989:6;1978:9;1974:22;1953:53;:::i;:::-;1943:63;;1898:118;1549:474;;;;;:::o;2029:619::-;2106:6;2114;2122;2171:2;2159:9;2150:7;2146:23;2142:32;2139:119;;;2177:79;;:::i;:::-;2139:119;2297:1;2322:53;2367:7;2358:6;2347:9;2343:22;2322:53;:::i;:::-;2312:63;;2268:117;2424:2;2450:53;2495:7;2486:6;2475:9;2471:22;2450:53;:::i;:::-;2440:63;;2395:118;2552:2;2578:53;2623:7;2614:6;2603:9;2599:22;2578:53;:::i;:::-;2568:63;;2523:118;2029:619;;;;;:::o;2654:90::-;2688:7;2731:5;2724:13;2717:21;2706:32;;2654:90;;;:::o;2750:109::-;2831:21;2846:5;2831:21;:::i;:::-;2826:3;2819:34;2750:109;;:::o;2865:210::-;2952:4;2990:2;2979:9;2975:18;2967:26;;3003:65;3065:1;3054:9;3050:17;3041:6;3003:65;:::i;:::-;2865:210;;;;:::o;3081:116::-;3151:21;3166:5;3151:21;:::i;:::-;3144:5;3141:32;3131:60;;3187:1;3184;3177:12;3131:60;3081:116;:::o;3203:133::-;3246:5;3284:6;3271:20;3262:29;;3300:30;3324:5;3300:30;:::i;:::-;3203:133;;;;:::o;3342:323::-;3398:6;3447:2;3435:9;3426:7;3422:23;3418:32;3415:119;;;3453:79;;:::i;:::-;3415:119;3573:1;3598:50;3640:7;3631:6;3620:9;3616:22;3598:50;:::i;:::-;3588:60;;3544:114;3342:323;;;;:::o;3671:329::-;3730:6;3779:2;3767:9;3758:7;3754:23;3750:32;3747:119;;;3785:79;;:::i;:::-;3747:119;3905:1;3930:53;3975:7;3966:6;3955:9;3951:22;3930:53;:::i;:::-;3920:63;;3876:117;3671:329;;;;:::o;4006:474::-;4074:6;4082;4131:2;4119:9;4110:7;4106:23;4102:32;4099:119;;;4137:79;;:::i;:::-;4099:119;4257:1;4282:53;4327:7;4318:6;4307:9;4303:22;4282:53;:::i;:::-;4272:63;;4228:117;4384:2;4410:53;4455:7;4446:6;4435:9;4431:22;4410:53;:::i;:::-;4400:63;;4355:118;4006:474;;;;;:::o;4486:118::-;4573:24;4591:5;4573:24;:::i;:::-;4568:3;4561:37;4486:118;;:::o;4610:222::-;4703:4;4741:2;4730:9;4726:18;4718:26;;4754:71;4822:1;4811:9;4807:17;4798:6;4754:71;:::i;:::-;4610:222;;;;:::o;4838:169::-;4922:11;4956:6;4951:3;4944:19;4996:4;4991:3;4987:14;4972:29;;4838:169;;;;:::o;5013:174::-;5153:26;5149:1;5141:6;5137:14;5130:50;5013:174;:::o;5193:366::-;5335:3;5356:67;5420:2;5415:3;5356:67;:::i;:::-;5349:74;;5432:93;5521:3;5432:93;:::i;:::-;5550:2;5545:3;5541:12;5534:19;;5193:366;;;:::o;5565:419::-;5731:4;5769:2;5758:9;5754:18;5746:26;;5818:9;5812:4;5808:20;5804:1;5793:9;5789:17;5782:47;5846:131;5972:4;5846:131;:::i;:::-;5838:139;;5565:419;;;:::o;5990:172::-;6130:24;6126:1;6118:6;6114:14;6107:48;5990:172;:::o;6168:366::-;6310:3;6331:67;6395:2;6390:3;6331:67;:::i;:::-;6324:74;;6407:93;6496:3;6407:93;:::i;:::-;6525:2;6520:3;6516:12;6509:19;;6168:366;;;:::o;6540:419::-;6706:4;6744:2;6733:9;6729:18;6721:26;;6793:9;6787:4;6783:20;6779:1;6768:9;6764:17;6757:47;6821:131;6947:4;6821:131;:::i;:::-;6813:139;;6540:419;;;:::o;6965:223::-;7105:34;7101:1;7093:6;7089:14;7082:58;7174:6;7169:2;7161:6;7157:15;7150:31;6965:223;:::o;7194:366::-;7336:3;7357:67;7421:2;7416:3;7357:67;:::i;:::-;7350:74;;7433:93;7522:3;7433:93;:::i;:::-;7551:2;7546:3;7542:12;7535:19;;7194:366;;;:::o;7566:419::-;7732:4;7770:2;7759:9;7755:18;7747:26;;7819:9;7813:4;7809:20;7805:1;7794:9;7790:17;7783:47;7847:131;7973:4;7847:131;:::i;:::-;7839:139;;7566:419;;;:::o;7991:442::-;8140:4;8178:2;8167:9;8163:18;8155:26;;8191:71;8259:1;8248:9;8244:17;8235:6;8191:71;:::i;:::-;8272:72;8340:2;8329:9;8325:18;8316:6;8272:72;:::i;:::-;8354;8422:2;8411:9;8407:18;8398:6;8354:72;:::i;:::-;7991:442;;;;;;:::o;8439:137::-;8493:5;8524:6;8518:13;8509:22;;8540:30;8564:5;8540:30;:::i;:::-;8439:137;;;;:::o;8582:345::-;8649:6;8698:2;8686:9;8677:7;8673:23;8669:32;8666:119;;;8704:79;;:::i;:::-;8666:119;8824:1;8849:61;8902:7;8893:6;8882:9;8878:22;8849:61;:::i;:::-;8839:71;;8795:125;8582:345;;;;:::o;8933:180::-;8981:77;8978:1;8971:88;9078:4;9075:1;9068:15;9102:4;9099:1;9092:15;9119:191;9159:3;9178:20;9196:1;9178:20;:::i;:::-;9173:25;;9212:20;9230:1;9212:20;:::i;:::-;9207:25;;9255:1;9252;9248:9;9241:16;;9276:3;9273:1;9270:10;9267:36;;;9283:18;;:::i;:::-;9267:36;9119:191;;;;:::o;9316:170::-;9456:22;9452:1;9444:6;9440:14;9433:46;9316:170;:::o;9492:366::-;9634:3;9655:67;9719:2;9714:3;9655:67;:::i;:::-;9648:74;;9731:93;9820:3;9731:93;:::i;:::-;9849:2;9844:3;9840:12;9833:19;;9492:366;;;:::o;9864:419::-;10030:4;10068:2;10057:9;10053:18;10045:26;;10117:9;10111:4;10107:20;10103:1;10092:9;10088:17;10081:47;10145:131;10271:4;10145:131;:::i;:::-;10137:139;;9864:419;;;:::o;10289:194::-;10329:4;10349:20;10367:1;10349:20;:::i;:::-;10344:25;;10383:20;10401:1;10383:20;:::i;:::-;10378:25;;10427:1;10424;10420:9;10412:17;;10451:1;10445:4;10442:11;10439:37;;;10456:18;;:::i;:::-;10439:37;10289:194;;;;:::o;10489:332::-;10610:4;10648:2;10637:9;10633:18;10625:26;;10661:71;10729:1;10718:9;10714:17;10705:6;10661:71;:::i;:::-;10742:72;10810:2;10799:9;10795:18;10786:6;10742:72;:::i;:::-;10489:332;;;;;:::o;10827:233::-;10967:34;10963:1;10955:6;10951:14;10944:58;11036:16;11031:2;11023:6;11019:15;11012:41;10827:233;:::o;11066:366::-;11208:3;11229:67;11293:2;11288:3;11229:67;:::i;:::-;11222:74;;11305:93;11394:3;11305:93;:::i;:::-;11423:2;11418:3;11414:12;11407:19;;11066:366;;;:::o;11438:419::-;11604:4;11642:2;11631:9;11627:18;11619:26;;11691:9;11685:4;11681:20;11677:1;11666:9;11662:17;11655:47;11719:131;11845:4;11719:131;:::i;:::-;11711:139;;11438:419;;;:::o;11863:85::-;11908:7;11937:5;11926:16;;11863:85;;;:::o;11954:86::-;11989:7;12029:4;12022:5;12018:16;12007:27;;11954:86;;;:::o;12046:60::-;12074:3;12095:5;12088:12;;12046:60;;;:::o;12112:154::-;12168:9;12201:59;12217:42;12226:32;12252:5;12226:32;:::i;:::-;12217:42;:::i;:::-;12201:59;:::i;:::-;12188:72;;12112:154;;;:::o;12272:143::-;12365:43;12402:5;12365:43;:::i;:::-;12360:3;12353:56;12272:143;;:::o;12421:234::-;12520:4;12558:2;12547:9;12543:18;12535:26;;12571:77;12645:1;12634:9;12630:17;12621:6;12571:77;:::i;:::-;12421:234;;;;:::o;12661:225::-;12801:34;12797:1;12789:6;12785:14;12778:58;12870:8;12865:2;12857:6;12853:15;12846:33;12661:225;:::o;12892:366::-;13034:3;13055:67;13119:2;13114:3;13055:67;:::i;:::-;13048:74;;13131:93;13220:3;13131:93;:::i;:::-;13249:2;13244:3;13240:12;13233:19;;12892:366;;;:::o;13264:419::-;13430:4;13468:2;13457:9;13453:18;13445:26;;13517:9;13511:4;13507:20;13503:1;13492:9;13488:17;13481:47;13545:131;13671:4;13545:131;:::i;:::-;13537:139;;13264:419;;;:::o;13689:182::-;13829:34;13825:1;13817:6;13813:14;13806:58;13689:182;:::o;13877:366::-;14019:3;14040:67;14104:2;14099:3;14040:67;:::i;:::-;14033:74;;14116:93;14205:3;14116:93;:::i;:::-;14234:2;14229:3;14225:12;14218:19;;13877:366;;;:::o;14249:419::-;14415:4;14453:2;14442:9;14438:18;14430:26;;14502:9;14496:4;14492:20;14488:1;14477:9;14473:17;14466:47;14530:131;14656:4;14530:131;:::i;:::-;14522:139;;14249:419;;;:::o;14674:98::-;14725:6;14759:5;14753:12;14743:22;;14674:98;;;:::o;14778:147::-;14879:11;14916:3;14901:18;;14778:147;;;;:::o;14931:246::-;15012:1;15022:113;15036:6;15033:1;15030:13;15022:113;;;15121:1;15116:3;15112:11;15106:18;15102:1;15097:3;15093:11;15086:39;15058:2;15055:1;15051:10;15046:15;;15022:113;;;15169:1;15160:6;15155:3;15151:16;15144:27;14993:184;14931:246;;;:::o;15183:386::-;15287:3;15315:38;15347:5;15315:38;:::i;:::-;15369:88;15450:6;15445:3;15369:88;:::i;:::-;15362:95;;15466:65;15524:6;15519:3;15512:4;15505:5;15501:16;15466:65;:::i;:::-;15556:6;15551:3;15547:16;15540:23;;15291:278;15183:386;;;;:::o;15575:271::-;15705:3;15727:93;15816:3;15807:6;15727:93;:::i;:::-;15720:100;;15837:3;15830:10;;15575:271;;;;:::o;15852:181::-;15992:33;15988:1;15980:6;15976:14;15969:57;15852:181;:::o;16039:366::-;16181:3;16202:67;16266:2;16261:3;16202:67;:::i;:::-;16195:74;;16278:93;16367:3;16278:93;:::i;:::-;16396:2;16391:3;16387:12;16380:19;;16039:366;;;:::o;16411:419::-;16577:4;16615:2;16604:9;16600:18;16592:26;;16664:9;16658:4;16654:20;16650:1;16639:9;16635:17;16628:47;16692:131;16818:4;16692:131;:::i;:::-;16684:139;;16411:419;;;:::o;16836:230::-;16976:34;16972:1;16964:6;16960:14;16953:58;17045:13;17040:2;17032:6;17028:15;17021:38;16836:230;:::o;17072:366::-;17214:3;17235:67;17299:2;17294:3;17235:67;:::i;:::-;17228:74;;17311:93;17400:3;17311:93;:::i;:::-;17429:2;17424:3;17420:12;17413:19;;17072:366;;;:::o;17444:419::-;17610:4;17648:2;17637:9;17633:18;17625:26;;17697:9;17691:4;17687:20;17683:1;17672:9;17668:17;17661:47;17725:131;17851:4;17725:131;:::i;:::-;17717:139;;17444:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1275000","executionCost":"infinite","totalCost":"infinite"},"external":{"getInitializationState()":"2618","getMinimumAmountRequiredFor(address)":"2907","getPaycrest()":"2544","getValidatorInfo(address,address)":"infinite","initialize(address)":"191590","initialized(bool)":"28265","owner()":"2545","renounceOwnership()":"30399","setMinimumAmountForTokens(address,uint256)":"26723","stake(address,uint256)":"infinite","transferOwnership(address)":"30854","withdraw(uint256,address,address)":"infinite"},"internal":{"_isTokenSupported(address)":"infinite"}},"methodIdentifiers":{"getInitializationState()":"c2b4610b","getMinimumAmountRequiredFor(address)":"e74599f3","getPaycrest()":"c56f80c1","getValidatorInfo(address,address)":"c5923aaf","initialize(address)":"c4d66de8","initialized(bool)":"c4a0bb07","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setMinimumAmountForTokens(address,uint256)":"f239c626","stake(address,uint256)":"adc9772e","transferOwnership(address)":"f2fde38b","withdraw(uint256,address,address)":"b460af94"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"}],\"name\":\"NewTokenSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"validatorsReward\",\"type\":\"uint256\"}],\"name\":\"RewardValidators\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getInitializationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinimumAmountRequiredFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaycrest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getValidatorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paycrest\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"initialized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumAmountForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaycrestValidator.sol\":\"PaycrestValidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PaycrestValidator.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\nimport  \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract PaycrestValidator is OwnableUpgradeable, ReentrancyGuardUpgradeable { \\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    \\n    address private Paycrest;    \\n    bool private initialization;\\n    mapping(address => uint256) private minimumAmount;\\n    mapping(address => mapping (address => uint256)) private _balance;\\n    uint256[50] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _paycrest) external initializer {    \\n        Paycrest = _paycrest;   \\n        initialization = true;\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    event NewTokenSupported(address indexed token, uint256 indexed minimumStakeAmount);\\n    event Initialized(bool indexed status);\\n    event Staked(address indexed user, uint256 indexed amount);\\n    event Withdrawn(address indexed user, uint256 indexed amount);\\n    event RewardValidators(\\n        bytes32 orderId, \\n        address token, \\n        address indexed validator, \\n        uint256 indexed validatorsReward\\n    );\\n\\n    modifier OnlyPaycrest() {\\n        require(msg.sender == Paycrest, \\\"Only Paycrest can call this function\\\");\\n        _;\\n    }\\n\\n    function setMinimumAmountForTokens(address _token, uint256 minimumStakeAmount) external onlyOwner {\\n        minimumAmount[_token] = minimumStakeAmount;\\n        emit NewTokenSupported(_token, minimumStakeAmount);\\n    }\\n\\n    function initialized(bool status) external onlyOwner {\\n        initialization = status;\\n        emit Initialized(status);\\n    }\\n\\n    function stake(address token, uint256 amount)  external {\\n        require(initialization, \\\"Initialization is paused\\\");\\n        require(_isTokenSupported(token), \\\"Token is not supported\\\");\\n        require(amount >= minimumAmount[token], \\\"Amount is less than minimum required\\\");\\n        IERC20Upgradeable(token).transferFrom(msg.sender, address(this), amount);\\n        _balance[msg.sender][token] += amount;\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount, address token, address recipient) external nonReentrant() {\\n        uint256 previouslyStakedAmount = _balance[msg.sender][token];\\n        require(amount <= previouslyStakedAmount, \\\"Insufficient balance\\\");\\n        _balance[msg.sender][token] -= amount;\\n        IERC20Upgradeable(token).transfer(recipient, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function _isTokenSupported(address token) private view returns(bool) {\\n        (, bytes memory result) = Paycrest.staticcall(abi.encodeWithSignature(\\\"isTokenSupported(address)\\\", token));\\n        return abi.decode(result, (bool));\\n    }\\n\\n    function getPaycrest() external view returns(address) {\\n        return Paycrest;\\n    }\\n\\n    function getInitializationState() external view returns(bool) {\\n        return initialization;\\n    }\\n\\n    function getMinimumAmountRequiredFor(address token) external view returns(uint256) {\\n        return minimumAmount[token];\\n    }\\n\\n    function getValidatorInfo(address user, address token) external view returns(uint256) {\\n        return _balance[user][token];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x79c250961e75273bbb0464bec6650a0af6b476853afc542b522d752d3096ac5b\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[{"astId":138,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":141,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":1245,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":314,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_status","offset":0,"slot":"101","type":"t_uint256"},{"astId":383,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":3888,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"Paycrest","offset":0,"slot":"151","type":"t_address"},{"astId":3890,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"initialization","offset":20,"slot":"151","type":"t_bool"},{"astId":3894,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"minimumAmount","offset":0,"slot":"152","type":"t_mapping(t_address,t_uint256)"},{"astId":3900,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"_balance","offset":0,"slot":"153","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":3904,"contract":"contracts/PaycrestValidator.sol:PaycrestValidator","label":"__gap","offset":0,"slot":"154","type":"t_array(t_uint256)50_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interface/IPaycrest.sol":{"IPaycrest":{"abi":[{"inputs":[],"name":"InvalidInstitutionCode","type":"error"},{"inputs":[],"name":"InvalidSigner","type":"error"},{"inputs":[],"name":"NotWhitelisted","type":"error"},{"inputs":[],"name":"OnlyAggregator","type":"error"},{"inputs":[],"name":"OrderFulfilled","type":"error"},{"inputs":[],"name":"UnableToProcessRewards","type":"error"},{"inputs":[],"name":"Unsuported","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"rate","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"institutionCode","type":"bytes32"},{"indexed":false,"internalType":"string","name":"messageHash","type":"string"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"}],"name":"Refunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"RewardValidator","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"orderId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"liquidityProvider","type":"address"},{"indexed":false,"internalType":"uint96","name":"settlePercent","type":"uint96"}],"name":"Settled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TransferSenderFee","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"bytes32","name":"_institutionCode","type":"bytes32"},{"internalType":"uint96","name":"_rate","type":"uint96"},{"internalType":"address","name":"_senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"_senderFee","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"},{"internalType":"string","name":"messageHash","type":"string"}],"name":"createOrder","outputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getFeeDetails","outputs":[{"internalType":"uint128","name":"protocolReward","type":"uint128"},{"internalType":"uint128","name":"validatorFeePercent","type":"uint128"},{"internalType":"uint256","name":"max_bps","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLiquidityAggregator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"getOrderInfo","outputs":[{"components":[{"internalType":"address","name":"seller","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"senderFeeRecipient","type":"address"},{"internalType":"uint256","name":"senderFee","type":"uint256"},{"internalType":"uint96","name":"rate","type":"uint96"},{"internalType":"bool","name":"isFulfilled","type":"bool"},{"internalType":"address","name":"refundAddress","type":"address"},{"internalType":"uint96","name":"currentBPS","type":"uint96"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IPaycrest.Order","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"getWhitelistedStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_orderId","type":"bytes32"}],"name":"refund","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_splitOrderId","type":"bytes32"},{"internalType":"bytes32","name":"_orderId","type":"bytes32"},{"internalType":"address[]","name":"_validators","type":"address[]"},{"internalType":"address","name":"_liquidityProvider","type":"address"},{"internalType":"uint96","name":"_settlePercent","type":"uint96"}],"name":"settle","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Chef Photons, Paycrest Team serving high quality drinks; drink responsibly. Factory and global config params","events":{"Deposit(address,uint256,bytes32,uint256,bytes32,string)":{"details":"Emitted when deposit is made."},"Refunded(bytes32)":{"details":"Emitted when aggregator refund transaction."},"RewardValidator(address,uint256)":{"details":"Emitted when primary validator get therir rewards."},"Settled(bytes32,bytes32,address,uint96)":{"details":"Emitted when aggregator settle transaction."},"TransferSenderFee(address,uint256)":{"details":"Emitted when sender get therir rewards."}},"kind":"dev","methods":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":{"details":"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address","params":{"_amount":"amount in the decimal of `_token` above.","_rate":"rate at which sender intended to sell `_amount` of `_token`.","_refundAddress":"address that is going to recieve `_amount` in `_token` when there is a need to refund.","_token":"address of the token.","messageHash":"hash must be the result of a hash operation for the verification to be secure. message"},"returns":{"_orderId":"the bytes20 which is the orderId"}},"getFeeDetails()":{"returns":{"max_bps":"maximum amount in bps \"100% == 100_000\".","protocolReward":"amount that will be taken in percentage on all trade.","validatorFeePercent":"amount that will be given to primary validator in percentage from `protocolReward`"}},"getLiquidityAggregator()":{"returns":{"_0":"address of `liquidityAggregator`."}},"getOrderInfo(bytes32)":{"params":{"_orderId":"transaction Id."}},"getWhitelistedStatus(address)":{"params":{"sender":"address of the sender."},"returns":{"_0":"address of `status`."}},"isTokenSupported(address)":{"params":{"_token":"address of the token to check."},"returns":{"_0":"return the status of `_token` {bool}"}},"refund(bytes32)":{"params":{"_orderId":"transaction Id."},"returns":{"_0":"return the status of transaction {bool}"}},"settle(bytes32,bytes32,address[],address,uint96)":{"params":{"_liquidityProvider":"address of the liquidity provider.","_orderId":"transaction Id.","_settlePercent":"rate at which the transaction is settled.","_validators":"arrays of secondary validators."},"returns":{"_0":"return the status of transaction {bool}"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":"d12ff20a","getFeeDetails()":"b810c636","getLiquidityAggregator()":"2ebc5356","getOrderInfo(bytes32)":"768c6ec0","getWhitelistedStatus(address)":"d8e8de34","isTokenSupported(address)":"75151b63","refund(bytes32)":"7249fbb6","settle(bytes32,bytes32,address[],address,uint96)":"384efd27"}},"metadata":"{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInstitutionCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAggregator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OrderFulfilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToProcessRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unsuported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"institutionCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"settlePercent\",\"type\":\"uint96\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSenderFee\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_institutionCode\",\"type\":\"bytes32\"},{\"internalType\":\"uint96\",\"name\":\"_rate\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"_senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_senderFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"messageHash\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDetails\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"protocolReward\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"validatorFeePercent\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"max_bps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"rate\",\"type\":\"uint96\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"currentBPS\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaycrest.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getWhitelistedStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_splitOrderId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityProvider\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_settlePercent\",\"type\":\"uint96\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chef Photons, Paycrest Team serving high quality drinks; drink responsibly. Factory and global config params\",\"events\":{\"Deposit(address,uint256,bytes32,uint256,bytes32,string)\":{\"details\":\"Emitted when deposit is made.\"},\"Refunded(bytes32)\":{\"details\":\"Emitted when aggregator refund transaction.\"},\"RewardValidator(address,uint256)\":{\"details\":\"Emitted when primary validator get therir rewards.\"},\"Settled(bytes32,bytes32,address,uint96)\":{\"details\":\"Emitted when aggregator settle transaction.\"},\"TransferSenderFee(address,uint256)\":{\"details\":\"Emitted when sender get therir rewards.\"}},\"kind\":\"dev\",\"methods\":{\"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)\":{\"details\":\"See {isTokenSupported}. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\",\"params\":{\"_amount\":\"amount in the decimal of `_token` above.\",\"_rate\":\"rate at which sender intended to sell `_amount` of `_token`.\",\"_refundAddress\":\"address that is going to recieve `_amount` in `_token` when there is a need to refund.\",\"_token\":\"address of the token.\",\"messageHash\":\"hash must be the result of a hash operation for the verification to be secure. message\"},\"returns\":{\"_orderId\":\"the bytes20 which is the orderId\"}},\"getFeeDetails()\":{\"returns\":{\"max_bps\":\"maximum amount in bps \\\"100% == 100_000\\\".\",\"protocolReward\":\"amount that will be taken in percentage on all trade.\",\"validatorFeePercent\":\"amount that will be given to primary validator in percentage from `protocolReward`\"}},\"getLiquidityAggregator()\":{\"returns\":{\"_0\":\"address of `liquidityAggregator`.\"}},\"getOrderInfo(bytes32)\":{\"params\":{\"_orderId\":\"transaction Id.\"}},\"getWhitelistedStatus(address)\":{\"params\":{\"sender\":\"address of the sender.\"},\"returns\":{\"_0\":\"address of `status`.\"}},\"isTokenSupported(address)\":{\"params\":{\"_token\":\"address of the token to check.\"},\"returns\":{\"_0\":\"return the status of `_token` {bool}\"}},\"refund(bytes32)\":{\"params\":{\"_orderId\":\"transaction Id.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}},\"settle(bytes32,bytes32,address[],address,uint96)\":{\"params\":{\"_liquidityProvider\":\"address of the liquidity provider.\",\"_orderId\":\"transaction Id.\",\"_settlePercent\":\"rate at which the transaction is settled.\",\"_validators\":\"arrays of secondary validators.\"},\"returns\":{\"_0\":\"return the status of transaction {bool}\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidSigner()\":[{\"notice\":\"Revert with invalid signer\"}],\"OnlyAggregator()\":[{\"notice\":\"Revert when caller is not an aggregator\"}],\"OrderFulfilled()\":[{\"notice\":\"Revert when trx has been fulfilled\"}],\"UnableToProcessRewards()\":[{\"notice\":\"Revert when rewards are not been distributed.\"}],\"Unsuported()\":[{\"notice\":\"Revert when input amount is zero\"}]},\"kind\":\"user\",\"methods\":{\"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)\":{\"notice\":\"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\"},\"getFeeDetails()\":{\"notice\":\"get every rewards and address on Paycrest.\"},\"getLiquidityAggregator()\":{\"notice\":\"get address of liquidity aggregator.\"},\"getOrderInfo(bytes32)\":{\"notice\":\"get order details.\"},\"getWhitelistedStatus(address)\":{\"notice\":\"get address of sender whitelisting status.\"},\"isTokenSupported(address)\":{\"notice\":\"get supported token from Paycrest.\"},\"refund(bytes32)\":{\"notice\":\"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false.\"},\"settle(bytes32,bytes32,address[],address,uint96)\":{\"notice\":\"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interface/IPaycrest.sol\":\"IPaycrest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interface/IPaycrest.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.18;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Chef Photons, Paycrest Team serving high quality drinks; drink responsibly.\\n * Factory and global config params\\n */\\ninterface IPaycrest {\\n    \\n    /* ##################################################################\\n                                EVENTS\\n    ################################################################## */\\n    /// @dev Emitted when deposit is made.\\n    event Deposit(address indexed token, uint256 indexed amount, bytes32 indexed orderId, uint256 rate, bytes32 institutionCode, string messageHash);\\n    /// @dev Emitted when aggregator settle transaction.\\n    event Settled(bytes32 _splitOrderId, bytes32 indexed orderId, address indexed liquidityProvider, uint96 settlePercent);\\n    /// @dev Emitted when aggregator refund transaction.\\n    event Refunded(bytes32 indexed orderId);\\n    /// @dev Emitted when sender get therir rewards.\\n    event TransferSenderFee(address indexed sender, uint256 indexed amount);\\n    /// @dev Emitted when primary validator get therir rewards.\\n    event RewardValidator(address indexed validator, uint256 indexed amount);\\n\\n    /* ##################################################################\\n                                CUSTOM ERRORS\\n    ################################################################## */\\n    /// @notice Revert when caller is not an aggregator\\n    error OnlyAggregator();\\n    /// @notice Revert with invalid signer\\n    error InvalidSigner();\\n    /// @notice Revert when input amount is zero\\n    error Unsuported();\\n    /// @notice Revert when trx has been fulfilled\\n    error OrderFulfilled();\\n    /// @notice Revert when rewards are not been distributed.\\n    error UnableToProcessRewards();\\n    error InvalidInstitutionCode();\\n    error NotWhitelisted();\\n\\n    /* ##################################################################\\n                                STRUCTS\\n    ################################################################## */\\n    struct TransactionMetadata {\\n        bytes8 identifier;                 //                                                                   slot 0\\n        bytes8 institution;                //                                                                   slot 0\\n        bytes8 name;                       //                                                                   slot 0\\n        bytes8 currency;                   //                                                                   slot 0\\n        uint256 liquidityProviderID;       //                                                                   slot 1\\n    }\\n\\n    struct Order {\\n        address seller;                     //                                                                   slot 0\\n        address token;                      //                                                                   slot 1\\n        address senderFeeRecipient;\\n        uint256 senderFee;\\n        uint96 rate;                        //                                                                   slot 1\\n        bool isFulfilled;                   //                                                                   slot 2 {11 bytes available}\\n        address refundAddress;              //                                                                   slot 2 {12 bytes available}\\n        uint96 currentBPS;                  //                                                                   slot 2 {}\\n        uint256 amount;                     //                                                                   slot 3\\n    }\\n\\n\\n    /* ##################################################################\\n                                EXTERNAL CALLS\\n    ################################################################## */\\n    /// @notice lock sender `_amount` of `token` into Paycrest.\\n    /// Requirements:\\n    /// `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call.\\n    /// `_token` must be an acceptable token. @dev See {isTokenSupported}.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _token address of the token.\\n    /// @param _amount amount in the decimal of `_token` above.\\n    /// @param _refundAddress address that is going to recieve `_amount` in `_token` when there is a need to refund.\\n    /// @param _rate rate at which sender intended to sell `_amount` of `_token`.\\n    /// @param messageHash hash must be the result of a hash operation for the verification to be secure. message\\n    /// @return _orderId the bytes20 which is the orderId\\n    function createOrder(address _token, \\n        uint256 _amount, \\n        bytes32 _institutionCode,\\n        uint96 _rate, \\n        address _senderFeeRecipient,\\n        uint256 _senderFee,\\n        address _refundAddress, \\n        string calldata messageHash)  external returns(bytes32 _orderId);\\n\\n    /// @notice settle transaction and distribute rewards accordingly.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `_primaryValidator` must have stake on the Paycrest staking platform.\\n    /// `_secondaryValidators` must have stake on the Paycrest staking platform.\\n    /// `amount` must be greater than minimum\\n    /// `_refundable` refundable address must not be zero address\\n    /// @param _orderId transaction Id.\\n    /// @param _validators arrays of secondary validators.\\n    /// @param _liquidityProvider address of the liquidity provider.\\n    /// @param _settlePercent rate at which the transaction is settled.\\n    /// @return return the status of transaction {bool}\\n    function settle(bytes32 _splitOrderId, bytes32 _orderId, address[] calldata _validators, address _liquidityProvider, uint96 _settlePercent)  external returns(bytes32, address);\\n\\n    /// @notice refund to the specified refundable address.\\n    /// Requirements:\\n    /// {only aggregators call}.\\n    /// `_orderId` it must be less than total ids.\\n    /// `_orderId` it must be an open Id.\\n    /// `isFulfilled` must be false.\\n    /// @param _orderId transaction Id.\\n    /// @return return the status of transaction {bool}\\n    function refund(bytes32 _orderId)  external returns(bool);\\n\\n    /// @notice get supported token from Paycrest.\\n    /// @param _token address of the token to check.\\n    /// @return return the status of `_token` {bool}\\n    function isTokenSupported(address _token) external view returns(bool);\\n\\n    /// @notice get order details.\\n    /// @param _orderId transaction Id.\\n    function getOrderInfo(bytes32 _orderId) external view returns(Order memory);\\n\\n    /// @notice get every rewards and address on Paycrest.\\n    /// @return protocolReward amount that will be taken in percentage on all trade.\\n    /// @return validatorFeePercent amount that will be given to primary validator in percentage from `protocolReward`\\n    /// @return max_bps maximum amount in bps \\\"100% == 100_000\\\".\\n    function getFeeDetails() external view returns(\\n        uint128 protocolReward, \\n        uint128 validatorFeePercent, \\n        uint256 max_bps\\n    );\\n\\n    /// @notice get address of liquidity aggregator.\\n    /// @return address of `liquidityAggregator`.\\n    function getLiquidityAggregator() external view returns(address);\\n\\n    \\n    /// @notice get address of sender whitelisting status.\\n    /// @param sender address of the sender.\\n    /// @return address of `status`.\\n    function getWhitelistedStatus(address sender) external view returns(bool);\\n\\n}\\n\",\"keccak256\":\"0x9ce83e02026dd27b151e272ec54ad74c1880993c802fbc0f52c203b54c8e16cf\",\"license\":\"UNLICENSED\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InvalidSigner()":[{"notice":"Revert with invalid signer"}],"OnlyAggregator()":[{"notice":"Revert when caller is not an aggregator"}],"OrderFulfilled()":[{"notice":"Revert when trx has been fulfilled"}],"UnableToProcessRewards()":[{"notice":"Revert when rewards are not been distributed."}],"Unsuported()":[{"notice":"Revert when input amount is zero"}]},"kind":"user","methods":{"createOrder(address,uint256,bytes32,uint96,address,uint256,address,string)":{"notice":"lock sender `_amount` of `token` into Paycrest. Requirements: `msg.sender` must approve Paycrest contract on `_token` of at least `amount` before function call."},"getFeeDetails()":{"notice":"get every rewards and address on Paycrest."},"getLiquidityAggregator()":{"notice":"get address of liquidity aggregator."},"getOrderInfo(bytes32)":{"notice":"get order details."},"getWhitelistedStatus(address)":{"notice":"get address of sender whitelisting status."},"isTokenSupported(address)":{"notice":"get supported token from Paycrest."},"refund(bytes32)":{"notice":"refund to the specified refundable address. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `isFulfilled` must be false."},"settle(bytes32,bytes32,address[],address,uint96)":{"notice":"settle transaction and distribute rewards accordingly. Requirements: {only aggregators call}. `_orderId` it must be less than total ids. `_orderId` it must be an open Id. `_primaryValidator` must have stake on the Paycrest staking platform. `_secondaryValidators` must have stake on the Paycrest staking platform. `amount` must be greater than minimum `_refundable` refundable address must not be zero address"}},"version":1}}}}}}